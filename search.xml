<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深度学习</title>
      <link href="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习">1. 深度学习</h1><h2 id="数据读取">1.1. 数据读取</h2><h3 id="标签转换为数据迭代器">1.1.1. 标签转换为数据迭代器</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils <span class="token keyword">import</span> data<span class="token comment" spellcheck="true"># 传入多个数据，类似数据压缩 data_arrays，对数据进行解压缩</span>dataset <span class="token operator">=</span> data<span class="token punctuation">.</span>TensorDataset<span class="token punctuation">(</span>data_arrays<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建迭代器，batch_size</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span>is_train<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># iter返回一个迭代器对象， next读取迭代器的下一个数据</span>next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从torchvision-datasets读取">1.1.2. 从torchvision.datasets读取</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils <span class="token keyword">import</span> data<span class="token keyword">import</span> torchvision<span class="token keyword">def</span> <span class="token function">load_data</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> resize <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 定义数据处理方式   </span>    trans <span class="token operator">=</span> <span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>ToTensors<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> resize<span class="token punctuation">:</span>        trans<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span>resize<span class="token punctuation">)</span><span class="token punctuation">)</span>    trans <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用Compose转换</span>        <span class="token comment" spellcheck="true"># 选择数据导出模式</span>    <span class="token triple-quoted-string string">'''    root - 数据保存地址    train - 训练数据    transforms 转换模式    download 是否选择下载    '''</span>    mnist_train <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>        root <span class="token operator">=</span> <span class="token string">"../data"</span><span class="token punctuation">,</span> train <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> transforms <span class="token operator">=</span> trans<span class="token punctuation">,</span> download <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">'''    batch_size: 每个批次包含多少个样本。    shuffle: 是否在每个 epoch 开始时打乱数据（训练集通常为 True，测试集通常为 False）。    num_workers (可选): 用于数据加载的子进程数量，可以加快数据读取速度。    '''</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>mnist_train<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> shuffle <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>                          num_workers <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="序列数据">1.1.3. 序列数据</h3><p>对于总长度T， 时间$\tau$ ,将数据分为<br>$$<br>y_t &#x3D; X_t \<br>x_t &#x3D; [x_[t-\tau]… x_{t-1}] \<br>但是x_t 相对Y_t少了\tau个，可以舍弃，也可以填充0<br>$$</p><pre class="line-numbers language-python"><code class="language-python">tau <span class="token operator">=</span> <span class="token number">4</span>features <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>T <span class="token operator">-</span> tau<span class="token punctuation">,</span> tau<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>tau<span class="token punctuation">)</span><span class="token punctuation">:</span>    features<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">:</span> T <span class="token operator">-</span> tau <span class="token operator">+</span> i<span class="token punctuation">]</span>labels <span class="token operator">=</span> x<span class="token punctuation">[</span>tau<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>读取数据</li><li>词元化（转换为单词或字符）</li><li>转换为词元与数字的映射</li><li>将映射作用在序列数据上，转换为向量表示</li><li><a href="#squence">数据预处理代码</a></li></ol><h3 id="文本序列数据">1.1.4. 文本序列数据</h3><ol><li>读取数据到string中</li><li>使用split(\t) 分割为英法双语，然后使用.split(‘ ‘)将单词分割</li><li>然后将单词词元，建立词表</li><li>使用词表，转换为向量，对向量进行阶段或填充，然后在向量末尾增加<eos>，再统计序列中有效的单元数量valid_len</eos></li><li>指定批量大小，转换为小批量迭代器</li></ol><p><a href="#%E8%AF%BB%E5%8F%96%E6%96%87%E6%9C%AC%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE">读取文本序列代码</a></p><h2 id="模型">1.2. 模型</h2><h3 id="线性模型linear">1.2.1. 线性模型linear</h3><p>第一个指定输入特征形状，即2，第二个指定输出特征形状</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> nnnet <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>trainer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.03</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="展平层">1.2.2. 展平层</h3><p>将(batch_size, channel, height, weight) 转换为(batch_size, channel* height*weight)</p><pre class="line-numbers language-python"><code class="language-python">nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span>start_dim <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> end_dim <span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 默认保留第一维batch_size</span>nn<span class="token punctuation">.</span>LogSoftmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 作用于最后一个维度，进行归一化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="MLP">1.2.3. MLP</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> nnnet <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CNN">1.2.4. CNN</h3><p>不变性：无论使用什么方法找到这个物体，都与物体的位置无关</p><p>原因：与像素点计算的卷积核都是相同的，不随着位置的改变而改变</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''param1: 输入通道param2: 输出通道parma3: 卷积核大小param4: 参数'''</span>conv2d <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''卷积核大小 = input_channels* kernel_size, 每一个卷积核计算的出来都是一个二维图形卷积核数量 = output_channels'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="填充padding">1.2.4.1. 填充padding</h4><p>卷积核最好选择奇数</p><p>填充高度与宽度满足$p_h &#x3D; k_h -1 , p_w &#x3D; k_w -1$,  在上下填充的高度与宽度分别为 ${p_h}&#x2F;{2} , p_w&#x2F;2$</p><pre class="line-numbers language-python"><code class="language-python">conv2d <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>padding <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="步幅">1.2.4.2. 步幅</h4><p>输出形状公式为<br>$$<br>\lfloor（n_h-k_h-+p_h+s_h)&#x2F;s_h\rfloor \<br>p_h &#x3D; k_h-1 \<br>所以结果为（n_h+s_h-1)&#x2F;s_h, \<br>可以整除情况下，&#x3D;（n_h+s_h)&#x2F;s_h<br>$$</p><pre class="line-numbers language-python"><code class="language-python">conv2d <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>当以每像素为基础应用时，$1\times 1$卷积层相当于全连接层。</li></ul><h3 id="批量归一化层BatchNorm">1.2.5. 批量归一化层BatchNorm</h3><p>$$<br>\mathrm{BN}(\mathbf{x}) &#x3D; \boldsymbol{\gamma} \odot \frac{\mathbf{x} - \hat{\boldsymbol{\mu}}_\mathcal{B}}{\hat{\boldsymbol{\sigma}}_\mathcal{B}} + \boldsymbol{\beta}.<br>$$</p><p>对特征维度进行归一化,$\gamma、\beta$ 是拉伸和偏移参数</p><ol><li><p>对特征维度进行归一化</p><pre><code>mean = X.mean(dim = 0, keepdim = True)</code></pre></li><li><p>卷积层</p><ol><li>对通道维度进行归一化</li></ol></li><li><p>训练状态下使用小批次的样本均值与方差，测试状态使用的移动平均估算的均值与方差</p></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''param: 输入通道数'''</span>nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>  nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="残差块">1.2.6. 残差块</h3><p>训练是模型训练出F(X) &#x3D; H(x)- X</p><p><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250423225436209.png" alt="image-20250423225436209"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch <span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> functional <span class="token keyword">as</span> F<span class="token keyword">class</span> <span class="token class-name">Residual</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self <span class="token punctuation">,</span> input_channels<span class="token punctuation">,</span> num_channels<span class="token punctuation">,</span> use_1x1conv<span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> strides <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>input_channels<span class="token punctuation">,</span> num_channels<span class="token punctuation">,</span> kernel_size <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> paddding <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> stride <span class="token operator">=</span> strides<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>num_channels<span class="token punctuation">,</span> num_channels<span class="token punctuation">,</span> kernel_size <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> paddding <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> stride <span class="token operator">=</span> strides<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 修改X的通道数量，与f(x) - x匹配</span>        <span class="token keyword">if</span> use_1x1conv <span class="token punctuation">:</span>            self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>input_channels<span class="token punctuation">,</span> num_channels<span class="token punctuation">,</span> kernel_size <span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">,</span>padding <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> stride <span class="token operator">=</span> strides<span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token punctuation">:</span>            self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> none        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>num_channels<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>num_channels<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>        Y <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        Y <span class="token operator">=</span> self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 修改X输出通道数量</span>        <span class="token keyword">if</span> conv3 <span class="token punctuation">:</span>            X <span class="token operator">=</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 实现Y = f(x) +X</span>        Y <span class="token operator">=</span> Y<span class="token operator">+</span> X        Y <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>Y<span class="token punctuation">)</span> <span class="token keyword">return</span> Y        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="池化层pooling">1.2.7. 池化层pooling</h3><p>汇聚卷积层计算出的信息，降低卷积层对位置的敏感性，同时降低对空间降采样表示的敏感性</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> nnnn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding <span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 最大池化层</span>nn<span class="token punctuation">.</span>AvgPool2d<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 平均池化层</span><span class="token triple-quoted-string string">'''param1 : 输出层形状(1,1), 网络自动计算padding, stride ,k ,转化为(1,1)的输出维度'''</span>nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>池化层不需要指出Input_channels, output_channels， <strong>input_channels &#x3D;output_channels</strong></p><p>例如，Lenet网络</p><p><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250423211333286.png" alt="image-20250423211333286"></p><pre class="line-numbers language-python"><code class="language-python">net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>AvgPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>AvgPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环神经网络RNN">1.2.8. 循环神经网络RNN</h3><p>$$<br>隐藏输出\\mathbf{H}<em>t &#x3D; \phi(\mathbf{X}<em>t \mathbf{W}</em>{xh} + \mathbf{H}</em>{t-1} \mathbf{W}_{hh}  + \mathbf{b}_h).\<br>输出\<br>\mathbf{O}_t &#x3D; \mathbf{H}<em>t \mathbf{W}</em>{hq} + \mathbf{b}_q.<br>$$</p><h4 id="深度循环deep-rnn">1.2.8.1. 深度循环deep_rnn</h4><p>RNN相当于Drnn中，$H_{t}^{0} &#x3D; X_t$<br>$$<br>\mathbf{H}<em>t^{(l)} &#x3D; \phi_l(\mathbf{H}<em>t^{(l-1)} \mathbf{W}</em>{xh}^{(l)} + \mathbf{H}</em>{t-1}^{(l)} \mathbf{W}_{hh}^{(l)}  + \mathbf{b}_h^{(l)})\<br>\mathbf{O}_t &#x3D; \mathbf{H}<em>t^{(L)} \mathbf{W}</em>{hq} + \mathbf{b}_q<br>$$</p><h4 id="双向循环rnn">1.2.8.2. 双向循环rnn</h4><p><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250424175214314.png" alt="image-20250424175214314"></p><p><strong>多用于对文本的编码，而不是预测文本</strong></p><h4 id="代码介绍">1.2.8.3. 代码介绍</h4><p>输入X &#x3D; （time_step ,batch_size, feature), output &#x3D; (time_step ,batch_size, num_hidden*(1&#x2F;2)), state &#x3D; (time_step ,batch_size, num_hidden)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> nnrnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>RNN<span class="token punctuation">(</span>num_input<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span>gru_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span>lstm_layer<span class="token operator">=</span>nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># drnn</span><span class="token triple-quoted-string string">'''X_{batch* num_input}* W_{num_input * num_hidder} num_inputs: 输入的特征数量num_hidden：隐神经元数量 = 隐状态的特征数量bidirectional: 双向循环网络'''</span>lstm_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>num_inputs<span class="token punctuation">,</span> num_hidden<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> bidirectional<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RNN 利用<strong>时间维度</strong>的参数共享实现了对*<em>时间位置</em>，每一个时间步使用的一套参数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rnn</span><span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> state<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># inputs的形状：(时间步数量，批量大小，词表大小)</span>    W_xh<span class="token punctuation">,</span> W_hh<span class="token punctuation">,</span> b_h<span class="token punctuation">,</span> W_hq<span class="token punctuation">,</span> b_q <span class="token operator">=</span> params        H<span class="token punctuation">,</span> <span class="token operator">=</span> state    outputs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># X的形状：(批量大小，词表大小)</span>    <span class="token keyword">for</span> X <span class="token keyword">in</span> inputs<span class="token punctuation">:</span>        H <span class="token operator">=</span> torch<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>X<span class="token punctuation">,</span> W_xh<span class="token punctuation">)</span> <span class="token operator">+</span> torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>H<span class="token punctuation">,</span> W_hh<span class="token punctuation">)</span> <span class="token operator">+</span> b_h<span class="token punctuation">)</span>        Y <span class="token operator">=</span> torch<span class="token punctuation">.</span>mm<span class="token punctuation">(</span>H<span class="token punctuation">,</span> W_hq<span class="token punctuation">)</span> <span class="token operator">+</span> b_q        outputs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Y<span class="token punctuation">)</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>H<span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250424173608710.png" alt="image-20250424173608710"></p><h4 id="梯度衰减">1.2.8.4. 梯度衰减</h4><p>减小梯度，避免梯度爆炸，使得梯度始终保持在$\theta$ 以下<br>$$<br>\mathbf{g} \leftarrow \min\left(1, \frac{\theta}{|\mathbf{g}|}\right) \mathbf{g}.<br>$$<br><a href="#grad_clipping">梯度裁剪代码</a></p><h2 id="激活函数">1.3. 激活函数</h2><p>将模型从线性变为非线性</p><h3 id="relu">1.3.1. relu</h3><p>$$<br>\operatorname{ReLU}(x) &#x3D; \max(x, 0).<br>$$</p><pre class="line-numbers language-python"><code class="language-python">torch<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="sigmod">1.3.2. sigmod</h3><p>特征图像，曲线在（0，1）中，关于0.5对称<br>$$<br>$$\operatorname{sigmoid}(x) &#x3D; \frac{1}{1 + \exp(-x)}.$$<br>$$</p><pre class="line-numbers language-python"><code class="language-python">y <span class="token operator">=</span> torch<span class="token punctuation">.</span>sigmod<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="tanh">1.3.3. tanh</h3><p>特征图像，曲线在（-1，1）中，关于0对称<br>$$<br>$$\operatorname{tanh}(x) &#x3D; \frac{1 - \exp(-2x)}{1 + \exp(-2x)}<br>$$</p><pre class="line-numbers language-python"><code class="language-python">y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="损失函数">1.4. 损失函数</h2><h3 id="均方误差">1.4.1. 均方误差</h3><pre class="line-numbers language-python"><code class="language-python">loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="交叉熵损失">1.4.2. 交叉熵损失</h3><pre class="line-numbers language-python"><code class="language-python">loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回的是一个张量，反向传播需要计算为标量</span><span class="token comment" spellcheck="true"># 相当于 NLLLoss(LogSoftmax(logits), target)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="NLLLoss">1.4.3. NLLLoss</h3><pre class="line-numbers language-python"><code class="language-python">loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>NLLLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="训练过程">1.5. 训练过程</h2><pre class="line-numbers language-python"><code class="language-python">num_epoch <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> X<span class="token punctuation">,</span> y <span class="token keyword">in</span> data_iter <span class="token punctuation">:</span>        l <span class="token operator">=</span> loss<span class="token punctuation">(</span>net<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>        train<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 清除训练模型的梯度, 返回的是一个标量</span>        l<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 反向计算梯度</span>        trainer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            l <span class="token operator">=</span> loss<span class="token punctuation">(</span>net<span class="token punctuation">(</span>features<span class="token punctuation">)</span><span class="token punctuation">,</span> labels<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计算总体梯度</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'epoch{epoch}, loss{1:0.2f}'</span><span class="token punctuation">)</span>                    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型问题">1.6. 模型问题</h2><h3 id="复杂性因素">1.6.1. 复杂性因素</h3><ol><li>可调整参数的数量。当可调整参数的数量（有时称为<strong>自由度</strong>）很大时，模型往往更容易过拟合。</li><li>参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合。</li><li>训练样本的数量。即使模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型。</li></ol><h3 id="K折交叉验证">1.6.2. K折交叉验证</h3><p>一个epoch中，将训练数据分为K份，在k-1份上进行训练，在第K份上进行验证</p><h3 id="L2正则化">1.6.3. L2正则化</h3><p>$$<br>\begin{aligned}</p><p>\mathbf{w} &amp; \leftarrow \left(1- \eta\lambda \right) \mathbf{w} - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \mathbf{x}^{(i)} \left(\mathbf{w}^\top \mathbf{x}^{(i)} + b - y^{(i)}\right).</p><p>\end{aligned}<br>$$</p><p>每次都减小一定的权重，岭回归相对于线性回归增加了L2正则化，LASSO回归相当于增加了L1回归，相当于参数选择</p><ol><li>选择权重参数，然后正则化</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 选择参数组</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> param <span class="token keyword">in</span> net<span class="token punctuation">.</span>named_parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># param.requires_grad 确保只包含需要梯度的参数</span>    <span class="token keyword">if</span> param<span class="token punctuation">.</span>requires_grad<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 根据参数名称判断是否是偏置项</span>        <span class="token keyword">if</span> <span class="token string">'bias'</span> <span class="token keyword">in</span> name<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 简单的判断，更严格的判断可以是 name.endswith('.bias')</span>            params_without_wd<span class="token punctuation">.</span>append<span class="token punctuation">(</span>param<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            params_with_wd<span class="token punctuation">.</span>append<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 初始化优化器，使用参数组</span>trainer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span> params_with_wd<span class="token punctuation">,</span> <span class="token string">'weight_decay'</span><span class="token punctuation">:</span> wd<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">'params'</span><span class="token punctuation">:</span> params_without_wd<span class="token punctuation">,</span> <span class="token string">'weight_decay'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 对偏置项设置 weight_decay 为 0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>对所有参数进行正则化</p><pre class="line-numbers language-python"><code class="language-python">trainer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span><span class="token punctuation">[</span>    net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr <span class="token operator">=</span> lr<span class="token punctuation">,</span> weigth_decay <span class="token operator">=</span> wd<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="暂退法（Dropout">1.6.4. 暂退法（Dropout)</h3><p>随即丢弃部分神经元</p><pre class="line-numbers language-python"><code class="language-python">nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>ratio<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="随机初始化">1.6.5. 随机初始化</h3><p>暂退法和随机初始化，都可以减小神经元的对称性</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>init <span class="token keyword">as</span> init<span class="token keyword">class</span> <span class="token class-name">SimpleMLP</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>SimpleMLP<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">784</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 例如处理 28x28 图像展平后的输入</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 例如输出 10 个类别的概率</span>        <span class="token comment" spellcheck="true"># 在这里调用自定义初始化函数</span>        self<span class="token punctuation">.</span>_initialize_weights<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_initialize_weights</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在进行自定义初始化..."</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 遍历模型的所有模块 (包括子模块自身)</span>            <span class="token comment" spellcheck="true"># print(f"处理模块: {m}") # 可以打印查看正在处理的模块类型</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 对线性层的权重使用 He/Kaiming 初始化</span>                init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'fan_in'</span><span class="token punctuation">,</span> nonlinearity<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 对线性层的偏置初始化为常数 0</span>                <span class="token keyword">if</span> m<span class="token punctuation">.</span>bias <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 检查偏置是否存在</span>                    init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录">1.7. 附录</h2><p><b id="squence"> squence 序列数据预处理 </b></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 读取序列数据</span>d2l<span class="token punctuation">.</span>DATA_HUB<span class="token punctuation">[</span><span class="token string">'time_machine'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d2l<span class="token punctuation">.</span>DATA_URL <span class="token operator">+</span> <span class="token string">'timemachine.txt'</span><span class="token punctuation">,</span>                                <span class="token string">'090b5e7e70c295757f55df93cb0a180b9691891a'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_time_machine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#@save</span>    <span class="token triple-quoted-string string">"""将时间机器数据集加载到文本行的列表中"""</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>d2l<span class="token punctuation">.</span>download<span class="token punctuation">(</span><span class="token string">'time_machine'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'[^A-Za-z]+'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">]</span>lines <span class="token operator">=</span> read_time_machine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 词元化</span><span class="token keyword">def</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>lines<span class="token punctuation">,</span> token<span class="token operator">=</span><span class="token string">'word'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#@save</span>    <span class="token triple-quoted-string string">"""将文本行拆分为单词或字符词元"""</span>    <span class="token keyword">if</span> token <span class="token operator">==</span> <span class="token string">'word'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">]</span>    <span class="token keyword">elif</span> token <span class="token operator">==</span> <span class="token string">'char'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>list<span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'错误：未知词元类型：'</span> <span class="token operator">+</span> token<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tokens <span class="token operator">=</span> tokenize<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 词元与数值的映射</span><span class="token keyword">class</span> <span class="token class-name">Vocab</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#@save</span>    <span class="token triple-quoted-string string">"""文本词表"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tokens<span class="token operator">=</span>None<span class="token punctuation">,</span> min_freq<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> reserved_tokens<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> tokens <span class="token keyword">is</span> None<span class="token punctuation">:</span>            tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> reserved_tokens <span class="token keyword">is</span> None<span class="token punctuation">:</span>            reserved_tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 按出现频率排序</span>        counter <span class="token operator">=</span> count_corpus<span class="token punctuation">(</span>tokens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_token_freqs <span class="token operator">=</span> sorted<span class="token punctuation">(</span>counter<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                   reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 未知词元的索引为0</span>        self<span class="token punctuation">.</span>idx_to_token <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'&amp;lt;unk&amp;gt;'</span><span class="token punctuation">]</span> <span class="token operator">+</span> reserved_tokens        <span class="token comment" spellcheck="true"># 单词到索引梭顺序</span>        self<span class="token punctuation">.</span>token_to_idx <span class="token operator">=</span> <span class="token punctuation">{</span>token<span class="token punctuation">:</span> idx                             <span class="token keyword">for</span> idx<span class="token punctuation">,</span> token <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>idx_to_token<span class="token punctuation">)</span><span class="token punctuation">}</span>                <span class="token keyword">for</span> token<span class="token punctuation">,</span> freq <span class="token keyword">in</span> self<span class="token punctuation">.</span>_token_freqs<span class="token punctuation">:</span>            <span class="token keyword">if</span> freq <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> min_freq<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> token <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>token_to_idx<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 顺序到单词</span>                self<span class="token punctuation">.</span>idx_to_token<span class="token punctuation">.</span>append<span class="token punctuation">(</span>token<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>token_to_idx<span class="token punctuation">[</span>token<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>idx_to_token<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>idx_to_token<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tokens<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>token_to_idx<span class="token punctuation">.</span>get<span class="token punctuation">(</span>tokens<span class="token punctuation">,</span> self<span class="token punctuation">.</span>unk<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>__getitem__<span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token keyword">for</span> token <span class="token keyword">in</span> tokens<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">to_tokens</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> indices<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>indices<span class="token punctuation">,</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>idx_to_token<span class="token punctuation">[</span>indices<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>idx_to_token<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token keyword">for</span> index <span class="token keyword">in</span> indices<span class="token punctuation">]</span>    @property    <span class="token keyword">def</span> <span class="token function">unk</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 未知词元的索引为0</span>        <span class="token keyword">return</span> <span class="token number">0</span>    @property    <span class="token keyword">def</span> <span class="token function">token_freqs</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_token_freqs<span class="token keyword">def</span> <span class="token function">count_corpus</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#@save</span>    <span class="token triple-quoted-string string">"""统计词元的频率"""</span>    <span class="token comment" spellcheck="true"># 这里的tokens是1D列表或2D列表</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>tokens<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> isinstance<span class="token punctuation">(</span>tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 将词元列表展平成一个列表</span>        tokens <span class="token operator">=</span> <span class="token punctuation">[</span>token <span class="token keyword">for</span> line <span class="token keyword">in</span> tokens <span class="token keyword">for</span> token <span class="token keyword">in</span> line<span class="token punctuation">]</span>    <span class="token keyword">return</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">load_corpus_time_machine</span><span class="token punctuation">(</span>max_tokens<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#@save</span>    <span class="token triple-quoted-string string">"""返回时光机器数据集的词元索引列表和词表"""</span>    lines <span class="token operator">=</span> read_time_machine<span class="token punctuation">(</span><span class="token punctuation">)</span>    tokens <span class="token operator">=</span> tokenize<span class="token punctuation">(</span>lines<span class="token punctuation">,</span> <span class="token string">'char'</span><span class="token punctuation">)</span>    vocab <span class="token operator">=</span> Vocab<span class="token punctuation">(</span>tokens<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 因为时光机器数据集中的每个文本行不一定是一个句子或一个段落，</span>    <span class="token comment" spellcheck="true"># 所以将所有文本行展平到一个列表中</span>    corpus <span class="token operator">=</span> <span class="token punctuation">[</span>vocab<span class="token punctuation">[</span>token<span class="token punctuation">]</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> tokens <span class="token keyword">for</span> token <span class="token keyword">in</span> line<span class="token punctuation">]</span>    <span class="token keyword">if</span> max_tokens <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">:</span>        corpus <span class="token operator">=</span> corpus<span class="token punctuation">[</span><span class="token punctuation">:</span>max_tokens<span class="token punctuation">]</span>    <span class="token keyword">return</span> corpus<span class="token punctuation">,</span> vocab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b id="grad_clipping"> 梯度衰减</b></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">grad_clipping</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> theta<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#@save</span>    <span class="token triple-quoted-string string">"""裁剪梯度"""</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>net<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>        params <span class="token operator">=</span> <span class="token punctuation">[</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> p<span class="token punctuation">.</span>requires_grad<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        params <span class="token operator">=</span> net<span class="token punctuation">.</span>params    norm <span class="token operator">=</span> torch<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>grad <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> p <span class="token keyword">in</span> params<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> norm <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> theta<span class="token punctuation">:</span>        <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">:</span>            param<span class="token punctuation">.</span>grad<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">*=</span> theta <span class="token operator">/</span> norm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取文本序列数据">1.7.1. 读取文本序列数据</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> torch<span class="token keyword">from</span> d2l <span class="token keyword">import</span> torch <span class="token keyword">as</span> d2l<span class="token comment" spellcheck="true"># 下载并读出序列</span>d2l<span class="token punctuation">.</span>DATA_HUB<span class="token punctuation">[</span><span class="token string">'fra-eng'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>d2l<span class="token punctuation">.</span>DATA_URL <span class="token operator">+</span> <span class="token string">'fra-eng.zip'</span><span class="token punctuation">,</span>                           <span class="token string">'94646ad1522d915e7b0f9296181140edcf86a4f5'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#@save</span><span class="token keyword">def</span> <span class="token function">read_data_nmt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""载入“英语－法语”数据集"""</span>    data_dir <span class="token operator">=</span> d2l<span class="token punctuation">.</span>download_extract<span class="token punctuation">(</span><span class="token string">'fra-eng'</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_dir<span class="token punctuation">,</span> <span class="token string">'fra.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span>             encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>raw_text <span class="token operator">=</span> read_data_nmt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>raw_text<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 处理序列</span><span class="token keyword">def</span> <span class="token function">preprocess_nmt</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""预处理“英语－法语”数据集"""</span>    <span class="token keyword">def</span> <span class="token function">no_space</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> prev_char<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> char <span class="token keyword">in</span> set<span class="token punctuation">(</span><span class="token string">',.!?'</span><span class="token punctuation">)</span> <span class="token operator">and</span> prev_char <span class="token operator">!=</span> <span class="token string">' '</span>    <span class="token comment" spellcheck="true"># 使用空格替换不间断空格</span>    <span class="token comment" spellcheck="true"># 使用小写字母替换大写字母</span>    text <span class="token operator">=</span> text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\u202f'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\xa0'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在单词和标点符号之间插入空格</span>    out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span> <span class="token operator">+</span> char <span class="token keyword">if</span> i <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">0</span> <span class="token operator">and</span> no_space<span class="token punctuation">(</span>char<span class="token punctuation">,</span> text<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">else</span> char           <span class="token keyword">for</span> i<span class="token punctuation">,</span> char <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 词元化，并区分出feature与label</span><span class="token keyword">def</span> <span class="token function">tokenize_nmt</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> num_examples<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""词元化“英语－法语”数据数据集"""</span>    source<span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> line <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> num_examples <span class="token operator">and</span> i <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> num_examples<span class="token punctuation">:</span>            <span class="token keyword">break</span>        parts <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 之前标点符号之间增加了空格，使用空格分割</span>            source<span class="token punctuation">.</span>append<span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            target<span class="token punctuation">.</span>append<span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> source<span class="token punctuation">,</span> targetsource<span class="token punctuation">,</span> target <span class="token operator">=</span> tokenize_nmt<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 阶段或填充词元</span><span class="token keyword">def</span> <span class="token function">truncate_pad</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> num_steps<span class="token punctuation">,</span> padding_token<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""截断或填充文本序列"""</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> num_steps<span class="token punctuation">:</span>        <span class="token keyword">return</span> line<span class="token punctuation">[</span><span class="token punctuation">:</span>num_steps<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 截断</span>    <span class="token keyword">return</span> line <span class="token operator">+</span> <span class="token punctuation">[</span>padding_token<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>num_steps <span class="token operator">-</span> len<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 填充</span>truncate_pad<span class="token punctuation">(</span>src_vocab<span class="token punctuation">[</span>source<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> src_vocab<span class="token punctuation">[</span><span class="token string">'&amp;lt;pad&amp;gt;'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 统计序列数据valid_len</span><span class="token keyword">def</span> <span class="token function">build_array_nmt</span><span class="token punctuation">(</span>lines<span class="token punctuation">,</span> vocab<span class="token punctuation">,</span> num_steps<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""将机器翻译的文本序列转换成小批量"""</span>    lines <span class="token operator">=</span> <span class="token punctuation">[</span>vocab<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token keyword">for</span> l <span class="token keyword">in</span> lines<span class="token punctuation">]</span>    lines <span class="token operator">=</span> <span class="token punctuation">[</span>l <span class="token operator">+</span> <span class="token punctuation">[</span>vocab<span class="token punctuation">[</span><span class="token string">'&amp;lt;eos&amp;gt;'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> l <span class="token keyword">in</span> lines<span class="token punctuation">]</span>    array <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>truncate_pad<span class="token punctuation">(</span>        l<span class="token punctuation">,</span> num_steps<span class="token punctuation">,</span> vocab<span class="token punctuation">[</span><span class="token string">'&amp;lt;pad&amp;gt;'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> l <span class="token keyword">in</span> lines<span class="token punctuation">]</span><span class="token punctuation">)</span>    valid_len <span class="token operator">=</span> <span class="token punctuation">(</span>array <span class="token operator">!=</span> vocab<span class="token punctuation">[</span><span class="token string">'&amp;lt;pad&amp;gt;'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> array<span class="token punctuation">,</span> valid_len<span class="token keyword">def</span> <span class="token function">load_data_nmt</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> num_steps<span class="token punctuation">,</span> num_examples<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""返回翻译数据集的迭代器和词表"""</span>    text <span class="token operator">=</span> preprocess_nmt<span class="token punctuation">(</span>read_data_nmt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 读取序列</span>    source<span class="token punctuation">,</span> target <span class="token operator">=</span> tokenize_nmt<span class="token punctuation">(</span>text<span class="token punctuation">,</span> num_examples<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 词元化序列</span>    src_vocab <span class="token operator">=</span> d2l<span class="token punctuation">.</span>Vocab<span class="token punctuation">(</span>source<span class="token punctuation">,</span> min_freq<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 建立词表</span>                          reserved_tokens<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'&amp;lt;pad&amp;gt;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;bos&amp;gt;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;eos&amp;gt;'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    tgt_vocab <span class="token operator">=</span> d2l<span class="token punctuation">.</span>Vocab<span class="token punctuation">(</span>target<span class="token punctuation">,</span> min_freq<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                          reserved_tokens<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'&amp;lt;pad&amp;gt;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;bos&amp;gt;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;eos&amp;gt;'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    src_array<span class="token punctuation">,</span> src_valid_len <span class="token operator">=</span> build_array_nmt<span class="token punctuation">(</span>source<span class="token punctuation">,</span> src_vocab<span class="token punctuation">,</span> num_steps<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 填充或阶段</span>    tgt_array<span class="token punctuation">,</span> tgt_valid_len <span class="token operator">=</span> build_array_nmt<span class="token punctuation">(</span>target<span class="token punctuation">,</span> tgt_vocab<span class="token punctuation">,</span> num_steps<span class="token punctuation">)</span>    data_arrays <span class="token operator">=</span> <span class="token punctuation">(</span>src_array<span class="token punctuation">,</span> src_valid_len<span class="token punctuation">,</span> tgt_array<span class="token punctuation">,</span> tgt_valid_len<span class="token punctuation">)</span>    data_iter <span class="token operator">=</span> d2l<span class="token punctuation">.</span>load_array<span class="token punctuation">(</span>data_arrays<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建小批量迭代器</span>    <span class="token keyword">return</span> data_iter<span class="token punctuation">,</span> src_vocab<span class="token punctuation">,</span> tgt_vocab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端代码的联合使用</title>
      <link href="/2025/05/24/java/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/05/24/java/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="html-css-javascript">1. html+ css+ javascript</h1><h2 id="html">1.1. html</h2><h3 id="常用插件">1.1.1. 常用插件</h3><ol><li>HTML CSS Support</li><li>Live Server</li><li>Auto Rename Tag</li><li>open in browser</li></ol><h3 id="常用示例">1.1.2. 常用示例</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>!DOCTYPE html<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>html<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>head<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>!-- 这里放置文档的元信息 --<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>title<span class="token entity" title="&gt;">&amp;gt;</span>文档标题<span class="token entity" title="&lt;">&amp;lt;</span>/title<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>meta charset="UTF-8"<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>!-- 连接外部样式表或脚本文件等 --<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>link rel="stylesheet" type="text/css" href="styles.css"<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>script src="script.js"<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/script<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/head<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>body<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>!-- 这里放置页面内容 --<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>h1<span class="token entity" title="&gt;">&amp;gt;</span>这是一个标题<span class="token entity" title="&lt;">&amp;lt;</span>/h1<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>p<span class="token entity" title="&gt;">&amp;gt;</span>这是一个段落。<span class="token entity" title="&lt;">&amp;lt;</span>/p<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>a href="https://www.example.com"<span class="token entity" title="&gt;">&amp;gt;</span>这是一个链接<span class="token entity" title="&lt;">&amp;lt;</span>/a<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>!-- 其他内容 --<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/body<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/html<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>!DOCTYPE html<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>html<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>head<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>!-- 这里放置文档的元信息 --<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>title<span class="token entity" title="&gt;">&amp;gt;</span>文档标题<span class="token entity" title="&lt;">&amp;lt;</span>/title<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>meta charset="UTF-8"<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>!-- 连接外部样式表或脚本文件等 --<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>link rel="stylesheet" type="text/css" href="styles.css"<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>script src="script.js"<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/script<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/head<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>body<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>!-- 这里放置页面内容 --<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>h1<span class="token entity" title="&gt;">&amp;gt;</span>这是一个标题<span class="token entity" title="&lt;">&amp;lt;</span>/h1<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>p<span class="token entity" title="&gt;">&amp;gt;</span>这是一个段落。<span class="token entity" title="&lt;">&amp;lt;</span>/p<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>a href="https://www.example.com"<span class="token entity" title="&gt;">&amp;gt;</span>这是一个链接<span class="token entity" title="&lt;">&amp;lt;</span>/a<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>!-- 其他内容 --<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/body<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/html<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css">1.2. css</h2><h3 id="规则">1.2.1. 规则</h3><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">选择器 </span><span class="token punctuation">{</span>    属性<span class="token property">1</span><span class="token punctuation">:</span> 属性值<span class="token number">1</span><span class="token punctuation">;</span>    属性<span class="token property">2</span><span class="token punctuation">:</span> 属性值<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入方式">1.2.2. 导入方式</h3><ol><li>内联使用</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>h1 style="color: blue; font-size: 30px;"<span class="token entity" title="&gt;">&amp;gt;</span>这是一段内联样式文本。<span class="token entity" title="&lt;">&amp;lt;</span>/h1<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>外部样式表</p><p>写在<head>中 </head></p><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>head<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>style<span class="token entity" title="&gt;">&amp;gt;</span>                h2 {                       color: red;                        font-size: 16px;                }        <span class="token entity" title="&lt;">&amp;lt;</span>/style<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/head<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>外部样式表</p><p>使用link连接外部资源，type为“text&#x2F;css”，href指向样式内容</p></li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>head<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>link rel="stylesheet" type="text/css" href="./css/style.css"<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/head<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="选择器">1.2.3. 选择器</h3><table><thead><tr><th>选择器</th><th>形式</th></tr></thead><tbody><tr><td>元素</td><td>p</td></tr><tr><td>类</td><td>.highlight</td></tr><tr><td>id</td><td>#header</td></tr><tr><td>通用选择</td><td>*</td></tr><tr><td>子元素</td><td>父元素&gt; 子元素</td></tr><tr><td>后代</td><td><code>ul li</code> 选择了所有在 <code>&lt;ul&gt;</code> 元素内部的 <code>&lt;li&gt;</code> 元素。</td></tr><tr><td>相邻兄弟</td><td><code>元素名 + 元素名</code>，例如，<code>h2 + p</code> 选择了与 <code>&lt;h2&gt;</code> 相邻的 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>&#x2F;* 通用兄弟选择器 *&#x2F;</td><td>h4 ~ p {             background-color: #1b91ff;         }</td></tr><tr><td>伪类选择器</td><td>用户交互时的属性变化<br>包括鼠标悬停（<code>:hover</code> ）、链接状态（<code>:active</code>）、第一个子元素（<code>:first-child</code>）</td></tr></tbody></table><h3 id="属性">1.2.4. 属性</h3><p>了解了如何选中我们想要的元素，接下来，我们来学习 CSS 常用的样式属性。CSS 的属性有上百个，但是这不意味着，我们每个都要学习，更多的属性可以参考 <a href="https://www.runoob.com/cssref/css-reference.html">这里</a></p><h4 id="盒子模型">1.2.4.1. 盒子模型</h4><p>描述了文档中的每个元素都被看作是一个矩形的盒子，这个盒子包含了内容、内边距、边框和外边距。</p><p><img src="/2025/05/24/java/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/202311141906963.png" alt="img"></p><p>其中，从内到外分别是：</p><table><thead><tr><th align="center">属性名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>内容（Content）</code></td><td align="center">盒子包含的实际内容，比如文本、图片等。</td></tr><tr><td align="center"><code>内边距（Padding）</code></td><td align="center">围绕在内容的内部，是内容与边框之间的空间。可以使用 <code>padding</code> 属性来设置。</td></tr><tr><td align="center"><code>边框（Border）</code></td><td align="center">围绕在内边距的外部，是盒子的边界。可以使用 <code>border</code> 属性来设置。</td></tr><tr><td align="center"><code>外边距（Margin）</code></td><td align="center">围绕在边框的外部，是盒子与其他元素之间的空间。可以使用 <code>margin</code> 属性来设置。</td></tr></tbody></table><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.demo</span> </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置背景色 */</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 转换成行内块元素 */</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid green<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置边框样式 */</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置内边距 */</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设置外边距 */</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浮动">1.2.4.2. 浮动</h4><p>标准流，浮动、定位</p><p>使用float控制浮动格式</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.left</span>, <span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 添加浮动，元素统一向左浮动，向右同理 float:right*/</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清除浮动格式，在后续的模块中不再浮动，不允许后续模块浮动</p><ol><li>加上一个空的块级元素，使用clear属性</li></ol><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>            <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>父模块属性中使用clearfix</p></li><li><p>使用overflow: hidden 属性</p></li></ol><h4 id="定位">1.2.4.3. 定位</h4><p>相关属性：</p><p>top ,bottom , left ,right</p><p>postion属性值</p><table><thead><tr><th>position</th><th>value</th></tr></thead><tbody><tr><td>relative</td><td>相对于正常文档定位</td></tr><tr><td>absolute</td><td>相对最近的已经定位的祖先元素定位，没有，则相对初始包含块定位</td></tr><tr><td>fixed</td><td>固定位置</td></tr></tbody></table><h2 id="javascript">1.3. javascript</h2><h3 id="导入方式-1">1.3.1. 导入方式</h3><ol><li>内联方式（inline):</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>script<span class="token entity" title="&gt;">&amp;gt;</span>    console.log('hello');<span class="token entity" title="&lt;">&amp;lt;</span>/script<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>外部引入</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>script src="myscript.js"<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/script<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="基本语法">1.3.2. 基本语法</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明变量</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//声明并初始化变量</span><span class="token keyword">const</span> PI<span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//声明一个常量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">特性</th><th align="left"><code>var</code></th><th align="left"><code>let</code></th></tr></thead><tbody><tr><td align="left"><strong>作用域</strong></td><td align="left">函数作用域</td><td align="left">块级作用域</td></tr><tr><td align="left"><strong>变量提升</strong></td><td align="left">声明会被提升，赋值不提升</td><td align="left">存在提升，但有暂时性死区</td></tr><tr><td align="left"><strong>重复声明</strong></td><td align="left">允许在同作用域内重复声明</td><td align="left">不允许在同块级作用域内重复声明</td></tr></tbody></table><h4 id="函数">1.3.2.1. 函数</h4><pre class="line-numbers language-javascript"><code class="language-javascript">funtion <span class="token function">hello</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//闭包是指一个函数能够访问并记住其词法作用域，即使该函数在当前词法作用域之外执行。闭包使得函数可以保持对其创建时的作用域的引用</span><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> outerVar <span class="token operator">=</span> <span class="token string">"I am outer"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outerVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 访问了外部函数的变量</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> inner<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关联html中的事件">1.3.2.2. 关联html中的事件</h4><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onClick</td><td>鼠标点击</td></tr><tr><td>onMouseOver</td><td>鼠标经过</td></tr><tr><td>onMouseOut</td><td>鼠标移出</td></tr><tr><td>onChange</td><td>文本内容改变</td></tr><tr><td>onSelect</td><td>文本框选中</td></tr><tr><td>onFocuse</td><td>光标聚集</td></tr><tr><td><code>onBlur</code></td><td>移开光标</td></tr><tr><td><code>onLoad</code></td><td>网页加载</td></tr><tr><td><code>onUnload</code></td><td>关闭网页</td></tr></tbody></table><p>事件处理程序是与特定事件相关联的函数。当事件发生时，关联的事件处理程序将被调用。在 HTML 中，可以通过以下方式添加事件处理程序：</p><ol><li><p>html</p><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>bottom onClick= 'myFunction()'<span class="token entity" title="&gt;">&amp;gt;</span> Click me<span class="token entity" title="&lt;">&amp;lt;</span>/bottom<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>DOM属性</p></li></ol><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> botton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myButton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>botton<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>addEventListener</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myButton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Button clicked!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取元素，并修改内容">1.3.3. 获取元素，并修改内容</h3><p>DOM 中的一切都是节点。文档本身是一个文档节点，而文档中的元素、属性和文本都是不同类型的节点。主要的节点类型包括：</p><ol><li><code>元素节点（Element Nodes）</code>： 表示 HTML 或 XML 文档中的元素，如 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code> 等。</li><li><code>属性节点（Attribute Nodes）</code>： 表示元素的属性，如 class、id 等。</li><li><code>文本节点（Text Nodes）</code>： 表示元素的文本内容</li></ol><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 修改元素文本内容</span>element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'新的文本内容'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加新的子元素</span><span class="token keyword">var</span> newElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 移除子元素</span><span class="token keyword">var</span> childElement <span class="token operator">=</span> element<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>childElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="致谢">2. 致谢</h1><p>摘录自<a href="https://docs.geeksman.com/front-end/1.front-end-html.html#html">Luo</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
      <url>/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="大模型">1. 大模型</h1><p>训练流程</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250516165010562.png" alt="image-20250516165010562"></p><h2 id="预训练">1.1. 预训练</h2><p>无监督学习，学习先验的背景知识</p><p>大模型的输出总的概率与原数据比较，不需要<br>$$<br>L(u) &#x3D;\sum_{i}{\log(p(u_i| u_0,…, u_{i-1})|\theta)}<br>$$</p><ol><li><p>数据获取</p><ol><li>网页爬取，数据没有处理</li><li>重复</li><li>拼写错误</li></ol></li><li><p>数据清洗</p><ol><li><p>转换文本格式</p></li><li><p>去重</p><ol><li>URL爬取的网站去重</li><li>文档的相似度</li><li>对文档分组30M， 超过6次重复， 删除其余5行</li><li>启发式过滤，使用token级的KL散度去重</li></ol><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250516172556394.png" alt="image-20250516172556394"></p></li><li><p>数据打包<br>  1. <bos> <eos><br>  2. 一行一行的训练，而不是一句一句的训练</eos></bos></p></li><li><p>观测模型，使用测试集对中间模型测试</p></li><li><p>数据比例，代码模型中平衡代码补全（中间填充）与代码编写（从前向后编写）的任务，两种数据集都需要</p></li></ol></li></ol><h3 id="继续预训练">1.1.1. 继续预训练</h3><p>当前的base model 对于专业领域的效果很差，继续与训练补全知识。</p><p>加入新的数据，调整学习率</p><ol><li>warmup 的步数不会影响最终的结果</li><li>学习率较大，下游任务更好</li><li>对原有模型继续warmup，效果更差</li></ol><p>使用梯形的学习率，保存拐点位置的学习率，继续预训练时候，使用拐点数据预训练，保持较高的搜索速度，拟合新增的数据集</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250516173720277.png" alt="image-20250516173720277"></p><h3 id="scaling-up">1.1.2. scaling up</h3><p>扩大模型的参数和容量</p><h3 id="尺度定律">1.1.3. 尺度定律</h3><p>模型的损失是可预测的，与模型的算力，大小，数据集有较大的关系</p><ol><li>模型的参数</li><li>数据的大小</li><li>算力</li></ol><p>模型与参数、大小、算力由直接的关系，不需要训练，就能知道最终的训练结果</p><h4 id="尺度定律-1">1.1.3.1. 尺度定律</h4><ol><li><p>模型与参数、大小、算力由直接的关系，与模型形状弱依赖</p><ol><li>某个网络的占比</li><li>隐层数量的占比</li><li>每个head的大小</li></ol><p>的影响很小，不需要对此调参</p></li><li><p>其他变量充足的时候，我们就知道模型最后的效果</p></li></ol><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519222325535.png" alt="image-20250519222325535"></p><ol start="3"><li><p>过拟合的普遍性，一味增加其中一项，模型效果就会进入衰退阶段</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519223024436.png" alt="image-20250519223024436"></p></li><li><p>同等算力下，调整模型大小和数据集的大小</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519223337327.png" alt="image-20250519223337327"></p></li><li><p>模型在训练集与测试集上表现高度相关</p></li><li><p>训练数据有显示，仍然可以重复使用数据进行训练得到可预测的“尺度定律”</p></li><li><p>其他模型（包括transform)都具有尺度定律</p></li></ol><h4 id="利用尺度定律">1.1.3.2. 利用尺度定律</h4><ol><li><p>固定模型的大小，更改预训练的数据量</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519224015225.png" alt="image-20250519224015225"></p></li><li><p>规定算力大小，训练不同大小的模型，（训练到模型收敛较难，可以得到算力的大小）</p></li></ol><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519224308944.png" alt="image-20250519224308944"></p><h3 id="涌现">1.1.4. 涌现</h3><p>大模型在训练数量的规模时，准确率会发生突变</p><h2 id="后训练">1.2. 后训练</h2><p>对齐人类的要求，回答问题有用、无害</p><h3 id="指令微调">1.2.1. 指令微调</h3><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519225029335.png" alt="image-20250519225029335"></p><ol><li><p>上下文学习</p><ol><li>用户给出例子，模型不更新参数直接学习</li></ol><p>使用例子训练，模型直接输出</p></li><li><p>预训练-微调</p><ol><li>在目标任务上进行微调</li></ol><p>给出命令前缀，然后训练</p></li><li><p>指令微调</p><ol><li>在非目标任务上进行泛化，在任务上泛化很好</li></ol></li></ol><p>指令-回答， 对回答的预测计算损失函数</p><h3 id="数据合成">1.2.2. 数据合成</h3><ol><li>人工构建任务例子</li><li>使用强模型根据种子任务生成指令</li><li>将生成的指令再给另一个强模型，获得指令的回答，得到&lt;指令，回答&gt; 对</li></ol><h3 id="test-scaling">1.2.3. test scaling</h3><p>模型输出多个结果，打分选择结果</p><p>过程奖励模型&gt;结果奖励模型</p><p>选择框架</p><p>   <img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250523163748097.png" alt="image-20250523163748097"></p><h3 id="微调方法">1.2.4. 微调方法</h3><h4 id="lora">1.2.4.1. lora</h4><p>增加低秩矩阵</p><h4 id="前缀调整">1.2.4.2. 前缀调整</h4><p>训练的模型权重不再调整，k,v前分别添加可训练的连续前缀向量</p><p>冻结原权重，增加可训练模块</p><h4 id="提示调整">1.2.4.3. 提示调整</h4><p>训练文本前增加提示命令</p><h4 id="adapter">1.2.4.4. adapter</h4><p>在前馈神经网络前增加低秩矩阵</p><h4 id="LoRAMoE">1.2.4.5. LoRAMoE</h4><p>微调插入专家模型中的LoRA适配器</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250523200928848.png" alt="image-20250523200928848"></p><h2 id="强化学习">1.3. 强化学习</h2><p>最大化智能体获得的期望累计奖励</p><h3 id="PPO函数">1.3.1. PPO函数</h3><p>策略： 大模型生成句子的过程$\pi$</p><p>轨迹： 一系列的动作，大模型生成句子时候，的状态与动作<br>$$<br>\tau  &#x3D; s_1, a_1, ..s_n, a_n<br>$$<br>奖励：$R(\tau)$，一整条轨迹的奖励</p><p>基于策略的强化学习的目标：找到一种策略，是在这个策略的轨迹上的奖励分数最大<br>$$<br>\begin{align}<br>\underset{\pi_\theta}{argmax} j({\pi_\theta}) &amp;&#x3D; \underset{\pi_\theta}{argmax}E_{\tau~\pi}|R(\tau)|\<br>&amp; &#x3D; \sum_\tau R(\tau)P(\tau|\pi_\theta)<br>\end{align}<br>$$<br>LOSS函数的梯度：<br>$$<br>\begin{align*}<br>\nabla J(\pi_\theta) &amp;&#x3D; \sum_\tau R(\tau) \nabla P(\tau|\pi_\theta) \<br>&amp;&#x3D; \sum_\tau R(\tau) P(\tau|\pi_\theta) \frac{\nabla P(\tau|\pi_\theta)}{P(\tau|\pi_\theta)} \<br>&amp;&#x3D; \sum_\tau R(\tau) P(\tau|\pi_\theta) \nabla \log(P(\tau|\pi_\theta)) \<br>&amp;&#x3D; \mathbb{E}<em>{\tau \sim \pi_\theta} [R(\tau) \nabla \log(P(\tau|\pi_\theta))]<br>\end{align*}<br>$$<br>路径的概率，从$s_0$递推，推到T-1,计算出T的概率<br>$$<br>P(\tau|\pi_\theta) &#x3D; \rho_0(s_0) \prod</em>{t&#x3D;0}^{T-1} P(s_{t+1}|s_t, a_t)\pi_\theta(a_t|s_t)<br>$$</p><p>$$<br>\nabla \log\left(P(\tau|\pi_\theta)\right) &#x3D; \nabla \left[ \log \rho_0(s_0) + \sum_{t&#x3D;0}^{T-1} \log P(s_{t+1}|s_t, a_t) + \sum_{t&#x3D;0}^{T-1} \log \pi_\theta(a_t|s_t) \right]<br>$$</p><p>前两项和策略模型的参数 $\theta$ 无关，可舍去。于是<br>$$<br>\nabla \log\left(P(\tau|\pi_\theta)\right) &#x3D; \sum_{t&#x3D;0}^{T-1} \nabla \log \pi_\theta(a_t|s_t)<br>$$<br>带入Loss的梯度中，使用每时刻的奖励函数代替总路径$R(\tau)$<br>$$<br>\nabla J(\pi_\theta) &#x3D; \mathbb{E}<em>{\tau \sim \pi_\theta}\left[ \sum</em>{t&#x3D;0}^{T-1} \Psi_t \nabla \log \pi_\theta(a_t|s_t) \right]<br>$$<br>$\psi_t$的组成形式</p><ol><li>$\sum_{t&#x3D;0}^\infty r_t$                        轨迹的累积奖励   </li><li>$\sum_{t’&#x3D;t}^\infty \gamma^{t’-t} r_{t’}$                        轨迹的折扣奖励   </li><li>$\sum_{t’&#x3D;t}^\infty \gamma^{t’-t} r_{t’} - b(s_t)$                        引入基线    </li><li>$Q^\pi(s_t, a_t)$                        动作价值函数   </li><li>$A^\pi(s_t, a_t)$                        优势函数   </li><li>$r_t + V^\pi(s_{t+1}) - V^\pi(s_t)$                        时序差分残差</li></ol><p>累计折扣奖励<br>$$<br>G_t &#x3D; r_t + \gamma r_{t+1} + \gamma^2 r_{t+2} + \dots + \gamma^{T-t-1} r_{T-1} &#x3D; r_t + \gamma G_{t+1}<br>$$</p><p>动作价值函数：在策略<em>π</em> 下，从状态 <em>s_t</em> 开始并执行动作 <em>a_t</em> 后，未来所有折扣奖励的<strong>期望</strong>。<br>$$<br>\begin{align}<br>Q_\pi(s_t, a_t) &amp;&#x3D; \mathbb{E}<em>\pi[G_t | s_t, a_t] \<br>&amp;&#x3D; \mathbb{E}<em>\pi\left[\sum</em>{t&#x3D;0}^{T-t} \gamma^{t’} r</em>{t’} | s_t, a_t\right] \<br>&amp;&#x3D; \mathbb{E}<em>\pi[r_t | s_t, a_t] + \mathbb{E}<em>\pi[\gamma V_\pi(S</em>{t+1}) | s_t, a_t] \<br>&amp;&#x3D; \sum</em>{s_{t+1} \in \mathcal{S}} P(s_{t+1}|s_t, a_t)R(s_t, a_t, s_{t+1}) + \gamma \sum_{s_{t+1} \in \mathcal{S}} P(s_{t+1}|s_t, a_t)V_\pi(s_{t+1})  \<br>&amp; 贝尔曼期望方程，将 G_t 拆分为当前奖励和未来价值\<br>&amp;&#x3D; \mathbb{E}<em>{s</em>{t+1} \sim P(\cdot|s_t, a_t)}[r + \gamma V_\pi(s_{t+1})]<br>\end{align}<br>$$<br>优势函数:在策略 π<em>π</em> 下，在状态 <em>s_t</em> 执行动作 <em>a_t</em> 相对于在该状态下平均（期望）价值的“优势”或“额外价值”。<br>$$<br>\begin{align}<br>A_\pi(s_t, a_t) &amp;&#x3D; Q_\pi(s_t, a_t) - V_\pi(s_t) \<br>&amp;&#x3D; \mathbb{E}<em>{s</em>{t+1} \sim P(\cdot|s_t, a_t)}[r_t + \gamma V_\pi(s_{t+1})] - \mathbb{E}<em>{s</em>{t+1} \sim P(\cdot|s_t, a_t)}[V_\pi(s_t)] \<br>&amp;&#x3D; \mathbb{E}<em>{s</em>{t+1} \sim P(\cdot|s_t, a_t)}[r_t + \gamma V_\pi(s_{t+1}) - V_\pi(s_t)] \<br>&amp;&#x3D; \mathbb{E}<em>{s</em>{t+1} \sim P(\cdot|s_t, a_t)}[\text{TD_error}]<br>\end{align}<br>$$</p><h3 id="价值损失">1.3.2. 价值损失</h3><p>这里提到的“价值训练过程”通常指的是在强化学习中，<strong>价值函数（Value Function）的估计和更新过程</strong>。这通常通过训练一个神经网络（价值网络&#x2F;Critic网络）来预测状态的价值 V(s)<em>V</em>(<em>s</em>) 或状态-动作对的价值 Q(s,a)<em>Q</em>(<em>s</em>,<em>a</em>)。最常见的训练方法是使用<strong>均方误差（Mean Squared Error, MSE）损失</strong></p><p>价值函数 V<strong>ϕ*(*s</strong>t*) 的目标是准确估计<strong>未来累积折扣奖励</strong>。因此，训练它的方法就是让它的预测值 <em>V**ϕ</em>(<em>s**t</em>) 尽可能接近“真实”的累积折扣奖励 R_t。</p><p>价值损失采用的是MSE损失，最小化如下目标函数： </p><p>$$ \mathcal{L}<em>{\text{critic}}(\phi) &#x3D; \mathbb{E}</em>{t}\left[\left(V_\phi(s_t) - R_t\right)^2\right] $$ </p><p>其中$V_\phi(s_t)$为价值模型预测出来的回报，$R_t$为实际得到的回报。</p><p>$R_t$ 是理论标签值，需要计算出来</p><p>如果使用时序差分目标，则 </p><p>$$ R_t &#x3D; r_t + \gamma V_\phi(s_{t+1}) $$ </p><p>如果使用GAE目标，则 $$ R_t &#x3D; \hat{A}^{\text{GAE}}_t + V’_\phi(s_t) $$ </p><h3 id="RLHF">1.3.3. RLHF</h3><h4 id="构建奖励模型">1.3.3.1. 构建奖励模型</h4><ol><li><p>收集偏好数据，对模型回答的多个数据，评估排序，不是打分</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121011621.png" alt="image-20250530121011621"></p></li><li><p>损失函数，max(做好回答- 最差回答)</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121104796.png" alt="image-20250530121104796"></p></li><li><p>只获取最后一个token的评估</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121333003.png" alt="image-20250530121333003"></p></li><li><p>使用KL散度，避免与模型的差距较大</p></li><li><p>使用PPO函数，计算历史和未来的奖励</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121812769.png" alt="image-20250530121812769"></p></li></ol><h4 id="总体流程">1.3.3.2. 总体流程</h4><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121856320.png" alt="image-20250530121856320"></p><p><strong>RLHF实开源链接</strong>：</p><ol><li><code>https://github.com/huggingface/trl</code></li><li><code>https://github.com/OpenRLHF/OpenRLHF</code></li><li><code>https://github.com/hiyouga/LLaMA-Factory</code></li><li><code>https://github.com/WangRongsheng/awesome-LLM-resourses</code></li></ol><h3 id="RLAIF">1.3.4. RLAIF</h3><p>模型选择结果，替换人类标记，同时需要使用双重判断</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530170449430.png" alt="image-20250530170449430"></p><ol><li>D-RLAIF，模型直接打分，不再训练</li><li>常规RLAIF，先训练奖励模型</li></ol><h3 id="DPO算法-direct-perference-option">1.3.5. DPO算法(direct perference option)</h3><p>由偏好学习的数据，直接用于模型的训练</p><p>目标：</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530171548497.png" alt="image-20250530171548497"></p><p>损失函数：</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530171648715.png" alt="image-20250530171648715"></p><h3 id="SPLN（self-play">1.3.6. SPLN（self play)</h3><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173051126.png" alt="image-20250530173051126"></p><h4 id="main-play">1.3.6.1. main play</h4><p>区分某个回答是人类的回答</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173622192.png" alt="最大化人类回答与机器回答的区别"></p><h4 id="opponent-play">1.3.6.2. opponent play</h4><p>不需要区分人类回答和LLM回答</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173750170.png" alt="image-20250530173750170"></p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173801712.png" alt="image-20250530173801712"></p><p>得到优化目标</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173906352.png" alt="image-20250530173906352"></p><p>最大化生成与真实标注的信息与自己生成信息的差距</p><h3 id="self-rewarding">1.3.7. self-rewarding</h3><p>模型给自己提供奖励，在优化回复的功能是，优化模型指令遵循与打分的能力</p><ol><li>初始模型，具有基础能力</li><li>种子数据集，少量数据集，<ol><li>指令微调，只有回答</li><li>评估微调，回答排序</li></ol></li></ol><p>模型使用种子数据集，生成新的prompt，模型自己打分，取最高分与最低分，加入数据集，用于DPO训练。</p><p>不断迭代</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530175457392.png" alt="image-20250530175457392"></p><h2 id="微调">1.4. 微调</h2><ol><li><p>增加参数微调</p><ol><li>软提示微调： 在embeding之前怎么增加soft prompt，训练优化增加的soft prompt ，模型的参数固定<ol><li>且不同的任务可以使用不同的soft prompt</li></ol></li><li>适配器微调： 在模型前后增加一个层</li></ol></li><li><p>选择性微调</p><ol><li>学习优化哪些参数，优化任务结果，使用正则化，惩罚修改较多的参数<img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530182117984.png" alt="image-20250530182117984"></li><li>指定修改部分参数</li></ol></li><li><p>重参数微调，调整子空间参数</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530182340311.png" alt="image-20250530182340311"></p><ol><li><p>Low-Rank Adaption(LoRA)，优化两个低秩矩阵，与原矩阵组合</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530182623192.png" alt="image-20250530182623192"></p></li><li><p>学习模型的缩放因子</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530183050936.png" alt="image-20250530183050936"></p></li></ol></li></ol><h2 id="知识蒸馏">1.5. 知识蒸馏</h2><p>教师模型将知识提取出来，学生模型学习其中内容</p><h3 id="基于特征的知识">1.5.1. 基于特征的知识</h3><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250523201806237.png" alt="image-20250523201806237"></p><h4 id="多个教师教学">1.5.1.1. 多个教师教学</h4><h3 id="基于关系的知识">1.5.2. 基于关系的知识</h3><h2 id="模型剪枝">1.6. 模型剪枝</h2><p>删除权重小于一定阈值的连接或神经元节点，获得更加稀疏的矩阵</p><h3 id="结构化剪枝">1.6.1. 结构化剪枝</h3><p>参数从起点到重点，图中有相连，则保留</p><h1 id="简短">2. 简短</h1><h2 id="预训练-1">2.1. 预训练</h2><h3 id="词表化">2.1.1. 词表化</h3><h4 id="BBPE-byte-level-BPE">2.1.1.1. BBPE(byte-level BPE)</h4><p>单词量过大时，每一个单词一个token使用，词表空间较大</p><p>单词使用字节标识，采用unicode 编码作为最小颗粒度，将单词切割为字节token</p><p>例如，对于不存在的字节“待”，使用3个字节标识(中文在unicode编码中使用三个字节表示)</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-4cd433a354233d03bc2aad15745a7285_1440w.jpg" alt="img"></p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-66a59222fb083b240eac861eb026c73c_r.jpg" alt="img"></p><h3 id="模型预训练">2.1.2. 模型预训练</h3><p>采用无监督学习，学习输入文本的特征，学习语言语法</p><p>输入一堆文本，让模型做 Next Token Prediction 的任务，学习基础语法，初步学习。</p><p>类似与transfomer论文中的对语言的输入学习输出。</p><h2 id="指令微调-1">2.2. 指令微调</h2><p>GPT-3只能完成续写任务,InstructGPT可以根据指令回答问题</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-a7a8e7aed0750d189f792b19e8272dfe_r.jpg" alt="img"></p><h3 id="监督学习">2.2.1. 监督学习</h3><p>给出指令问题，并给出答案，监督模型学习</p><ol><li><p>指令: 在面试中如何回答这个问题？</p><ol><li>输入:当你在车里独处时，你会想些什么？</li><li>输出:如果是在晚上，我通常会考虑我今天所取得的进步，如果是在早上，我会思考如何做到最好。我也会尝试练习感恩和活在当下的状态，以避免分心驾驶。</li></ol></li><li><p>指令: 按人口对这些国家进行排名。</p><ol><li>输入:巴西，中国，美国，日本，加拿大，澳大利亚</li><li>输出:中国，美国，巴西，日本，加拿大，澳大利亚</li></ol></li></ol><p>模型学习指令回答方式，准确的响应问题</p><h2 id="奖励模型">2.3. 奖励模型</h2><p>之前，模型只是简单学习了语言学习的内容，但是并不知到语言中是否正确，或者错误，这将导致预训练模型中原先「错误」或「有害」的知识没能在 SFT 数据中被纠正。</p><h3 id="利用偏序对训练奖励模型">2.3.1. 利用偏序对训练奖励模型</h3><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-29f8de16d921303fc6ee5c338fc68800_1440w.jpg" alt="img"></p><p>偏序对是指：不直接为每一个样本直接打分，而是标注这些样本的好坏顺序，标准A比B好多少，而不是具体的分数。</p><blockquote><p>直接打分：A句子（5分），B句子（3分）<br>偏序对标注：A &gt; B</p></blockquote><p>模型通过尝试最大化「好句子得分和坏句子得分之间的分差」，从而学会自动给每一个句子判分。</p><h2 id="强化学习（Reinforcement-Learning，PPO）">2.4. 强化学习（Reinforcement Learning，PPO）</h2><p>进行Reward model之后，需要使用RM进化模型</p><p>1. </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编码器 - 解码器</title>
      <link href="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/"/>
      <url>/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="编码器-解码器">1. 编码器 - 解码器</h1><h2 id="基本框架">1.1. 基本框架</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Encoder</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Encoder<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError  <span class="token comment" spellcheck="true"># 占位符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Decoder</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Decoder<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">init_state</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> enc_outputs<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError  <span class="token comment" spellcheck="true"># 占位符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">EncoderDecoder</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""编码器-解码器架构的基类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> encoder<span class="token punctuation">,</span> decoder<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>EncoderDecoder<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>encoder <span class="token operator">=</span> encoder        self<span class="token punctuation">.</span>decoder <span class="token operator">=</span> decoder    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> enc_X<span class="token punctuation">,</span> dec_X<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        enc_outputs <span class="token operator">=</span> self<span class="token punctuation">.</span>encoder<span class="token punctuation">(</span>enc_X<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 编码器的输出最为解码器输入的一部分</span>        dec_state <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">.</span>init_state<span class="token punctuation">(</span>enc_outputs<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span>dec_X<span class="token punctuation">,</span> dec_state<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="seq2seq">1.2. seq2seq</h2><p><img src="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/image-20250424214252355.png" alt="image-20250424214252355"></p><h3 id="编码器">1.2.1. 编码器</h3><ol><li>将序列(时间步)的数字转换为张量</li><li>通过rnn输出上下文变量C，隐状态</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Seq2SeqEncoder</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Encoder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> vocab_size<span class="token punctuation">,</span> embed_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> dropout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Seq2SeqEncoder<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>           <span class="token triple-quoted-string string">'''编码层           将数字编码为为向量           输入(batch_size, feature) 输出(batch_size, feature, embed_size)           '''</span>        self<span class="token punctuation">.</span>embeding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span> embed_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>gru<span class="token punctuation">(</span>embed_size<span class="token punctuation">,</span> nn_hiddens<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> dropout <span class="token operator">=</span> dropout<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 输出'X'的形状：(batch_size,num_steps,embed_size)</span>        X <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 在循环神经网络模型中，第一个轴对应于时间步</span>        X <span class="token operator">=</span> X<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 如果未提及状态，则默认为0</span>        output<span class="token punctuation">,</span> state <span class="token operator">=</span> self<span class="token punctuation">.</span>rnn<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># output的形状:(num_steps,batch_size,num_hiddens)</span>        <span class="token comment" spellcheck="true"># state的形状:(num_layers,batch_size,num_hiddens)</span>        <span class="token keyword">return</span> output<span class="token punctuation">,</span> state<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解码器">1.2.2. 解码器</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Seq2SeqDecoder</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Decoder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> vocab_size<span class="token punctuation">,</span> embed_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span>                 dropout<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Seq2SeqDecoder<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span> embed_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rnn <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>embed_size <span class="token operator">+</span> num_hiddens<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span>                          dropout<span class="token operator">=</span>dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dense <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_hiddens<span class="token punctuation">,</span> vocab_size<span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">init_state</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> enc_outputs<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 用隐状态来初始化上下文变量</span>        <span class="token keyword">return</span> enc_outputs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>        X <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># state[-1] 的维度为(layer_num , batch_size, num_hiddens)</span>        context <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 在feature上增加了元素C</span>        X_and_c <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>X<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        output<span class="token punctuation">,</span> state <span class="token operator">=</span> self<span class="token punctuation">.</span>rnn<span class="token punctuation">(</span>X_and_context<span class="token punctuation">,</span> state<span class="token punctuation">)</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>dense<span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> output <span class="token punctuation">,</span> state        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练过程">1.2.3. 训练过程</h3><p>不同点：</p><ol><li>定义使用MarkedSoftmaxCELoss 损失函数</li><li>塑造解码器输入，原序列前增加bos, 删除eos</li></ol><p>相同点：</p><ol><li>apply(init(m)), optimizer , loss,  net.train()</li><li>分epoch, 分批量，optimizer.zero_gred(),  net(x) , l &#x3D; loss(y_hat, Y), l.backward(),  grad_clipping(net, theta), optimizer.step()</li></ol><h3 id="预测过程">1.2.4. 预测过程</h3><ol><li><p>net.eval()</p></li><li><p>准备序列数据</p></li><li><p>对src编码，得到dec_state&#x3D;context</p></li><li><p>传入一个<bos>数据</bos></p></li><li><p>dec_X 的维度为(1, 1)</p><p>​    Y 的维度为(1, 1, embed_size)</p><p>​    每一次更新dec_X, 更新了decodor的隐藏状态</p></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">predict_seq2seq</span><span class="token punctuation">(</span>net<span class="token punctuation">,</span> src_sentence<span class="token punctuation">,</span> src_vocab<span class="token punctuation">,</span> tgt_vocab<span class="token punctuation">,</span> num_steps<span class="token punctuation">,</span>                   device<span class="token punctuation">,</span> save_attention_weights<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token triple-quoted-string string">"""序列到序列模型的预测"""</span>   <span class="token comment" spellcheck="true"># 在预测时将net设置为评估模式</span>   net<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token triple-quoted-string string">'''   准备序列数据   '''</span>   src_tokens <span class="token operator">=</span> src_vocab<span class="token punctuation">[</span>src_sentence<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>       src_vocab<span class="token punctuation">[</span><span class="token string">'&amp;lt;eos&amp;gt;'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>   enc_valid_len <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>src_tokens<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span>   src_tokens <span class="token operator">=</span> d2l<span class="token punctuation">.</span>truncate_pad<span class="token punctuation">(</span>src_tokens<span class="token punctuation">,</span> num_steps<span class="token punctuation">,</span> src_vocab<span class="token punctuation">[</span><span class="token string">'&amp;lt;pad&amp;gt;'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 添加批量轴</span>   enc_X <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>       torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>src_tokens<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>long<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token triple-quoted-string string">'''   对src编码，得到dec_state=context   '''</span>   enc_outputs <span class="token operator">=</span> net<span class="token punctuation">.</span>encoder<span class="token punctuation">(</span>enc_X<span class="token punctuation">,</span> enc_valid_len<span class="token punctuation">)</span>   dec_state <span class="token operator">=</span> net<span class="token punctuation">.</span>decoder<span class="token punctuation">.</span>init_state<span class="token punctuation">(</span>enc_outputs<span class="token punctuation">,</span> enc_valid_len<span class="token punctuation">)</span>   <span class="token triple-quoted-string string">'''    传入一个&amp;lt;bos&amp;gt;数据   '''</span>   dec_X <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>       <span class="token punctuation">[</span>tgt_vocab<span class="token punctuation">[</span><span class="token string">'&amp;lt;bos&amp;gt;'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>long<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>   output_seq<span class="token punctuation">,</span> attention_weight_seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_steps<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token triple-quoted-string string">'''        dec_X 的维度为(1, 1), 每一次传入上一个时间步中预测出的值       Y 的维度为(1, 1, embed_size)       每一次更新dec_X, 更新了decodor的隐藏状态       '''</span>       Y<span class="token punctuation">,</span> dec_state <span class="token operator">=</span> net<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span>dec_X<span class="token punctuation">,</span> dec_state<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 我们使用具有预测最高可能性的词元，作为解码器在下一时间步的输入</span>       dec_X <span class="token operator">=</span> Y<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>       pred <span class="token operator">=</span> dec_X<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>type<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>int32<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 保存注意力权重（稍后讨论）</span>       <span class="token keyword">if</span> save_attention_weights<span class="token punctuation">:</span>           attention_weight_seq<span class="token punctuation">.</span>append<span class="token punctuation">(</span>net<span class="token punctuation">.</span>decoder<span class="token punctuation">.</span>attention_weights<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 一旦序列结束词元被预测，输出序列的生成就完成了</span>       <span class="token keyword">if</span> pred <span class="token operator">==</span> tgt_vocab<span class="token punctuation">[</span><span class="token string">'&amp;lt;eos&amp;gt;'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>           <span class="token keyword">break</span>       output_seq<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pred<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tgt_vocab<span class="token punctuation">.</span>to_tokens<span class="token punctuation">(</span>output_seq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> attention_weight_seq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <strong>这里可以优化使用束搜索</strong></p><h3 id="损失函数">1.2.5. 损失函数</h3><ol><li><p>计算pred与label的Loss</p></li><li><p>计算序列的掩码</p></li><li><p>将loss与序列掩码相乘</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MaskedSoftmaxCELoss</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""带遮蔽的softmax交叉熵损失函数"""</span>    <span class="token comment" spellcheck="true"># pred的形状：(batch_size,num_steps,vocab_size)</span>    <span class="token comment" spellcheck="true"># label的形状：(batch_size,num_steps)</span>    <span class="token comment" spellcheck="true"># valid_len的形状：(batch_size,)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pred<span class="token punctuation">,</span> label<span class="token punctuation">,</span> valid_len<span class="token punctuation">)</span><span class="token punctuation">:</span>        weights <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>label<span class="token punctuation">)</span>        weights <span class="token operator">=</span> sequence_mask<span class="token punctuation">(</span>weights<span class="token punctuation">,</span> valid_len<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 掩码</span>        self<span class="token punctuation">.</span>reduction<span class="token operator">=</span><span class="token string">'none'</span>        unweighted_loss <span class="token operator">=</span> super<span class="token punctuation">(</span>MaskedSoftmaxCELoss<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>forward<span class="token punctuation">(</span>            pred<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">)</span>        weighted_loss <span class="token operator">=</span> <span class="token punctuation">(</span>unweighted_loss <span class="token operator">*</span> weights<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> weighted_loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="掩码">1.2.5.1. 掩码</h4><ol><li>生成序列掩码，可以使用arrange&lt; valid_len获取</li><li>将所有掩码位置 置为0</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sequence_mask</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> valid_len<span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""在序列中屏蔽不相关的项"""</span>    maxlen <span class="token operator">=</span> X<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 生成掩码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token punctuation">(</span>maxlen<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">,</span>                        device<span class="token operator">=</span>X<span class="token punctuation">.</span>device<span class="token punctuation">)</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>valid_len<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>None<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''    (none,:)是在dim = 0上创建一个=1 的维度    广播机制后mask = (batch_size, time_stem)    '''</span>    mask <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token punctuation">(</span>maxlen<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">,</span>                        device<span class="token operator">=</span>X<span class="token punctuation">.</span>device<span class="token punctuation">)</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> valid_len<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> None<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span>    X<span class="token punctuation">[</span><span class="token operator">~</span>mask<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">return</span> X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="预测序列评估">1.2.5.2. 预测序列评估</h4><p>我们将BLEU定义为：<br>$$<br>\exp\left(\min\left(0, 1 - \frac{\mathrm{len}<em>{\text{label}}}{\mathrm{len}</em>{\text{pred}}}\right)\right) \prod_{n&#x3D;1}^k p_n^{1&#x2F;2^n},<br>$$</p><h1 id="注意力机制">2. 注意力机制</h1><p>查询值query, 键值对（key, value)，每一个key 对应一个query</p><p>注意力权重计算的是query对key的关注程度，attention(query_num , key_num)，每一行是当前查询对所有键的注意力，然后与query计算，得到每一个查询对query的注意力结果<br>$$<br>attention_weight &#x3D; \alpha(query, key)\<br>f(x) &#x3D; attention_weight * query<br>$$</p><h2 id="常见机制">2.1. 常见机制</h2><h3 id="掩蔽注意力机制操作">2.1.1. 掩蔽注意力机制操作</h3><p>对键值中不需要的部分掩蔽为0，具体操作是</p><ol><li>将atterntion_weight(batch, query, key) 中的key维度数据通过掩码，转换为较小数</li><li>使用softMax，较小数转换为0，key对应此处的权重就是0了</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">masked_softmax</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> valid_len<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    X：attention_weigth = (batch_size, query , key)    valid_len 不同批次掩蔽的长度，=（batch_size) 或 (batch_size, key)    '''</span>    <span class="token keyword">if</span> valid_lens <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> nn<span class="token punctuation">.</span>functional<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>X<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        shape <span class="token operator">=</span> X<span class="token punctuation">.</span>shape        <span class="token keyword">if</span> valid_lens<span class="token punctuation">.</span>dim<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            valid_lens <span class="token operator">=</span> torch<span class="token punctuation">.</span>repeat_interleave<span class="token punctuation">(</span>valid_len<span class="token punctuation">,</span> shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            valid_lens <span class="token operator">=</span> valid_lens<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token triple-quoted-string string">'''        sequence_mash: 将param1中的第1维度按照 valid_lens的长度掩蔽，大于的掩蔽为values        '''</span>        X <span class="token operator">=</span> sequence_mask<span class="token punctuation">(</span>X<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> valid_lens<span class="token punctuation">,</span>values<span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1e6</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> nn<span class="token punctuation">.</span>functional<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span>shape<span class="token punctuation">]</span><span class="token punctuation">,</span> dim <span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对掩蔽维度归一化</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加性注意力">2.1.2. 加性注意力</h3><p>键，查询有时是矢量<strong>（不同长度）</strong>转换为相同长度的矢量<br>$$<br>a(\mathbf q, \mathbf k) &#x3D; \mathbf w_v^\top \text{tanh}(\mathbf W_q\mathbf q + \mathbf W_k \mathbf k) \in \mathbb{R}<br>$$</p><ol><li>线性层操作，query&#x3D;&gt;(batch ,query, hidden_num),key&#x3D;&gt;(batch ,key hidden_num)</li><li>得到注意力矩阵，query&#x3D;&gt;(batch ,query,1 hidden_num)，key&#x3D;&gt;(batch ,1，key hidden_num)， query+key &#x3D;&gt;query&#x3D;&gt;(batch ,query,key, hidden_num)</li><li>$W_t$ 是线性层(hidden_num, 1)， 移除最后一个维度，得到attention_weight &#x3D;(batch ,query,key,)</li><li>使用掩蔽注意力，对key上无用的权重屏蔽</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AddictiveAttention</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key_size<span class="token punctuation">,</span> query_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span> dropout<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>AddictiveAttention<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>W_k<span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>key_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>W_q <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>query_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>W_v <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_hiddens<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dropout<span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>dropout<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>selk<span class="token punctuation">,</span> query<span class="token punctuation">,</span> key <span class="token punctuation">,</span>values<span class="token punctuation">,</span> valid_lens<span class="token punctuation">)</span><span class="token punctuation">:</span>        query<span class="token punctuation">,</span> key <span class="token operator">=</span> W_q<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">,</span> W_k<span class="token punctuation">(</span>key<span class="token punctuation">)</span>                attention <span class="token operator">=</span> query<span class="token punctuation">.</span>unsquence<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">.</span>unsquence<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        attention <span class="token operator">=</span> nn<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>attention<span class="token punctuation">)</span>        attention <span class="token operator">=</span> W_v<span class="token punctuation">(</span>attention<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>atterntion_weight <span class="token operator">=</span> masked_softmax<span class="token punctuation">(</span>attention<span class="token punctuation">,</span> valid_lens<span class="token punctuation">)</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>bmm<span class="token punctuation">(</span>self<span class="token punctuation">.</span>attention_weight<span class="token punctuation">,</span> values<span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="点积注意力">2.1.3. 点积注意力</h3><p>计算效率高，但是要求query, key具有相同的张量长度，权重函数：<br>$$<br>a(\mathbf q, \mathbf k) &#x3D; \mathbf{q}^\top \mathbf{k}  &#x2F;\sqrt{d}<br>$$</p><p>方差缩放，防止梯度消失</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DotProductAttention</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dropout<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>DotProductAttention<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>dropout<span class="token punctuation">)</span>           <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query<span class="token punctuation">,</span> key<span class="token punctuation">,</span>values<span class="token punctuation">,</span> valid_lens<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># attention(batch_size, query_size, key_size)</span>        attention <span class="token operator">=</span> torch<span class="token punctuation">.</span>bmm<span class="token punctuation">(</span>query<span class="token punctuation">,</span> key<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>d<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>attention_weight <span class="token operator">=</span> masked_softmax<span class="token punctuation">(</span>attention<span class="token punctuation">,</span> valid_len<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 输出(batch_size, query_size, feature_size)</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>bmm<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>attention_weight<span class="token punctuation">)</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多头注意力">2.1.4. 多头注意力</h3><p>使用多个结构一样，参数不一样的注意力去学习不同的知识</p><p><img src="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/image-20250516113430112.png" alt="image-20250516113430112"></p><p>将键值对分为多个子空间，每个注意力机制学习一个子空间的特征，得到H组的注意力权重，然后将注意力权重通过线性层汇聚</p><p><img src="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/image-20250425155705305.png" alt="image-20250425155705305"></p><p>常规思路：</p><ol><li>将query, key, values映射到子空间，使用不同的Linear映射</li><li>将不同头的注意力结果合并在一起，在feature维度上合并</li><li>再通过一个Linear线性层，连接所有head</li></ol><p>并行思路</p><ol><li>将query,key, values映射到完整空间，然后将完整空间查分成子空间，head与batch组成一个伪batch</li><li>再将子空间的数据通过点积注意力</li><li>将head从batch中分离出来，与feature合并，效果与非并行情况相同</li><li>最后通过线性层</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MultiHeadAttention</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key_size<span class="token punctuation">,</span> query_size<span class="token punctuation">,</span> value_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span> num_head<span class="token punctuation">,</span> dropout<span class="token punctuation">,</span> bias <span class="token operator">=</span> false<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>           self<span class="token punctuation">.</span>num_head <span class="token operator">=</span> head        self<span class="token punctuation">.</span>attention <span class="token operator">=</span> d2l<span class="token punctuation">.</span>DotProductAttention<span class="token punctuation">(</span>dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>W_k <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>key_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>W_q <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>query_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>W_v <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>value_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>W_o <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_hiddens<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 全连接层</span>            <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query <span class="token punctuation">,</span>key <span class="token punctuation">,</span>values<span class="token punctuation">,</span> valid_lens<span class="token punctuation">)</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true"># 转换为(batch_size* head, key/query , num_hidden/head)</span>        query <span class="token operator">=</span> transpose<span class="token punctuation">(</span>self<span class="token punctuation">.</span>W_q<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">,</span>  self<span class="token punctuation">.</span>head_num<span class="token punctuation">)</span>        keys <span class="token operator">=</span> transpose_qkv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>W_k<span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_heads<span class="token punctuation">)</span>        values <span class="token operator">=</span> transpose_qkv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>W_v<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_heads<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 将掩码扩展为batch*head</span>        <span class="token keyword">if</span> valid_len <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            valid_lens <span class="token operator">=</span> torch<span class="token punctuation">.</span>repeat_interleave<span class="token punctuation">(</span>                valid_lens<span class="token punctuation">,</span> repeats <span class="token operator">=</span> self<span class="token punctuation">.</span>num_heads <span class="token punctuation">,</span> dim <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>                    output <span class="token operator">=</span> self<span class="token punctuation">.</span>attention<span class="token punctuation">(</span>query<span class="token punctuation">,</span> key <span class="token punctuation">,</span>value<span class="token punctuation">,</span> valid_len<span class="token punctuation">)</span>                output_concat<span class="token operator">=</span>transpose_output<span class="token punctuation">(</span>output<span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_heads<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>W_o<span class="token punctuation">(</span>output_concat<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="附录">3. 附录</h1><h2 id="BLEU">3.1. BLEU</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bleu</span><span class="token punctuation">(</span>pred_seq<span class="token punctuation">,</span> label_seq<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#@save</span>    <span class="token triple-quoted-string string">"""计算BLEU"""</span>    pred_tokens<span class="token punctuation">,</span> label_tokens <span class="token operator">=</span> pred_seq<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label_seq<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    len_pred<span class="token punctuation">,</span> len_label <span class="token operator">=</span> len<span class="token punctuation">(</span>pred_tokens<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>label_tokens<span class="token punctuation">)</span>    score <span class="token operator">=</span> math<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>min<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> len_label <span class="token operator">/</span> len_pred<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num_matches<span class="token punctuation">,</span> label_subs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span>int<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len_label <span class="token operator">-</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            label_subs<span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>label_tokens<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len_pred <span class="token operator">-</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> label_subs<span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>pred_tokens<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">0</span><span class="token punctuation">:</span>                num_matches <span class="token operator">+=</span> <span class="token number">1</span>                label_subs<span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>pred_tokens<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>        score <span class="token operator">*=</span> math<span class="token punctuation">.</span>pow<span class="token punctuation">(</span>num_matches <span class="token operator">/</span> <span class="token punctuation">(</span>len_pred <span class="token operator">-</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研要求</title>
      <link href="/2025/05/24/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E8%A6%81%E6%B1%82/"/>
      <url>/2025/05/24/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E8%A6%81%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="c331f88fcb69f3b4522913272866db02626171bafe1f3ae0a5bd2965e2947b7b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 保研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 保研 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/05/24/java/web%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="web课程学习内容">1. web课程学习内容</h1><ol><li>mvc格式<ol><li>javabean周期</li><li>javabean 与mvc组成</li></ol></li><li>jsp中使用数据库<ol><li>mysql建立</li><li>JDBC连接，解决乱码</li><li>查询</li><li>用结果集操作数据库表</li><li>预处理语句</li></ol></li><li>jsp的文件操作<ol><li>FILE类</li><li>文件操作流</li><li>文件上床下载</li></ol></li><li>xml<ol><li>xml基本结构</li><li>dom 解析器</li><li>sax解析器</li><li>xml与css显示</li></ol></li><li>化妆品销售</li></ol><h1 id="web">2. web</h1><p><img src="C:/Users/34999/AppData/Roaming/Typora/typora-user-images/image-20250522212412585.png" alt="流程"></p><p><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250522212605681.png" alt="学习流程"></p><h2 id="html">2.1. html</h2><h3 id="标题">2.1.1. 标题</h3><p>h1</p><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>a href = "https://www.cctv.com" target="_self"<span class="token entity" title="&gt;">&amp;gt;</span> 央视网<span class="token entity" title="&lt;">&amp;lt;</span>/a<span class="token entity" title="&gt;">&amp;gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>span : 没有语义的标签</p><span style="color: gray;"> <h3 id="css引入">2.1.2. css引入</h3><ol><li>行内样式，写在标签的style属性中</li><li>内部样式：写在<style> 标签中</li><li>外部，<code>&lt;link rel= &quot;stylesheet&quot; href= &quot;style.css&quot;&gt;</code></li></ol><p><span style="color: gray;"> today </span> </p><style>     span{        color: red;    }</style> <h4 id="颜色">2.1.2.1. 颜色</h4><table><thead><tr><th>种类</th><th>使用方法</th></tr></thead><tbody><tr><td>关键字</td><td>red</td></tr><tr><td>rgb</td><td>rag(red ,green ,blue)</td></tr><tr><td>rgba</td><td>rgba(red, green, blue ,透明度)</td></tr><tr><td>十六进制</td><td>#</td></tr></tbody></table><h4 id="css选择器">2.1.2.2. css选择器</h4><table><thead><tr><th align="left">选择器类型</th><th align="left">写法（语法）</th><th align="left">示例</th><th align="left">示例说明</th></tr></thead><tbody><tr><td align="left"><strong>元素选择器</strong></td><td align="left"><code>元素名称 &#123; ... &#125;</code></td><td align="left"><code>h1 &#123; ... &#125;</code></td><td align="left">选择页面上所有的 <code>&lt;h1&gt;</code> 标签</td></tr><tr><td align="left"><strong>类选择器</strong></td><td align="left"><code>.class属性值 &#123; ... &#125;</code></td><td align="left"><code>.cls &#123; ... &#125;</code></td><td align="left">选择页面上所有 <code>class</code> 属性为 <code>cls</code> 的标签</td></tr><tr><td align="left"><strong>ID 选择器</strong></td><td align="left"><code>#id属性值 &#123; ... &#125;</code></td><td align="left"><code>#hid &#123; ... &#125;</code></td><td align="left">选择页面上 <code>id</code> 属性为 <code>hid</code> 的标签</td></tr><tr><td align="left"><strong>分组选择器</strong></td><td align="left"><code>选择器1, 选择器2 &#123; ... &#125;</code></td><td align="left"><code>h1, h2 &#123; ... &#125;</code></td><td align="left">选择页面上所有的 <code>&lt;h1&gt;</code> 和 <code>&lt;h2&gt;</code> 标签</td></tr><tr><td align="left"><strong>属性选择器</strong></td><td align="left"><code>元素名称[属性] &#123; ... &#125;</code></td><td align="left"><code>input[type] &#123; ... &#125;</code></td><td align="left">选择页面上所有有 <code>type</code> 属性的 <code>&lt;input&gt;</code> 标签</td></tr><tr><td align="left"></td><td align="left"><code>元素名称[属性名=&quot;值&quot;] &#123; ... &#125;</code></td><td align="left"><code>input[type=&quot;text&quot;] &#123; ... &#125;</code></td><td align="left">选择页面上 <code>type</code> 属性为 <code>text</code> 的 <code>&lt;input&gt;</code> 标签</td></tr><tr><td align="left"><strong>后代选择器</strong></td><td align="left"><code>元素1 元素2 &#123; ... &#125;</code> （注意有空格）</td><td align="left"><code>form input &#123; ... &#125;</code></td><td align="left">选择 <code>&lt;form&gt;</code> 标签内的所有 <code>&lt;input&gt;</code> 标签</td></tr></tbody></table><h3 id="video">2.1.3. video</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>video src = "video/mp4" controls width ="800px"<span class="token entity" title="&gt;">&amp;gt;</span> <span class="token entity" title="&lt;">&amp;lt;</span>/video<span class="token entity" title="&gt;">&amp;gt;</span>width = 80% 长度占父类框架的占比<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>音频</p><pre><code>&lt;audio src=“ ” controls&gt;&lt;/audio&gt;</code></pre><h4 id="段落">2.1.3.1. 段落</h4><p>hello </p><p></p><h4 id="加粗">2.1.3.2. 加粗</h4><p><b> hello </b></p><p><strong> hello </strong></p><p><u> &#x2F; <ins> 下划线</ins></u></p><p><i> &#x2F; <em> 倾斜</em></i></p><p><s> &#x2F; <del> 删除线</del></s></p><h4 id="特殊符号">2.1.3.3. 特殊符号</h4><table><thead><tr><th>&nbsp;</th><th>空格</th></tr></thead><tbody><tr><td>&lt;</td><td>&lt;</td></tr><tr><td>&gt;</td><td>&gt;</td></tr></tbody></table><h3 id="盒子模型">2.1.4. 盒子模型</h3><p><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250524155210755.png" alt="image-20250524155210755"></p><table><thead><tr><th>div</th><th>span</th></tr></thead><tbody><tr><td>一行显示一个</td><td>一行显示多个</td></tr><tr><td>宽度默认为父元素的宽度</td><td></td></tr><tr><td>可以设置height, weigth</td><td></td></tr></tbody></table><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 定义的内容展示区域的宽度 */</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">20</span>px <span class="token number">20</span>px <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">20</span>px <span class="token number">20</span>px <span class="token number">20</span>px <span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">20</span>px solid <span class="token hexcode">#100000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*宽度 边框 颜色*/</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* content-box 内容盒子； bordor-box 边框盒子        /* 当前的盒子居中显示 */</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px auto<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对齐方式">2.1.4.1. 对齐方式</h4><p>弹性布局flex</p><table><thead><tr><th>属性</th><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>display</td><td>flex</td><td></td></tr><tr><td>flex-direction</td><td>row x<br><br>column y轴</td><td></td></tr><tr><td>justify-content</td><td>1. flex-start 从头开始<br>flex-end<br>center<br>space-around    均分<br> space-between  两边贴边</td><td></td></tr></tbody></table><h3 id="表格">2.1.5. 表格</h3><table><thead><tr><th>&lt;table</th><th>整个表格</th><th>border: 边框宽度<br>width: 表格的宽度<br><br>cellspacing: 单元之间的空间</th></tr></thead><tbody><tr><td>&lt;tr</td><td>表格的行</td><td></td></tr><tr><td>&lt;td&#x2F;th</td><td>表格的列</td><td>&lt;th是表头，&lt;td 是普通表格</td></tr></tbody></table><h3 id="表单">2.1.6. 表单</h3><p>提升与表格的交互，并在input前增加标识</p><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>label for="username"<span class="token entity" title="&gt;">&amp;gt;</span>用户名:<span class="token entity" title="&lt;">&amp;lt;</span>/label<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>input type="text" id="username" name="username" placeholder="请输入用户名"<span class="token entity" title="&gt;">&amp;gt;</span> <span class="token entity" title="&lt;">&amp;lt;</span>label<span class="token entity" title="&gt;">&amp;gt;</span>    用户名:    <span class="token entity" title="&lt;">&amp;lt;</span>input type="text" name="username" placeholder="请输入用户名"<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/label<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>input<ol><li>text</li><li>password</li><li>radio 单选按钮，相当与select option</li><li>checkbox</li></ol></li><li>select</li><li>textarea, 更大的文本框输入</li></ol><h2 id="javascript">2.2. javascript</h2><p>js代码最后放置在body的末尾</p><p>结尾的;可有可无</p><ol><li><p>内部脚本</p><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>script<span class="token entity" title="&gt;">&amp;gt;</span>    alert("hello world!");<span class="token entity" title="&lt;">&amp;lt;</span>/script<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>外部脚本</p><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>script src = "/.js"<span class="token entity" title="&gt;">&amp;gt;</span> <span class="token entity" title="&lt;">&amp;lt;</span>/script<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>在<body> 内外，都可以被执行</body></p><h3 id="定义变量">2.2.1. 定义变量</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义变量</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//声明常量</span><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">;</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回a的类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入内容</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 弹窗</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//控制台</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Body标签中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="拼接字符串">2.2.1.1. 拼接字符串</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">let</span> b<span class="token operator">=</span> <span class="token string">'tom'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello my name is'</span><span class="token operator">+</span>b<span class="token operator">+</span> <span class="token string">'year is'</span><span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用'+字符串拼接</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`hello my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> yeas is</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用` ${}模板字符串输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数function">2.2.2. 函数function</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 匿名函数</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象">2.2.3. 对象</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    sing<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span> <span class="token string">'刚满十八岁'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//简化为</span>    <span class="token function">sing</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="json">2.2.3.1. json</h4><p>JavaScript 对象标记法（使用js对象语法书写的文本）</p><p>不同的是，所有的变量名使用<code>“”</code>引起</p><table><thead><tr><th>JSON.stringify()</th><th>js对象-&gt; json 变量的字符串</th></tr></thead><tbody><tr><td>JSON.parse()</td><td>json -&gt; 没有字符串的变量</td></tr></tbody></table><h3 id="DOM">2.2.4. DOM</h3><p>文档对象模型： 将标记语言的各个组成部分封装为对应的对象；</p><table><thead><tr><th>Document</th><th>整个文档</th></tr></thead><tbody><tr><td>Element</td><td>元素对象</td></tr><tr><td>Attribute</td><td>属性对象</td></tr><tr><td>Text</td><td>文本内容的对象</td></tr><tr><td>Comment</td><td>注释形成的对象</td></tr></tbody></table><p><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250525161235954.png" alt="image-20250525161235954"></p><h4 id="获取对象">2.2.4.1. 获取对象</h4><p>选择器对应css中的选择器<a href="#css%E9%80%89%E6%8B%A9%E5%99%A8">css选择器</a> </p><pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取匹配到的第一个元素</span>document<span class="token punctuation">.</span><span class="token function">querySelectorALL</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取所有匹配到的元素</span><span class="token comment" spellcheck="true">//得到的是一个节点集合，有长度，有索引</span><span class="token keyword">let</span> hs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>#title<span class="token punctuation">)</span><span class="token punctuation">;</span>hs<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'修改后的内容'</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// innerHTML代表文本内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间监听">2.2.5. 时间监听</h3><p>语法： 事件源.addEvenListener(‘事件类型’, 事件触发执行的函数);</p><ul><li>事件源：document中对象</li><li>事件类型： 点击click</li><li>事件处理的函数：要做什么事</li></ul><h4 id="事件类型">2.2.5.1. 事件类型</h4><table><thead><tr><th>鼠标</th><th>click</th></tr></thead><tbody><tr><td></td><td>mouseenter</td></tr><tr><td></td><td>mouseleave</td></tr><tr><td>键盘</td><td>keydown 按键触发</td></tr><tr><td></td><td>keyup 按键抬起</td></tr><tr><td>焦点</td><td>focus 进入输入框</td></tr><tr><td></td><td>blur 离开输入框</td></tr><tr><td>表单事件</td><td>input 输入时触发</td></tr><tr><td></td><td>submit 提交时触发</td></tr></tbody></table><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">import</span> <span class="token punctuation">{</span>func1<span class="token punctuation">,</span> func2<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./utils.js"</span> <span class="token comment" spellcheck="true">// js导入函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>utils.js中的内容</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> functtion <span class="token function">printLog</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用export标记</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html导入时候，需表明类型是模块化的js</p><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>script src="./js/1.js" type="module"<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/script<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="vue">2.3. vue</h2><p>Vue是一款构建用户界面的渐进式的JavaScript框架</p><p>构建用户界面：针对数据构建</p><p>渐进式：可以只使用一部分</p><p><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250525174822695.png" alt="image-20250525174822695"></p><ol><li>准备<ol><li>引入Vue模块 </li><li>创建Vue程序的应用示例，控制视图的元素</li><li>准备元素，被Vue控制</li></ol></li><li>数据驱动<ol><li>准备数据</li><li>通过差值表达式渲染界面</li></ol></li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>div id="app"<span class="token entity" title="&gt;">&amp;gt;</span>    <span class="token entity" title="&lt;">&amp;lt;</span>h1<span class="token entity" title="&gt;">&amp;gt;</span>        {{message}}    <span class="token entity" title="&lt;">&amp;lt;</span>/h1<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/div<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>script type="module"<span class="token entity" title="&gt;">&amp;gt;</span>    import{ creatApp } from "https://unpkg.com/vue@3/dist/vue.esm-browser.js";    createApp({        data(){            return{                message: "hello vue";            }        }    }).mount("#app");// 使用mount接管app<span class="token entity" title="&lt;">&amp;lt;</span>/script<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vue指令">2.3.1. vue指令</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>p v-xxx= ""<span class="token entity" title="&gt;">&amp;gt;</span> ...<span class="token entity" title="&lt;">&amp;lt;</span>/p<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="v-for遍历">2.3.1.1. v-for遍历</h4><p>key的值避免复用</p><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>tr v-for="(item, index) in items" : key ="item.id"<span class="token entity" title="&gt;">&amp;gt;</span> {{item}}<span class="token entity" title="&lt;">&amp;lt;</span>/tr<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>v-bind</strong>：动态为html绑定属性值，src, style,alt</p><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>td<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>img class= "avatar", v-bind:src="{{item.src}}" :alt ="{{item.alt}}"<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>/td<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>!-- vlind:属性，然后对应v-for中的内容// : 简写形式 --<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>v-if&#x2F;v-show</strong>:控制元素的显示&#x2F;隐藏</p><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>!--    v-if：根据条件判断结果，判断结果输出/隐藏，不一定创建        不频繁使用        紧跟v-else-if, v-else    v-show: 根据条件结果，调用css 中display格式，分别用来显示和隐藏，会创建        频繁使用    “”之间的结果判断--<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>span v-show="e.job==1"<span class="token entity" title="&gt;">&amp;gt;</span> 帮助人<span class="token entity" title="&lt;">&amp;lt;</span>/span<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>v-model</strong>: 双向绑定元素与vue data，绑定输入的内容</p><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>input type="text" id="name" v-model="searchForm.name"<span class="token entity" title="&gt;">&amp;gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>v-on</strong>： 为html绑定事件</p><p>引号中绑定的是函数动作，可以简化为@click</p><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>button type="button" v-on:click="handle"<span class="token entity" title="&gt;">&amp;gt;</span>    点击<span class="token entity" title="&lt;">&amp;lt;</span>/button<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在vue中定义方法</p><pre class="line-numbers language-vue"><code class="language-vue">const app = createApp({    data(){        return{        }    },    method:{        handle(){        }    }}).mount("#app")// 使用时需要将button的类型设置为button<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="致谢">3. 致谢</h1><p><a href="https://www.bilibili.com/video/BV1yGydYEE3H?spm_id_from=333.788.videopod.episodes&vd_source=8f246175d50731783a1ab3dafac1f6ab&p=2">02.Web前端开发初识_哔哩哔哩_bilibili</a></p><p></p></li></ol></span>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>transformer</title>
      <link href="/2025/05/24/deeplearn/Transformer/"/>
      <url>/2025/05/24/deeplearn/Transformer/</url>
      
        <content type="html"><![CDATA[<h1 id="Transformer">1. Transformer</h1><h2 id="模型基本框架">1.1. 模型基本框架</h2><p><img src="/2025/05/24/deeplearn/Transformer/image-20250425173522602.png" alt="image-20250425173522602"></p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516114212148.png" alt="image-20250516114212148"></p><h2 id="编码器">1.2. 编码器</h2><ol><li>通过嵌入层</li><li>对位置进行编码</li><li>经过编码器层<ol><li>注意力层：<ol><li>注意力机制</li><li>残差+ 规范化层</li></ol></li><li>前馈网络<ol><li>前馈网络</li><li>残差+ 规范化层</li></ol></li></ol></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TransformerEncoder</span><span class="token punctuation">(</span>d2l<span class="token punctuation">.</span>Encoder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> vocab_size<span class="token punctuation">,</span> key_size<span class="token punctuation">,</span> query_size<span class="token punctuation">,</span> value_size<span class="token punctuation">,</span>                 num_hiddens<span class="token punctuation">,</span> norm_shape<span class="token punctuation">,</span> ffn_num_input<span class="token punctuation">,</span> ffn_num_hiddens<span class="token punctuation">,</span>                 num_heads<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> dropout<span class="token punctuation">,</span> use_bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>TransformerEncoder<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_hiddens <span class="token operator">=</span> num_hiddens                self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pos_encoding <span class="token operator">=</span> d2l<span class="token punctuation">.</span>PositionalEncoding<span class="token punctuation">(</span>num_hiddens<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>blks <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_layers<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>blks<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"block"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>                EncoderBlock<span class="token punctuation">(</span>key_size<span class="token punctuation">,</span> query_size<span class="token punctuation">,</span> value_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span>                             norm_shape<span class="token punctuation">,</span> ffn_num_input<span class="token punctuation">,</span> ffn_num_hiddens<span class="token punctuation">,</span>                             num_heads<span class="token punctuation">,</span> dropout<span class="token punctuation">,</span> use_bias<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> valid_lens<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 因为位置编码值在-1和1之间，</span>        <span class="token comment" spellcheck="true"># 因此嵌入值乘以嵌入维度的平方根进行缩放，</span>        <span class="token comment" spellcheck="true"># 然后再与位置编码相加。</span>        X <span class="token operator">=</span> self<span class="token punctuation">.</span>pos_encoding<span class="token punctuation">(</span>self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_hiddens<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>attention_weights <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>blks<span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> blk <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>blks<span class="token punctuation">)</span><span class="token punctuation">:</span>            X <span class="token operator">=</span> blk<span class="token punctuation">(</span>X<span class="token punctuation">,</span> valid_lens<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>attention_weights<span class="token punctuation">[</span>                i<span class="token punctuation">]</span> <span class="token operator">=</span> blk<span class="token punctuation">.</span>attention<span class="token punctuation">.</span>attention<span class="token punctuation">.</span>attention_weights        <span class="token keyword">return</span> X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EncoderBlock层">1.2.1. EncoderBlock层</h3><p><img src="/2025/05/24/deeplearn/Transformer/image-20250425175900742.png" alt="image-20250425175900742"></p><ol><li>注意力层：<ol><li>注意力机制</li><li>残差+ 规范化层</li></ol></li><li>前馈网络<ol><li>前馈网络</li><li>残差+ 规范化层</li></ol></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">EncoderBlock</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Transformer编码器块"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key_size<span class="token punctuation">,</span> query_size<span class="token punctuation">,</span> value_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span>                     norm_shape<span class="token punctuation">,</span> ffn_num_input<span class="token punctuation">,</span> ffn_num_hiddens<span class="token punctuation">,</span> num_heads<span class="token punctuation">,</span>                     dropout<span class="token punctuation">,</span> use_bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>EncoderBlock<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>attention <span class="token operator">=</span> d2l<span class="token punctuation">.</span>MultiHeadAttention<span class="token punctuation">(</span>            key_size<span class="token punctuation">,</span> query_size<span class="token punctuation">,</span> value_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span> num_heads<span class="token punctuation">,</span> dropout<span class="token punctuation">,</span>            use_bias<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>addnorm1 <span class="token operator">=</span> AddNorm<span class="token punctuation">(</span>norm_shape<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ffn <span class="token operator">=</span> PositionWiseFFN<span class="token punctuation">(</span>            ffn_num_input<span class="token punctuation">,</span> ffn_num_hiddens<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>addnorm2 <span class="token operator">=</span> AddNorm<span class="token punctuation">(</span>norm_shape<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> valid_lens<span class="token punctuation">)</span><span class="token punctuation">:</span>        Y <span class="token operator">=</span> self<span class="token punctuation">.</span>addnorm1<span class="token punctuation">(</span>X<span class="token punctuation">,</span> self<span class="token punctuation">.</span>attention<span class="token punctuation">(</span>X<span class="token punctuation">,</span> X<span class="token punctuation">,</span> X<span class="token punctuation">,</span> valid_lens<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>addnorm2<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> self<span class="token punctuation">.</span>ffn<span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多头注意力机制">1.2.1.1. 多头注意力机制</h4><p>将键值对分为多个子空间，每个注意力机制学习一个子空间的特征，得到H组的注意力权重，然后将注意力权重通过线性层汇聚</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250425155705305.png" alt="image-20250425155705305"></p><p>常规思路：</p><ol><li>将query, key, values映射到子空间，使用不同的Linear映射</li><li>将不同头的注意力结果合并在一起，在feature维度上合并</li><li>再通过一个Linear线性层，连接所有head</li></ol><p>并行思路</p><ol><li>将query,key, values映射到完整空间，然后将完整空间查分成子空间，head与batch组成一个伪batch</li><li>再将子空间的数据通过点积注意力</li><li>将head从batch中分离出来，与feature合并，效果与非并行情况相同</li><li>最后通过线性层</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MultiHeadAttention</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key_size<span class="token punctuation">,</span> query_size<span class="token punctuation">,</span> value_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span> num_head<span class="token punctuation">,</span> dropout<span class="token punctuation">,</span> bias <span class="token operator">=</span> false<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>           self<span class="token punctuation">.</span>num_head <span class="token operator">=</span> head        self<span class="token punctuation">.</span>attention <span class="token operator">=</span> d2l<span class="token punctuation">.</span>DotProductAttention<span class="token punctuation">(</span>dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>W_k <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>key_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>W_q <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>query_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>W_v <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>value_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>W_o <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_hiddens<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 全连接层</span>            <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query <span class="token punctuation">,</span>key <span class="token punctuation">,</span>values<span class="token punctuation">,</span> valid_lens<span class="token punctuation">)</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true"># 转换为(batch_size* head, key/query , num_hidden/head)</span>        query <span class="token operator">=</span> transpose<span class="token punctuation">(</span>self<span class="token punctuation">.</span>W_q<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">,</span>  self<span class="token punctuation">.</span>head_num<span class="token punctuation">)</span>        keys <span class="token operator">=</span> transpose_qkv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>W_k<span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_heads<span class="token punctuation">)</span>        values <span class="token operator">=</span> transpose_qkv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>W_v<span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_heads<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 将掩码扩展为batch*head</span>        <span class="token keyword">if</span> valid_len <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            valid_lens <span class="token operator">=</span> torch<span class="token punctuation">.</span>repeat_interleave<span class="token punctuation">(</span>                valid_lens<span class="token punctuation">,</span> repeats <span class="token operator">=</span> self<span class="token punctuation">.</span>num_heads <span class="token punctuation">,</span> dim <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>                    output <span class="token operator">=</span> self<span class="token punctuation">.</span>attention<span class="token punctuation">(</span>query<span class="token punctuation">,</span> key <span class="token punctuation">,</span>value<span class="token punctuation">,</span> valid_len<span class="token punctuation">)</span>                output_concat<span class="token operator">=</span>transpose_output<span class="token punctuation">(</span>output<span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_heads<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 输出为（batch_size, query_size, hidden_size)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>W_o<span class="token punctuation">(</span>output_concat<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="残差-规范化层">1.2.1.2. 残差+规范化层</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AddNorm</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""残差连接后进行层规范化"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> normalized_shape<span class="token punctuation">,</span> dropout<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>AddNorm<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ln <span class="token operator">=</span> nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">(</span>normalized_shape<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Y+X 残差网络</span>        <span class="token comment" spellcheck="true"># Ln 层归一化</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>ln<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>Y<span class="token punctuation">)</span> <span class="token operator">+</span> X<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="残差层">1.2.1.2.1. 残差层</h5><p>训练是模型训练出F(X) &#x3D; f(x)- X</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250423225436209.png" alt="image-20250423225436209"></p><p>对应模型中 支线 为x ，前馈神经网络中预测是f(X), 相加后得到准确预测的F(X)</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250425181440459.png" alt="image-20250425181440459"></p><h5 id="批量归一化层BatchNorm">1.2.1.2.2. 批量归一化层BatchNorm</h5><p>$$<br>\mathrm{BN}(\mathbf{x}) &#x3D; \boldsymbol{\gamma} \odot \frac{\mathbf{x} - \hat{\boldsymbol{\mu}}_\mathcal{B}}{\hat{\boldsymbol{\sigma}}_\mathcal{B}} + \boldsymbol{\beta}.<br>$$</p><p>对特征维度进行归一化,$\gamma、\beta$ 是拉伸和偏移参数</p><ol><li><p>对特征维度进行归一化</p><pre><code>mean = X.mean(dim = 0, keepdim = True)</code></pre></li><li><p>卷积层</p><ol><li>对通道维度进行归一化</li></ol></li><li><p>训练状态下使用小批次的样本均值与方差，测试状态使用的移动平均估算的均值与方差</p></li></ol><h3 id="前馈网络层">1.2.2. 前馈网络层</h3><p>这里的线性层可以使用1*1cnn网络代替，代替结果</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PositionWiseFFN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""基于位置的前馈网络"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ffn_num_input<span class="token punctuation">,</span> ffn_num_hiddens<span class="token punctuation">,</span> ffn_num_outputs<span class="token punctuation">,</span>                 <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>PositionWiseFFN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dense1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>ffn_num_input<span class="token punctuation">,</span> ffn_num_hiddens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dense2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>ffn_num_hiddens<span class="token punctuation">,</span> ffn_num_outputs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dense2<span class="token punctuation">(</span>self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dense1<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解码器">1.3. 解码器</h2><p><img src="/2025/05/24/deeplearn/Transformer/image-20250425181429443.png" alt="image-20250425181429443"></p><ol><li>通过嵌入层</li><li>对位置进行编码</li><li>经过解码器层<ol><li>第一个注意力层 ， query ,key, value,都是解码器输入</li><li>第二个注意力层， query 来自解码器输入 ， key, values来自编码器输入<ol><li>交叉注意力机制中，<strong>key,value</strong>来源使用一致，这里key,values来自编码器输入</li></ol></li><li>前馈神经网络</li></ol></li><li>全连接层</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TransformerDecoder</span><span class="token punctuation">(</span>d2l<span class="token punctuation">.</span>AttentionDecoder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> vocab_size<span class="token punctuation">,</span> key_size<span class="token punctuation">,</span> query_size<span class="token punctuation">,</span> value_size<span class="token punctuation">,</span>                 num_hiddens<span class="token punctuation">,</span> norm_shape<span class="token punctuation">,</span> ffn_num_input<span class="token punctuation">,</span> ffn_num_hiddens<span class="token punctuation">,</span>                 num_heads<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> dropout<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>TransformerDecoder<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_hiddens <span class="token operator">=</span> num_hiddens        self<span class="token punctuation">.</span>num_layers <span class="token operator">=</span> num_layers        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pos_encoding <span class="token operator">=</span> d2l<span class="token punctuation">.</span>PositionalEncoding<span class="token punctuation">(</span>num_hiddens<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>blks <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_layers<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>blks<span class="token punctuation">.</span>add_module<span class="token punctuation">(</span><span class="token string">"block"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>                DecoderBlock<span class="token punctuation">(</span>key_size<span class="token punctuation">,</span> query_size<span class="token punctuation">,</span> value_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span>                             norm_shape<span class="token punctuation">,</span> ffn_num_input<span class="token punctuation">,</span> ffn_num_hiddens<span class="token punctuation">,</span>                             num_heads<span class="token punctuation">,</span> dropout<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dense <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_hiddens<span class="token punctuation">,</span> vocab_size<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">init_state</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> enc_outputs<span class="token punctuation">,</span> enc_valid_lens<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>enc_outputs<span class="token punctuation">,</span> enc_valid_lens<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>num_layers<span class="token punctuation">]</span>        X <span class="token operator">=</span> self<span class="token punctuation">.</span>pos_encoding<span class="token punctuation">(</span>self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_hiddens<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_attention_weights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>blks<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> blk <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>blks<span class="token punctuation">)</span><span class="token punctuation">:</span>            X<span class="token punctuation">,</span> state <span class="token operator">=</span> blk<span class="token punctuation">(</span>X<span class="token punctuation">,</span> state<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 解码器自注意力权重</span>            self<span class="token punctuation">.</span>_attention_weights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>                i<span class="token punctuation">]</span> <span class="token operator">=</span> blk<span class="token punctuation">.</span>attention1<span class="token punctuation">.</span>attention<span class="token punctuation">.</span>attention_weights            <span class="token comment" spellcheck="true"># “编码器－解码器”自注意力权重</span>            self<span class="token punctuation">.</span>_attention_weights<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>                i<span class="token punctuation">]</span> <span class="token operator">=</span> blk<span class="token punctuation">.</span>attention2<span class="token punctuation">.</span>attention<span class="token punctuation">.</span>attention_weights        <span class="token keyword">return</span> self<span class="token punctuation">.</span>dense<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> state            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解码器层">1.3.1. 解码器层</h3><p>经过解码器层</p><ol><li>第一个注意力层 ， query ,key, value,都是解码器输入</li><li>第二个注意力层， query 来自解码器输入 ， key, values来自编码器输入</li><li>前馈神经网络</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DecoderBlock</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""解码器中第i个块"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key_size<span class="token punctuation">,</span> query_size<span class="token punctuation">,</span> value_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span>                 norm_shape<span class="token punctuation">,</span> ffn_num_input<span class="token punctuation">,</span> ffn_num_hiddens<span class="token punctuation">,</span> num_heads<span class="token punctuation">,</span>                 dropout<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>DecoderBlock<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>i <span class="token operator">=</span> i        self<span class="token punctuation">.</span>attention1 <span class="token operator">=</span> d2l<span class="token punctuation">.</span>MultiHeadAttention<span class="token punctuation">(</span>            key_size<span class="token punctuation">,</span> query_size<span class="token punctuation">,</span> value_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span> num_heads<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>addnorm1 <span class="token operator">=</span> AddNorm<span class="token punctuation">(</span>norm_shape<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>attention2 <span class="token operator">=</span> d2l<span class="token punctuation">.</span>MultiHeadAttention<span class="token punctuation">(</span>            key_size<span class="token punctuation">,</span> query_size<span class="token punctuation">,</span> value_size<span class="token punctuation">,</span> num_hiddens<span class="token punctuation">,</span> num_heads<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>addnorm2 <span class="token operator">=</span> AddNorm<span class="token punctuation">(</span>norm_shape<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ffn <span class="token operator">=</span> PositionWiseFFN<span class="token punctuation">(</span>ffn_num_input<span class="token punctuation">,</span> ffn_num_hiddens<span class="token punctuation">,</span>                                   num_hiddens<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>addnorm3 <span class="token operator">=</span> AddNorm<span class="token punctuation">(</span>norm_shape<span class="token punctuation">,</span> dropout<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>        enc_outputs<span class="token punctuation">,</span> enc_valid_lens <span class="token operator">=</span> state<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 训练阶段，输出序列的所有词元都在同一时间处理，</span>        <span class="token comment" spellcheck="true"># 因此state[2][self.i]初始化为None。</span>        <span class="token comment" spellcheck="true"># 预测阶段，输出序列是通过词元一个接着一个解码的，</span>        <span class="token comment" spellcheck="true"># 因此state[2][self.i]包含着直到当前时间步第i个块解码的输出表示</span>        <span class="token keyword">if</span> state<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>i<span class="token punctuation">]</span> <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 使用当前输入的数据进行预测</span>            key_values <span class="token operator">=</span> X        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">'''            state[2] 中存放者上一个时间步，留下的已经每个块之前计算好的key_value            # 加上y_t之前的数据一起预测            '''</span>            key_values <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        state<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key_values        <span class="token keyword">if</span> self<span class="token punctuation">.</span>training<span class="token punctuation">:</span>            batch_size<span class="token punctuation">,</span> num_steps<span class="token punctuation">,</span> _ <span class="token operator">=</span> X<span class="token punctuation">.</span>shape            <span class="token comment" spellcheck="true"># dec_valid_lens的开头:(batch_size,num_steps),</span>            <span class="token comment" spellcheck="true"># 其中每一行是[1,2,...,num_steps]</span>            dec_valid_lens <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>                <span class="token number">1</span><span class="token punctuation">,</span> num_steps <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> device<span class="token operator">=</span>X<span class="token punctuation">.</span>device<span class="token punctuation">)</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            dec_valid_lens <span class="token operator">=</span> None        <span class="token comment" spellcheck="true"># 自注意力</span>        X2 <span class="token operator">=</span> self<span class="token punctuation">.</span>attention1<span class="token punctuation">(</span>X<span class="token punctuation">,</span> key_values<span class="token punctuation">,</span> key_values<span class="token punctuation">,</span> dec_valid_lens<span class="token punctuation">)</span>        Y <span class="token operator">=</span> self<span class="token punctuation">.</span>addnorm1<span class="token punctuation">(</span>X<span class="token punctuation">,</span> X2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 编码器－解码器注意力。</span>        <span class="token comment" spellcheck="true"># enc_outputs的开头:(batch_size,num_steps,num_hiddens)</span>        Y2 <span class="token operator">=</span> self<span class="token punctuation">.</span>attention2<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> enc_outputs<span class="token punctuation">,</span> enc_outputs<span class="token punctuation">,</span> enc_valid_lens<span class="token punctuation">)</span>        Z <span class="token operator">=</span> self<span class="token punctuation">.</span>addnorm2<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> Y2<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>addnorm3<span class="token punctuation">(</span>Z<span class="token punctuation">,</span> self<span class="token punctuation">.</span>ffn<span class="token punctuation">(</span>Z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> state        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在transformer结构中，query与key权重对values值进行查询，values值是编码器的输入，为什么就可以查询到解码器想要的结果呢？比如，编码器编码我是李华，解码器对I 查询 我，ji</p><h2 id="优化">1.4. 优化</h2><p>Adam， 自动调整学习率</p><p>warm up 和逆平方根衰减</p><h2 id="BERT">1.5. BERT</h2><h3 id="预训练（无监督-自监督）">1.5.1. 预训练（无监督&#x2F;自监督）</h3><p>自监督</p><ol><li>完形填空</li><li>预测下一句</li></ol><h3 id="微调（有监督）">1.5.2. 微调（有监督）</h3><p>需要根据下游任务添加输出层，添加的层需要重新训练</p><ol><li>两个句子分类</li><li>单个句子的分类</li><li>问答任务<ol><li>找到答案正确的文本位置</li></ol></li><li>命名实体位置标记<ol><li>标记实体位置（begin ,inside ,O（非实体））</li></ol></li></ol><h2 id="Decoder-only">1.6. Decoder_only</h2><p><strong>优点</strong>：</p><ol><li>Decoder-only的注意力矩阵始终是满秩，表达能力更强</li><li>不会浪费Encoder的参数，输入可以直接作用与decoder</li></ol><h3 id="预训练">1.6.1. 预训练</h3><p>test prediction 预测文本</p><h3 id="微调">1.6.2. 微调</h3><p>test prediction + task classfication 的损失相加</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516123238590.png" alt="task"></p><h2 id="GPT-2">1.7. GPT-2</h2><p><strong>无需微调，预训练的模型就可以解决下游任务</strong></p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516123552285.png" alt="image-20250516123552285"></p><p>Zero-shot, One-shot, Few-shot</p><p>使用任务提示（prompt）和少量示例直接输入</p><h3 id="lay-N放在模块前">1.7.1. lay N放在模块前</h3><ol><li>尺度定律： 模型的大小与Loss线性拟合</li><li>涌现能力： 大模型效果迅速提升</li></ol><h2 id="GPT">1.8. GPT</h2><p>参数数量增多，需要减少计算量。</p><h3 id="sparse-attention">1.8.1. sparse attention</h3><p>减少attention的计算量，只关注临近部分和前面的部分权重</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516124911687.png" alt="image-20250516124911687"></p><h3 id="chatgpt">1.8.2. chatgpt</h3><p>增加人类反馈强化学习（RLHF) ,与人互动</p><h2 id="LLAMA">1.9. LLAMA</h2><h3 id="swiGLU">1.9.1. swiGLU</h3><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516155254082.png" alt="image-20250516155254082"></p><p>使用swi激活函数，同时使用门控机制（GLU)，选择性激活函数</p><p>优点： swish激活函数更平滑，GLU实现选择性激活</p><h3 id="GQA-grouped-query-attention">1.9.2. GQA-grouped-query attention</h3><p>减少k,v的head 数量，query共享重复的k,v，减少参数</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516155516226.png" alt="image-20250516155516226"></p><h3 id="layer-norm-变体">1.9.3. layer norm 变体</h3><p>RMSNorm:均方根归一化</p><p><strong>取出平移，只保留缩放</strong></p><p>优点：计算简单</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516160128424.png" alt="image-20250516160128424"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp+servlet</title>
      <link href="/2025/05/24/java/jsp/"/>
      <url>/2025/05/24/java/jsp/</url>
      
        <content type="html"><![CDATA[<h1 id="java基础">1. java基础</h1><h2 id="修饰符">1.1. 修饰符</h2><h3 id="final">1.1.1. final</h3><h1 id="servlet">2. servlet</h1><h2 id="http协议">2.1. http协议</h2><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//ip:端口/资源路径?name= eg : http://127.0.0.1/myweb/servlet?name = zhangsan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>支持客户&#x2F;服务端</li><li>支持get ,post请求</li><li>传输内容，类型可以有Content-Type</li><li>http无连接，http1.1之后支持可持续连接</li><li>http无状态信息</li></ol><h3 id="请求和responce">2.1.1. 请求和responce</h3><h4 id="请求request">2.1.1.1. 请求request</h4><ol><li><p>请求行</p><blockquote><p>get的请求放在请求行中</p></blockquote><p>method Request_url http_version 换行</p></li><li><p>请求头</p><ol><li>键值对</li></ol></li><li><p>请求体</p><ol><li>get没有请求行</li></ol></li></ol><h4 id="response">2.1.1.2. response</h4><ol><li>状态行</li><li>响应头</li><li>响应正文</li></ol><h3 id="消息头">2.1.2. 消息头</h3><ul><li><em>referer</em>: 请求前来位置</li><li><em>Location</em>: 请求达到位置</li><li><em>refresh</em>: 自动跳转时间</li></ul><h2 id="服务器">2.2. 服务器</h2><p>接受客户端的请求,调用程序处理,返回程序数据</p><h3 id="tomcat目录">2.2.1. tomcat目录</h3><ul><li>bin: 启动或关闭的配置文件</li><li>conf: 配置servel端口号等信息文件</li><li>lib: 运行时使用的java包</li><li>logs :日志文件</li><li>webapps: web应用</li><li>works: 工作目录</li></ul><h3 id="使用idea-集成tomcat">2.2.2. 使用idea 集成tomcat</h3><h2 id="servlet实现">2.3. servlet实现</h2><ol><li>创建java类</li><li>实现servlet规范, 继承HttpServlet类</li><li>重写service 方法,用于处理请求</li><li>设置注释,指定访问方法的路径</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Webservlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token punctuation">,</span> value <span class="token operator">=</span><span class="token punctuation">{</span> <span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> value可以指定多个名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="servlet执行流程">2.3.1. servlet执行流程</h3><ol><li>从请求头中找到主机</li><li>访问请求头中的资源,第一次访问创建一个对象</li><li>将参数交给req, 通过resp响应参数</li></ol><h3 id="三种访问方式">2.3.2. 三种访问方式</h3><p>继承方式</p><p>HttpServlet -&gt; GenericServlet &gt; Servlet</p><h3 id="service-doPost-doGet">2.3.3. service ,doPost, doGet</h3><p>调用service 实际上调用doPost, doGet</p><blockquote><p>不知道post 或 get ,写service</p></blockquote><h3 id="servlet生命周期">2.3.4. servlet生命周期</h3><p>请求访问servlet容器时候,检查容器中是否存在该资源对象,没有调用init方法,第二次访问时,调用service.程序停止售,调用destory方法</p><p><img src="/2025/05/24/java/jsp/image-20250503221820723.png" alt="image-20250503221820723"></p><h3 id="HttpServletRequest-获取请求">2.3.5. HttpServletRequest 获取请求</h3><p>HTTp的请求都封装在Req对象中</p><pre class="line-numbers language-java"><code class="language-java">String value <span class="token operator">=</span> Req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> 获取名称对应的值String<span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> Req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> 同一个name存在多个值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="请求乱码问题">2.3.5.1. 请求乱码问题</h4><p>乱码原因: request 封装时候,使用的ISO ,不支持中文编码</p><p>get 不会乱码，post有乱码</p><p>解决办法: 设置请求的编码方式</p><pre class="line-numbers language-java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">sertCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 只值对post代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">String name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">'ISO-8859-1'</span><span class="token punctuation">,</span> charameter <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//适用于所有get 与post</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="请求转发">2.3.5.2. 请求转发</h4><ol><li>服务器行为</li><li>前台地址栏不发生改变,只产生输出</li><li>只有一个请求</li><li>req, resp对象共享</li></ol><pre class="line-numbers language-java"><code class="language-java">req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"跳转网址"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>String name <span class="token punctuation">,</span> Object value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置新的对象值</span>req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除对象值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HttpServletResponse-响应请求">2.3.6. HttpServletResponse 响应请求</h3><p>使用流输出方法响应</p><ol><li>getWritter() 字符输出流(输出字符串)</li><li>getOutputStream(), 字节输出流(输出任意数据)</li></ol><p><strong>两种流不能同时使用</strong></p><h4 id="响应乱码">2.3.6.1. 响应乱码</h4><p><strong>原因</strong>： 服务端和客户端的编码格式一致</p><p>解决办法：同时设置服务端和客户端的编码，保证编码格式一致</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置服务端的编码格式</span>response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置客户端代码</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"content_type"</span><span class="token punctuation">,</span> <span class="token string">"text/html; charset= UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 同时设置编码格式</span>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset= UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="客户端重定向">2.3.6.2. 客户端重定向</h4><p>服务端指导客户端的行为</p><blockquote><p>地址栏发生改变，写入location</p><p>服务器接受location</p></blockquote><p>有两次请求</p><blockquote><p>请求对象不共享</p></blockquote><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"s05"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="请求转发与重定向的区别">2.3.6.3. 请求转发与重定向的区别</h4><table><thead><tr><th>请求转发</th><th>重定向</th></tr></thead><tbody><tr><td>一次请求，request数据共享</td><td>两次请求</td></tr><tr><td>服务端跳转</td><td>客户端跳转</td></tr><tr><td>绝对地址到当前项目中，不能向外跳转</td><td>可以向域外跳转</td></tr></tbody></table><h2 id="Cookie对象">2.4. Cookie对象</h2><p>浏览器中将数据存放在客户端中，在客户端中处理数据，减少网络传输与数据库查询</p><p>由服务器写入客户端</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 服务器写入Cookie 到客户端中，客户端保存Cookie</span>Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取Cookie</span>Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> conkie <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取客户端路径下所有的Cookie对象</span><span class="token comment" spellcheck="true">//将Cookie 的name 与需要查找的Cookie作比较</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置对象存在时间">2.4.1. 设置对象存在时间</h3><p>设置maxAge存活时间 ，从创建Cookie对象开始</p><pre class="line-numbers language-java"><code class="language-java">cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*1. 负整数，只在浏览器内存中存在2. 正整数，保存磁盘对应的时间，关闭后依旧计数，时间为s3. 0 ： 删除这个Cookie*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意点">2.4.2. 注意点</h3><ol><li>Cookie 只在当前浏览器中有效，不跨浏览器和及其</li><li>Cookie不支持存放中文，使用时候需要编码&#x2F;解码</li><li>新的同名name Cookie 将覆盖之前的Cookie</li><li>Cookie的存储数量有上限，Cookie的大小有限，4KB左右</li></ol><pre class="line-numbers language-java"><code class="language-java">String name <span class="token operator">=</span> <span class="token string">"陈龙"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 中文通过URLEncoder.encode()编码</span>name <span class="token operator">=</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encoder</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用时，需URLDecoder.decoder()解码</span>name <span class="token operator">=</span> URLDecoder<span class="token punctuation">.</span><span class="token function">decoder</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Cookie的访问路径">2.4.3. Cookie的访问路径</h3><ol><li>当前浏览器下如何项目任何资源都可以获取Cookie</li></ol><pre class="line-numbers language-java"><code class="language-java">cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认本项目</span>cookie<span class="token punctuation">.</span><span class="token function">setPaht</span><span class="token punctuation">(</span><span class="token string">"/s02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置指定站点名</span>cookie<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/sc03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 指定项目的指定资源访问cookie</span>cookie<span class="token punctuation">.</span><span class="token function">setPaht</span><span class="token punctuation">(</span><span class="token string">"s03/co1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有访问的路径包括  <em>cookie的路径</em> 时， 能够获取这个cookie</p><h2 id="HttpSession-对象">2.5. HttpSession 对象</h2><p>属于服务器对象， 标识一次对话，确定是否为一个用户的数据</p><pre class="line-numbers language-java"><code class="language-java">HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如session 对象存在，则获取 ；否则第一次创建对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一次请求到了服务器，标识启动了会话，客户端向服务器传递JSESSIONID的cookie，用于标识服务器中对应的session， 如果有，则共享数据，没有创建sesion,同时给客户端创建JSESSIONID的cookie.</p><h3 id="设置域对象">2.5.1. 设置域对象</h3><p>HttpSession 与 request 的区别</p><p>重定向： 只要session会话不是小，session一直共享数据</p><pre class="line-numbers language-java"><code class="language-java">HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="session-对象的销毁">2.5.2. session 对象的销毁</h3><p>默认是30min， 一旦有操作，session 重新计时</p><blockquote><p>在conf&#x2F;web.xml中修改session_config中timeout,单位为1min</p></blockquote><h4 id="设置到期时间">2.5.2.1. 设置到期时间</h4><pre class="line-numbers language-java"><code class="language-java">session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//单位为s</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="立即销毁">2.5.2.2. 立即销毁</h4><p>退出登录，立马销毁</p><pre class="line-numbers language-java"><code class="language-java">session<span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="关闭浏览器，Cookie对象销毁">2.5.2.3. 关闭浏览器，Cookie对象销毁</h4><p>session 需要JSESSIONID ，JSESSIONID默认在浏览器内存中有效，Cookie消失后，session 结束</p><h4 id="关闭服务器失效">2.5.2.4. 关闭服务器失效</h4><h2 id="ServletContext对象">2.6. ServletContext对象</h2><h3 id="获取对象">2.6.1. 获取对象</h3><pre class="line-numbers language-java"><code class="language-java">ServletContext servletContext1 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// session对象获取</span>ServletContext servletContext2 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ServletConfig对象中获取</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// servlet中直接获取</span>ServletContext servletContext4 <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取服务器信息</span>String serverInfo <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取项目路径</span>String realPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从根目录下获取</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Servlet-域对象">2.6.2. Servlet 域对象</h3><ol><li><p>request 域对象</p><p>再一次请求中有效，请求转发有效，重定向无效</p></li><li><p>session 对象</p><p>一次会话中有效，session销毁后无效</p></li><li><p>servletContext 对象</p><p>服务器中始终有效</p></li></ol><h2 id="文件上传下载">2.7. 文件上传下载</h2><h3 id="上传">2.7.1. 上传</h3><h4 id="前端实现">2.7.1.1. 前端实现</h4><ol><li>准备表单form</li><li>设置表单的请求类型 ‘method &#x3D;”post”</li><li>设置表达类型为文件上传类型 enctype &#x3D; “multipart&#x2F;form-data”</li><li>设置文件提交的地址 active &#x3D; “提交路径”</li><li>准备表单元素<ol><li>普通的表单项 type &#x3D; “text”</li><li>文件项 type &#x3D; “file”</li><li>设置表单元素的name值</li></ol></li></ol><h4 id="后端实现">2.7.1.2. 后端实现</h4><p>添加注解<code>MultipartConfig</code>, servlet将 multipart&#x2F;form-data 的post封装在part对象中</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@MultipartConfig</span>Part part <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getPart</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String fileName <span class="token operator">=</span> part<span class="token punctuation">.</span><span class="token function">getSubmittedFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取提交文件名称；</span>String realPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 需要自行指定保存路径</span>String saveName<span class="token operator">=</span> fileName<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span> realPath<span class="token punctuation">;</span>part<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>saveName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件下载">2.7.2. 文件下载</h3><h4 id="超链接下载">2.7.2.1. 超链接下载</h4><ol><li>没有download属性<ol><li>浏览器识别文件，跳转显示，否则下载</li></ol></li><li>有download属性<ol><li>指定属性值，为下载名</li></ol></li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token entity" title="&lt;">&amp;lt;</span>a href="download/text.png"<span class="token entity" title="&gt;">&amp;gt;</span> 图片文件<span class="token entity" title="&lt;">&amp;lt;</span>/a<span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&lt;">&amp;lt;</span>a href="download/text.png" download<span class="token entity" title="&gt;">&amp;gt;</span>图片文件<span class="token entity" title="&lt;">&amp;lt;</span>/a<span class="token entity" title="&gt;">&amp;gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="后端下载">2.7.2.2. 后端下载</h4><ol><li><p>设置request和response的编码类型</p><pre class="line-numbers language-java"><code class="language-java">request<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset = UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取文件名称</p></li></ol><pre class="line-numbers language-java"><code class="language-java">String fileName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><p>判断文件名称是否为空</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 文件名= null 或者全是空格</span><span class="token keyword">if</span><span class="token punctuation">(</span>fileName <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">getWritter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"输出提示信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">getWritter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 关闭信息</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将路径转换为file 对象</p><pre class="line-numbers language-java"><code class="language-java">String path <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/download/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 检查文件存在//是否为文件夹</span><span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span> file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出</p><ol><li><p>设置响应类型， 浏览器无法解析的MINE类型 “application&#x2F;x-msdoanload”, “application&#x2F;octet-stream”</p><ol><li>response.setContentType(“application&#x2F;x-msdoanload”)</li></ol></li><li><p>设置响应头，下载文件筐和文件名</p><ol><li>response.setHeader(“Content_Dispostion”, ”attachment;filename&#x3D;”+ fileName);</li></ol></li><li><p>输出流和输入流</p><pre class="line-numbers language-java"><code class="language-java">InputStream in <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">FileInputSream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>ServletOutputSream out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 关闭资源</span>out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简便实现</p><pre class="line-numbers language-java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置为通用的二进制流类型</span>response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment; filename=\""</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 提示浏览器下载文件</span><span class="token comment" spellcheck="true">// 使用 try-with-resources 确保流被正确关闭</span><span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    ServletOutputStream out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用 transferTo 方法进行拷贝 (Java 9+)</span>    in<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注意：在 try-with-resources 块结束时，in 和 out 会自动关闭</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理可能的 IO 异常</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在实际应用中应该记录日志或返回更友好的错误信息</span>    response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">.</span>SC_INTERNAL_SERVER_ERROR<span class="token punctuation">,</span> <span class="token string">"文件读取或传输失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> servlet </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/24/%E6%9D%82%E9%A1%B9/done_url/"/>
      <url>/2025/05/24/%E6%9D%82%E9%A1%B9/done_url/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="a24a8e9923adc73f8734bf4d54f0f52b3c7aaa3a7338ff83a9c89288fcfbac47">4fbb2435fd3b6574fd4f7bd145822884a098a0719a519100aebfe4c2fde4f5a0b742ef9261977b6e3a9b4c3e50829a470e690778866554ee319777c27fc8d372d445bc34ce0815f9126ccbdb184b46eb9e78f871294fe7a7b3c58ac1b6ef19add18dffb744ecb7e98080827e173e466133046651ab70423598fdf7baa145809b0518243cc3962fdae97283ff57888465c714936a21428f2916ad58ae556cf843e238c090515ef0788309dfeb4e0498a241956600f541f1c73efefcd8ec48ead5c300cc0ed4ecbca27dab55c2812181460d9903a118ea2bad531f7c16baa52070a963405f115aa1a627350322077063a4d16a5329d1730ad9d02d7f1a2c69eb527582f766e9f3895abe85a22307c109713a5ace6ff0bbcb82c6f3a1fab5bd640e122571f1d47d85ae85daaeeefab990396dcbf359d1eb4e2d31e6fe8880a10965774b467c14506c40fcd79e01abee68ec6a2d00140e8ae05e3aae3583ce3ee4f2c253967667cce2caaea5850866eaa4fba018799e6f820aa77708ca20439af2a8b93a29bb2aec22273169ef05804893beefa0d2303e520a2d39276e1d51a7f0247cbf6cb79e16a6095c10d7910789e3bda26ac3da96bf0ffdc0143f1f4c3b2d7442f2a4d2d2b6e44a1281840ab6768dd63d49158a36d3ee50b58ea42f29317ed36a8b3ae92bc0cf8ce0b1d1bf4b0ebff7a9d11a5fbc5ecf5d3ee6a3eacce8d321d11fb8d999a97f03f301933f1ea88863a3b34e7885f1e5df5aa174ccf27923b9fdd3017b7f87ef19964125584dce4ff7cc68d26b5a88c4a94c23c8e56a559d778529382af5922b5c37bfaba45194a8ca28f4d9bd69d5110ed4b7957b06df2ff4edd079f42d4471941f5b30830b067b51e6860fea39e6d0b9f545135eed44b7b2bad6d6b1b1ce5a4de570dd82b1c2492a9e548369396c0a0a88069551f03614aa58ca1c6a11001217382c6890491f434b8bc37a80f20289abdeed80cddf4e2144039bd392a8033aee7d25019e004fea5c5bcfd2e5851d304cc5fdea93562b74bfad3ad2c65907786c0aea421151340b3a058616e0c5ff3d4d970f64b1cf1c62e2a891c694ef9f71db0e780ec875562eb3d833a18c036348dc94fb52c0a842ac0412dd4b4e352f51e9a6c4dbe0d2ee00f62f9f87b9a7b3aa507f4a9d8b10f6310c01df785d6daec05a9ea009f58cd17adf0e2ef732e10b0574c6e79245da6d12fca112fe6e97fa4ac509e81376a5fcb5f0bb410d2f287f6cc8be9ea90bc60f8bdadcaf16d4c44ded9a4d202ae7b6dc791f96064ee3e9b23313230fe8e21a3918e9c5b00ed80ea0205e951a77dc82e79d51c95b28608366516a27120f2e9441bb0bdfbb28070d95e7fc007fceec387f7a3efe93c41c15b3bdf7e72d6af8313b3ba6cc1a09939ac2f9344828edb728d9d0259b6ee592b409bba57fb84dfb50c82160775448498c56b39bb36b967083d6798434a2e413c4f2fd3da5277416fa7da231a9478866ee3514d31645d8ba8268aa7380935494f6d6b6055f0d19068f8cfa0dd18555d003404654467345027bb2d3bddf92c7d4fd46b556f099619628a86ce5d50f3bca6921ac111ec5acf9cb41ef48a2e28d68cdbfdc86a1464066eaead11c8df0c209d541170efa61175d74a8cdbf250a95f65857e396ab7ab87d37b962c1349496098b96d1d9a4e4d0fc0c69380c3b753ac8158095600eae6886fa61876eab302f60ba3203fdbe3159c9fd19ebb4e596bd250fc2421b47c111a9201d283563ead3eef58a33836e9fda5c87a2a25ec4fdc6da3fc2c51e94d7fb45f4a1ff6e48d69ea33924c75f62eef38961d3651cd9d4bf0c401075b1e3ad272ba613b63b8c62c71a71cd7a020f8605e8547ee32e01592e42abfbc73b02e5dc7c71a440fe0a4b429e489dd0ed6065412881512cff9ea3eff255fc2b09fee537da3a898c4e3abf31067187da0e8cfde71ae087bcad</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.3. 线性回归的简洁实现 — 动手学深度学习 2.0.0 documentation</title>
      <link href="/2025/05/24/deeplearn/250224~3.3.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250224~3.3.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="99a0b53da85811c32a6dc7e37aff3a0b51efad6d30b12efc77f19faee73f2682">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0be6e5bb3eaca0bb23639ded49772186036bddf2e3692b38cb0fcf6c740e1878cdc21ef66a9ac8d9ecf57353fbffcb6a51060ff6a3d7bc609ab0b52d432054cb4d3d0ee80ba26b68ac31c5f789738c6be47b371bd3e5ac34a5fdd20629f2f97760116bdfa6f80045b000e62f5ad09184b8a2df20833d22e3224e8c77014b8a60cb2fcc5af25f91639acbee7cc55a7a95b4c91549290d243776c448218eb37116af693ad6173b26cc5731217cdff649cc1bb0031de9efbc963e90a35cd55390368e8d588aa3835e4cafe4305dbe6d1a28d207b8954690aefc7e3e6e6b1c4091870abe74c12adbf1ee775acebf281d7b603ce55beca09cd0e905728c654b354e9ff9ea7432e12e23081bc8e99659f1d61f9091765f91da4c9a0501cdd5a416fea916c300aac7e436f2ab09e1ed55542021270ff8a56ca4884aa9ba50073cf29450c79a5c483e75c1a489684ba45fecb50fcbed93ffbc9dab063fc395b3f3ec98e8e8a26bac45c9023968e5b21e99740c48808be354b075bb52af1fe06f41acd83d4da8c5f1d6181924bf35254d3f8099221cf87cc156624ba95d05ccd1e74efa8c4c2f4511826f5ca52822feb2a81c513d16ca968da9474a13fa742e3631aef7af81066e1f9299b075256a29253794eee9fc959126dfbd5521c629da29e170417a748d49f8a700053526c7dca81376475a9e2089a9d71577cf843a5110e2fb9a4f8cffb81cd47b8bdd8c12e0a7792338d43261cc30664d736cc7802eaefab997d768b086f61aec95ed99393ac2726a3a4429b9a6f62ddfe43c7cfe7602ca99d276d34e2e932c81c42993895f1ee39b00aed24d6d9a1fa34065b43daa88753ab484e42e295f07755814d48c668752a42a48bb8cd0df8a9c3c6b6175ae78e83f69b9f4ffcb78f1a0cf707288ec304bef748772ef98890ecacf5806a4e0b38d9044326b086a50b68354969fbbb1173b5536e31b4d7a4b3d198e3710196e8d8d97629e1dec78ffdc01a361e019bb8bb2ed46e413c6bdb2d78fa1f37e12fcb1f3e2c781ce42715508b0556f647b3f83ccadfb34d485544a9991df148a8e8a8f40db72b675f9716088f6568ebd813fab5014ee689eaa44b4b651e63d35430536587a3e553ae33fc59d1b5c51242124f19e1dc1ff150777eefc32111368ffc39ec69752ebe3ffc2220c0a32cab8219a3796833b9c4a51203f60e90a54307cb9389305b3dd725dd19ad387f737293fcdf03022406f1ebc3684cbfe2d54e13a0c3bbf959375ac6f468f6b5e4ebb2a99bc1834c3bc24e4d2f4d0d1fcf67f6c759a8fee16048fb1fb31c261c4487fd4a31e6495d46468bd8390cb825804c482790d299e1d64b1f6d470c6680cee91ae49f15e4166a9f6c0b1871b4b3caa43fd70a676438a2aceb0d01b6e08ef058c8b4f07fa3c72196009a9ed5447e460f13bddefb16824bfb01e7dbc03856de5ba4177334db4305762469646c7810fa7df732290a27b9e20701cbb2e498259ccb8e6f7831b560975432e9d7446eecd8b9df7d25c57cd094a30d2a45e11941b152112e6f8286e4f32eec2ca1fe337da48a1d912a0a5c7b5577c16fe5c756968bd90cc76d9be5910910d2731137d7f94203aab1f06e53b63341f5ea1955d9eff7c617868360ec84b1287558862cb0795ca1e0439fb37642a11754df2a9fee1e071586ce763afc995b238b6a58a50610ed2373e671e88eb8ff9ef89c84dbcc9ca6c9a93ba20d5c6645f8787330298b84462c5804a17a11ba8af24a13f68799cf132817a732eb8362a78bdfc1ab184a391f43d76be4950734eac812a1f71c4bd78088db3b5eb96d8980484794cc319ecddd18c08a42c218bcd2dda9182ff9f053938aa7b67e12d3a8f2e3228fda498c8aa41f66c08bc2645480a012911f2d7a5394e3710884ad8a26184d654be393389db2ff95d4c0be2c1369ae861be390402aa5aaa2ba27f3ca4bf0f0987b1517a97c1fd151e74e18ca154645911aabab9377aff6aac164cd5a8786bc7f65d9f089349a324dbbcb95db4cd9d6359a6cbdf452511d52bf24aefaa7bc9777d57b67ad4db8398d111632482950d32ff0acbdc72e015db89d6b5bc8640eb2791d245ccf11f213a48c8c341e952d33c73aa681974091fefda75417551910f162f9017a5c1255ff2708fa996231b8a7acdd22fc82943a484a2546070547ace592609eb243a7f452eb173d591d3b271fbc7e31a7f0318daf2fe845e850c703a79300f1edb9791aeb116ded94893be18d7cfbd07944ac0264fa4d94ced418d03a4087de867035f7e2e8db436d703616050b002042a2adefab5109e55d1b3ea9fcae668b32f3fc98f1c379146a6544fbdab30c465b5190930db2716d24f50b37497970939a11bbea206425743e5060b3ea048af5af92448d957fb064b17783b0fce16fc605e273e41f295eca459dcb1c22331385eb645a1a4fa1c74f91859e1b0782b916b0a9219570cdea017f19e27b00411</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.1. 线性回归 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250224~3.1.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250224~3.1.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="608dab8e050e6c0964954ebd67e64222837d7a9d8c9a550660dff4cb1648367a">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0be6e5bb3eaca0bb23639ded497721860397273484bc04f92aaad05ec8031e6998dae69200158b716a29d4023179439bfb53aa4f4bc4b7fa516b4d7b907a88304b44cb579ddfdd17d4d350ce6abcfeab6a94dad5ebd0c5149045e13e7b44b2c23aac85a593eefc8b1314ee048b6274cb1e13eeed1b6305ee0137aab014a79bdf5f80583f3d4958ee2f5dc76bdbc464265713c1f52083dafeac98f1f90ccb5ce8a92bcc61e8c9215e14e021abbc276b845a4739af4edfd4462f0c8318bd343ff3a9952bc16d365df7455a1d4c1b5a0a63b28d5a83f9ca326daa204421c28887544881a41199855df7f12ac24b4a83956b48ff75ba791016963bf597751cdcc068bb958f8c687cd807f9846b83f3f202bcf15daa71b0826b4c961095f010ad0ae77c7fbbb75416d0e51d26feb88d18b3b563545856889093f05f4cedc338906c51460d00599f3e50fd33f2d70e3faff03e3cdec0ac2053901c651fd3fc135d695a8834981e852469099417bb2f98e3ee0add344c14cd51f95afeb39bb6f0f242672f3e06d3b024f7bdb9959ea8234380484bb7540ea52b7d5055fa8a91d282c93b67f413dd9f1038a60383c8ae0bc0f01a11c52394187fd7f39b58a80436a8111401d858971376063df263037d0bed5992564349ca1ca7cef40692235d86bd9132b7dd7d4f0876e6847dfd3c62e3e6d2daa69cc947ca837acde4c205c2ea972110cfb55b9f967f1db3bd3bbd5784a7a24fe07ed4e4bff83d0d69dfbf10c01518c57eea5c70e7f46e3a7797b22bdc2c103623ad9cf0f2adb795f70e2faf635fe43bed27949b9c942d1333700c87a36ac16b59d931e048e46c8b1ec74785551179ae3bbfc76d93db373c5b1b5b8bb55816f9e653f209536e32bb0d9ac399c9b2e81b1ab9d93cecfcd3f08f757d98f732f679ae50d38fe5fc864562df794a836b6c3ff45dc44387d5112b53a89e4605e1c15a93ee1c94e883a054c69d80ffa2dfaac431266bbd2b058af419ffc8177693bf4a30170643894b91911e180842ebdafe82fd7233f053775ba6cc13ad96fbef5e20c761c38d59773b00418f83e0499fff72af4bdd8423da047469c582239069b4f777df6aec5793e7268f60ec2b1f1413466143cff3295cfae26835dc506fab6a114d09e11f164ebb0840adfd0a88e96fc2fe8e8b2ea989f7455b91994cb7663307725fea7be216f59f30477e7088b8da821d3dc0bff8adb46354667c0c6a4527d4b58d56a7eb59785fde03bd06caf09d0bb85efb1066a5bd90d25e23ea0854a2b10d8ab07f8abe09befafd59407275de5818e3ce6e2b65c54e2ff20f8a785241defb45488507dfa4347097f5a3c6c752edd7f30d1700c2a76c02d4aee1e042916daed93a28279dd041a0908cf208478472a591962fbb9fb58aedc3b62d684965b3a1c5036fe8789fe73977de65926fb4740ac78f1cead56b6c6cdb003cf34542965b9e90ad6c558c6f3e58c578c54237d0cb1695ea1f2c3aafd2dca4aa80e6322fdd263d24e3082e42fa21facef868b0e412b35e106e10b161b1022f27cebbfdd6791d1e4428dac99a47d127087bd94cda5791f044f7d96ba5dedd0bc46c03ef15f2384398406bd7293dd55b0f96d7825f67391f5a194fde7274227d4ccb38614ed6055a650f728c2b20b8b013a56422029a708caf05d3284d549d3943bd19c6bb863b0c0e04bfbf8a3fad74618c62bd08d7354841be0d5f696432d33114fba3075f973bcf6118f981a5ef4375a231100cf03f77e3de5bf891876fa29068b40ce3c83558b89cfc85ccd2c36e28965c0994097e1666f002c59134e8d59e58f5c4d7c7f633237ccf92cafb606df6919e2c088fa9f19114773d52e027e4a2aaf5fd3981f097c602a6506cc144a4448b96271c4e23632ee9ca483c7365e03e4c3fad86121dcbd9972fd33ea67a8f82aee32e0d0462ef8863a05fce9409946647c49d663bd5d9586971afcc207588197fb64b9fb11da054a35de11fe07cafddc2eab8dd790f5efe33d6ee6c65109fbfa0e67feca1b99f66f04157a4ee5e4959da1b76a940fbcbb09d51b8aa2b6901d5783729ff28e4bdb7a27e9ae7e0cdc424e0b5a1ca459e6bea2bdfc508adbd62965801b27d97a2760f78b0650cbd497f6b84cdb1a9e230c45ad885079e1e935988c2d0603eb01b5846e2bc2ab6c6c0f9051628bdd69ed3ed9de2c8f98202a589a265d8b694e66a1289f9edfbf96ac87e33d152d33e6f69ab8a87710845247f2e95b0e8122b9e927f218d20859c3afc4a6d7efa8aaed6158c275225aed44201e97eee6c7ee62f73d2842d079b451ae4ff6c22d7b835fdaab4e3191b81526a632f33516d60af4d34a4ae909eb7d843e8404cfde46b4777f982eeea5d384e11120f5044f4b4f95d1e61e8b81a677b24ff3b6076dc953be23235e3afb9cf30964e4a2c205886917dfd0b870296b9a92f8a586ccb0a2e636ceb097f2ac222152b0ae546fbaac4e2438698fe3556f9f57c5301d5a43457422748de711ed81270df5d29b3d8cba3e83fbe3bbfaf670b204192f632babc73bbb9993ff457896cb933538e16d1ba202d7841ba5b39c3dfa49552532dac86eed8614be57e0c9f7e750757a7c8b92879f13af87ddca8d335cc21a5c7e0947f2cc361674f6d3d38eb7a2d05aea9c5c119231c75056b6d4068b2c3bf7bcb0cbc35209adbf4df7cd2902283c455ac22e0ec70f5a02f93dd5989bf29dc7ee69104700133922c4ee06112eedf197fff2ba98b5481aeafc38d80335620aba8417d2321a3e22e36d2beafeba7f39029ead880a0f8a3c5b567df1b14c5939424e28795833940d4a6b1f051a9f2a0364b01eea8ca311a5f27594b2b014637575477dd7f25da89d33a9563ca8d50eab83f8b3d11cf3d17fc33023746a0dd88b9dacd01138fab4a4c1bf0760b33cca09cd336eaec76475a82b1c5262b5a6994dccff58329616f35be02b7256ce868a1e322d094c0a61aabfa79cf8f437c9112ee1ea5da01280264625293817474ae1ed936e7ef3c413884905226268689fa8e835a3a1e2599bce3e3e95ed5ed7b21dc5b2929a9f976e341fd0a317db0c15a8db6f5e40fce9f7dc1f573dd9ba01982c22a887c0a4a308a588a8f68b9071c18c0a52590b842736b7ef078fd643980c6b9e19c95fa44c0781791eabcaf39ca6958430d5f75c42f000ef8e2af6215f1d7bef5012a3f28a9f44893433541bd7c3101794ee93f9c13f840c155654fb2c44564410eef94bb3cf8d573d69369beca3a3ca41a2dcfd189ad831d44d60eab8dd770fb49d9a7eec948ed68a61f9b7d6c6f163141e962e72cc6561f664f2c35413ff166260bd78f31f6f0ead9adaa6492f77a984bbe63de7f6483b7a42d6e9545f87642d7d72c45242920ded7aa40df07b0c87bfd6710323bcb5d5fd0a6029fb4b51ab9e0c5447fef0544856739059bf6d7f8e5a8172fa36bf7b90297e1a3a5e49d493ed376d4e930dd8a0beab500287adcb41c9ecf6555df81011ffd298e0a0782dd9d4944ae8de9ddeaf45269349f56d27b723be8d68cb741d159cc94d4cee972797ac9fc85de3ef9d10681e29c87502eb7f3e0108140e7e5d3cf69e6f9158f51336104fa8c58cf211c009350778eff3e05b09b151460b927fe16f8419e8f12755bb06323db7c104af7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3. 线性代数 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250223~2.3.%20%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250223~2.3.%20%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="bef7cb714d195ff3d832f218d2a59d94cfe591ce212503d4525e02285615bd23">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0be6e5bb3eaca0bb23639ded4977218603f3e6867a5b74faee1da3a85e17d199380cef427295d1162b8178379dabbeb18ef13521ddfcb8903786c0d1b9ca100c9e5ff74fde486401a8dd9fbb740f755a13ceb00675e2ffc066704a2f6eb8a8e1d4f5989c394d7ad05367f61d56be5e904be72b66db8fc197521110aa21084e0df8bff14b3025bae6d420a38ef81d7b173ba7f9b9f4e9eb39ec8e40ab964a438eff8470fc8fd75eb8d05921086d52a22cb4c3d14c7c64b5995563c2122cb27afe65c3bbf47212877af083433a95ac567a41816a482a62da7af4437a735c3d519be218c3120ba997553a7c68d1b04905ebc8248ddb27f2ffa0116094c3a1a29fb61c99ad4f4b1088286944d10374bcb46f86de919bd5ba791d711e210b409c238f9014ebdf6899d9f548770a1adf1404674a58fb22ae43a9a314fb212d189203162073aa963a1fbb705068ef2eae0a0ee570be1c803a8d4311e96c5642c9faee6cf470c97ecadb3a25ab07f9f9d55cfaecf5e6d76545fb5739938c64ab2181e63c8435cb7bf747c9ac3213c7ac63e452b456845378d6d83918840259df6bd54d76c7535f9c3a1c949cb2de2b19df304d5445d54495eb488224adece3d4530aa8b96e6a19122ca05af1cfa36955173c1bdaa6a1722c5242c8303443e29df99a09b16f83cb05729d683abc5074caee135145d576d714cd71c71d52b46391be0b32e7c754b16f8c07b61dd64ae8078ad70426640bedb14fd92f1ba3453a831638c31783b27bfe20ec6281a22ab6a8342f2c2b3b3bcc43baa1f7c6733d172775ccc70ab46fae51c2ca8f5821c064b4e538af3516c018bec703daebd8ac6946acca01636152bcb54b1e0d4b239fb2553a05e3f38133f3a0a54dee66827ea8e6ef613d37b4d48021ee09361c26fc4845424a2f6abbae4e159e8315845b58d8884ddb4cbaba9d401f32cc7e1ae2792974fb2b09c06096f07cf78941349a554c0123fd2ea101f09dc4483d75c389ffb1e5f1f14994b654c5c75fb743b3f4b59305b71739def2b315a78616f5f64197e587893089bae41ad4dd91b3805ccdd4cdf09b87bf91ede330a9ff646eadd6f4cde96404a478423214e8f970c38498cb0106b04baa0cffaffd1967457e8365dcfd34928d7aaf6dba363222ac9e52746820a110b5b3488b051c0b1c76cad86da03b94666ba4cb303627a94705e5a3248a275123760ec88429dc1ae072a66da29a2f35dac9354f5f6496e1d757625dbfe4d18dd56d5b6391cd176915632802ada49c8198367bb7922fdeed6ec5e5b6e24e53ba8a9901c5a6932bf563c9c0a05d5e121b81a246ce77f57274fe7a6acfd68bfea393d07db8fa3d7c527faf9c9ca67ca4530a196d4ec8418ad485a9e1aec85a00d76793391ef908e1e01a81999f9dded91996e4ccc3ed1c5b2bcfad5b2d6baaf93f8e6b483eaa0d4d5841d6456e7967d1c19b0951e7bf3ef7e891b4e545e0c47251bdb709a0f85ca62fbdd3a12dba083a246fe22eab219d593b9069829b1b7fa95c70676d6d343a9a513514a0c730f08f52f0e9d8a8bdfd6891582bc9fd2eac9d869ac7ec913dce45a348bdd90f2e1cf4b095bfcd95c1ca9ea5f4cb128fe5da2e9a4e49e068e83f34d697773c6c556a696f036fad19b9e634cb900046f277b3b2650745f14be9ac4bb86da75924a723ed7eda0ce96a1bb780f47001bd606c11a2192c6e5aec2482492ce56da5ce623a62998dc20f18c8f5635fa04034721ba85205f324890d84699f73e58b32b3e142700f0b2a52b52c2384b8f8e5f6965d637d8ead8e9bcb2b7035f190b91ab612a8bf353d7d4d53404527a02cddf83f8f4a3e5a85b308a48c64831f758cc798ebcba253ff57290b3c46835c6db38022296d5098e8da23b9427b7f610ceb96ff946a98eec326680ec87eaf73bc742d1afc87b678e7e9459e09b6cf5f01a9a4cf4ce24d9943afe4ba4753a32eacd560511f5ebb84ee748f89137804504f759846a2053d62a7a46f10129d9c96232443de9958a037bf4e9300cd6761be30b7507cc124a046bc29434a8502a8b0a05791697eab297995a63c6cfdd00311f9a896b48d0bd976e5f75d971fe49f89c27f822e49423a5997819ceb8e6dd30fa562126da1c99006ce0cbd38dbfea2b57299ea43cc120ef0872093a2de6866281ad23ba4159fff9eb37973563e1e0b80dd8962d2459f4935b32c1ad6e0e85c42fa656148b5e4a210b5a5ac232563baa52def44a04e315a33bca7a5ca842bd8403c2752d82279b3b31d55490bf23a92b5c703ea67996361b8ea68ca92fbdaddacd277ca87a4051dae5d5193d8e436a04e0d4ac22aa36773131ce10221253c454bd7334bdc2e1aa23f6908b369e0e75d493e97af43eb90d980fc4d76a46dede3c7ad48999931305ed3f286134dab66f9ffb46b7baff2780cb1e6a3f21717a03e53592c441aea7095efac4eaf2f745775634d8d317c119361ece5ba32dfded3153a70e7468d324c607693b0d948096f7f8b534fc2ba96015d56c280565847562588354e88c753b970829194e2adb7b00d28d0019b10d906edca44b2600fab6ca3c21064e0d94b14653ed090b710930ca16cf7a5851c6cf2b22ca1f3855ef0eedbe2bc7a6149dcbcecb394aba0b4594e960947e505af5696bd3f4315d14394a5c1c956cf915d2f7d973bba80f7fdd44c70c2cd5e1503e32991a16e9f5cfabeda261d5ce55ddb6ec58599daa463902fdb11a2f31e9d135c6ab32172670de1f12b878a2250cebba366b50c259b640aa7abc868a904e9450ece7ee9ae202be223946d597d6db40a1abd49e288ce3fcc563af7c301cf43b31428e86d67ffc4a594ec13ee2be933eec65cb77a6ebc0a56dced2c37650440a3d6c4d63af101b934af31b2b16c957c6075d5f71e7ba362697272b6a2373afd50c8b6d5de446ea5d8922012811a0d1310bf70065c7f229cb98791d9701141f179c67806ea4d0ede4bad4af3932208608e48f38971f3e5f3125406faa07458d50959f754dc3dfbfa27222aa376c64b2013b884eba5c8b787d5fc630c6ec1f47a27c17b402754e7755df64ca631cdfae99b52764f6f1dd215e6718285896fdf7fbc04897625b11cb123ea1f85b0effbf204da0ee2d08ca5246ce8ea7811ca4a3d4d9548cf5c2e306a3f2afed78b89ae733ab9a345707faa07adb2d5d74b11bbd642f01eafa1ca28f96cbe9155e3bd7f1bedd19f261b3605ec674933a3d6fdde5a69e531d48f80e00724417ed308e70d133eb7abc13d2c3ec6ed4d18f2a4dbdf9f3a007c0b321403eff5bfde7a636938a17fef5cc93274122560ebfd2f7b1926dc8806fd15749f4144763002cd2c8236ecde915d4dc4c4e62abb749c6884d6d35fa1cda0ace87a75a76b769d099f5a85328279665b4dd022e9a41cefb2e92760a6046c2f3f0e599437590be599fd4ab77a9c9deea4bd7b8f5b4912d4acf849adcb1899459dcb8d94fc72801403ae87a0bd4dfa8c7e077d695ca0da5e63d15c3cd7ddc9eeb25bf6e45fd3c70715cf46cb9a43f25215d0687dbce9fc44e047a985ee10f10ef9725791d090dccd2cda29c3ad29c853c9ce292d7c7db4a1399c9bcf49f95120daea16d35f5631551924be017019e0e4ea3806610cbe4963c70a45e5ffbe9a9ca017cefb738acc9ddce3fe0a3f5988cf2f16af6e2acab0c94960b65a5e1cc0ba7548280b9461ef0f9e870f1ddd6b1182e67ac46f9e401ee6c80ba6dee03fbbcdc4b861d21b63089246da0345646bd095f2ec8c617252466949778f0970a58181078cd470191dfabfa1e3f8ba67b963d4e9a6568ce7e14f80d94c23bcd7e88ae62c6825b2d8ebe631bce943e35c9b927fcc1630b028ab2ad60fb90a9c29826172d1ff59f5d1a80d32351df927793b845b2c5b242e597f5321e21eb2669295dc3053800e5f4ab7dccfaa1af25ccfb2d4bd3292d32011057640add3e254a392b88007de79d5a0894d3e81388915776987b750a591765289c66c7da38f00c813490db4755d466123d2c962b7ff1d24ebc37fc8cb3e5bbf8995a26cbc05fa01619a905aa2ccb0953c5c407c17f3376e442973a21c8a38770a539e853b0dacc30081e37557b57f1d3a4651389f2ba500f2a9752dd8af3a75ed048aad49c907a3d0ace049e1b09737301e246a1320eea2781cdff0b45ce632d19495a8f4a7ff48796db7cf976403a047a2eac2870460190a59c129e3e5da4719d9bc19e2637f8d7a5aaa106d807caa8ff3b2f5c6f090051eba63ea4c98dec52785d4ddd1e62db6ff73ce9eef11a69b09b37265271aed067adbac74e63d897c6f838a9ee7ee5f95763adb32633294299a91b4c92fe89817b29b4ec3120346b72805659c286e55bf42ed920fe628cf164d59a6860cd77d4a09fd0639d57f962b181b5ab97b0abf36fcb7bb7693635f62d834f657071281553c62ff88c4169491f3cdfff3edb9f8ba789d5b5c3d827efbeb5343651f505d4166f65d7e9b5cd9d94b87befec282437c6d004a6d19d8e8e228caee73c5ed9490f3bd79cf7cc5e41a51f0bcc9c1b327ee4039bf3757bb942d3b5fea32d99549d42341b818bcc3d2d2677f6daba486c3831d0476b00a721c261e5fc0f7269ba4ddde253981a9c3f22d8a2248883439893289413fe30cbc30f984522f89ec50e8dc8d80dcd0e61d2bb8493dd0064d62babd3d5857821204d1e1e9010c1e0276ee9ffa015491149dd618c71f8a5fad3180f6e3a9d6a2d2fca353afb3eee3302eb2de7383cd76d1763197d978e049b9df55b2246754bef3e9a4159d42cbf89b80e697524627bccff6a1d630354107d20616163c02dc4c1423feaf6315d78dd7a3f820dd16c2488b3ebff5a01f17061c252664339bf5e9a165af709f25e33351ff959fd7e40ff60313dce6bec86b538e0f3ff8c7c0b8e63457241105ca7eeac32cf78af8a049904b122f2a04cfd005ad9bbb7a19afff03d8b7191fd926e363e0c928f8ad119eb08df8679dd30e457b6d0572eddbbff206b88f2aa83c6eefa95dd70cb0b124f0703979419623ab57d401ddc126aa6fe9514eb942ca299e419adb895871b90ad379127e20509491d85085faf2291ce6645e1b0925e448048c8db58eb28ed6cf5aa2a1dd8f117ef61c515add7e9cf9b75d548eeb6c51314db493a076b899c438d9fc0a993c23869ff8ceccaf3f6aac7e952eae42387c885594b60139dcd3dfc6a55b88eb1f30134dd2981bf0dff567600b48de3f9b67233feb45535c47f250fcdcfc9ff0ad62cde5766eb637c25ab0805e3859d77dfc4d04b5e8b45a1140421e845d674385fb1b338cee3a4db5b0a46da3c369588550930d8ac4eb9bf71cfd9535d46491070cb733674979fec986be3f9b9e4dcf9c4d07839ca451318f6806f1fe37b88e789b537ce57190f42ba14f96d24382f7a951c69d6099752d3fd25c98630b5e0ce2fe6479e9eb460257b3884e272781efe132d83c2bc22e395e34ff1eca72cd3013377966d8b7d4bcdef06518abb4e404184b5f36dd77797b52c6ba38c14990a6e33798b20ac8043cbb8c862b467f88fb55a6441e8d0bd8c1245b64fd509c90c23a8e9daf39af9de1f58a324da266d5860497d5cfa36a503c3f4240d55845d71d1d20af0c9d6ba5460ec460c80f0cb106351baf0edff08bb0865a60b1a584373f7a29eacfa6423197c442e3d398f7452d74640cbe8e65c6511ac3b2c55885316332632854</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2. 数据预处理 — 动手学深度学习 2.0.0 documentation</title>
      <link href="/2025/05/24/deeplearn/250223~2.2.%20%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250223~2.2.%20%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="2ded3f5db11dd2813ed118a1fda34ffc39fa83175279000aea24f37ef7c73328">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0be6e5bb3eaca0bb23639ded4977218603b9679f7cfc9cb143cb51c1edae737efc6a97eba16dda079aea925a903ce169455dc1d81f678355994ed26ee1086524ebcf849eded597c557c2e752700f8f76c8172d93a7d1d8ff92d10d6f6f22c5064ac9d12a5ef7a56946e4cefc266fc1802276a1900420992f766b685d126f18a8866cf2199ade71cf355b7f779fb1540182d7b18d24001e96883b440c5a518cc17315c04d71bf99d1a0668e164edbc2c1f8590e6b772af195659ede6cfab7f1c7c0f92ceb7082f07f08f586dcca687e5bcf9d44f52e5a20cc7c98818dbb22bc47fbc5d4ad67d91efb44845b46aeaadd2321ceaad9576231079ddca70b5d11a24fb122a21e51580eff67cbdc0d623d871f319f3854fd408fb90d515738c96a6471578ab95a79593a206786d7f982afc47e952e3adbc6512496c9a7c78f1ef454d832d0a75c09f2a09ec3d473e1d994e7eb2c7dccdaff57a4c6053186a0d1881c0a1241c541457b62995def05771c2504f87f524a256be665d6bc169512c086e712e412ca628bd33f1c33042e06a5b10bc0cbd2ca6fc535f9a491f8d2ae04ab525b5087c10bf29f9adcd32503dc6b27a4b1e98dbcbf95be735232f7b44acd7f94c1a9cbe38a94ed8ef4bd59e87fef08902ad0076ddc04c32a8310668f4d2abbba6dc7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1. 数据操作 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250223~2.1.%20%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250223~2.1.%20%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="bd6ea99678488cf578ddec0253499999e3e30657804e8dd076fef376b2ab7886"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于本地git通过ssh链接github时 time out问题的解决方法_github timeout-CSDN博客</title>
      <link href="/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250218~%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0git%E9%80%9A%E8%BF%87ssh%E9%93%BE%E6%8E%A5github%E6%97%B6%20time%20out%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95_github%20timeout-CSDN%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250218~%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0git%E9%80%9A%E8%BF%87ssh%E9%93%BE%E6%8E%A5github%E6%97%B6%20time%20out%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95_github%20timeout-CSDN%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="d894e77ab85782996e34728294be5f5f1fc9b6d5ea3528bb05255c07248222dd">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0be6e5bb3eaca0bb23639ded497721860353152da486ffd70d61bb969f96c83912c8cdf69c4a4a6cb82a82aadc15adbd86643152b792b5127484fe1b434294b6561db06a77eac2128edbb7472f07970453fe827a6f7788a162063844679b637c0b76c5aef0318d70eaf7f30cf76c37166b705f924e54bc315621ed9668cb94e45c47e5ecf81766634493bfc5ec457604dcbeae26b5ff422ae9a757b925aa47cc8c160d42f95a123a588cb06adc664b302f58bdeb426d3b4d1d71448529a7950333714978843ebd62f1b559e15be7c56143a13cb50a629a5670ff5fb12151278453f34ca01f3d735357dca8ac4babced46445717c48cc53c30a2e266af4c3137583c6f583309e0b07a7c485c4f28b20a6af403b81473ee204bc2fb9606ce1448d201444ee0c856152076f3c968ab8658c50c129bfa536f28b81e84bedb21135eb58d41cb973f72804ed9ef4cdd40b802106b7415f017102ff5d6324f8c3f9f1e2b9af8c73fb47a25f6d84bbf114dbff25ab325c9fad01191a9710832b3b66cd7300e9187f371c1ce2b0ce28274c92de8399f24a902dec244273fa20aa56066ffb71388f409099fefa6dc6808349343a8bf7d52623eba4cece05ec6d7d57d67b46faa332c5e02c2982a09aa981079fc3d90bef2511c1e01b8880ed76dd948863fcaa8c57cc759a88cff67ed9bda4ab954ec2fe4e6539fad35f540f9810a03dafabd8c5ff08107a45180b0bb3e5fe688c7b192940dff0b6f06442e0a31886792915c026f65443b8ea311fbc65f495177ddcc7fc5a46c746dff2f8a79a817827a1a32642494d0302b98069487274b7850d6fcb9fa8ad0f451411798c3feb6b207ae79711e531ccfb00d6024332799779b3064579bfe0759848f4b568dbb408da9aff0b11f38aecdc97fd516e906a165725425340cebf61d29cb0850ade47a129b3f3c43bb926d3b96ef785db8a5d1a9141b13138583561ca3f8c77cb7cf1b902d204a166566def6fa948c0eb2589f2f353679ee62a6c46c06962edadb4c4637bff5fe80916208d2f839ab02d65e6fb956b41005fc8e5f28089da7f0d9a165e4df84f0145c217f88ea7c2a844a75e66f40b6c6d95722a49daa18bbae49cef6efec9fd94bd863fcb165abee50764fd183ea770ae49b806c68182c9569c39a7e55c0b2771df4045dd3f1e6c900b2c472f2500037f9ae8f15203df4ae963e144e95c7807603a9be47ac23c72365802509466beb9de207a9289c5143f8ff4f7621820502eece3bc617621886dc9c232224c24b982a9be93f2c5058f971450be98dd68109e2a8d99612679fe275afb953991c1af4ee1dc59126028a5b644149bacecadf532d6dd652e87e6945397c04e3934c7adcd001447ed23d1d71ae03f5c5c1c2e3244617b0e17bdd84d60b65534e2eb3e25b427c395cdc756eb8ddc96bd64bb7d8162ba596221b4895a9196a8bc8a5f19877d1f01f37fae2e9b1efbcf56288344231f33339d08f83d0bc58b867a8fd62cab366c3ecbf5d0f231ac17b6032209429ca480901df9c381bb8f2bf31916ad4e362ef2c2c8516fd9e302a3c5be65f1b67a2395216d23b4a7e300216440de39a0528b36361115b80155265ee97da3efac2d8e4fc4cd776b2b4be2056b35d1950ee1b011481df8f3e1688e2b21f2dca21b9e89f40317b319065ce58a0d3d242e248fdcb02d2417f69c3b71233cc08785a228a688ea481b4501c82f8aad0e32b8199a2f609b80c8a1743c6c779d2b6bdb8983103c402f50384b01f8423b98e4156cc68280b979336698a27f5625626c8b2eeed84b88bd787f726bda962c978159c0443eef433fe84746febe94be12a6adcf20c8043ce5ec259a1d6059c8c1e6f2dd0f29b8484b315dd936a7c7cfe85512863adacb5f2c87e81b86f17b8569654edcfa3249835e939bb1ccdd47d34a5769120aab20c11ee5bbdeab18e8e4b5ce5d04d9a83e7ad606a1b9ac7bdb2ae4559b38aec641e7933ae81c926bdb3a460db425d49ea845aa02c95ac004852744fc03c757522eb70b35be0ef678165d920ef698f612ccc870837d1062b8047366cd305e8bb86e0043dc5907693c07ff2375bbf5267295896eab3489a7f23d06ad1f148aa4f719bfc68be7dd65d5f9749dc78e462de73d3b6350d37f300c07e3b767b3b9c5874b3eda7754defe9f66925401ccd22432a25f0c19f4230dd7654b94a1fa1e07ee62abfcfae1fa6a02b4425ff116267b2cceb416e3e41ebf6744175a02e8400cea9b3412bbf5399ff5983ffcff1895ee8ebb482dd5d3fe8cdc413a3a844dbcd1d7b734871a94cbdf4f5a2c41fb334624467ff856bca7304b59dcc26914e757073ec07191c632b03697c11dfd8600470d775d0bacdea7b51c96044fe10c07e9385c7fc0f127b2b795b60b4c296a47ad6109beb7222043aaf087902a1bf761b23aba4415a53e733baa5c0635349f5f661125ceaef9c8a10fd1b9066e95767193b8c9ac</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL Ubuntu22.04默认用户（default用户）更改_wsl ubuntu切换用户-CSDN博客</title>
      <link href="/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250215~WSL%20Ubuntu22.04%E9%BB%98%E8%AE%A4%E7%94%A8%E6%88%B7%EF%BC%88default%E7%94%A8%E6%88%B7%EF%BC%89%E6%9B%B4%E6%94%B9_wsl%20ubuntu%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7-CSDN%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250215~WSL%20Ubuntu22.04%E9%BB%98%E8%AE%A4%E7%94%A8%E6%88%B7%EF%BC%88default%E7%94%A8%E6%88%B7%EF%BC%89%E6%9B%B4%E6%94%B9_wsl%20ubuntu%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7-CSDN%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="972edd42869e85d47acb7c7064a9a9939308da79eb5ddbc4af0ac635701a5143">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0be6e5bb3eaca0bb23639ded4977218603eed775c8d127a82dcd6bf564ba59f21e2aecc7439af961c87aa31ab891939e36ca9db25dfd2efb2065935264c1fdf8cfad5528bc5688317ea04986ab863b8fb78becefcad4020906b0b3ed3c6994ba79e8e31ab4b6de95ee8ffc97445b628380f80927dfd80f314c78464d4cbb97f800adb5646756edbf8e7136f3d271160fc76a041702e6b9fdde151701281b87e1f6b30058af15747c83ef43c74f89d742e30699453a1680ab80f1b94a588814d169dd63b28f539a37fa96b207da4906bcf61592394b8b7051dfbf0ba9bc0be27e9a77a984d3b2a2854b3bb61b2e6e58052b1ff1a76a970996bb5d56eb6bf542b77dfc6e042b01b1d6305f2f9da54300d5f742d4139d77b27f1004d07495252ba76893caf9657645d2917fa3420f58c0af1565e4baa8caf4f410691f3f9824c573bb6252a5f380894a47057697e0707dfd212d656bbd8ea562d33d89e06a6f6e3e42d28e42c9ce0135903031e181cfcb2b63c4ebba6230b2adda664fbb2c162f905b6fda643e671082e8f4b8b8e75ada62a2997e4c875019df8ccd9c15ff5594fc7ab4b566835dd85aeedb18bebd80683e222cd390552fd51583d717dc75ad1b61bdfbb3efad13f9bc037ae044a31e3e1a6e13096aeb67d72d547ea6c34b1c8efae732df0cbad008f2e13a6c51fcde0a165f15e3c1814155c05b886f668efdf8ea25c0151a022061cb4e4750b0fef7eba481fa3f91ee36713d4fbf69d104e72882547f24b871330a5695a309c6747613e8d1f24becf3c4362604211359c6ff4f40722b96489b2d9ebc7ecaa9b1336f4b90f51fe1351f2b63faa5eda533eb537cb1442a8c6a4a817e8653fca5a1f3a41d3ace77365ec68550f3444c55427c77d9a8b90b0b90eb8abfd0514d63ab1629b918b1beb54804985858cd2a8fde48d376cbe9577655a77f7e4849d74340b9e7f3a757d30a9e5b0ffe23e677f98699255be89392d5d2be27aad00a0cd13b993d526992b8a7b01a5804b569c6e55dfbc565b1ad</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. 前言 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250211~1.%20%E5%89%8D%E8%A8%80%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250211~1.%20%E5%89%8D%E8%A8%80%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ec9500ec01fb2b9e4eca8c573a7c2f017a8458762ee29c9f5ea09dd78e493dc4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研交流</title>
      <link href="/2025/03/15/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E4%BA%A4%E6%B5%81/"/>
      <url>/2025/03/15/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E4%BA%A4%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="f9178c205ff7e1d614d89fe2fe658c09ad7574575fa79c661b0f221f6c1af451"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苍穹外卖</title>
      <link href="/2025/03/11/java/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
      <url>/2025/03/11/java/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="510158e7e1a451e4811c3d0d695aa26db7f9cff81c84136ecab8c520cecea3fa"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器常用命令</title>
      <link href="/2025/03/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2025/03/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="一、程序测试的常用命令">1. 一、程序测试的常用命令</h1><p>其中<code>top</code>内存监控输出的文件里面，每行对应的数字分别与如下对应。</p><h1 id="二、运行的Shell脚本">2. 二、运行的Shell脚本</h1><ol><li><p>首先在Linux系统中新建一个文件。</p></li><li><p>之后在<code>mlcs.sh</code>文件中输入要运行的命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> -9 进程id  <span class="token comment" spellcheck="true"># 提前杀死进程，只限于咱们自己用户下的进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&gt;</code> 将内容输出到文件里面，如果原文件存在，则直接覆盖。</p><p><code>&gt;&gt;</code> 将内容输出到文件里，如果原文件存在则直接追加到原文件中。</p></li></ol><h2 id="内存监控命令">2.1. 内存监控命令</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">top</span> -b -c -d 2 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"你想监控程序的那个名字，能唯一识别就行"</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token string">"输出到的文件名字"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   例如，我要监控名字里面包括<code>mlcs.exe</code>的这个进程，将信息输出到同级目录下的<code>memory.txt</code>这个文件里面：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">top</span> -b -c -d 2 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"mlcs.exe"</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token string">"memory.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   其中<code>-d</code>参数代表几秒监控一下内存，这里设置每2秒监控一次。</p><p>删除所有包名称包括mlsc.exe的进程</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">pkill</span> -f me_test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   断开终端也可运行某程序的命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">nohup</span> 要执行的命令 <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> output.log 2<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   比如我要执行程序的命令是<code>mlcs.exe</code>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">nohup</span> ./mlcs.exe <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> output.log 2<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   其中<code>output.log</code>就是日志输出，随便什么名字都行，默认存储到当前路径下。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">touch</span> mlcs.sh  <span class="token comment" spellcheck="true"># 其中mlcs是文件名，随便起</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   比如我要循环执行某一个程序：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">))</span></span>    <span class="token keyword">do</span>        <span class="token comment" spellcheck="true"># 要循环执行的命令</span>        <span class="token comment" spellcheck="true"># 其中可以通过${i}或者${j}获得i和j的变量值，进行命令拼接</span>        <span class="token comment" spellcheck="true"># 比如其中${i}就是获得变量，将最后运行的结果输出到result.txt中，</span>        <span class="token comment" spellcheck="true"># 其中结果指的是在命令行输出的结果</span>        ./w_mlcs.exe <span class="token variable">${i}</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> result.txt    <span class="token keyword">done</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   一定要在Linux系统中手动输入，不要从在Windows系统下输入，然后将文件传到Linux中，他们两个系统的编码方式不同，否则会运行失败。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> 777 mlcs.sh./mlcs.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mit6.S191</title>
      <link href="/2025/03/02/deeplearn/mit6-S191/"/>
      <url>/2025/03/02/deeplearn/mit6-S191/</url>
      
        <content type="html"><![CDATA[<h1 id="概述">1. 概述</h1><h2 id="感知器">1.1. 感知器</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302173357938.png" alt="image-20250302173357938"></p><h2 id="激活函数">1.2. 激活函数</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302173418796.png" alt="image-20250302173418796"></p><h2 id="损失函数">1.3. 损失函数</h2><h3 id="分类">1.3.1. 分类</h3><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302180326931.png" alt="image-20250302180326931"></p><h3 id="定量">1.3.2. 定量</h3><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302180340787.png" alt="image-20250302180340787"></p><h2 id="梯度下降">1.4. 梯度下降</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302181222102.png" alt="image-20250302181222102"></p><h2 id="反向传播">1.5. 反向传播</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302201710606.png" alt="image-20250302201710606"></p><ol><li><strong>反向传播（Backpropagation）</strong>：<ul><li>反向传播是通过计算损失函数关于每个权重的梯度，来更新网络的权重。</li><li>从输出层开始，逐步向后（即从神经网络的最后一层到第一层）计算每个神经元对总损失的贡献。这被称为“反向传播”，因为它是沿着网络反向传播误差信号。</li></ul></li></ol><h3 id="反向传播的步骤">1.5.1. 反向传播的步骤</h3><ol><li><strong>计算输出层的误差</strong>：<ul><li>比较预测值和真实值，计算输出层的误差。</li></ul></li><li><strong>计算梯度</strong>：<ul><li>使用链式法则（Chain Rule）计算每一层的梯度，这样就可以知道每个权重对于损失的影响。</li></ul></li><li><strong>更新权重</strong>：<ul><li>知道了梯度后，就可以使用一定的学习率（learning rate）来调整权重，使得损失下降。具体来说，如果权重导致了更高的损失，就往反方向调整它。</li></ul></li></ol><h2 id="学习率">1.6. 学习率</h2><p>学习率自动调整算法</p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302202502602.png" alt="image-20250302202502602"></p><h2 id="分批梯度下降">1.7. 分批梯度下降</h2><p>？</p><h2 id="正则化和早停机制">1.8. 正则化和早停机制</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302203604219.png" alt="image-20250302203604219"></p><p>随机丢失部分神经元</p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302203650285.png" alt="image-20250302203650285"></p><h1 id="RNN">2. RNN</h1><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302210306088.png" alt="image-20250302210306088"></p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302210728169.png" alt="image-20250302210728169"></p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302210739335.png" alt="image-20250302210739335"></p><h2 id="顺序建模的设计标准">2.1. 顺序建模的设计标准</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302211357941.png" alt="image-20250302211357941"></p><p>Word prediction example <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&t=1910s">31:50</a>  - Backpropagation through time <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&t=2020s">33:40</a> - Gradient issues <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&t=2235s">37:15</a> - Long short term memory (LSTM) <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&t=2400s">40:00</a> - RNN applications <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&t=2640s">44:00</a>- Attention fundamentals  <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&t=2806s">46:46</a> - Intuition of attention <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&t=2953s">49:13</a> - Attention and search relationship <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&t=3082s">51:22</a> - Learning attention with neural networks <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&t=3465s">57:45</a> - Scaling attention and applications <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&t=3608s">1:00:08</a> - Summary</p><h2 id="随着时间反向传播-梯度消失，学习能力下降">2.2. 随着时间反向传播-梯度消失，学习能力下降</h2><h2 id="lstm">2.3. lstm</h2><p>通过忘记一部分</p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250303154530054.png" alt="image-20250303154530054"></p><h1 id="卷积神经网络">3. 卷积神经网络</h1><p>获取不同框中的物体，两个神经网络共同使用。 </p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304202546754.png" alt="image-20250304202546754"></p><h1 id="强化学习">4. 强化学习</h1><h2 id="自动编码器">4.1. 自动编码器</h2><p>将数据编码，降维</p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304220654243.png" alt="image-20250304220654243"></p><p>解码器</p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304220912390.png" alt="image-20250304220912390"></p><p>增加概率扭曲</p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304222137386.png" alt="image-20250304222137386"></p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304224849011.png" alt="image-20250304224849011"></p><h2 id="生成式对抗网络">4.2. 生成式对抗网络</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304225133095.png" alt="image-20250304225133095"></p><h2 id="强化学习-1">4.3. 强化学习</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250322173651016.png" alt="强化学习与无监督学习的区别"></p><h1 id="致谢">5. 致谢</h1><ol><li><a href="https://introtodeeplearning.com/2021/index.html">MIT Deep Learning 6.S191</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cate深度学习 </tag>
            
            <tag> 麻省理工网课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy_pandas</title>
      <link href="/2025/02/23/deeplearn/numpy-pandas/"/>
      <url>/2025/02/23/deeplearn/numpy-pandas/</url>
      
        <content type="html"><![CDATA[<h1 id="NumPy-与-Pandas-用法总结">1. NumPy 与 Pandas 用法总结</h1><h2 id="NumPy-用法">1.1. NumPy 用法</h2><h3 id="安装-NumPy">1.1.1. 安装 NumPy</h3><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导入-NumPy">1.1.2. 导入 NumPy</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建数组">1.1.3. 创建数组</h3><ul><li>从列表或元组创建数组</li></ul><pre class="line-numbers language-python"><code class="language-python">arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>matrix <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用内置函数创建数组</li></ul><pre class="line-numbers language-python"><code class="language-python">zeros <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 全零数组</span>ones <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 全一数组</span>arange <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建一个范围数组</span>linspace <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 等间距数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组属性">1.1.4. 数组属性</h3><pre class="line-numbers language-python"><code class="language-python">shape <span class="token operator">=</span> arr<span class="token punctuation">.</span>shape               <span class="token comment" spellcheck="true"># 数组形状</span>dtype <span class="token operator">=</span> arr<span class="token punctuation">.</span>dtype               <span class="token comment" spellcheck="true"># 数据类型</span>size <span class="token operator">=</span> arr<span class="token punctuation">.</span>size                 <span class="token comment" spellcheck="true"># 数组元素总数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组切片与索引">1.1.5. 数组切片与索引</h3><pre class="line-numbers language-python"><code class="language-python">slice_arr <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>                  <span class="token comment" spellcheck="true"># 切片</span>element <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                       <span class="token comment" spellcheck="true"># 单个元素</span>row_slice <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>               <span class="token comment" spellcheck="true"># 第一行</span>col_slice <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>               <span class="token comment" spellcheck="true"># 第二列</span>sub_matrix <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true"># 子矩阵</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组操作">1.1.6. 数组操作</h3><ul><li>统计操作</li></ul><pre class="line-numbers language-python"><code class="language-python">sum_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 求和</span>mean_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 均值</span>max_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 最大值</span>min_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 最小值</span>std_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 标准差</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数学操作</li></ul><pre class="line-numbers language-python"><code class="language-python">add_arr <span class="token operator">=</span> arr <span class="token operator">+</span> <span class="token number">10</span>                     <span class="token comment" spellcheck="true"># 加法</span>mul_arr <span class="token operator">=</span> arr <span class="token operator">*</span> <span class="token number">2</span>                      <span class="token comment" spellcheck="true"># 乘法</span>exp_arr <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 指数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>矩阵运算</li></ul><pre class="line-numbers language-python"><code class="language-python">dot_product <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 矩阵乘法</span>transpose <span class="token operator">=</span> matrix<span class="token punctuation">.</span>T                    <span class="token comment" spellcheck="true"># 转置</span>inverse <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 矩阵求逆（需方阵）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="广播">1.1.7. 广播</h3><p>NumPy 支持广播，使得不同形状的数组可以进行运算。</p><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> arr <span class="token operator">+</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 广播机制</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Pandas-用法">1.2. Pandas 用法</h2><h3 id="安装-Pandas">1.2.1. 安装 Pandas</h3><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> pandas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导入-Pandas">1.2.2. 导入 Pandas</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建-DataFrame-和-Series">1.2.3. 创建 DataFrame 和 Series</h3><ul><li>从字典创建 DataFrame</li></ul><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>从列表创建 Series</li></ul><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="常用属性">1.2.4. 常用属性</h3><pre class="line-numbers language-python"><code class="language-python">columns <span class="token operator">=</span> df<span class="token punctuation">.</span>columns              <span class="token comment" spellcheck="true"># 列名</span>index <span class="token operator">=</span> df<span class="token punctuation">.</span>index                  <span class="token comment" spellcheck="true"># 索引</span>shape <span class="token operator">=</span> df<span class="token punctuation">.</span>shape                  <span class="token comment" spellcheck="true"># 形状</span>dtypes <span class="token operator">=</span> df<span class="token punctuation">.</span>dtypes                <span class="token comment" spellcheck="true"># 数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问数据">1.2.5. 访问数据</h3><ul><li>行选择</li></ul><pre class="line-numbers language-python"><code class="language-python">row <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                 <span class="token comment" spellcheck="true"># 按位置选择第一行</span>row_label <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 按标签选择第一行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>列选择</li></ul><pre class="line-numbers language-python"><code class="language-python">column_A <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span>                <span class="token comment" spellcheck="true"># 选择列 A</span>column_B <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>              <span class="token comment" spellcheck="true"># 选择列 B</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>切片选择</li></ul><pre class="line-numbers language-python"><code class="language-python">subset <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># 选择子集</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数据操作">1.2.6. 数据操作</h3><ul><li>增加&#x2F;删除列</li></ul><pre class="line-numbers language-python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>                   <span class="token comment" spellcheck="true"># 添加新列 C</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 删除列 C</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>数据过滤</li></ul><pre class="line-numbers language-python"><code class="language-python">filtered_df <span class="token operator">=</span> df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true"># 过滤条件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="统计分析">1.2.7. 统计分析</h3><pre class="line-numbers language-python"><code class="language-python">mean_A <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 计算均值</span>sum_A <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 计算求和</span>describe <span class="token operator">=</span> df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 描述性统计</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数据处理">1.2.8. 数据处理</h3><ul><li>排序</li></ul><pre class="line-numbers language-python"><code class="language-python">sorted_df <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 根据列 A 排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>缺失值处理</li></ul><pre class="line-numbers language-python"><code class="language-python">df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 填充缺失值</span>df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 删除包含缺失值的行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数据导入与导出">1.2.9. 数据导入与导出</h3><pre class="line-numbers language-python"><code class="language-python">df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'file.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 导出为 CSV 文件</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'file.csv'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 从 CSV 文件导入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="读热码转换">1.2.10. 读热码转换</h3><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>data<span class="token punctuation">,</span> columns<span class="token operator">=</span>None<span class="token punctuation">,</span> drop_first<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> dummy_na<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>主要参数：</p><ul><li>data: 要编码的数据，可以是 DataFrame 或 Series。</li><li>columns: 指定要进行编码的列名。如果不提供，所有类型的对象列都会被处理。</li><li>drop_first: 布尔值，默认为 False。如果为 True，则删除第一个类别的列，以避免虚拟变量陷阱（dummy variable trap），即多重共线性问题。</li><li>dummy_na: 布尔值，默认为 False。如果为 True，那么将生成一个额外的列，用于指示缺失值（NaN）的存在。这一列会在原始数据中出现 NaN（缺失值）的地方标记为 1，其余为 0。</li></ul><h2 id="使用-NumPy-数组作为-DataFrame-的数据">1.3. 使用 NumPy 数组作为 DataFrame 的数据</h2><p>您还可以使用 NumPy 数组作为 DataFrame 的数据并指定索引和列名：</p><pre class="line-numbers language-python"><code class="language-python">python复制代码<span class="token comment" spellcheck="true"># 创建 NumPy 数组</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将 NumPy 数组转换为 DataFrame，并指定索引和列名</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'row1'</span><span class="token punctuation">,</span> <span class="token string">'row2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tensorflow">1.4. tensorflow</h2><ol><li>转换为tensors，不能改变</li></ol><pre class="line-numbers language-python"><code class="language-python">tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>转换为variable</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown_基础语法</title>
      <link href="/2025/02/19/%E6%9D%82%E9%A1%B9/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/02/19/%E6%9D%82%E9%A1%B9/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法">1. markdown语法</h1><h2 id="插入引用">1.1. 插入引用</h2><h3 id="单行注释">1.1.1. 单行注释</h3><ul><li><p>示例</p><p><img src="/2025/02/19/%E6%9D%82%E9%A1%B9/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20250219113809368.png" alt="image-20250219113809368"></p></li></ul><blockquote><p>单行引用</p></blockquote><h3 id="多行引用">1.1.2. 多行引用</h3><blockquote><p>多行引用<br>引用文字</p></blockquote><h3 id="引用省略">1.1.3. 引用省略</h3><blockquote><p>引用<br>引用</p></blockquote><h3 id="引用中使用其他语法">1.1.4. 引用中使用其他语法</h3><blockquote><ol><li>表项</li><li>第二列表</li></ol></blockquote><h2 id="代码引用">1.2. 代码引用</h2><h3 id="段间代码">1.2.1. 段间代码</h3><p>这是一段段内代码</p><h3 id="段中代码">1.2.2. 段中代码</h3><p>这是段中<code>return 0</code>代码</p><h2 id="插入链接">1.3. 插入链接</h2><p>Markdown 支持两种形式的链接语法： 内联式和引用式两种形式。</p><h3 id="内联式">1.3.1. 内联式</h3><p>中括号内为显示文本，后面紧接一对圆括号. 圆括号里面放所需的 URL 链接,</p><ul><li><strong>示例：</strong></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">01</span><span class="token punctuation">.</span>Markdown语法说明<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>appinncom<span class="token operator">/</span>Markdown<span class="token operator">-</span>Syntax<span class="token operator">-</span>CN<span class="token operator">/</span>blob<span class="token operator">/</span>master<span class="token operator">/</span>syntax<span class="token punctuation">.</span>md<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>显示效果</strong></li></ul><p><a href="https://github.com/appinncom/Markdown-Syntax-CN/blob/master/syntax.md">markdown语法说明</a></p><h3 id="引用式">1.3.2. 引用式</h3><ul><li><p>第一行：<br>引用式链接使用连续两个中括号，第一个中括号放显示文本，第二个中括号里面要填入用以辨识链接的标记。<br>标记可以有字母、数字、空白和标点符号</p></li><li><p>第二行：定义链接</p><ul><li>需要单独占一行。格式是：<br>（1）中括号中包含标记文本 可以用三个以上的空白符来添加缩进可以用三个以上的空白符来添加缩进;<br>（2）接着是冒号;<br>（3）接着是链接的 URL;<br>（4）接着是可选的标题, 可以用单引号, 双引号, 或者圆括号包围。</li></ul></li><li><p>链接的定义可以放在文件中的任何一个地方，比较常见的做法就是直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样</p></li><li><p><strong>示例</strong></p><pre class="line-numbers language-shell"><code class="language-shell">我们可以在 [02.Markdown中文文档][link1]这个网站查看MD语法样式。[link1]:https://markdown-zh.readthedocs.io/en/latest/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>展示效果</strong></p><p>  我们可以再<a href="https://markdown-zh.readthedocs.io/en/latest/">02.markdown中文文档</a>这个网站查看MD语法样式</p></li></ul><h2 id="致谢">1.4. 致谢</h2><p><a href="https://pamarus.github.io/2020/05/03/markdown-1-ji-chu-yu-fa-xue-xi-ji-kuai-su-ru-men/">Markdown（1）：基础语法学习及快速入门 | Pamarus</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmware+mobax</title>
      <link href="/2024/11/29/%E6%9C%8D%E5%8A%A1%E5%99%A8/vmware-mobax/"/>
      <url>/2024/11/29/%E6%9C%8D%E5%8A%A1%E5%99%A8/vmware-mobax/</url>
      
        <content type="html"><![CDATA[<h1 id="VMware-网络连接失败">1. VMware 网络连接失败</h1><p>转自</p><p><a href="https://blog.csdn.net/m0_37259197/article/details/78221016">VMware 虚拟机无法连接网络解决办法_vmware 没网络-CSDN博客</a></p><h1 id="Mobaxterm-重新连接">2. Mobaxterm 重新连接</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录</title>
      <link href="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
      <url>/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>本文转载自<a href="https://programmercarl.com/">https://programmercarl.com/</a></p><h1 id="数据结构问题">1. 数据结构问题</h1><h2 id="map">1.1. map</h2><p><unordered_map>  unordered_map&lt; , &gt;  底层结构哈希</unordered_map></p><ol><li>map[ ]插入节点</li><li>map.find() !&#x3D; map.end() 查询到节点</li></ol><h2 id="unordered-set">1.2. unordered_set</h2><p>unordered_set 大致与unordered_map 用法相同</p><ol><li>set.insert()插入数据</li></ol><h2 id="vector">1.3. vector&lt;&gt;</h2><p><vector>  vector&lt;&gt; </vector></p><ol><li>插入数据 vector.insert(vector.begin() + insert_pos, valus)<ol><li>插入一个数据，如上</li><li>插入重复数据，vector.insert(vector.begin() , count ,value)</li><li>插入一个迭代器， vector.insert(old.end(), new.begin() , new.end())，将新的vector插入在旧的vector的结尾</li></ol></li><li>清除数据 <ol><li>删除一个元素，vector.erase(vector.begin())， 返回被删除的元素</li><li>删除方位内的元素， vector.erase(vector.begin, vector.end())</li></ol></li></ol><h2 id="queue队列">1.4. queue队列</h2><p>include <queue>  queue<int> </int></queue></p><ol><li>queue.front ，访问队首数据</li><li>queue.pop , 弹出队首</li><li>queue.push</li></ol><h1 id="数组">2. 数组</h1><h2 id="滑动窗口">2.1. 滑动窗口</h2><p>不断调整起始位置和终止位置，处理一块区间内的数据。</p><p>在本题中实现滑动窗口，主要确定如下三点：</p><ul><li><strong>窗口内是什么？</strong></li><li><strong>如何移动窗口的起始位置？</strong></li><li><strong>如何移动窗口的结束位置？</strong></li></ul><p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p><p>窗口的起始位置如何移动：<strong>如果当前窗口的值大于等于s了，窗口就要向前移动了（也就是该缩小了）。</strong>确定好移动的情况，并处理需要优先移动窗口还是先处理窗口中的数据。</p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210312160441942.png" alt="滑动窗口" style="zoom:67%;"><p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</p><h2 id="螺旋数组">2.2. 螺旋数组</h2><p><strong>确定边界处理的不变量，确保每个子问题的结构都是相同的</strong></p><p>每画一条边都要坚持一致的左闭右开，或者左开右闭的原则，这样这一圈才能按照统一的规则画下来。</p><p>左闭右开后，每次处理n-1个数据，每减少一圈，处理数据-1</p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220922102236.png" alt="左闭右开原则" style="zoom:50%;"><h2 id="前缀和">2.3. 前缀和</h2><p>将之间计算的结果累加保存在数据中，之后使用时使用结算完成的数组</p><p><strong>需要更具题目要求，选择计算什么样的前缀数组</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//按位取反，如果结果是eof=-1,取反之后结果为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重大发现：scanf与printf处理数据比cin，cout速度更快</p><p>这是一篇测试文章</p><p><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/test.jpg" alt="test"></p><p><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/cin%EF%BC%8Cscanf%E9%80%9F%E5%BA%A6.jpg" alt="cin/scanf"></p><p>就当是没有图片了吧，在本地无法显示的图片，在博客中显示了。</p><h2 id="哈希表">2.4. 哈希表</h2><h3 id="数组作为哈希表">2.4.1. 数组作为哈希表</h3><h3 id="stl中的哈希表">2.4.2. stl中的哈希表</h3><p>此时就要使用另一种结构体了，set ，关于set，C++ 给提供了如下三种可用的数据结构：</p><ul><li>std::set</li><li>std::multiset</li><li>std::unordered_set</li></ul><p>std::set和std::multiset底层实现都是红黑树，std::unordered_set的底层实现是哈希表， 使用unordered_set 读写效率是最高的，并不需要对数据进行排序，而且还不要让数据重复，所以选择unordered_set。</p><h2 id="回溯算法">2.5. 回溯算法</h2><p>算法的模板</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>终止条件）<span class="token punctuation">{</span>        存放结果<span class="token punctuation">;</span>           <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>选择<span class="token operator">:</span>本层集合中的元素<span class="token punctuation">)</span><span class="token punctuation">{</span>        处理节点<span class="token punctuation">;</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>路径， 选择列表<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归</span>        回溯，撤销处理结果<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>vector<int> a </int></p><p>a.push_back(int b) 压入数据， a.pop_back(), 弹出数据</p><p>还可以采用insert， + ，压入数据，使用erase(begin()+ i ,end())弹出数据</p></blockquote><p>使用切割时候，需要注意下一次开始为本次切割后的下一次位置，此处回溯时候不需要还原，其余元素均需要还原。还原时候注意还原的位置。</p><p><a href="https://programmercarl.com/0131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">回溯问题</a></p><h3 id="分割字符串方法">2.5.1. 分割字符串方法</h3><ol><li>函数传递，参数<code>s + start + end</code></li><li>使用string 切割，<code>string s = s.substr(start, end)</code></li></ol><h3 id="两阶vector初始化方法">2.5.2. 两阶vector初始化方法</h3><p><code> is_palind_rome.resize(s.size(), vector&lt;bool&gt;(s.size(), false));</code></p><h2 id="图论">2.6. 图论</h2><h3 id="并查集的实现-并查集理论基础-代码随想录">2.6.1. 并查集的实现   并查集理论基础 | 代码随想录</h3><ol><li>并查集，是将一个集合内所有数据放入一个连通图中，即为father[u]&#x3D; v；</li><li>查询一个并查集，是查询根节点是否相同，find(u)&#x3D;&#x3D; find(v)</li><li>初始化，所有的并查集都指向自身</li><li>路径压缩，节点在find过程中都执行根节点</li></ol><pre class="line-numbers language-c++"><code class="language-c++">// 使用数据存放并查集vector&lt;int&gt; father(n, 0);void init(){    for(int i = 0;i&lt; father.size();i++){        father[i]= i;    }}int find(int u){    if(father[u]==u) return u;    else {        father[u]=find(father[u]);// 路径压缩，指向根节点    }    return father[u];}int is_same(int u, int v){    int a = find(u);    int b = find(v);    if(a == b) return 1;    else return 0;}void join(int u, int v){    int a = find(u);    int b = find(v);    if(a == b) return ;    father[u]= v;    return ;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="prim算法">2.6.2. prim算法</h3><ol><li>选择最小边e,v（e是树中，v是树外的数据）</li><li>将节点v加入树中</li><li>更新与v的节点的权重<ol><li>此处记录树的连接关系，记录当前节点的父亲</li></ol></li></ol><h3 id="kruskal-算法">2.6.3. kruskal 算法</h3><ol><li>完成并查集</li><li>对边的权重排序</li><li>选择最小边<ol><li>如果在并查集中，跳过</li><li>不在并查集中，加入节点树种</li></ol></li></ol><h3 id="拓扑排序">2.6.4. 拓扑排序</h3><ol><li>计算节点入度</li><li>选择入度为0 的节点，加入处理队列q, 并将入度替换为-1</li><li>处理队列q<ol><li>cur指向的所有节点，入度减1</li><li>如果入度等于1，加入处理队列q, 并将入度替换为-1</li><li>记录出队元素cur.</li></ol></li></ol><blockquote><p>出队元素不等于总元素数量时， <strong>判断有向图中 存在环</strong></p></blockquote><h3 id="dijkstra算法">2.6.5. dijkstra算法</h3><p><strong><u>权值不能为负数，prim算法权值可以是负数，负数情况使用ford算法</u></strong></p><ol><li>选择最小边并且该节点没有被访问过</li><li>标记该节点，已经被访问过</li><li>更新非访问节点到源点的最小距离，同时当前节点的父亲</li></ol><h3 id="使用边权重的dijkstra算法">2.6.6. 使用边权重的dijkstra算法</h3><p>使用边的权值进行计算</p><ol><li>建立小顶堆</li><li>从小顶堆中选择最小的边</li><li>标记边连线的点已经被访问过了</li><li>更新edge相连的顶点的权重</li></ol><h2 id="附录">2.7. 附录</h2><h3 id="建立小顶堆">2.7.1. 建立小顶堆</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> &amp;lt;queue&amp;gt;</span><span class="token keyword">class</span> <span class="token class-name">mycomparison</span><span class="token punctuation">{</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token keyword">const</span> pair<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> pair<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>second<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> b<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>priority_queue<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>pair<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token punctuation">,</span> vector<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span>pair<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> <span class="token punctuation">,</span> mycomparison<span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    a&amp;gt; b时 ，是小顶堆；    a&amp;lt; b时， 是大顶堆；*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对vector数组进行排序">2.7.2. 对vector数组进行排序</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> &amp;lt;algorithm&amp;gt;</span>vector<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span>gt<span class="token punctuation">;</span> edges<span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>edges<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> edges<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> edge<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> edge<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">&amp;</span>lt<span class="token punctuation">;</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    a&amp;lt; b， 升序排序；    a&amp;gt; b， 降序排序；    默认情况是升序排序；*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="感谢">3. 感谢</h1><p><a href="https://programmercarl.com/">代码随想录</a></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++进程管理（-）-thread</title>
      <link href="/2024/09/21/c/c-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2024/09/21/c/c-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="2dcfc1c81ac21e6d0a415fe9091b4818817ddf17bc5b0486b24629de3ca4eee8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
