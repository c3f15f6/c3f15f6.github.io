<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c++ 多文件</title>
      <link href="/2025/09/18/c/base_study/c++-%E5%A4%9A%E6%96%87%E4%BB%B6/"/>
      <url>/2025/09/18/c/base_study/c++-%E5%A4%9A%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="c-多文件">1. c++多文件</h1><h2 id="使用g-命令">1.1. 使用g++ 命令</h2><ol><li>先 <code>-c</code>生成<code>.o</code>文件，再进行<code>-o</code>链接</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ -c a.cpp b.cppg++ a.o b.o -o test # 输出.exe名称为test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>直接<code>-o</code>编译生成</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ a.cpp b.cpp -o test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>指定头文件位置 <code>-i</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ a.cpp b.cpp -o test -i include<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">target_link_libraries(myproject PRIVATE $&#123;CMAKE_BINARY_DIR&#125;&#x2F;include)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="相关命令">1.2. 相关命令</h2><h3 id="o优化级别">1.2.1. -o优化级别</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-o0 默认不优化-o1 基本优化-02 高级别优化-03 最高级别优化-os 优化代码大小-ofast 开始所有-03优化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="g生成调试信息，配合gdb使用">1.2.2. -g生成调试信息，配合gdb使用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-o0 -g <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>cmake 关系：使用CMAKE_BUILD_TYPE 控制优化级别</p><div class="table-container"><table><thead><tr><th>Debug</th><th><code>-o0 -g</code></th></tr></thead><tbody><tr><td>Release</td><td>-o2 或 -o3</td></tr><tr><td>RelWithDebInfo</td><td>-o2 -g</td></tr><tr><td>MinSizeRel</td><td>-os</td></tr></tbody></table></div></blockquote><h3 id="启用警告">1.2.3. 启用警告</h3><ul><li><code>-wall</code>  启用常用警告</li><li><code>-Wextra</code> 启用<code>wall</code>中没有的警告</li><li><code>-Werror</code>所有警告视为错误，有警告就会编译失败</li></ul><blockquote><p>cmake 中</p><p>add_compile_options(-Wall -Wextra -Werror)</p></blockquote><h3 id="语言标准">1.2.4. 语言标准</h3><p><code>-std = c++11</code>， 对标准进行选择</p><blockquote><pre class="line-numbers language-CMAKE" data-language="CMAKE"><code class="language-CMAKE">set(CAMEK_CXX_STANDARD 14) # 要求使用14set(CMAKE_CXX_STANDARD_REQUIRED ON) # 强制使用14set(CMAKE_CXX_EXTENSIONS OFF) # 禁用GNU扩展<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="CMakeLists-txt示例">1.3. CMakeLists.txt示例</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">cmake_minimun_required(VERSION 3.10)project(myproject , cxx) # 名称为myproject, 项目为c++ 项目set(CMAKE_CXX_STANDARD 14) # 设置c++ 标准target_include_directories(myproject PUBLIC &quot;CMAKE_CURRENT_SOURCE_DIR&quot;&#x2F;include)# 引入头文件add_compile_options(-Wall -Wextra -Werror) # 添加编译选项add_executable(myproject main.cpp)target_link_libraries(myproject PRIVATE library)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译方法">1.3.1. 编译方法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir buildcd buildcmake .. -G &quot;Ninja&quot; &#x2F; &quot;Make&quot; # 生成器的作用生成系统认识的命令，具有跨平台性make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加库">1.3.2. 添加库</h3><h4 id="源文件">1.3.2.1. 源文件</h4><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">set(SOURCES  src&#x2F;*)add_executable(my_app $&#123;SOURCES&#125;)target_include_directories(my_app PUBLIC &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;include&quot;) # 为目标增加头文件搜索路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="库文件">1.3.2.2. 库文件</h4><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"># 使用GLOB 获取文件file(GLOB HEADERS &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;include&#x2F;*.h&quot;) # GLOB 获取include下所有.h文件set(HEADERS include&#x2F;*)# 定义库文件add_library(mylib STATICsrc&#x2F;foo.cpp$&#123;HEADERS&#125; # 库的头文件也放入库文件中，组成一个sub)target_include_directories(mylib PUBLIC    &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;include&quot;)# 将mylib 链接到 my_apptarget_link_libraries(my_app PRIVATE mylib) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加子目录">1.3.2.3. 添加子目录</h4><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"># 10. 添加子目录 (如果项目有多个 CMakeLists.txt 文件)add_subdirectory(sub_project_dir)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="安装项目位置">1.3.2.4. 安装项目位置</h4><p>install 的 安装路径为<code>CMAKE_INSTALL_PREFIX</code>，通常是软件下载位置，并不是项目所在路径</p><blockquote><p>指定下载路径</p><p>cmake .. -DCMAKE_INSTALL_PREFIX = 下载路径</p></blockquote><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">install(TARGETS my_app mylibRUNTIME DESTINATION binARCHIVE DESTINATION libLIBRARY DESTINATION lib)install(DISTECTORY &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;include&quot;DESTINATION includeFILES_MATCHING PATTERN &quot;*.h&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用pybind11-创建python-库">1.3.3. 使用pybind11 创建python 库</h3><ol><li>创建calculator 库函数</li></ol><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"># 创建calculator 库函数add_library(MyCalculator STATIC  src&#x2F;calculator.cpp # 所有使用的cpp文件)target_include_directories(MyCalculator PUBLIC &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;include&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>创建cpp链接 c 库函数</li></ol><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">add_executable(my_app src&#x2F;main.cpp)target_link_libraries(my_app PRIVATE myCalculator)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>使用pybind11 创建python库</li></ol><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">add_subdirectory(lib&#x2F;pybind11) # 编译得到目标pybind11::module 库add_library(python_module SHARED python_module.cpp)# 为了查找calculator target_include_directories(my_python_module PRIVATE    &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;src&quot; # 需要 calculator.h)# 链接生成 my_python_module库 target_link_libraries(my_python_module PRIVATE    MyCalculator          # 链接我们自己定义的 C++ 库    pybind11::module      # 链接 pybind11 提供的接口库)# 设置 Python 模块的输出名称和路径，使其符合 Python 的导入约定set_target_properties(my_python_module PROPERTIESPREFIX &quot;&quot;SUFFIX &quot;$&#123;PYTHON_EXTENSION_SUFFIX&#125;&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake">cmake_minimum_required(VERSION 3.10)project(DBGindex1 VERSION 0.1 DESCRIPTION &quot;A Hello World Project&quot;)set(CMAKE_CXX_STANDARD 17)set(CMAKE_CXX_STANDARD_REQUIRED True)file (GLOB_RECURSE SOURCE_FILES src&#x2F;*.cpp) # 获取所有.cpp文件# 查找 Pythonfind_package(Python3 COMPONENTS Development NumPy REQUIRED)# This project will output an executable fileadd_executable($&#123;PROJECT_NAME&#125; $&#123;SOURCE_FILES&#125;)# 添加pthread链接target_link_libraries($&#123;PROJECT_NAME&#125; PRIVATE pthread)# Create a simple configuration headerconfigure_file(config.h.in config.h)# 将 pybind11 添加为子目录,创建一个pybind11::embed 或 pybind11::module 等接口库 add_subdirectory(lib&#x2F;pybind11)# Include the configuration header in the buildtarget_include_directories($&#123;PROJECT_NAME&#125;    PRIVATE        &quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;        &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&#x2F;include&quot;        $&#123;Python3_INCLUDE_DIRS&#125;        $&#123;Python3_NumPy_INCLUDE_DIRS&#125;        &quot;$&#123;CMAKE_SOURCE_DIR&#125;&#x2F;third_party&#x2F;pybind11&#x2F;include&quot;        &quot;&#x2F;home&#x2F;rose&#x2F;soft&#x2F;matplotlib-cpp&#x2F;&quot;)target_link_libraries($&#123;PROJECT_NAME&#125;    PRIVATE        pybind11::module        $&#123;Python3_LIBRARIES&#125;        $&#123;Python3_NumPy_LIBRARIES&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 多文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础</title>
      <link href="/2025/09/16/python/base/python%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/09/16/python/base/python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="函数">1. 函数</h1><h2 id="lambda">1.1. lambda</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">sum_all &#x3D; lambda a : op(a) # 接收参数a，只能有一段对a的操作,返回值为操作值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参数">1.2. 参数</h2><h3 id="可变位置参数">1.2.1. 可变位置参数*</h3><p>收集额外的位置参数, <code>*参数</code> 需放在 普通参数后 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def greet_people(greeting, *names): # 收集第一个参数后的所有参数    passgreet_people(&quot;Hello&quot;, &quot;Alice&quot;, &quot;Bob&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="可变关键字参数">1.2.2. 可变关键字参数**</h3><p>收集额外的关键字参数，<code>**参数</code> 需要放在所有参数之后，包括<code>*</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def configure_device(device_id, *settings, **parameters):    passconfigure_device(&quot;dev001&quot;, &quot;enabled&quot;, &quot;logging_on&quot;, max_retries&#x3D;5, timeout_ms&#x3D;1000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>做一下实验</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">user_prefs &#x3D; &#123;&#39;theme&#39;: &#39;dark&#39;, &#39;font_size&#39;: &#39;large&#39;&#125;display_user_info(**user_prefs) # 相当于 display_user_info(theme&#x3D;&#39;dark&#39;, font_size&#x3D;&#39;large&#39;)# 输出:# kwargs 的类型是: &lt;class &#39;dict&#39;&gt;# kwargs 的内容是: &#123;&#39;theme&#39;: &#39;dark&#39;, &#39;font_size&#39;: &#39;large&#39;&#125;# 用户信息:#   Theme: dark#   Font Size: large# 结合其他关键字参数display_user_info(language&#x3D;&#39;en&#39;, **user_prefs, notifications&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学公式无法显示</title>
      <link href="/2025/09/13/hexo/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/"/>
      <url>/2025/09/13/hexo/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="数学公式无法显示">1. 数学公式无法显示</h1><p>转载自<a href="https://blog.csdn.net/crazy_scott/article/details/79293576">hexo下LaTeX无法显示的解决方案_hexo中latex直接空白了-CSDN博客</a></p><h2 id="安装插件">1.1. 安装插件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-math –save # mathjax插件npm uninstall hexo-renderer-marked –savenpm install hexo-renderer-kramed –save  # hexo 的渲染引擎<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="解决语义冲突">1.2. 解决语义冲突</h2><ol><li>博客根目录，<code>node_modules\kramed\lib\rules\inline.js</code>中修改第11行</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_>])/,</span><span class="token literal-property property">escape</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\([`*\[\]()#$+\-.!_>])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>同一文件，第二十行</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><span class="token literal-property property">em</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\*((?:\*\*|[\s\S])+?)\*(?!\*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="配置文件">1.3. 配置文件</h2><p>主题目录下的<code>_config.yml</code>文件</p><ol><li>mathjax 默认false 修改为 true</li><li>更换cdn 的url ，渲染速度更快</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"># MathJax Supportmathjax:  enable: true  per_page: true  #cdn: &#x2F;&#x2F;cdn.bootcss.com&#x2F;mathjax&#x2F;2.7.1&#x2F;latest.js?config&#x3D;TeX-AMS-MML_HTMLorMML  cdn: &#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.1&#x2F;MathJax.js?config&#x3D;TeX-AMS-MML_HTMLorMML<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="博客">1.4. 博客</h2><p>如果使用到数学公式，在博客的Front-matter中打开mathjax开关</p><pre class="line-numbers language-none"><code class="language-none">---title: index.htmldate: 2018-2-8 21:01:30tags:mathjax: true--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prism 更换代码块格式</title>
      <link href="/2025/09/13/hexo/prism-%E6%9B%B4%E6%8D%A2%E4%BB%A3%E7%A0%81%E5%9D%97%E6%A0%BC%E5%BC%8F/"/>
      <url>/2025/09/13/hexo/prism-%E6%9B%B4%E6%8D%A2%E4%BB%A3%E7%A0%81%E5%9D%97%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="prism-更换代码块格式">1. prism 更换代码块格式</h1><h2 id="格式介绍">1.1. 格式介绍</h2><p>hexo 中支持 <a href="https://github.com/highlightjs/highlight.js">highlight.js</a> 与 <a href="https://github.com/PrismJS/prism">prismjs</a> 两种代码高亮库</p><p>两种库的下载地址</p><ol><li><a href="https://highlightjs.org/download">highlight</a></li><li><a href="https://prismjs.com/"> Prism</a></li></ol><p>hexo 切换代码高亮样式中,  在<code>highlight</code>与<code>prism</code>中进行切换</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">syntax_highlighter: prismjshighlight:  enable: false  line_number: true  auto_detect: false  tab_replace: &#39;&#39;  wrap: true  hljs: falseprismjs:  enable: true  preprocess: true  line_number: true  # 此处与下方的prism_plugin都需要开启  tab_replace: &#39;&#39;prism_plugin:  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess  theme: &#39;tomorrow&#39;  # 主题都行  line_number: true    # default false  #如果为true就会显示代码号，而且会分两边显示，显得不友好  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>prism 较 highlight 更好用，以下介绍prism <a href="https://www.jianshu.com/p/f395d92a1110">Hexo博客：六、prism代码高亮 - 简书</a></p><h2 id="prism">1.2. prism</h2><ol><li><p>从<a href="https://prismjs.com/"> Prism</a>下载样式</p><ol><li>主题： 自行选择，plugin中自带主题</li><li>语言： 自行选择</li><li>plugins: line_number 一定要选</li></ol></li><li><p>将样式保存在<code>hexo-blog\themes\自己的主题\source\libs\prism\prism.js</code></p><blockquote><p>或使用 <a href="https://www.jianshu.com/p/f395d92a1110">在head 和 footer 中增加js 与 css 的引用</a>， 但是我没有成功，可能是主题不同，文件后缀不同导致</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/09/11/test/"/>
      <url>/2025/09/11/test/</url>
      
        <content type="html"><![CDATA[<p>$y_i = \begin{cases} y_i^<em> &amp; \text{if } y_i^</em> &gt; 0 \\ 0 &amp; \text{if } y_i^* \le 0 \end{cases}$ </p><script type="math/tex; mode=display">隐藏输出\\mathbf{H}*t = \phi(\mathbf{X}\*t \mathbf{W}\*{xh} + \mathbf{H}*{t-1} \mathbf{W}_{hh} + \mathbf{b}_h).\输出\\mathbf{O}_t = \mathbf{H}*t \mathbf{W}*{hq} + \mathbf{b}_q.</script><pre class="line-numbers language-python" data-language="python"><code class="language-python">import numpy as npimport os<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>25美赛</title>
      <link href="/2025/09/09/%E6%9D%82%E9%A1%B9/25%E7%BE%8E%E8%B5%9B%E5%9B%9E%E9%A1%BE/"/>
      <url>/2025/09/09/%E6%9D%82%E9%A1%B9/25%E7%BE%8E%E8%B5%9B%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="review-25">1. review_25</h1><h2 id="两阶段预测">1.1. 两阶段预测</h2><h3 id="LightGBM">1.1.1. LightGBM</h3><p>预测是否有概率获奖，二分类，不能获奖置为0</p><p>原理：基于决策树，采用梯度提升框架，迭代训练一系列的决策树，组合形成一个强学习器。每次迭代前，新的弱学习其会你和前一个模型预测的残差（梯度），从而逐步减少模型的误差。</p><p>主要使用：</p><ol><li>梯度采样，采样梯度较大的样本，较少训练数据量</li><li>基于EFB 特征捆绑，将少数几个特征捆绑，减少训练特征</li><li>提高训练并行策略</li></ol><p>因此成为Light，更轻量化的梯度提升机器学习框架</p><h3 id="random-effects-Tobit-model">1.1.2. random effects Tobit model</h3><script type="math/tex; mode=display">y*_i=β′x_i+ϵ_i</script><p>截断等式中，等式左边预测的并不是获得奖牌数量，因为对于真实获得0奖牌的国家，其因变量对应的$y$可能是负值，因此不能直接使用最小二乘法。</p><p>使用 $y_i = \begin{cases} y_i^<em> &amp; \text{if } y_i^</em> &gt; 0 \\ 0 &amp; \text{if } y_i^* \le 0 \end{cases}$  进行最大似然估计y，求出系数</p><p>因为模型对不同国家的不同时间进行观测， 不同国家具有潜在的异质性，需要对不同的国家增加变量$u_i$，同一国家不同时间段，个体随机效应系数是相同的</p><p>预测奖牌数量，预测过程中没有小于0的值， 因为对第一阶段中能获奖的国家进行预测，本阶段预测的国家奖牌数量均大于1</p><h2 id="量化国家-项目关系">1.2. 量化国家 - 项目关系</h2><h3 id="HHI">1.2.1. HHI</h3><p>Herfindahl-Hirschman Index  起初用于衡量企业的垄断关系，这里用来量化国家在某个项目中的领先地位</p><h3 id="IMP">1.2.2. IMP</h3><p>Monopoly Power Index  ,量化某个项目对于国家的重要程度，</p><p>$IMP = i国占据的HHI系数/ 该国家总的HHI系数$</p><h2 id="great-coach-作用">1.3. great coach 作用</h2><h3 id="HHI-1">1.3.1. HHI</h3><p>判断某个国家在该项目的领先地位变化</p><h3 id="Welch’s-t-检验">1.3.2. Welch’s t 检验</h3><script type="math/tex; mode=display">t = \frac{两部分均值之差}{两部分均值的方差}</script><p>t 值反映两者之间是否存在显著差异， 当波动性超过拒绝值时，可以判断两部分的方差具有波动，标识此处发生断点</p><p>针对教练任教时间，检测领先地位是否有断点出现，检测P值</p><h3 id="投资项目">1.3.3. 投资项目</h3><p>优先选择金牌数量少、这个项目该国家具有一定的基础并且对国家总体项目重要程度，而且这个项目开放，不要有垄断国家的出现。</p><h2 id="结果分析">1.4. 结果分析</h2><ol><li>好的教练对项目的长期提升具有极大的帮助</li><li>限制单个国家的参赛人数，可以降低项目的垄断系数，例如：足球本是资本投入项目，应有某个大国垄断，但是因为一次只有一对参赛，垄断系数较低；相反，田径比赛的垄断系数</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deepseek 调用方法</title>
      <link href="/2025/09/02/%E6%9D%82%E9%A1%B9/deepseek-%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2025/09/02/%E6%9D%82%E9%A1%B9/deepseek-%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>c</p><h1 id="deepseek-调用方法">1. deepseek 调用方法</h1><h2 id="API-KEY设置">1.1. API_KEY设置</h2><ol><li><p>设置<code>URL = &quot;https://deepseek.com/chat/completions/&quot;</code></p></li><li><p>导入系统变量，借助<code>os</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os.getenv(&quot;变量名称&quot;, default &#x3D; 默认值)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="请求头">1.2. 请求头</h2><ol><li><code>authorization</code> :  Bearer  API_KEY， 认证信息</li><li><code>Content-Type: application/json</code>, 请求内容格式，post 仅能使用Json </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">header &#x3D; &#123;    &quot;authorization&quot;: f&quot;Bearer &#123;API_KEY&#125;&quot;    &quot;Content-Type&quot;: &quot;application&#x2F;json&quot;,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="请求内容payload">1.3. 请求内容payload</h2><ol><li><code>model</code>: 选择模型</li><li><code>messages</code>: 发送的内容数组<ol><li><code>role</code>：角色</li><li><code>content</code>: 内容</li></ol></li><li><code>temperature</code>: 设置为 0 ，模型输出更加稳定， 1，模型输出更发散</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload &#x3D; &#123;    &quot;model&quot;: deepseek-chat,    &quot;messages&quot;:[        &#123;&quot;role&quot;: &quot;system&quot;, &quot;content&quot;:&quot;命令要求&quot; &#125;，        &#123;&quot;role&quot;: &quot;User&quot;, &quot;content&quot;: &quot;用户输入&quot;&#125;,        &#123;&quot;role&quot;: &quot;&quot;&#125;    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发送请求">1.4. 发送请求</h2><p>发送内容，使用<code>post</code>请求</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">resp &#x3D; requests.post(url, header &#x3D; header, payload &#x3D; payload, timeout &#x3D;timeout)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="response-返回内容">1.5. response 返回内容</h2><p>返回内容在<code>resp.json()[&#39;choices&#39;][0][&#39;message&#39;][&#39;content&#39;]</code>, 提取出结果并返回</p><p><img src="/2025/09/02/%E6%9D%82%E9%A1%B9/deepseek-%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/image-20250902102742498.png" alt="image-20250902102742498"></p><h1 id="翻译">2. 翻译</h1><ol><li><p>将文本块切分成小段，指定分块大小，存放在数组中</p></li><li><p>对分段后每一段进行翻译</p><blockquote><h2 id="for-遍历">2.1. for 遍历</h2><ol><li><p><code>for i in 迭代器</code> </p><p>迭代器: 列表等</p></li><li><p>for idx, ck in enumerate(n):</p></li><li><p>for i in range(1, n) :</p><p>范围是[1,n）</p></li></ol></blockquote></li></ol><h1 id="day3">3. day3</h1><ol><li><p>输入错误： <code>EOFerror</code></p></li><li><p><code>requests.post</code> 发送请求时，需要包裹在<code>try</code>中</p></li><li><p><code>requests</code>发送数据，解析数据检查</p><ol><li><p>检查requests是否接收</p><p><code>except requests.exception.RequestException as e</code></p></li><li><p>检查网络是否</p><p><code>resp.ok</code></p></li><li><p>数据转换是否成<code>json</code></p><p><code>except ValueError</code></p></li><li><p>是否可以从数据中提取出值</p><p>`except {KeyError, IndexError, TypeError}</p></li></ol></li></ol><h2 id="使用超时重传发送">3.1. 使用超时重传发送</h2><p>如果遇到<code>rest</code>请求错误，或者返回的<code>resq</code>状态码有问题，使用退避算法，进行规避<code>n</code>次，超过则返回</p><ol><li>重复遍历<code>n</code>次</li><li>如果遇到<code>请求错误</code>,查看是否超过重复次数，没有，<code>time.sleep</code>一段时间后，再次运行重传</li><li>超过重复请求后，返回错误</li></ol><h1 id="day4">4. day4</h1><h2 id="markdown-渲染">4.1. markdown 渲染</h2><p>使用<code>rich</code>库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from rich.console import Consolefrom rich.markdown import Markdownconsole &#x3D; Console()markdown_string &#x3D; &quot;&quot;&quot;&quot;&quot;&quot;markdown &#x3D; Markdown(markdown_string)console<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="输出markdown-到word-文件中">4.2. 输出markdown 到word 文件中</h2><ol><li><p>首先检查文件目录存在</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import osoutput_dir &#x3D; os.path.dirname(output_file)if output_dir and not os.path.exist(output_dir):   os.makedirs(output_dir)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>pypandoc</code>输出</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import pypandoc&quot;&quot;&quot;to: &quot;目标格式&quot;format：&quot;当前格式&quot;outputfile: &quot;输出文件&quot;&quot;&quot;&quot;pypandoc.convert_text(makedown_string, to&#x3D; &#39;docx&#39;, format &#x3D; &#39;markdown&#39;, outputfile &#x3D; output_filepath)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>同时可以尝试检查<code>ImportError , Exception</code>等错误</p></li></ol><h3 id="直接调用pandoc-命令行工具">4.2.1. 直接调用pandoc 命令行工具</h3><ol><li><p>创建临时文件.md存储markdown内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">temp_md_file &#x3D; &quot;temp.md&quot;with open(temp_md_file, &#39;w&#39;, encoding&#x3D; &#39;utf-8&#39;) as f:    f.write(m_str)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>subprocess.run</code>执行命令</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import subprocesscommand &#x3D; [&#39;pandoc&#39;, &#39;-f&#39;, &#39;markdown&#39;, &#39;t&#39;,&#39;doc&#39;, &#39;o&#39;, output_filename, temp_md_file]result &#x3D; subprocess.run(command, capture_output &#x3D; True, text &#x3D; True, encoding &#x3D; &#39;utf-8&#39;)if result.returncode &#x3D;&#x3D; 0:    return &quot;转换正确&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最后删除临时文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">if os.path.exist(temp_md_file):    os.remove(temp_md_file)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1 id="9-8">5. 9.8</h1><p>win11 主要文件夹路径</p><p>任务栏：<code>C:\Users\用户名\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar</code></p><p>开始菜单：<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs</code></p><p>IE开始菜单<code>C:\Users\用户名\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\StartMenu</code></p><h1 id="9-10">6. 9.10</h1><h2 id="path类">6.1. path类</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">from pathlib import Pathp_path &#x3D; Path(路径)# 组合路径config_path &#x3D; p_path &#x2F; &quot;config.txt&quot; .name # 文件名.suffix # 文件后缀.stem # 无后缀的文件名.parent # 父目录.is_absolute # 是否为祖先路径.revolve() # 转换为相对路径# 创建文件# parents&#x3D;True 会创建所有不存在的父目录# exist_ok&#x3D;True 避免目录已存在时报错Path(路径).mkdir(exist_ok &#x3D; True, parents &#x3D; True)Path(路径).touch()  # 创建空文件p_path.write_text(str) # 写入文件content &#x3D; file.read_text() # 读取文件内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> GPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> GPT </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件读取方法</title>
      <link href="/2025/09/01/%E6%9D%82%E9%A1%B9/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95/"/>
      <url>/2025/09/01/%E6%9D%82%E9%A1%B9/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="文件读取">1. 文件读取</h1><h2 id="open-函数">1.1. open()函数</h2><ol><li><p><code>open</code>函数配合<code>read() / readline() / readlines()</code></p><p><code>open(file, mode =&#39;r&#39; , encoding = None)</code></p></li><li><p><code>with</code>语句确保文件在使用完毕后自动关闭</p></li></ol><pre class="line-numbers language-pythoN" data-language="pythoN"><code class="language-pythoN">with open(&#39;example.txt&#39;,&#39;r&#39;, encoding &#x3D; &#39;utf-8&#39;) as f:    content &#x3D; f.read()  # 读取整个文件    line1 &#x3D; f.readline() # 读取第一行    lines &#x3D; f.readlines() # 读取所有，作为一个列表    for i, line in enumerate(f):        print(i, line)    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 文件读取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025.9</title>
      <link href="/2025/09/01/%E6%9D%82%E9%A1%B9/http%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF/"/>
      <url>/2025/09/01/%E6%9D%82%E9%A1%B9/http%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="244d83837a11ec57396d06956477c3738a6002c4ab690697099b24bd4275a98a">4fbb2435fd3b6574fd4f7bd14582288411baa04027e1f23082c91553eb7a7a05e3b0e49892ffdd71c2419110ba5359048af23fa01c58111c09a6966cbef35ebb15db969fa2b6f6823fd0b1204dfe43d1e1b922e8b109bf7ac9584ba717fcf352217038f1ed9accc5ff43a75bcb868cdb7f3711f76e615dd5bb3a294e0247eea77735cdb7d843e8688457219c5ba524f38ca10771fc9b1b0b3967bb8dbcf5a54084f1ef3ff2b337d683314b3910987499dcc04fb5148d2ea5d9c448ff1db739329006c95387327c2f2a2e787e7bfc8641616b6defc0bb4f2d38f63fe9ee50c91f236c360a4d032e040a95d82ccd733811dd77984141a1fb09d06941cab79125d24e2a5788b933d466b4240c3653f11d43453778161873ea34b016345e880dcb549f809fd5d360b4d7bb56ae24b12c1008954b891a93373ba1c83f96f54e7b0ac7a8e65417045b03ed7bbdc15da9b02baed219352bc4cdadbbfe6a8da0bedee95dd4d4c93598b9663bd8682e064bd7a7088769b162d0ccee868181b48423d5f633eb54478e9580b5bc8daaf636d0cf5558ad9fb09a338689ec4647762de1a3807932f4f029d167bd181b4ea2cb4c31a251d8654804e7bfb305de13092a5d2bac51366c85938785e33a7216e83fc4d4f5bcc4284386220e58c7791ca37a01025ea168eec94d6b9304971a27c05e232443d53082b7a43d83bbadcf33b68db8917d7d13304754d7ece34413a3a3f301bac9476c96441636b01dbf910990c52db3be7ba1dfb5ef4cd74fa101ca56fe1f7ccedb53c67b85528efc3db3966b84f16bc55d179c44d77c70c41f111fa4e5eb6acf34e6c9bf6e38ccfdc3e48d08221213479d0db5c9191dadfe88b2dfa515056ea47377a92acbd8fdb50ca5115eeaf41c16ea13f487ce6534d77ba3af53411b30cc5433ef2a59c415f063560399de908edca304692417ecc1323dd7ffa1f9d0fa0e846266f7b2afd1297c34bd8842a14db4ead011cc6f26cef1573a7a6e94ec8350ec506a80cb8ad78c031caaed4ae7341a319664b1bf8cf06e3a4f90db1eeee1c94ea2f07d4052dd08b89d404750e2e3dccdeb99d8fe99e172cbcd42a6c3038f17064958f61a9d19215d5ebd4d3edd2d50c9724ffdaa20960bebddc86168d137c7479c0306ed39f12d9f5538f1543fe5640a49ac31330d4ae0fa9a5650c1582eaf048e3b7be89dd434ac0828431aee1324e4c0e7c9c20ab98687b68ca56b94fafdd2887d835b7da6fb9e3cd801a4e82d66e78da9d65fbaaf51317700ba9cff5e74036967dbef7e6f12efbff9cb4ac6a5a67be54229f35f15e336673fcf79b45881b9a0ea5a7c30aded00740ca45b7bae63ad8f4c8c30e606bd9cfc9ea6f64931ade6835e2833e5246c36e74a8d73c662f3d628122c7bdf473b3fe3977bb5dc669ebfc34731d633dd92b435f1d228511d4de47ef3542db55e4f3205c5e027855ea55ea68013a64defaf82a9ef26244b378211c441495d22d3a506813c0f7bbaf64cfd64f08c21d33c3c59e61d14fa7fbe754f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论</title>
      <link href="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/"/>
      <url>/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/</url>
      
        <content type="html"><![CDATA[<h1 id="图论-搜索">1. 图论 搜索</h1><p><strong>感谢<a href="https://programmercarl.com/0101.对称二叉树.html#思路">代码随想录</a></strong></p><h2 id="图论基础">1.1. 图论基础</h2><h3 id="邻接矩阵">1.1.1. 邻接矩阵</h3><p>邻接矩阵使用二维数组保存信息，矩阵中每个节点代表一个元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">typedef struct Node&#123;    int data;&#125;Node;typedef vector&lt;vector&lt;Node&gt;&gt; Graph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="邻接表">1.1.2. 邻接表</h3><p>邻接表—— 一个节点连接中存在弧 节点的首指针</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; 弧节点信息typedef struct arc&#123;int info;struct arc* next;&#125;arc, *acrlink;&#x2F;&#x2F; 节点信息，包含弧节点首指针typedef struct Node&#123;    int info;    arclink* firstArc;&#125;Node,Nodelink;&#x2F;&#x2F; 使用数组存放typedef vector&lt;Node&gt; Graph;&#x2F;&#x2F; 使用链表存放typedef link&lt;Node&gt; Graph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有向图">1.1.3. 有向图</h3><p>有向图的边$(a, b)$， 其中只存放 a-&gt;b的边</p><h3 id="无向图">1.1.4. 无向图</h3><p>无向图的边(a, b),  a 节点中存放一条a-&gt;b的边， b节点存放一条 b-&gt;a的边</p><h3 id="连通分量">1.1.5. 连通分量</h3><p>无向图中 能够从一个节点到所有的节点的 <strong>最大子图</strong></p><p><img src="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/20240511102449.png" alt="123 是连通分量， 12不是连通分量"></p><h3 id="强连通分量">1.1.6. 强连通分量</h3><p>有向图中， 增加了方向，依旧是连通分量成为强连通分量</p><h3 id="弱连通分量">1.1.7. 弱连通分量</h3><p>有向图中，增加了方向，不是连通分量 ； 减少方向，是连通分量，是弱~；</p><p><img src="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/20240511115235.png" alt="img"></p><h2 id="岛屿数量">1.2. 岛屿数量</h2><ol><li>每次遍历可以得到一个连通分量， 遍历总次数 = 所有连通分量= 岛屿数量</li><li>使用visited 数组标识 已访问节点</li></ol><h3 id="深度搜索dfs">1.2.1. 深度搜索dfs</h3><ol><li><p>中止条件：</p><ol><li>节点访问过 ，<code>visited[i][j]  = true</code></li><li>节点没有相连，<code>g[i][j] = 0</code></li></ol></li><li><p>处理逻辑：</p><ol><li><p>开始对其节点遍历，将其标识为<code>true</code></p></li><li><p>对所有相邻节点遍历</p><blockquote><p>图中相邻节点是其上、下、左、右坐标</p></blockquote></li><li><p>对节点遍历之前需要对节点坐标进行检查</p></li></ol></li><li><p>返回值，没有返回值</p></li></ol><h3 id="广度搜索BFS">1.2.2. 广度搜索BFS</h3><ol><li><p>取出队列首元素，将其所有相邻节点加入队列中，依次遍历，直到队列中元素为空</p></li><li><p>使用<code>visited</code> 数组标识遍历过的节点</p><ol><li><p>在加入队列时，标记已访问</p><blockquote><p>加入队列时没有标记， 出队列时标记，下一个访问当前节点会再次放入队列中，多次遍历</p><p><img src="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/20250124094043.png" alt="img"></p></blockquote></li></ol></li></ol><h2 id="岛屿的最大面积">1.3. 岛屿的最大面积</h2><p>一次遍历 = 一个连通分量=  一个岛屿， 统计每次遍历过程中的最大遍历节点数量</p><blockquote><p>写<code>if-else</code>时， 尽可能把结果都包含在内，没有操作时再不写</p><ol><li>有节点遍历时，节点数量 +1</li><li>没有节点遍历时，节点数量初始为0</li></ol></blockquote><ol><li><code>dfs</code><ol><li>优先处理节点，进入函数后，首先操作本节点， <code>count</code>初始为0</li><li>优先处理相邻节点，须在进入下一节点时，就将下一个节点处理，count 初始为1</li></ol></li><li><code>bfs</code>，只有在加入队列时处理，处理的是当前节点，初始化为0</li></ol><h2 id="孤岛的最大面积">1.4. 孤岛的最大面积</h2><p>孤岛 = 四周没有与图的边沿相连</p><ol><li>将所有与陆地相连的岛都置为海洋</li><li>计算剩下岛的面积</li></ol><p>两个边沿， 从四个边沿开始遍历，遍历的节点置为0，使用grid作为标识，此时可不用visited</p><ol><li><code>[0][i]</code>, <code>[n-1][i]</code></li><li><code>[i][0]</code>, <code>[i][m-1]</code></li></ol><h2 id="水流问题">1.5. 水流问题</h2><p><a href="https://programmercarl.com/kamacoder/0103.水流问题.html#思路">求出能流向低处的节点</a></p><ol><li>暴力求解，求当前节点能否到达 边界</li><li>逆推， 从边界向上推，看左边界能到的哪些节点<code>firstBoard</code>，以及有边界<code>secondBoard</code></li><li>左右边界都能到达，为逆推结果</li></ol><h2 id="建造最大岛屿">1.6. 建造最大岛屿</h2><p><a href="https://programmercarl.com/kamacoder/0104.建造最大岛屿.html#思路">海洋中造出一块岛， 连接其他岛屿，组成最大面积</a></p><ol><li><p>首先统计每个岛屿的面积，并为每个岛屿附上标识，并建立标识对应的面积</p><blockquote><p>建立标识后，可以标识当前节点已被访问，可以用这个标识代替<code>visited</code></p></blockquote></li><li><p>统计 0 值附近所有岛屿面积的和，不同的岛屿需要去重</p></li><li><p>比较出最大值</p></li></ol><h2 id="岛屿的周长">1.7. 岛屿的周长</h2><p><a href="https://programmercarl.com/kamacoder/0106.岛屿的周长.html#思路">岛屿与海相邻的周长</a></p><p>岛的陆地是一个正方形，每一条边，与海洋相连都是陆地周长，因此可以<strong>使用图论的方法</strong>，而不是总时搜索</p><ol><li><p>陆地地界的边沿是有一块海洋，边长加1</p><blockquote><p>矩阵边沿也是海洋，也要统计</p></blockquote></li><li><p>每两块相邻的陆地都需要减去2个边沿，=  每相邻一块陆地，需要减去一个边沿</p><p>统计所有陆地<code>sum</code>,总边数<code>4*sum</code> ，统计相邻陆地数<code>cover</code>,减去边沿<code>cover</code></p><p>陆地边沿 = <code>sum*4 - cover</code></p></li></ol><h2 id="字符串接龙">1.8. 字符串接龙</h2><p><a href="https://kamacoder.com/problempage.php?pid=1183">字符串作为路径，广度搜索</a></p><p><img src="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/20250317105155.png" alt="字符串接龙是无向图"></p><ol><li>无向图中可以使用<code>广度搜索</code>，找打目标节点，即为<code>最短路径</code></li><li>遍历时需要使用<code>visited</code>标识节点，避免循环，此时<code>visited</code>可以使用<code>set</code>标识，也可以使用<code>map</code>，同时标识走到这里的最短路径</li><li>对字符串的替换是对图可行路径的查找，找到了在集合中，标识找到了一条可行路径</li></ol><h2 id="邻接表遍历">1.9. 邻接表遍历</h2><p>邻接表中是以，节点作为数组元素，同时还有节点后指向 一个链表，指向与节点相连的节点</p><p><code>vector&lt;list&lt;int&gt;&gt; g(n+1)</code>，以数组序号作为节点元素，数组的<code>list</code>作为相邻链表</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; 深搜和广搜中都需要对相邻节点的列表进行遍历&#x2F;&#x2F; list的遍历方法&#x2F;&#x2F;1. 指针for(auto it &#x3D; list.begin() ; it !&#x3D;  list.end() ; i++)&#123;&#125;&#x2F;&#x2F; 使用遍历for(auto i : list)&#123;&#125;&#x2F;&#x2F; 不能使用类似vector 的for(int i &#x3D; 0 ; i &lt; vector.size() ;i++)&#123;&#125;，list不能使用下标去访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="算法">2. 算法</h1><h2 id="并查集">2.1. 并查集</h2><p>含义： 一个集合中的元素指向同一个根节点， 根节点指向自身</p><ol><li>初始化，所有节点指向自身</li><li>插入时，将节点 -&gt; 该集合的<code>根节点</code><ol><li>如果是集合 插入 集合， 需要将集合 的<code>根节点</code> 指向 另一个集合的 <code>根节点</code></li></ol></li><li>比较时，比较两个元素的根节点是否相同</li><li>查找， 迭代查找根节点(指向自身的 节点)<ol><li>并查集的缩小： 在查找到根节点时， 将当前元素的<code>父节点</code>指向<code>根节点</code>，减少深度，加快查询</li></ol></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">n &#x3D; 1000;vector&lt;int&gt; father &#x3D; vector&lt;int&gt;(1000, 0);void init(vector&lt;int&gt;&amp; father)&#123;    for(int i &#x3D; 0 ; i&lt; father.size() ; i++)&#123;        father[i] &#x3D; i ;    &#125;&#125;void find(vector&lt;int&gt; father, int u  )&#123;    if( u &#x3D;&#x3D; father[u]) return u;    else&#123;       int u_father &#x3D; find(father[u]);        father[u] &#x3D; u_father;        &#x2F;&#x2F; 简化为 father[u] &#x3D; find[u]        return u_father;    &#125;&#125;bool isSame(vector&lt;int&gt; father, int u,  int v)&#123;  int u_father &#x3D; find(u);    int v_father &#x3D; find(v);    return u_father &#x3D;&#x3D; v_father;&#125;void join(vector&lt;int&gt; father, int u , int v)&#123;    int u_father &#x3D; find(u);    int v_father &#x3D; find(v);    if(u_father &#x3D;&#x3D; v_father) return ;    &#x2F;&#x2F; 注意这里插入时，插入的是根节点，不是将u,v 插入    else father[v_father] &#x3D; u_father;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无向图中是否有路径">2.2. 无向图中是否有路径</h2><ol><li>将所有的节点加入并查集中</li><li>查看节点<code>i, j</code> 是否重复出现在并查集中，如果是，那就有路径</li></ol><h2 id="无向图中冗余连接">2.3. 无向图中冗余连接</h2><ol><li>如果边<code>i, j</code> 冗余，=》 顶点<code>i,j</code>之前就插入在并查集中，具有相同的根</li><li>删除最后一个并查集相同根 的 两个节点组成的边</li></ol><h2 id="有向图中的冗余连接">2.4. 有向图中的冗余连接</h2><p>与<a href="#无向图中冗余连接">无向图</a> 不同，有向图冗余边有以下情况：</p><ol><li>入度为2 的节点， 一定会有两个边，删除其中1条<ol><li>如果删除只有还是一个树 ， 这条边可以删除， = 所有节点可以组成并查集</li><li>如果不能构成树，那一定是一个环， 这个边就不是应该删除的边，应是零一条边</li></ol></li><li>如果没有入度为1的节点，一定是有环图<ol><li>将节点依次加入并查集中，删除最后一个形成环的节点</li></ol></li></ol><blockquote><p>删除冗余的最后一条边</p><ol><li>成环的最后一条边 -&gt; 最后使得并查集冗余的边</li><li>节点度为2的边，二选一，选择最后一个插入列表的进行判断</li></ol></blockquote><h2 id="最小生成树">2.5. 最小生成树</h2><h3 id="prim">2.5.1. prim</h3><p>算法步骤：</p><p>初始化： <code>minDist</code>中<code>默认权重</code>不要超过 <code>最大值</code>，否则无法选择节点</p><ol><li>选择距离最小生成树最小的节点</li><li>将节点加入树中</li><li>更新其他节点到最小生成的距离</li></ol><p>使用数据结构<code>minDist</code> 保存节点到当前生成树的最短路径，</p><blockquote><ul><li>最终， <code>minDist</code>中保存着最小生成树的权值</li><li>isTree 记录当前节点是否在树中</li><li>parent 记录与其相连的节点， 记录生成树边</li></ul></blockquote><h3 id="kruscal">2.5.2. kruscal</h3><p>对所有边操作，之前邻接表，邻接矩阵都是对顶点的描述，这里需要定义关于边的数据结构</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">typedef struct edge&#123;    int e1;    int e2;    int w;&#125;Edge ; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>将所有边保存</li><li>按照权重对边，从小到大<strong>排序</strong></li><li>对所有边遍历<ol><li>在同一个并查集中，跳过</li><li>在不同集合中，加入结果，并加入在同一个并查集中</li></ol></li></ol><h2 id="拓扑排序">2.6. 拓扑排序</h2><p><a href="https://programmercarl.com/kamacoder/0047.参会dijkstra朴素.html#思路">topology_sort</a></p><p>对于一个给定的有向图，转换为线性的排序； 图中有环时，不能做线性排序 </p><p>=&gt; 节点入度为<code>0</code> 的时候，没有依赖，选择作为结果</p><blockquote><ul><li><code>拓扑排序</code>可以用于<code>有向图</code> 无环判断</li><li><code>无向图</code>的环判断可以使用<code>并查集</code>判断</li></ul></blockquote><ol><li><p>统计所有边入度， a-&gt;b， 统计<code>b</code>节点的度</p></li><li><p>选择度为0 的节点，加入待处理集中，可以使用<code>queue</code>作为待处理</p></li><li><p>删除节点<code>i</code>，并将其加入结果集中</p><blockquote><p>删除节点<code>i</code>，是删除与其相邻的节点，此时入度为0 ，只有<code>i-&gt;j</code>的边，将节点<code>j</code>入度 -1 即可</p></blockquote></li></ol><h1 id="最短路径">3. 最短路径</h1><h2 id="单源最短路径Dijkstra">3.1. 单源最短路径Dijkstra</h2><p>选择 节点<code>i</code> 到<strong>原点</strong>的最近距离</p><blockquote><p>prim 寻找节点<code>i</code>到<strong>生成树</strong>的最近距离，原理相同，不过<code>minDist</code>存放值不同1</p></blockquote><ol><li><p>选择距离源点最近的节点</p><blockquote><p>dijkstra 的源点到 源点的距离为<code>0</code>，初始化源点为0</p><p>prim 初始树没有生成，初始节点均为<code>INT_MAIX-1</code>(方便选择第一个节点)</p></blockquote></li><li><p>将节点插入结果集中，标志为已访问</p></li><li>更新节点相邻节点 的 <code>minDist</code></li></ol><p>借助三个数组：</p><ol><li><code>minDist[j]</code>: <code>j</code>到源点的最小值</li><li><code>visited[j]</code>： <code>j</code>是否已找到最小值</li><li><code>parent[j]</code>: 与<code>j</code>相连的父节点，每次更新最小值时，更新</li></ol><h3 id="使用边进行Dijkstra">3.1.1. 使用边进行Dijkstra</h3><p>其中有两处修改</p><ol><li><p>使用邻接表代替邻接矩阵</p></li><li><p>使用堆排序选择 距离源点最近的节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cur &#x3D; q.top() ;&#x2F;&#x2F; 最小的距离节点q.pop();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>替换掉使用<code>for</code>对<code>minDist</code>的遍历，查找最小距离节点</p></li><li><p>遍历中，使用对边遍历，代替对节点遍历，</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">while(!q.empty()) &#x2F;&#x2F; 所有的边都保存在q中<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>修改之后使用的数据结构：</p><ol><li><p><code>priority_queue&lt;Arc, vector&lt;Arc&gt; , greater&lt;Arc&gt;&gt;</code> 对边权重的小顶堆</p><blockquote><p>小顶堆中a &lt; b，需要使用 &gt;</p><ol><li><p>重定义Arc中的<code>&gt;</code> ，使其能够 <code>&gt;</code>比较运算</p></li><li><p>使用greater<arc> ，使用<code>&gt;</code></arc></p><p>也可以重定义一个比较类，替换2</p></li></ol><p>比较类写法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">class Arc&#123;public:    int node;    int w;    &#x2F;&#x2F; &gt; 紧跟在operator之后    &#x2F;&#x2F; 参数使用 const + &amp;    &#x2F;&#x2F; 函数需要使用const     bool operator&gt;(const Arc&amp; other) const&#123;        return this-&gt;w &gt; other.w;    &#125;&#125;; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><h2 id="Bellman-ford算法">3.2. Bellman-ford算法</h2><p>可以用于解决具有负权边的结果 ， 对边进行缩放，此时可以只存储边</p><blockquote><p>dijskra不能处理具有负权边的结果， 使用的是贪心算法，选择当前最近的边，对 负权边忽视最优结果</p></blockquote><p>Bellman-ford算法类似于动态规划的算法， <code>minDist[i] = min(minDist[i] ,  minDist[j-1] + value)</code>, </p><p>通过<code>n-1</code> 次迭代， 一定能找到最小边</p><ol><li><p>遍历<code>n-1</code>次</p></li><li><p>对所有边进行一次修改，每次修改更新最小边</p><p>如果<code>from</code> 节点 = <code>INT_MAX</code> ，没有到达<code>from</code> 节点，此时不修改<code>MinDist</code>结果</p></li></ol><h3 id="动态规划思想">3.2.1. 动态规划思想</h3><p><code>dp[k][j]</code> 是最多 <code>k</code>条边经过的最短路径，有两种计算结果</p><ol><li>刚好<code>k</code>次到达最短路径，<code>dp[k-1][v] +  weight</code>， <code>v</code>是能到达 <code>j</code>的节点</li><li>前<code>k-1</code>次已经到达最短路径， <code>dp[k-1][j]</code></li></ol><blockquote><p> <code>dp[k][j] = min(dp[k-1][j] , min(dp[k-1][v]))</code></p></blockquote><h3 id="Bellman-ford-队列优化算法">3.2.2. Bellman-ford 队列优化算法</h3><p>边<code>i-j</code> 中，只有<code>minDist[i]</code> 的权重发生改变，相邻的<code>minDist[j]</code>才需要发生改变， 与<code>i</code>相邻的所有节点都需要更新，此时使用<code>邻接表</code>存储图效果最好</p><p>此时，使用队列<code>queue</code>存放节点<code>i</code>， 作为待处理节点</p><p>同一节点可能未处理之前，可能被修改对此，因此使用<code>visited</code>数组，标识节点是否在队列中，在队列中不需要重复加入</p><blockquote><p>注意： 优化算法只对较少边的情况进行优化， 如果边的数量较多时，优化算法因为<code>queue</code>操作不适合优化</p></blockquote><h3 id="Bellman-ford-判断负权回路">3.2.3. Bellman-ford 判断负权回路</h3><p><a href="https://programmercarl.com/kamacoder/0095.城市间货物运输II.html#思路">判断是否有回路，且值为负数权重</a></p><ol><li>由<a href="#Bellman-ford算法"><code>Bellman_ford</code>算法原理</a> 中， 松弛<code>n-1</code>次后， <code>minDist</code>结果不再发生改变</li><li>所有再多遍历一次，如果在第<code>n</code>后，还发生改变，那么一定出现了<code>负权回路</code></li></ol><h3 id="有限制的最短路径">3.2.4. 有限制的最短路径</h3><p><a href="https://programmercarl.com/kamacoder/0096.城市间货物运输III.html#思路">从<code>i- j</code> 限制经过<code>k</code>个节点</a>  = 可以经过<code>k+1</code>条边</p><p><code>minDist</code>经过<code>k</code>轮松弛，得到最大长度为<code>k</code>的最短路径， 因此原题 = 经过<code>k+1</code>次最短路径得到的结果</p><p>但是由于算法采用了滚动数组， 导致第<code>i</code>条边应在第<code>i</code>轮更改，却在之前轮数中，修改，因此需要保留上一轮的数据，下一轮必须使用上一轮进行修改，保证结果正确性。</p><ol><li>使用缓存数组 存放 上一组中的最短路径</li><li>下一组计算时，需使用上一组的数据进行修改</li></ol><h4 id="DP-求解">3.2.4.1. DP 求解</h4><ol><li><p><code>dp[i][j]</code> 标识经历<code>i</code>条边，到达第<code>j</code>点的最短路径</p></li><li><p><code>dp[i][j]</code>的计算方式</p><ol><li>不经历 第<code>i</code>条边，可以到达<code>j</code>点， <code>dp[i-1][j]</code></li><li>经历第<code>i</code>条边，遍历所有<code>from-&gt;j</code>的边, 因<code>from</code>是到达的第<code>i-1</code>条边， 结果为<code>dp[i-1][from] + w</code></li></ol><p>两者最选择，取最小值</p></li><li><p>初始化，起始节点第<code>0</code>轮一定为0，其余初始化为<code>INT_MAX</code>,便于遍历</p></li><li><p>遍历顺序： 第一轮迭代次数 = 经历<code>k</code>条边，第二轮遍历所有节点即可</p></li></ol><h4 id="使用queue优化">3.2.4.2. 使用queue优化</h4><p>最主要问题： 统计迭代次数，并且使用上一次的计算结果算本次的更新结果</p><ol><li>使用<code>old_minDist</code>, <code>q_size</code>在每次迭代之前，统计上一次的迭代结果</li><li>结束上一次迭代中待更新的所有节点后，停止本次迭代， 迭代数量-1， 统计下一个迭代</li></ol><h2 id="多源最短路径算法Floyd">3.3. 多源最短路径算法Floyd</h2><p>算法可以同时计算出<code>多个起源</code>到<code>各个终点</code>的距离，使用动态规划的思想</p><ol><li><p><code>dp[i][j][k]</code> 节点<code>i</code> -&gt; <code>j</code>经过经过<code>[0,k]</code>中节点的最短路径</p></li><li><p><code>dp[i][j][k]</code> 中<code>i-&gt;j</code>最短路径有两种计算方法：</p><ol><li><p>经过<code>k</code>节点， 即分为两段<code>i-&gt;k-&gt;j</code>， 计算公式为<code>dp[i][k][k-1] + dp[k][j][k-1]</code></p></li><li><p>不经过<code>k</code>节点，从<code>k-1</code>节点经过，计算公式为<code>dp[i][j][k-1]</code></p><p>从中选择最优方案，<code>min(1, 2)</code></p></li></ol></li><li><p>初始化： </p><ol><li>dp 有<code>k=0</code>时计算，初始<code>dp[i][j][0]</code>，经过0个节点，即为初始图路径值</li><li><code>dp[i][j][0]</code>其余边初始为最大值，便于比较出最小值</li></ol></li><li><p>遍历顺序：</p><ol><li><code>k</code>层计算依赖于<code>k-1</code>，所有优先计算出<code>k-1</code>层，<code>k</code>在第一层，从小向大遍历</li></ol></li></ol><h1 id="搜索算法">4. 搜索算法</h1><h2 id="A-算法">4.1. A*算法</h2><ol><li>设计启发函数，由启发函数计算值为节点的选取增加权重</li><li>每次选择节点时，依照权重选择节点</li></ol><p>使用A*算法优化广度搜索算法(还可以优化Dijkstra算法)，</p><blockquote><p>广度搜索算法，每次出队相当于取出节点，在这里为出队的节点增加权重，每次出队按照权重低的出队</p></blockquote><ol><li>建立优先队列，从小到大排序，每次取出权重最小的节点</li><li>每次加入队列时，计算启发函数作为权重值</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++基础</title>
      <link href="/2025/08/28/c/base_study/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2025/08/28/c/base_study/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="c-基础">1. c++基础</h1><h2 id="Union联合体">1.1. Union联合体</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">union&#123;linkNode link;NetNode net;&#125;LinkOrNet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结构体中有两个变量，但是只能有一个变量占据内存</p><p>c++17 中替代方案variant</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;variant&gt;varient&lt;linkNode, NetNode&gt; a; LinkNode b;a&#x3D; b; &#x2F;&#x2F; 自动追踪<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划">1. 动态规划</h1><p><strong>感谢<a href="https://programmercarl.com/">代码随想录</a></strong></p><p>解题思路</p><ol><li>确定<code>dp</code>数组及其下标的含义</li><li>确定<code>dp</code>数组</li><li>确定如何初始化 ，和<code>dp</code>数组的遍历顺序</li><li>举例推导<code>dp</code>数组</li></ol><p>验证dp数组的Bug时</p><ol><li>打印程序日志</li><li>自行推导<code>dp</code>数组</li><li>检查<code>dp</code>数组与程序中哪里出现错误，对错误地方重点检查</li></ol><h2 id="斐波拉契数列">1.1. 斐波拉契数列</h2><ol><li><code>dp</code>是数列的值</li><li><code>dp[i] = dp[i-1]+ dp[i-2]</code>;</li><li>初始化<code>0，1</code>即可</li><li><strong>注意</strong>：题目中要求计算<code>n</code>的值，对应<code>f(n)</code>的值，不是<code>n-1</code></li></ol><h2 id="跳台阶最省力方法">1.2. 跳台阶最省力方法</h2><ol><li><code>dp[i]</code>是第i层台阶使用的力气，dp需要从<code>dp[i-1]</code> 与 <code>dp[i-2]</code>之间选择体力最小的值</li><li>题目中，从第0，1阶开始跳，初始值可以为0；</li><li>从前向后遍历</li></ol><h2 id="路径问题">1.3. 路径问题</h2><h3 id="深度搜索">1.3.1. 深度搜索</h3><h3 id="dp算法">1.3.2. dp算法</h3><ol><li><p><code>dp[i][j]</code>是到达i,j 的所有方法</p></li><li><p>因为只能i, j只能左边<code>dp[i-1][j]</code>和上面<code>dp[i][j-1]</code>共同决定，所以dp由两数之和决定</p></li><li><p>第一行和第一列只能由一种方法到达，初始化为1；</p></li><li><p>从前向后遍历</p></li><li><blockquote><p>因为dp是由上方和左边+1组成，可以使用一维累加数组完成dp数组的效果</p></blockquote></li></ol><h3 id="使用图论">1.3.3. 使用图论</h3><p>移动需要走M+n-2中方法，且其中需要走m-1中向下的步数，结果为$C_{m+n-2}^{m-1}$ </p><p><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20201209113602700-20230310120944078.png" alt="62.不同路径"></p><p>由于阶乘数字较大，先求分子分母阶乘会超过long long 类型，所以边计算分子边计算分母</p><ol><li>如果能够整除分母，且分母没有除完，选择除以分母</li><li>并且分子分母相加相减方向相同，尽快除以分母</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int high &#x3D; m-1;int low &#x3D; m+n-2;int denominator &#x3D; high;long long numerator &#x3D; 1;&#x2F;&#x2F; 求分母for(int i &#x3D; 1 ; i&lt;&#x3D; high ;i++) &#123;    numerator*&#x3D; low;    while(denominator&gt;0 &amp;&amp; numerator%denominator&#x3D;&#x3D;0)&#123;        numerator&#x2F;&#x3D; denominator;        denominator--;    &#125;    low--;&#125;return numerator;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="有障碍的路径规划">1.4. 有障碍的路径规划</h2><ol><li><code>dp[i][j]</code>表示i, j 位置的路径选择方法， 所以当有障碍物时，无法到达这里，此时<code>dp[i][j]=0</code>,其余位置照常计算</li></ol><blockquote><p>牢牢记住dp的定义，如有异常情况，将dp值写出</p></blockquote><h2 id="整数拆分">1.5. 整数拆分</h2><p>整数从i 拆分后分为i, n-i;</p><p>最大值取值有两个选择：</p><ol><li>$i*( n-i )$，不进行下一轮的划分</li><li>$ i* 对(n-i)划分后的最大乘积$，因为i会从0-i 都会分割一次，所以只用对(n-i）进行划分，因为在遍历过程中都会遍历到</li><li>其中2中的第二部分为问题1的子集，使用dp求解</li></ol><p><code>dp[i] = max(dp[i],max(i*j,  j*dp(i-j)))</code></p><p>因为dp[i] 被计算多次，最后需选择最大值，所以对dp[i]求最大值</p><h2 id="二叉搜索树数量">1.6. 二叉搜索树数量</h2><ol><li><p>n个数组成二叉搜索树，以j为中间节点<code>1....j ....n</code></p><p>j左边有<code>j-1-1+1= j -1</code>个数字，构成二叉搜索树，数量为<code>dp[j-1]</code><br>j右边有<code>n - j-1+1 =n-j</code>个数字,构成二叉搜索树，数量为<code>dp[n-j]</code></p></li><li><p>左右子树为树的子问题, <code>dp[i] += dp[j-1]*dp[i-j]</code></p></li><li>初始化dp[0] =1;</li><li>遍历顺序为从前向后，遍历</li></ol><h1 id="背包问题">2. 背包问题</h1><h2 id="0-1背包">2.1. 0-1背包</h2><ol><li>每种物品只能选择一个</li></ol><p><code>dp[物品i][重量w]</code> 表示当前 <code>物品i</code> 与<code>前面的物品[0-(i-1)]</code> 在<code>重量为w</code>情况下的最大价值</p><p>dp，当<code>重量j</code>足够放下<code>物品i</code>计算途径有两种</p><ol><li>放入，总重量为<code>j - w[i]</code> 时的最大价值，加上 <code>物品i</code> 的<code>价值v</code></li><li>不放入，总重量为上一个<code>物品i-1</code>在<code>重量j</code>情况下选择结果的最大值 </li></ol><p><code>dp[i][j]</code>从以上选择最大结果，<code>dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]])+value[i]</code></p><ol><li>初始化，对于第一个放入物品情况初始化</li><li>遍历，从前向后遍历，重量可以等于总重量</li></ol><h2 id="数组分为两个相同的数组">2.2. 数组分为两个相同的数组</h2><ol><li>数组分的数组和界限为<code>sum/2</code>，等价为背包所能装的<code>总的质量</code><ol><li><code>每一个数字</code> =<code>放入的物品</code>，放入进去相当于有了重量</li><li>放入进去后，物品的总价值累加，等于sum/2 时，背包正好被放满</li></ol></li></ol><h2 id="压石机">2.3. 压石机</h2><p><a href="https://programmercarl.com/1049.最后一块石头的重量II.html#思路">使最后一块石头重量最小</a></p><p>两两组合使得质量最小 =  将石头分为两堆， 第一堆减去第二堆尽可能小  = 两石堆的质量差距相同</p><p>回到<a href="#数组分为两个相同的数组">问题2</a>中</p><p>现在将二维dp数组使用一维滚动数组代替</p><ol><li>先遍历物品，再遍历质量，因为dp[0-i]之前的数据是上一轮迭代结果，dp[i]需使用之前的数据，所有从后先前迭代</li><li>先遍历质量，再遍历物品，遍历得到当前质量j 下放下物品的最大价值，需计算出之前的数据，才能计算下一个质量下的最优值，所以必须从后向前迭代</li></ol><p>第二种遍历方式错误，会造成物品选择两次</p><h2 id="目标和">2.4. 目标和</h2><p><a href="https://programmercarl.com/0494.目标和.html#算法公开课">目标和</a></p><ol><li>将目标和转换为 <strong>数据求和等于某个值</strong>n</li><li>相当于将数值放入其中，可以得到值n</li></ol><p>和为<code>x</code>, 差的和为<code>sum -x</code> ,所以 <code>x- sum+x = target</code>，求出<code>x = (target+sum)/ 2</code>， 所以目标和为<code>(target+sum)/ 2</code></p><ol><li><p><code>dp[i][j]</code>是目标和为j 时选择i ，有多少组合方法</p></li><li><p>dp的组合方式</p><ol><li>选择i ， 则方法总数为上一个数字总和为j - num[i], 即<code>·dp[i-1][j-nums[i]]</code></li><li>不选择i，则方法总数为上一数字总和为<code>j</code> ,即<code>dp[i-1][j]</code></li></ol><p>总方法=<code>1+2</code></p></li><li><p>初始化： </p><ol><li>对于第一个数字，只有一种j 有一种方法，其余方法数为0；</li><li>对于剩余数字，当j = 0时，总数为0数字的2*n;</li></ol></li></ol><h2 id="0-1字串">2.5. 0-1字串</h2><p><a href="https://programmercarl.com/0474.一和零.html#思路">0-1</a></p><p>一个字符串<code>strs= [&quot;10&quot;, &quot;0001&quot;, &quot;111001&quot;, &quot;1&quot;, &quot;0&quot;]</code>,求出有m个0， n个1的最大子集元素个数</p><p>此时题目相当于m,n相当于背包的重量，总重量小于m、n两个维度，字符串相当于物品，字符串0、1个数相当于每个物品的质量。</p><p>此时可以使用0-1背包</p><p>推荐使用滚动数组解决0-1背包问题</p><ol><li>初始化时将初始值置为0</li><li>优先物品遍历，质量遍历时使用倒序遍历</li></ol><h1 id="完全背包问题">3. 完全背包问题</h1><ol><li><p>背包物品数量有无穷多个，可以重复选择</p></li><li><p><code>dp[i][j]</code>公式含义： 第<code>i</code>个物品，在重量<code>j</code>条件下物品的最大价值</p></li><li><p><code>dp[i][j]</code>计算方式</p><ol><li>选择<code>i</code>, 预留重量<code>j- weight[i]</code>， 且背包中仍有<code>i</code>（区别0-1背包）， <code>dp[i][j- weight[i]]</code></li><li>不选择<code>i</code>, 不预留质量，不选择<code>i</code>,背包中只有<code>i-1</code>物品的最大值， <code>dp[i-1][j]</code></li></ol><p><code>dp[i][j] = max(dp[i][j- weight[i]], dp[i-1][j])</code></p></li><li><p>初始化</p><ol><li>对<code>i = 0</code>初始化</li><li>对<code>j = 0</code> 初始化</li></ol></li></ol><h2 id="零钱兑换">3.1. 零钱兑换</h2><p>此时求得是总的组合数，不是最大价值，<code>dp[i][j]</code> 是由<code>i</code> 是否选择两种情况组合的和</p><ol><li><code>dp[i][j] = dp[i][j- weight[i]] + dp[i-1][j]</code></li><li>初始化<ol><li>第一行初始化，如果可以整除，则有组合方式，初始化为1</li><li>第一列初始化，重量&gt;1 ,则重量=0时，只有一种组合方式，初始为1</li></ol></li></ol><blockquote><p>&lt; int &lt; unsigned int  &lt; long long &lt; unsigned long long </p><div class="table-container"><table><thead><tr><th></th><th>int</th><th>unsigned int</th><th>long long</th><th>unsigned long long</th></tr></thead><tbody><tr><td><cstdint></cstdint></td><td>int32_t</td><td>uint32_t</td><td>int64_t</td><td>uint64_t</td></tr><tr><td>范围</td><td>2,147,483,647</td><td>4,294,967,295</td><td>9,223,372,036,854,775,807</td><td>18,446,744,073,709,551,615</td></tr><tr><td>十进制</td><td>2e9</td><td>4e10</td><td>9.2e18</td><td>1.8e19</td></tr></tbody></table></div></blockquote><h3 id="使用一维dp数组">3.1.1. 使用一维dp数组</h3><ol><li>使用滚动数组 <code>dp[j] = dp[j] + dp[j- weight[i]]</code><ol><li>不选择时<code>nochoose = dp[j]</code></li><li>选择时 <code>choose = dp[j-weight[i]]</code></li></ol></li><li>初始化<ol><li>dp[0] 只有一种组合方式，初始化为1</li></ol></li><li>遍历顺序<ol><li>先遍历物品，在遍历质量，是组合<ol><li>且遍历质量时，需<strong>顺序遍历</strong>，此时可以放置多个同一物品，需使用到之前的数据，</li></ol></li><li>先遍历质量，再遍历物品，是排列数量</li></ol></li></ol><div class="table-container"><table><thead><tr><th>先遍历物品，再遍历质量</th><th>先遍历质量，再遍历物品</th></tr></thead><tbody><tr><td>先放物品<code>i</code> ，再放入物品<code>i+1</code>，有放入顺序，排除顺序不同的情况，计算的是组合数</td><td>先计算出当前质量下所有物品的最大值，表示质量<code>j</code>所有组合情况，没有顺序问题，是排列数</td></tr></tbody></table></div><h2 id="求出排列数量">3.2. 求出排列数量</h2><p><a href="https://programmercarl.com/0377.组合总和Ⅳ.html#算法公开课">求出排列数量</a>有两种思路</p><ol><li><p>完全背包的排列问题：</p><ol><li><p>先遍历质量，再遍历物品， 可以得到排列数量</p></li><li><p>爬楼梯</p></li><li><p>爬到第<code>i</code> 层的值，等于之前能够爬到<code>i</code>的所有选择之和</p><p>$ dp[i] = {dp[i- 能到i的跳跃次数]} 总和$</p></li><li><p>题目中用于跳跃到n的次数= 数组中用于相加等于n 的所有元素</p></li></ol></li></ol><h2 id="爬楼梯-完全背包排列问题">3.3. 爬楼梯 = 完全背包排列问题</h2><p>爬n阶台阶，每次能爬m 阶，两种思路解决</p><ol><li><p>n阶台阶 =  背包总容量，m阶台阶是每次选择的物品质量，<code>价值 = 重量 = j</code>。dp[j]是装满<code>j</code>层的方法总数</p><p><code>dp[i] += dp[i-j]</code></p><p>完全背包问题，优先遍历质量，再遍历物品</p></li><li><p>爬到<code>i</code> 层是之前<code>i-m</code> 层所有爬楼方法的总和, </p><p><code>dp[i]  += dp[i-j]</code></p></li></ol><h2 id="零钱兑换的最小方法数">3.4. 零钱兑换的最小方法数</h2><p><a href="https://programmercarl.com/0518.零钱兑换II.html">零钱兑换</a></p><ol><li><code>dp[j]</code>  兑换<code>j</code>所需的金币数量</li><li><code>dp[j]</code> 由其 <code>dp[i- coins[i]]</code>兑换到当前值 的最小方法决定<ol><li><code>dp[j] = min(dp[j], dp[j- coins[i]])</code></li></ol></li><li>初始化，需比较最小值，需将<code>dp[j]</code> 初始化为<code>UINT64_MAX</code> <ol><li><code>dp[0]</code> 方法数为0，初始化为0</li></ol></li><li>此时不是求总的组合数 / 排列数，任意顺序遍历均可</li></ol><h2 id="完全平方数">3.5. 完全平方数</h2><p><a href="https://programmercarl.com/0279.完全平方数.html#算法公开课">完全平方数</a></p><ol><li>dp与上一相同</li></ol><h2 id="字串拆分">3.6. 字串拆分</h2><p><code>i</code> 是需要达到的楼梯，</p><p><code>0-(i-1)</code>是能够到达<code>i</code>之前所有的楼梯，对这些元素遍历，并检查 <code>j - i</code> 之间能否跳到<code>i</code></p><p><code>dp[i] = dp[j] &amp;&amp; (i-j)能否到达</code></p><blockquote><p>切分<code>(i-j)</code> ，切记<code>i.j</code>均是加1 后的结果， 那么<code>j = j&#39;+1</code>，起始位置为<code>j&#39;+1</code> ,即为<code>j</code>, 总长度为<code>i&#39; - j+1</code>= <code>i -1-j+1</code> = <code>i-j</code></p><p>切分范围为(j, i-j)</p></blockquote><h3 id="回溯遍历，使用数组保存状态">3.6.1. 回溯遍历，使用数组保存状态</h3><p>使用memory保存状态，之后可以直接使用</p><h1 id="多重背包问题">4. 多重背包问题</h1><p>多重背包问题 = 物品展开的0-1背包问题</p><div class="table-container"><table><thead><tr><th>重量</th><th>价值</th><th>数量</th><th></th></tr></thead><tbody><tr><td>物品0</td><td>1</td><td>15</td><td>2</td></tr><tr><td>物品1</td><td>3</td><td>20</td><td>3</td></tr><tr><td>物品2</td><td>4</td><td>30</td><td>2</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>重量</th><th>价值</th><th>数量</th><th></th></tr></thead><tbody><tr><td>物品0</td><td>1</td><td>15</td><td>1</td></tr><tr><td>物品0</td><td>1</td><td>15</td><td>1</td></tr><tr><td>物品1</td><td>3</td><td>20</td><td>1</td></tr><tr><td>物品1</td><td>3</td><td>20</td><td>1</td></tr><tr><td>物品1</td><td>3</td><td>20</td><td>1</td></tr><tr><td>物品2</td><td>4</td><td>30</td><td>1</td></tr><tr><td>物品2</td><td>4</td><td>30</td><td>1</td></tr></tbody></table></div><p>相当于先遍历物品，再遍历物品的个数，再遍历背包(遍历物品个数在内部也一样)</p><blockquote><p>物品<code>i</code> ， 质量为<code>j</code>, 最大数量为<code>k</code></p><p><code>dp[i][j]</code> 对于总重量<code>j</code>有两种计算方式</p><ol><li>不装： <code>dp[i-1][j]</code></li><li>装k个：<code>dp[i-1][j-k*weight[i]] +  k*value[i]</code></li><li>初始化：<ol><li><code>j = 0</code> 一列全部为0</li><li><code>i =</code></li></ol></li></ol><p>初始化，与取值都是错误的，二维数组很复杂</p></blockquote><p>建议使用滚动数组</p><p>物品<code>i</code> ， 质量为<code>j</code>, 最大数量为<code>k</code></p><p><code>dp[j]</code> 是物品<code>i</code>对于总重量<code>j</code>有两种计算方式</p><ol><li>不装： <code>dp[j]</code></li><li>装k个：<code>dp[j-k*weight[i]] +  k*value[i]</code></li></ol><p>如果先遍历物品再遍历质量时，此时每次放入一个，<strong>不再需要乘上系数<code>k</code></strong></p><h1 id="打家劫舍问题">5. 打家劫舍问题</h1><ol><li><p><code>dp[i]</code> 是第<code>i</code> 家可以打劫到的最大金额</p></li><li><p><code>dp[i]</code>可以选择偷 / 不偷</p><ol><li><p>偷的话，需要偷<code>i-2</code>之前房屋的金额，加上第<code>i</code>家的前</p><p><code>dp[i-2]+ nums[i]</code></p></li><li><p>不偷的话，第<code>i-1</code>家可以被偷，所以第<code>i</code>的情况 = 第<code>i-1</code>家是否被偷的情况</p><p><code>dp[i] = dp[i-1]</code></p></li></ol><p><code>dp[i] = max(d[i-2]+ nums[i],  dp[i-1])</code></p></li><li><p>初始化，需要初始化第0，1 家</p><ol><li>dp[0] = nums[0], dp[1] = max(dp[0] , dp[1]);</li></ol></li><li><p>遍历顺序，从前向后</p></li></ol><h2 id="成环的打家劫舍">5.1. 成环的打家劫舍</h2><p><a href="https://programmercarl.com/0213.打家劫舍II.html#思路">成环</a></p><p>成环后，将首尾分开讨论</p><ol><li><p>不偷头，那么最后一间可以被偷</p><p><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20210129160842491-20230310134008133.jpg" alt="不偷第一家"></p></li><li><p>不偷尾，那么第一间房间可以被偷</p><p><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20210129160821374-20230310134003961.jpg" alt="不偷最后一家"></p></li></ol><p>求两次的能偷的最大价值，比较，返回最大值</p><h2 id="二叉树的打家劫舍">5.2. 二叉树的打家劫舍</h2><p><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20210223173849619.png" alt="二叉树"></p><p>树的后序遍历，统计孩子们偷钱，再由中间节点统计</p><ol><li>截至条件：<ol><li>到NULL节点，偷的最大值为0</li><li>到叶子节点，偷的最大值是当前值</li></ol></li><li>处理逻辑<ol><li>根节点偷<ol><li>跳过左右孩子，计算从左右孙子偷到的金额</li></ol></li><li>根节点不偷<ol><li>计算左右孩子偷盗的金额</li></ol></li><li>选择哪一个值更大，选择偷拿个</li><li>使用记忆化存储，使用<code>map&lt;root, val&gt;</code>,保存已访问节点的最大值，后续访问节点时，直接返回保存值</li></ol></li></ol><h3 id="树形的dp">5.2.1. 树形的dp</h3><p><code>dp[i]  取决于 i 的左右节点的dp[i-&gt;left], dp[i-&gt;right]</code></p><ol><li>截至条件，所以函数需要返回孩子节点的选择状态&lt;不偷，偷&gt;<ol><li>到NULL节点，返回<0,0></0,0></li></ol></li><li>处理逻辑：<ol><li>当前节点偷，choose  = val + 左右孩子不偷</li><li>当前节点不偷，可以考虑左右节点是否偷，nochoose = max(左孩子选择)+max(右孩子选择)</li></ol></li></ol><h1 id="股票问题">6. 股票问题</h1><blockquote><p>同一个<code>i</code>有两种状态， 状态之间互相推导</p></blockquote><ol><li><p>第<code>i</code>天有两种状态， 持有股票 / 不持有股票， 分别设置为 <code>dp[i][0]/ dp[i][1]</code></p></li><li><p>第<code>i</code>天持有股票，可由两种方式推导</p><ol><li><p>第<code>i-1</code> 持有股票</p></li><li><p>第<code>i-1</code>不持有股票，第<code>i</code>天购购入(因为之前没有购入股票，一切为0)</p></li><li><blockquote><p><code>dp[i][0] = max(dp[i-1][0],  - price[i])</code></p><p>如果之前卖出了股票，就成了由不持有股票状态<code>dp[i-1][1]-price[i]</code></p></blockquote></li></ol><p>第<code>i</code>天不持有股票，由两种方式推导</p><ol><li><p>第<code>i-1</code>不持有股票</p></li><li><p>第<code>i-1</code>天持有股票， 第<code>i</code>购入股票</p></li><li><blockquote><p><code>dp[i][1] = max(dp[i-1][1], dp[i-1][0] - price[i])</code></p></blockquote></li></ol></li><li><p>dp公式初始化，所有由第一天的状态组成，初始化</p><ol><li>第一天持有股票<code>dp[0][0] = -price[0]</code></li><li>第一天不持有股票 <code>dp[0][1] = 0</code></li></ol></li><li><p>遍历顺序，从前向后遍历</p></li></ol><h2 id="有限次购买股票">6.1. 有限次购买股票</h2><p><strong>问题：</strong><code>dp</code>数组由多种不同的状态，且不同状态之间互相推导</p><p><strong>解决方法：</strong> 找出所有可能的状态，并推导不同状态之间的公式</p><p>最多有<code>n</code>次购买股票，可以设置五种状态</p><div class="table-container"><table><thead><tr><th>0</th><th>没有操作</th><th><code>dp[i][0]</code></th></tr></thead><tbody><tr><td>1</td><td>第一次持有股票</td><td><code>dp[i][1]</code></td></tr><tr><td>2</td><td>第一次不持有股票</td><td><code>dp[i][2]</code></td></tr><tr><td>3</td><td>第二次持有股票</td><td><code>dp[i][3]</code></td></tr><tr><td>4</td><td>第二次不持有股票</td><td><code>dp[i][4]</code></td></tr></tbody></table></div><ol><li><p>第一次持有股票 </p><ol><li><p>第<code>i-1</code>第一次持有股票</p></li><li><p>第<code>i</code>天没有操作状态购入股票</p></li></ol></li><li><p>第一次不持有股票</p><ol><li>第<code>i-1</code>天不持有股票</li><li>第<code>i-1</code>天 持有股票后，第<code>i</code>天卖出股票</li></ol></li><li><p>第二次持有股票</p><ol><li>第二次持有股票</li><li>第<code>i-1</code>天第一次不持有股票，第<code>i</code>天购入股票</li></ol></li><li><p>第二次不持有股票</p><ol><li>第二次不持有股票</li><li>第<code>i-1</code>天持有股票， 第<code>i</code>天卖出股票</li></ol></li></ol><p>初始化：在第0天</p><ol><li>第一次购入股票， 为<code>-price[0]</code></li><li>第一次不持有股票，相当于第一天买了又卖了， 0</li><li>第二次购入股票，相当于第一天买入又卖出，再买入， 为<code>-price[0]</code></li><li>略</li></ol><p>dp结果： 只买一次股票包含在买两次股票结果中，所以第二次卖出股票为最终结果</p><h2 id="限制k次购买股票">6.2. 限制k次购买股票</h2><p><a href="https://programmercarl.com/0188.买卖股票的最佳时机IV.html#算法公开课">k次购买</a></p><p><code>k</code>次购买有<code>2k</code>中持有与不持有状态，+1中首次误操作状态</p><ol><li><code>dp[i][j+1]</code>次状态有 <code>dp[i-1][j]</code> ， 上一种状态<code>dp[i-1][j]</code>转换组成<ol><li>由于奇数次状态为持有股票状态，需要购入股票，由上一状态 <code>- price[i]</code>得到</li><li>偶数次状态为不持有股票状态，卖出股票， 总的价格增加，由上一状态<code>+ price[i]</code>得到</li></ol></li><li><code>dp[i][j]</code>公式<ol><li>$dp[i]][j] = max(dp[i-1][j] , dp[i-1][j-1] + (-1)^j*prices[i])$</li><li>方便计算，可以将奇偶公式分开枚举</li></ol></li></ol><h2 id="含有冷冻期的股票购买">6.3. 含有冷冻期的股票购买</h2><p><a href="https://programmercarl.com/0309.最佳买卖股票时机含冷冻期.html#思路">卖出股票后一天时冷冻期，冷冻期后时不持有股票状态</a></p><p>尝试描述购买股票过程中有多少种状态，画出其状态转化图， 有四种状态，</p><ol><li>持有股票状态 ， <code>dp[i][1]</code></li><li>不持有股票状态,  <code>dp[i][2]</code></li><li>冷冻期,  <code>dp[i][3]</code></li><li>当天卖出股票状态(此时状态与2不同)  <code>dp[i][4]</code></li></ol><p><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20250829214353940.png" alt="image-20250829214353940"></p><ol><li>当前持有股票，<ol><li>可由前一天持有股票<code>dp[i-1][1]</code>得到，</li><li><code>i-1</code> 天不持有股票，买入股票得到， <code>dp[i-1][2] -  price[i]</code></li><li><code>i-1</code>冷冻期中后一天，买入股票， <code>dp[i-1][3] - price[i]</code></li></ol></li><li>当前不持有股票<ol><li><code>i-1</code>是冷冻期， <code>dp[i][3]</code></li></ol></li><li>当前是冷冻期<ol><li><code>i-1</code>当天售出股票， <code>dp[i-1][4]</code></li></ol></li><li>当天售出股票<ol><li><code>i</code>持有股票，卖出， <code>dp[i-1][1] + price[i]</code></li></ol></li></ol><p>初始化：</p><ol><li>持有股票时， 因买入股票， 初始为<code>-price[0]</code></li><li>其余状态不持有股票，初始不买不入，初始为0</li></ol><p>遍历顺序：从前向后遍历</p><h2 id="含手续费的股票售出">6.4. 含手续费的股票售出</h2><p><a href="https://programmercarl.com/0714.买卖股票的最佳时机含手续费（动态规划）.html#算法公开课">卖出时缴纳手续费</a></p><ol><li>还是两种状态， 持有股票，不持有股票， 由持有股票售出股票-&gt; 不持有股票，需缴纳手续费</li><li>dp转换公式<ol><li><code>dp[i][0] = max(dp[i-1][0] , dp[i-1][1] - price[i])</code></li><li><code>dp[i][1] = max(dp[i-1][1], dp[i-1][0] + price[i] -fee)</code> ，售出时缴纳手续费</li></ol></li><li>初始化： 略</li><li>选择结果： 可以卖出，也可以不卖出，选择最大值情况</li></ol><h1 id="子序列问题">7. 子序列问题</h1><blockquote><p>字串问题操作数 =  不同结果的操作选择</p><ol><li>找到所有可能的操作</li><li>当前情况可以由哪些操作得到，上一操作状态又是什么</li><li>使用<code>max, min</code> 选择最合适的操作</li></ol></blockquote><p>可以近似于 爬楼梯问题， 能爬到 <code>num[i]</code> 位置的最大长度</p><ol><li><p><code>dp[i]</code>表示为 <code>i之前包括i内以nums[i]</code>为结尾的序列， 单调增序列的最大长度,</p></li><li><p><code>for 0: j</code> 中，能够爬到 <code>if(nums[j] &lt; nums[i])</code>中， 长度最大值</p><p><code>if(nums[j]  &lt;  nums[i] )  dp[i] = max(dp[i], dp[j] +1)</code></p></li><li><p>初始化，所有序列初始为1</p></li></ol><h2 id="最长连续子序列">7.1. 最长连续子序列</h2><p><a href="https://programmercarl.com/0674.最长连续递增序列.html#思路">子序列连续-递增</a></p><p>要求连续，所以只能从<code>j-1</code>跳到<code>j</code>的位置，所以只需要比较<code>nums[j-1] &lt; nums[j]</code>， 不需要从<code>[0,j-1]</code>全部与<code>nums[j]</code>比较</p><h2 id="最长重复子序列">7.2. 最长重复子序列</h2><ol><li><p><code>dp[i][j]</code> 表示 以<code>i-1</code> 结尾的A数组  与 以<code>j-1</code>结尾的B 数组 最长公共子序列</p><blockquote><p>因为<code>dp[i][j]</code> 时比较了了<code>i-1</code> 与<code>j-1</code>的序列结果， 所以表示以<code>i-1</code>为结尾的子序列</p></blockquote></li><li><p><code>if(A[i-1] == B[j-1])  dp[i][j] = max(dp[i-1][j-1]+1)</code>  , 比较的当前位置，因为<code>i, j</code>比实际<code>i,j</code>大1， 所以<code>if</code>中减去了1</p></li><li><p>初始化 <code>i=0 , j=0</code> 各种情况都是错误，初始化为0</p></li></ol><p>遍历顺序： <code>dp[i][j]</code>需要从1 开始遍历</p><h3 id="一维dp数组">7.2.1. 一维dp数组</h3><ol><li><p><code>dp[j]</code>表示与<code>j-1</code>结尾的相同的最大长度</p><blockquote><p> 因为是从上一个<code>i-1</code>复制下来得到，遍历过程中不能修改<code>j-1</code>的<code>dp</code>，否则影响后续计算</p></blockquote></li><li><p>·<code>if(A[i-1] == B[j-1])  dp[j] = max(dp[j-1]+1)</code></p></li><li><p>遍历顺序： <code>i</code>从头开始， <code>j</code>必须从后开始</p></li></ol><h2 id="最长公共子序列">7.3. 最长公共子序列</h2><ol><li><code>dp[i][j]</code> 表示以<code>i-1</code> 结尾的序列与 以<code>j-1</code>为结尾的序列，最长的公共子序列</li><li><code>dp[i][j]</code> 有两种计算方式<ol><li><code>A[i-1] == B[j-1]</code> ，长度+1,  <code>dp[i-1][j-1]+1</code></li><li><code>A[i-1] ！= B[j-1]</code> ,需要看<code>i-1</code>和<code>j</code>  /   <code>i</code> 与<code>j-1</code> 是否有最长的公共子序列，从两者中选择最大值</li></ol></li><li>初始化：<ol><li><code>i=0, j=0</code>情况，因为序号为<code>0</code>为空串， 与另一条序列的公共序列一定为0</li></ol></li><li>遍历顺序： 从前向后</li></ol><h2 id="最大连续子序和">7.4. 最大连续子序和</h2><p><a href="https://programmercarl.com/0053.最大子序和（动态规划）.html#算法公开课">最大子序和</a></p><p>连续子序和，可以由上一个序列延续获得， 也可以上一序列中断， 由当前序列继续计算</p><ol><li><p><code>dp[i]</code> ，以<code>i</code>为结尾的最长子序和</p></li><li><p><code>dp[i] = max(dp[i-1]+ nums[i], nums[i])</code></p></li><li><p>初始化，<code>dp[0]</code> 可以选择自身开始，或者从0开始</p><blockquote><p>题目要求子序长度 &gt;0 ，所以必须从自身开始</p></blockquote></li><li><p>遍历顺序： 从前向后遍历</p></li></ol><h2 id="判断子序列">7.5. 判断子序列</h2><p>子序列a  对应 序列b 的子序列长度</p><p><code>dp[i][j]</code>是子序列a与序列b相同子序列长度</p><ol><li><p>相同时 ， <code>dp[i][j] = dp[i-1][j-1] + 1</code>;</p></li><li><p>不相同时，删除<code>j</code>节点，观察 <code>dp[i][j-1]</code>能到达的最大长度</p><blockquote><p>此时，只能删除<code>j</code>节点，删除<code>i</code>节点后，就不是原来的序列了</p></blockquote></li></ol><h2 id="不同的子序列">7.6. 不同的子序列</h2><p><a href="https://programmercarl.com/0115.不同的子序列.html#算法公开课">完整的序列<code>t</code></a>在<code>s</code>的子序列中出现的次数</p><ol><li><p><code>dp[i][j]</code>, 以<code>i-1</code>结尾的序列t ，在以<code>j-1</code>为结尾的序列<code>s</code>中子序列出现次数</p></li><li><p>有两种计算情况</p><ol><li><p><code>s[i-1] == t[j-1]</code> ，看<code>i-1, j-1</code> 时匹配的结果， 同时还可以删除<code>i-1</code>看匹配结果(<code>i-1</code>可能由重复情况)</p><blockquote><p>相同情况时，选择用<code>s[i]</code> 与 <code>t[j]</code>比较，因为<code>s[i]</code>前一位可能等于后一位，所有也需要向前移动一位比较</p></blockquote></li><li><p>不相同时，删除<code>i-1</code>看匹配结果，<code>dp[i-1][j]</code></p></li></ol></li><li><p>初始化，<code>i = 0 , j=0</code>都是异常情况</p><ol><li><code>i =0</code> , s为空串， <code>j</code>与<code>s</code>相同结果为0</li><li><code>j=0</code>时，<code>j</code>是空串，<code>s</code>中删除到最后，一定有一串与<code>j</code>相同，初始化为1</li></ol></li><li><p>遍历顺序： 从前向后遍历</p></li></ol><h2 id="删除操作">7.7. 删除操作</h2><p><a href="https://programmercarl.com/0583.两个字符串的删除操作.html#算法公开课">两个字串删除n次后，序列相同</a></p><h3 id="最长相同子序列长度">7.7.1. 最长相同子序列长度</h3><ol><li>求出两字串最长公共子序列，长度n；</li><li>字串a,b删除除了公共子序列外的其他元素，删除后结果相同，删除长度 = 删除操作此处</li></ol><h3 id="删除操作DP">7.7.2. 删除操作DP</h3><ol><li><p><code>dp[i][j]</code>是以<code>i-1</code>为结尾的串a，以<code>j-1</code>为结尾的字串b需要删除的最小次数</p></li><li><p><code>dp[i][j]</code>有两种情况，相同结尾，不同结尾</p><ol><li><p><code>a[i-1] == b[j-1]</code>， 不需要删除操作，操作次数 = <code>dp[i-1][j-1]</code></p></li><li><p><code>a[i-1] ！= b[j-1]</code>，需要删除 a,b的最后一个，或者两个都删除</p><ol><li>删除<code>i-1</code> , <code>dp[i-1][j]+1</code></li><li>删除<code>j-1</code>,  <code>dp[i][j-1]+1</code></li><li>两个都删除， <code>dp[i-1][j-1]</code>+2 </li></ol><p>使用<code>max</code>对三种方案进行选择， 3 包含在1， 2中，可以省略3</p></li></ol></li><li><p>初始化，<code>i=0, j=0</code>异常情况，需初始化</p><ol><li><code>i=0</code>， 字串<code>a = NULL</code>, 字串<code>b[j]</code> 需删除 <code>j</code>次</li><li>j = 0 ，同上</li></ol></li><li><p>遍历顺序： 从前向后</p></li></ol><h2 id="编辑距离">7.8. 编辑距离</h2><p>字串编辑有三种操作，字串<code>a[i]</code>, <code>b[j]</code>, 最后一位不同</p><ol><li>删除，删除a 的最后一位<code>a[i]</code>，<code>b</code>没有改变</li><li>增加，在<code>b[j-1]</code>后增加一位<code>a[i]</code>与a相同， 增加一位<code>a[i]</code>与删除一位<code>a[i]</code>的操作力度相同</li><li><p>替换， </p></li><li><p><code>dp[i][j]</code> 表示以<code>i-1</code>为结尾的串a，以<code>j-1</code>为结尾的字串b需要操作的最小次数</p></li><li><p><code>dp[i][j]</code>有两种情况，相同结尾，不同结尾</p><ol><li><p><code>a[i-1] == b[j-1]</code>， 不操作，记录之前的操作次数= <code>dp[i-1][j-1]</code></p></li><li><p><code>a[i-1] ！= b[j-1]</code>， 进行以上三种操作</p><ol><li>删除， <code>dp[i-1][j]+1, dp[i][j-1]+1</code></li><li>增加， <code>dp[i-1][j]+1, dp[i][j-1]+1</code></li><li>替换， <code>dp[i-1][j-1]+1</code></li></ol><p>使用<code>max</code>对操作进行选择</p></li></ol></li><li><p>初始化，<code>i= 0, j =0</code>的情况，处理同上</p></li><li><p>遍历顺序，从后向前遍历</p></li></ol><h1 id="回文">8. 回文</h1><h2 id="回文子串">8.1. 回文子串</h2><h3 id="DP算法">8.1.1. DP算法</h3><p><a href="https://programmercarl.com/0647.回文子串.html#算法公开课">求回文字串的数量</a></p><ol><li><p><code>dp[i][j]</code>表示 <code>[i,j]</code>之间的字符是否为回文字串， 然后统计数组dp中有多少个 <code>true</code>,, = 有多个回文字串</p></li><li><p>两种情况</p><ol><li><code>a[i] =  a[j]</code>, <ol><li><code>[i, j]</code>之间相同 /  相邻，一定是回文子串</li><li><code>[i,j]</code>之间不相邻，<code>dp[i+1][j-1]</code>是回文串，则<code>true</code></li></ol></li><li>不相同，不是回文串，跳过</li></ol></li><li><p>初始化</p><ol><li><code>dp[i][j]</code>全初始化为<code>false</code></li></ol></li><li><p>遍历顺序</p><p>从左下角开始遍历， 即 下-&gt; 上，左-&gt; 右遍历</p><p><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20210121171032473-20230310132134822.jpg" alt="647.回文子串"></p></li></ol><h3 id="双指针-中心扩散">8.1.2. 双指针  中心扩散</h3><p>回文串 由 中间1个 /  2个向左右扩散，统计扩散数量，不能扩散时，返回得到扩散的最大数量</p><ol><li>中间 1 个向左右 扩散</li><li>中间 2 个向左右扩散</li><li>相加得到结果</li></ol><h2 id="最长回文子串">8.2. 最长回文子串</h2><p><a href="https://programmercarl.com/0005.最长回文子串.html#思路">最长回文字串</a></p><p>字串要求 是连续的</p><h2 id="最长回文子序列">8.3. 最长回文子序列</h2><p><a href="https://programmercarl.com/0516.最长回文子序列.html#思路">最长回文序列</a></p><p>回文序列可以不连续</p><ol><li><p><code>dp[i][j]</code>，表示<code>[i,j]</code> 之间最大的回文序列长度</p></li><li><p><code>dp[i][j]</code>两种情况</p><ol><li><code>a[i] == a[j]</code>，子序列长度加2 ， <code>dp[i+1][j-1]+2</code></li><li><code>a[i] != a[j]</code>，那就是前一个区间的最大长度，可以缩短<code>i/ j</code>，<code>max(dp[i-1][j], dp[i][j-1])</code></li></ol></li><li><p>初始化</p><ol><li><p>由性质 <code>i == j</code>时候， <code>dp[i+1][j-1]+2</code></p><p>因为<code>i+1 &gt; j-1</code>无意义，所以<code>i==j</code>需要单独初始化</p></li><li><p>其余初始化为0</p></li></ol></li><li><p>遍历顺序： 下- &gt; 上， 左-&gt; 右</p><blockquote><p>遍历时， <code>i == j</code>时，已经初始化，且公式计算不到，所以<code>j</code>只需要从<code>i+1</code>开始遍历</p><p><code>dp[i+1][j-1]+2</code>,所以 `i &lt;= s.size()-2, i &gt;=0</p></blockquote><p><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20230102172155.png" alt="遍历顺序"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法</title>
      <link href="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
      <url>/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心算法">1. 贪心算法</h1><p><strong>感谢<a href="https://programmercarl.com/0101.对称二叉树.html#思路">代码随想录</a></strong></p><p>贪心算法——由局部最优推导出全局最优</p><h2 id="饼干分配">1.1. 饼干分配</h2><p>按照常识推导，但所用知识需要逻辑正确</p><p>大胃口  吃 大饼干，如果胃口大了，可以换小胃口             大饼干不能喂小胃口，如果饼干小了， 不能喂更小的饼干</p><p>小饼干去喂小胃口，如果饼干小了，换大饼干                    小胃口不能吃小饼干，胃口大了，不能换大胃口</p><h2 id="贪心">1.2. 贪心</h2><p><a href="https://programmercarl.com/0376.摆动序列.html#思路">贪每一个波峰或波谷</a></p><ol><li>有变化： pre&lt; 0 &amp; cur &gt; 0 或 pre&gt; 0 &amp; cur&lt; 0</li></ol><p><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20201124174327597.png" alt="376.摆动序列"></p><ol><li>平台,只记录最右边，pre&lt;=0 &amp; cur&gt;0</li></ol><p><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20230106170449.png" alt="img"></p><ol><li><p>平台上升， 平台期仍保持原有状态</p><p><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20230108171505.png" alt="img"></p></li></ol><h2 id="最大连续和">1.3. 最大连续和</h2><p>当连续和 &lt; 0 时，后续增加会减小数值，应从当前位置继续开始</p><blockquote><p>注意： count计算后便与result比较，而不是先归零</p></blockquote><h2 id="买卖股票的最佳时机">1.4. 买卖股票的最佳时机</h2><p>总利润 = 每一条的利润</p><p>贪心：每次贪正利润</p><p><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/2020112917480858-20230310134659477.png" alt="122.买卖股票的最佳时机II"></p><h2 id="跳跃游戏">1.5. 跳跃游戏</h2><p><a href="https://programmercarl.com/0055.跳跃游戏.html#思路">跳跃游戏</a></p><p>从i 能够到达x  = 从i的跳跃范围能够到达x，且i只能在跳跃范围内移动</p><h2 id="跳跃游戏2">1.6. 跳跃游戏2</h2><p><a href="https://programmercarl.com/0045.跳跃游戏II.html#思路">最短跳跃游戏</a></p><p>x 是第i-1次跳跃位置， cover(i-1) </p><p>如果i大于了cover(i-1)，则需要选择cover(i-1)中能跳跃的最大位置作为新一跳的界限，并增加一步</p><h2 id="k次取反最大数组和">1.7. k次取反最大数组和</h2><ol><li>选择将负数反转</li><li>选择最小的绝对值进行反转</li></ol><blockquote><p>或者每次选择最小值，反转，但是更复杂</p></blockquote><h2 id="加油站">1.8. 加油站</h2><p><a href="https://programmercarl.com/0134.加油站.html#算法公开课">加油，能够循环的起点</a></p><ol><li>首先排除不能循环的情况；</li><li>一定能够循环<ol><li>从0开始的区间为负值情况，则起点错误，从下一个起点开始，直到找到能够值不为负的区间</li></ol></li></ol><p>同时，从后向前相加，如果能加从0开始的最小和，相加为正数时，则为开始起点</p><h2 id="糖果分发">1.9. 糖果分发</h2><p><a href="https://programmercarl.com/0135.分发糖果.html#算法公开课">分发糖果</a>：要求分高的同学的糖果一定比两边分低的同学糖果数量多</p><blockquote><p>注意贪心比较的方向， 所有的结果都能比较得到</p></blockquote><ol><li><p>依次比较左右孩子，</p><blockquote><p>遍历顺序，在于是否使用之前的数据（类似于dp)，如果使用到，之前的数据需要先比较</p></blockquote><ol><li>依次比较左孩子，<ol><li>要求： 右边的孩子大于左边所有孩子，需要使用到左边比较数据</li><li><strong>从左向右遍历</strong>， 可以使用到上一次比较的结果</li></ol></li><li>依次比较右孩子，<ol><li>要求： 左边的孩子大于右边所有孩子，需要用到右边比较的数据</li><li><strong>从右向左遍历</strong>， 遍历时，选择max(本轮比右孩子多的糖果，从左边得到的糖果)</li></ol></li></ol></li></ol><h2 id="柠檬水找零">1.10. 柠檬水找零</h2><p><a href="https://programmercarl.com/0860.柠檬水找零.html#算法公开课">柠檬水</a></p><p>优先将面额较大的零钱找出，因为小零钱更加万能</p><h2 id="根据身高重建序列">1.11. 根据身高重建序列</h2><p>讨论两个维度 ，首先固定一个维度，再讨论下一个维度</p><ol><li>按照身高从大到小排序，以此作为插入顺序，同时需要规定k值小的排在前面</li><li>高身高的优先插入后，后面小身高的插入不会影响k值</li></ol><p><code>vector</code> 与 <code>list</code>插入的区别， <code>vector</code>插入时涉及底层扩容，比list插入效率低</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; v;list&lt;int&gt; l;v.insert(v.begin()+pos, val);  &#x2F;&#x2F; 可以直接使用pos插入auto it &#x3D; l.begin();it &#x3D; next(it, pos);l.insert(it, val); &#x2F;&#x2F; 必须使用迭代器指定位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="射击气球">1.12. 射击气球</h2><p><a href="https://programmercarl.com/0452.用最少数量的箭引爆气球.html#思路">射击气球</a></p><p>贪心算法，一定要举出贪心的例子，来验证算法，</p><p>首先需要排序，根据排序顺序选择判断结果</p><ol><li>将右边界排序，记录最左边右端节点，但有其他值超过节点时，需射出一箭</li></ol><p><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20250827111033620.png" alt="image-20250827111033620"></p><ol><li><p>将左边界排序，记录最右端节点，如果其他值查过节点时，需要射出一箭</p><p><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20250827111332960.png" alt="image-20250827111332960"></p></li></ol><h2 id="无重叠区间">1.13. 无重叠区间</h2><p><a href="https://programmercarl.com/0435.无重叠区间.html">无重叠区间</a></p><ol><li><p>使用右边界，每一个不相交的区间是保留下的区间，其余都需删除</p><p><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20250827112819769.png" alt="image-20250827112819769"></p></li><li><p>左排序时，统计有重复区域的区间，然后删除</p><p><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20250827113408417.png" alt="image-20250827113408417"></p></li></ol><h2 id="划分字母区间">1.14. 划分字母区间</h2><p><a href="https://programmercarl.com/0763.划分字母区间.html#思路">区间</a></p><p>当区间[a,b]之间字符的最大值以达到时，这个区间为字母区间，并将a置为新的区间开始b+1</p><h2 id="合并区间">1.15. 合并区间</h2><p><a href="https://programmercarl.com/0056.合并区间.html#其他语言版本">合并区间</a></p><p>合并区间，从左向右比较，只能使用左排序</p><h2 id="最小单调递增数字">1.16. 最小单调递增数字</h2><p>如果有<code>n1 n2 n3</code>情况，<br>如果<code>n2 &gt; n3</code>， 则其最大的递增序列为<code>(n2-1) 9</code><br>如果<code>n1 &gt; n2</code>， 最大为<code>(n1-1) 9 9</code></p><p>如果序列比较n-1与n，则for循环最小值为1</p><h2 id="监控二叉树">1.17. 监控二叉树</h2><ol><li><p><strong>优先从叶子节点开始监控</strong>，因为叶子节点监控数量为指数级</p><p>有三种节点状态</p><blockquote><ol><li>无监控</li><li>有监控</li><li>有摄像头</li></ol></blockquote><p>对叶子节点进行监控，则空节点需设置为有监控状态</p></li><li><p>状态返回</p><ol><li>left 与right 都是监控状态，则mid需返回无监控1</li><li>left，right有一个是无监控1， 则mid需设置有摄像头3，并增加一个摄像头</li><li>left, right有一个有摄像头，则mid返回有监控2</li></ol></li></ol><h2 id="友军数量">1.18. 友军数量</h2><p><a href="https://programmercarl.com/0649.Dota2参议院.html#思路">杀死后面的参议员</a></p><p>贪心思想： 前面杀死后面的所有参议员</p><blockquote><p>使用flag 标识，前方时候有敌军</p></blockquote><ol><li>前方有敌军，自身被杀死<ol><li>但是多了一个友军,flag+1</li></ol></li><li>前方没有敌军，自身还活着，友军数量+1 </li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/2025/08/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2025/08/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="回溯算法">1. 回溯算法</h1><p><strong>感谢<a href="https://programmercarl.com/0077.组合优化.html#算法公开课">代码随想录</a></strong></p><h2 id="组合问题">1.1. 组合问题</h2><ol><li>终止条件，满足题目条件</li><li><p>处理逻辑</p><ol><li>对当前所有可能结果遍历</li><li>调用函数</li><li>结果回溯，弹出函数修改的结果</li><li>在处理中，不合理的情况暂停，减枝</li></ol></li><li>函数参数选择</li></ol><h2 id="组合问题2">1.2. 组合问题2</h2><p><a href="https://programmercarl.com/0216.组合总和III.html#其他语言版本">组合问题</a></p><p>回溯算法： 宽度是for循环的数量，深度是满足条件回溯算法的深度</p><ol><li>终止条件：深度为K, 总和为n</li><li>处理逻辑：<ol><li>对于总和数&lt; 1，没有结果，剪枝</li></ol></li><li>参数，可以函数调用时导入K-1, n-i，进行递归和回溯</li></ol><h2 id="电话号码排列">1.3. 电话号码排列</h2><p><a href="https://programmercarl.com/0017.电话号码的字母组合.html">排列问题</a></p><p>使用index 标识树的深度，或者其他方式也行</p><ol><li>终止条件：达到指定深度</li><li>处理逻辑：<ol><li>对字串中的所有char 进行遍历</li></ol></li></ol><h2 id="组合问题-1">1.4. 组合问题</h2><p>组合中不同排序结果相同，使用startIndex标识开始位置，不同排序结果只记录一次</p><h2 id="组合总数">1.5. 组合总数</h2><p><a href="https://programmercarl.com/0040.组合总和II.html">组合去重</a></p><p>数据中有重复数据，题目要求每个数据在每次只能用一遍，重复数据可以在同一结果集中出现，但是由于元素重复，需要对重复数据去重</p><p>去重条件<code>candidates[i] == candidates[i-1] &amp;&amp; used[i-1]==false</code>，这一部分不是剪枝，必须去除这一部分</p><p><img src="/2025/08/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/20221021163812.png" alt="img" style="zoom:50%;"></p><h2 id="切分回文子串">1.6. 切分回文子串</h2><p><a href="https://programmercarl.com/0131.分割回文串.html#优化">切分回文子串</a></p><ol><li>终止条件： 切分线到达最后，切分结束</li><li>处理逻辑：<ol><li>切分出来的是回文子串则继续切分，否则返回，不再切割</li><li>判断方法：<ol><li>字串直接判断</li><li>DP首先计算出DP数组，<code>DP[i,j]</code> 数组标识<code>[i,j]</code>这范围内是否为回文子串， 回文子串<code>dp[i][j] = s[i] == s[j] &amp;&amp; dp[i+1][j-1]</code></li></ol></li></ol></li></ol><h2 id="复原IP地址">1.7. 复原IP地址</h2><p><a href="https://programmercarl.com/0093.复原IP地址.html#总结">复原Ip地址</a></p><ol><li>终止条件： 分割点数 == 3， 并且最后一个分割字串符合条件</li><li>处理逻辑：<ol><li>如果切分出来的是符合逻辑的IP, 继续切割</li><li>剪枝：<ol><li>当剩余字符数<code>s.size() - 1-(i+1)+1 = s.size()-i-1</code> 超过所需字符数 <code>3*(3- PointNum)</code> ，剪枝</li><li>少于所需字符数（3-point) ,剪枝</li></ol></li></ol></li><li>传递参数： 切割位置，切割的点数</li></ol><h2 id="分割子集">1.8. 分割子集</h2><p>搜集子集是将所有<strong>搜索路径上所有结果</strong><br>组合和分割将<strong>叶子节点中符合条件的结果</strong>加入其中</p><p>如果题目要求集合中元素顺序，则下一个节点从i+1开始，如果当前节点可以重复使用从i开始；</p><p>节点中有重复元素，需要对重复元素去重，同一层中不能以当前节点继续，但是同一树仍可以继续使用</p><h2 id="子集去重">1.9. 子集去重</h2><p>有重复元素，去重</p><ol><li>对数据集排序</li><li>使用<code>num[i]!=num[i-1]</code> 对同层数据去重</li><li>对于需要使用已加入栈中的数据时，需要使用used对数据去重</li></ol><p><a href="https://programmercarl.com/0090.子集II.html#思路">子集去重</a></p><p><a href="https://programmercarl.com/0040.组合总和II.html">组合去重</a></p><h2 id="递增子集去重">1.10. 递增子集去重</h2><p><a href="https://programmercarl.com/0491.递增子序列.html#思路">递增序列去重</a></p><p>递增序列中去重，当前序列中有重复元素，不能使用sort对数组排序。</p><p>使用set对当前层数组去重，每一个函数中创建一个set, 对函数中的当前层有效。同一树枝上因为从i+1开始，不用去重，且set已更新，不影响下一层数据</p><ol><li>处理逻辑：<ol><li>符合条件的加入到path中</li></ol></li></ol><h2 id="排列问题">1.11. 排列问题</h2><p><a href="https://programmercarl.com/0046.全排列.html#算法公开课">排列</a></p><ol><li>终止条件： 到达满足条件</li><li>处理逻辑：<ol><li>遍历对整个数组遍历，因为不同顺序集合不同，此时不需要<code>startIndex</code>;</li><li>使用<code>used</code>标识这条链路上哪个元素被使用， 将<code>used</code>作为参数；</li></ol></li><li>参数： 数组，标识数组<code>used</code></li></ol><h2 id="排列问题去重">1.12. 排列问题去重</h2><p>因为排列问题需要从0开始，下一层中可能会使用到上一层的数据，需要使用used对检查是否在树枝，或同一层上；</p><p>判断条件：</p><ol><li><p><code>nums[i] == nums[i-1]</code>并且 <code>used[i-1] = false</code>表示同一层中上一个被使用</p><p>​    下一层中上一个被使用，<code>used[i-1] =true</code>, 可以被接着使用。</p></li><li><p>同时，还需要使用used[i] 检查当前元素是否在树枝上使用过，使用过则跳过</p></li><li><p>或者使用set代替第一条对数据去重</p></li></ol><h2 id="重新安排路径">1.13. 重新安排路径</h2><p><a href="https://leetcode.cn/problems/reconstruct-itinerary/">搜索机票</a></p><p>将票数据转换为图<code>map&lt;string, map&lt;string, int&gt;&gt;</code></p><ol><li>终止条件： 节点数 = 机票数量+1</li><li>处理逻辑：<ol><li>对result最后一个节点的所有相连进行搜索</li><li>每搜索一次，删除一条机票，删除方式将第二个map数量-1，当= 0 时，不能从当前机票起飞</li></ol></li></ol><p>此题是欧拉路径，最好使用<code>Hierholzer</code> 算法，搜索算法可能进入贪心死循环</p><h2 id="N皇后">1.14. N皇后</h2><p><a href="https://programmercarl.com/0051.N皇后.html#思路">N皇后</a></p><ol><li>终止条件： 加在最后一行棋盘</li><li>处理逻辑：<ol><li>对棋盘上每一行进行遍历</li><li>符合条件的加入棋盘</li><li>进入下一轮</li><li>回溯，退出上一轮的修改</li></ol></li></ol><h2 id="数独">1.15. 数独</h2><p><a href="https://leetcode.cn/problems/sudoku-solver">37. 解数独 - 力扣（LeetCode）</a></p><ol><li>终止条件： 所有节点遍历结束，返回true;</li><li>处理逻辑：<ol><li>遍历宽度为1-9</li><li>遍历深度为所有节点遍历结束，因为是二维，不确定向那个方向移动，使用<code>!=&#39;.&#39;</code>条件对已完成的跳过，实现对下一个移动方向的选择</li></ol></li></ol><p>详细代码注释如<a href="D:\code\leetcode\37.解数独.cpp">代码及注释</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="/2025/08/23/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%91/"/>
      <url>/2025/08/23/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="树">1. 树</h1><p><strong>感谢<a href="https://programmercarl.com/0101.对称二叉树.html#思路">代码随想录</a></strong></p><h2 id="深度遍历">1.1. 深度遍历</h2><h3 id="递归">1.1.1. 递归</h3><pre class="line-numbers language-none"><code class="language-none">1. 递归结束条件2. 当前递归操作3. 对那些节点进行递归4. 确定参数和返回值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="栈实现">1.1.2. 栈实现</h3><p>深度遍历中存在先进后出，所以此处使用栈</p><ol><li>先序遍历，栈中先进后出，出栈顺序为3，2<ol><li>中间节点</li><li>右节点</li><li>左节点</li></ol></li><li>中序遍历，当左节点与栈同时为空时，遍历结束<ol><li>将所有左节点压入栈中</li><li>左节点为空时，将栈中节点弹出，处理中间节点</li><li><code>cur= cur-&gt;right</code>， 处理右节点</li></ol></li><li>后序遍历，参照1， 然后reverse</li></ol><h3 id="NULL-bool表示">1.1.3. NULL/ bool表示</h3><p>先序遍历，中左右，</p><ol><li>加入栈中顺序为右左中，标识当前节点需处理时在栈后加入一个NULL</li><li>如果访问到NULL节点，需将下一节点弹出</li></ol><h2 id="反转二叉树">1.2. 反转二叉树</h2><p><a href="https://programmercarl.com/0226.翻转二叉树.html">反转二叉树</a></p><p>中序遍历不能反转二叉树，较为困难</p><h2 id="对称二叉树">1.3. 对称二叉树</h2><p><a href="https://programmercarl.com/0101.对称二叉树.html#思路">对称二叉树</a></p><ol><li>确定返回条件</li><li>当前节点比较左右字树是否相同</li><li>比较的是节点的内侧(left的右， right的左)，节点的外侧</li></ol><h2 id="树的最大深度">1.4. 树的最大深度</h2><p><a href="https://programmercarl.com/0104.二叉树的最大深度.html">树的最大深度</a></p><ol><li>后序遍历： 回溯，从后面的节点结算，得到当前节点的结果</li><li>前序遍历： 迭代，先计算当前节点，再依次计算后续节点，计算下一个节点时需要回溯</li></ol><h2 id="树的最小深度">1.5. 树的最小深度</h2><p><a href="https://programmercarl.com/0111.二叉树的最小深度.html">二叉树的最小深度</a></p><p>当节点的左右节点为都为NULL时，节点为叶子节点</p><ol><li><p>终止条件：节点为叶子节点时</p></li><li><p>后序遍历，</p><blockquote><p>注意：此时depth != 左右子树最小的节点，有可能左右子树有空子树</p><p>解决方法： 空子树设置深度初始值为最大值</p></blockquote></li></ol><h2 id="返回树的所有路径">1.6. 返回树的所有路径</h2><p><a href="https://programmercarl.com/0257.二叉树的所有路径.html#思路">树的所有路径</a></p><ol><li>路径的终止条件为达到叶子节点： 左右节点均为NULL;</li><li>此时对left与right递归时需要对left, right做检查，同时中间节点的初始需要放在if判断之前；</li></ol><p>两种方法回溯：</p><ol><li>使用vector存放路径，回溯时弹出最后一个元素；</li><li>使用参数对路径修改，回溯时参数不变，等于回溯；</li></ol><h2 id="左叶子之和">1.7. 左叶子之和</h2><p><a href="https://programmercarl.com/0404.左叶子之和.html#思路">左叶子之和</a></p><ol><li>终止条件：<ol><li>当前节点为空</li><li>是叶子节点</li></ol></li><li>当前逻辑：<ol><li>获取左子树的做叶子之和</li><li>当左子树为左叶子时，单独计算</li><li>获取右子树的左叶子之和</li></ol></li><li>求和相加，返回</li></ol><h2 id="路径之和">1.8. 路径之和</h2><p>递归函数是否有返回值，分为三种情况</p><ol><li>需要对树的所有路径遍历且不用处理递归返回值， 递归函数没有返回值void</li><li>需要对树的所有路径遍历且需要对递归返回值进行处理，递归函数有返回值int</li><li>之搜索一条符合条件的路径，则需要返回返回值，返回值通常为bool</li></ol><h3 id="找到路径即可">1.8.1. 找到路径即可</h3><p><a href="https://programmercarl.com/0112.路径总和.html#思路">找到路径即可</a></p><ol><li>终止条件为找到叶节点<ol><li>如果符合条件，返回true</li><li>不符合条件，返回false;</li></ol></li><li>如果左子树已经满足条件，返回true，不再搜索</li><li>对右子树进行搜索</li></ol><h3 id="找到所有可能的路径">1.8.2. 找到所有可能的路径</h3><p><a href="https://programmercarl.com/0112.路径总和.html#思路">找到所有可能的路径</a></p><ol><li>终止条件为找到叶节点<ol><li>符合条件，加入结果集中</li></ol></li><li>找完左子树，再找右子树</li></ol><h2 id="前序-中序创建二叉树">1.9. 前序/中序创建二叉树</h2><ol><li><p>终止条件：</p><ol><li>数组为空时，返回NULL</li><li>数组为1个时，返回节点r</li></ol></li><li><p>处理逻辑：</p><ol><li>pre的第一个节点作为root节点</li><li>从中序in中找到与root相同的节点，以此为分割点，找到left ,right数组的长度</li><li>前序left, right与中序长度相同，所有区间为左开右闭</li></ol><p>|      | left                                       | right                                     |<br>| —— | ————————————————————— | ————————————————————- |<br>| pre  | [leftPreorder+1, leftPreorder+1+left_size] | [ leftPreorder+1+left_size,rightPreorder] |<br>| In   | [ leftInorder, break_point]                | [break_point+1, rightInorder]             |</p></li><li><p>参数中包含数组分割节点</p></li></ol><h2 id="创建最大树">1.10. 创建最大树</h2><ol><li>终止条件：可为叶子节点，也可以是NULL</li><li>处理逻辑：<ol><li>找到最大值索引，</li><li>使用索引分割两区间</li></ol></li></ol><h2 id="二叉搜索树">1.11. 二叉搜索树</h2><p><a href="https://programmercarl.com/0700.二叉搜索树中的搜索.html">二叉搜索树</a></p><p>左子树 &lt; 中间 &lt; 右子树 </p><p>由中间值比较，确定对左子树/ 右子树一棵树进行搜索</p><h2 id="验证二叉搜索树">1.12. 验证二叉搜索树</h2><p>左子树的所有值 &lt; 中间 &lt; 右子树的所有值， 所以不能单独比较 左节点 &lt; 中间 &lt; 右节点</p><p>使用中序遍历，左中右，比较结果</p><ol><li>中序遍历，得到数组，检查数组是否是从小到大</li><li>中序遍历，保存遍历过程的做大值，保证遍历中的最大值&lt; 当前值</li></ol><h2 id="二叉树的最小差">1.13. 二叉树的最小差</h2><p>二叉树所有数的最小值是相邻两个遍历节点的差值最小</p><ol><li><p>中序遍历，得到数组后，求数组相邻数据的差值</p></li><li><p>中序遍历，保存上一个节点pre， 每次使用cur与pre做差值</p><blockquote><p>在中序结束后，将pre = cur， 将cur保存为下一变量的前一个节点</p></blockquote></li></ol><h2 id="找到最近公共祖先">1.14. 找到最近公共祖先</h2><p><a href="https://programmercarl.com/0236.二叉树的最近公共祖先.html#思路">最近公共祖先</a>从下向上查询路径，后序遍历</p><ol><li>终止条件：<ol><li>节点为NULL， 返回NULL</li><li>找到确定节点，返回true ,将result修改为当前路径；</li></ol></li><li>处理逻辑：<ol><li>如果p，q是不同树，那么更新result结果；</li><li>如果只有q，在路径上，不更新result;(因为可能出现q是p的父节点，由终止条件2修正)</li></ol></li></ol><h2 id="二叉搜索树的最近公共祖先">1.15. 二叉搜索树的最近公共祖先</h2><p><a href="https://programmercarl.com/0235.二叉搜索树的最近公共祖先.html#思路">二叉搜索树</a></p><p>二叉树有序，所以p,q的祖先节点位于[p,q]之间，且最近公共祖先是其遍历中的第一个，也只有这一个满足[p,q]条件</p><h2 id="二叉搜索树的插入">1.16. 二叉搜索树的插入</h2><p><a href="https://programmercarl.com/0701.二叉搜索树中的插入操作.html#思路">插入</a></p><ol><li>终止条件： 遇到空节点，新建一个节点，并加入在parent节点左/右</li><li>操作逻辑： <ol><li>val大于节点，进入右子树</li><li>val小于节点，进入左子树</li></ol></li></ol><blockquote><p>也可以不使用parent节点，终止条件中返回创建的节点，在操作时将返回的节点插入</p></blockquote><h2 id="二叉搜索树的删除">1.17. 二叉搜索树的删除</h2><p><a href="https://programmercarl.com/0450.删除二叉搜索树中的节点.html#算法公开课">删除</a></p><p>终止条件：删除时如果左右子树都在，需要将左子树放在右子树的最左节点的最左侧</p><h2 id="二叉树的修剪">1.18. 二叉树的修剪</h2><p><a href="https://programmercarl.com/0669.修剪二叉搜索树.html#思路">二叉树的修剪</a></p><ol><li>终止条件： 如果root==NULL时，返回NULL;</li><li>处理逻辑： <ol><li>中： 如果root &lt; left ,修建左子树，将左子树合适节点代替root返回，反之亦然</li><li>左： 对左子树修剪，返回结果赋值给root的左子树</li><li>右：同上</li></ol></li></ol><h2 id="有序数组-gt-二叉搜索树">1.19. 有序数组-&gt;二叉搜索树</h2><p><a href="https://programmercarl.com/0108.将有序数组转换为二叉搜索树.html#算法公开课">有序数组构建二叉搜索树</a></p><ol><li>终止条件： 节点为空</li><li>处理逻辑：<ol><li>有序数组的中间位置为根节点</li><li>左子树，调用区间构建左子树</li><li>右同上</li></ol></li></ol><h2 id="二叉搜索树求和">1.20. 二叉搜索树求和</h2><p><a href="https://programmercarl.com/0538.把二叉搜索树转换为累加树.html#算法公开课">二叉搜索树转换为累加树</a></p><ol><li>终止条件： ~</li><li>处理逻辑： <ol><li>二叉树有序，选择右中左遍历</li><li>每次遍历时，需使用pre保存前一节点的累加和</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈-队列</title>
      <link href="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/"/>
      <url>/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="栈">1. 栈</h1><p><strong>感谢<a href="https://programmercarl.com/0101.对称二叉树.html#思路">代码随想录</a></strong></p><h2 id="栈模拟队列">1.1. 栈模拟队列</h2><p><a href="https://programmercarl.com/0232.用栈实现队列.html#算法公开课">模拟队列</a></p><p><img src="https://file1.kamacoder.com/i/algo/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E7%89%88%E6%9C%AC2.gif" alt="232.用栈实现队列版本2"></p><p>使用两个栈模拟队列</p><ol><li>入队时， 直接入队</li><li>出队时， 将输入栈的数据放入输出栈中，将顺序倒置为先入先出</li><li>判空时，需要判断两个栈是否为空</li></ol><h2 id="队列模拟栈">1.2. 队列模拟栈</h2><p><img src="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.gif" alt="225.用队列实现栈"></p><p>可以使用一个队列实现栈的模拟</p><ol><li>入栈时，直接入队</li><li>出栈时，需要将前置数据依次排出，并放置在队首，<strong>出队时需要保留最后一个元素出队</strong></li></ol><h2 id="滑动窗口最大值">1.3. 滑动窗口最大值</h2><p><a href="https://programmercarl.com/0347.前K个高频元素.html#思路">滑动窗口最大值</a></p><p><code>deque</code> 用法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;deque&gt;deque&lt;int&gt; d;d.front(), d.back();d.push_back(), d.pop_back();d.push_front(), d.pop_front();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构建排序队列，将可能的最大值放入队列中，定义新的队列弹出方法</p><ol><li>入队，入队值如果大于栈顶值，将栈顶出栈，直到入队值小于栈顶值</li><li>出队，队首值如果等于移除的数据，将输出出栈</li><li>保持第一个值是最大值a，且比a小的值是在a之后入栈的，所以出队时a之前的数据已经弹出完毕</li></ol><h2 id="优先队列">1.4. 优先队列</h2><p><a href="https://programmercarl.com/0347.前K个高频元素.html#思路">前k个高频词汇</a></p><p><code>priority_queue</code>需要自定义排序类型</p><ol><li>使用` bool operator()(const int&amp; a, const int&amp; b)自定义比较类型</li><li>快排中left&gt; right，从大到小，优先队列反过来</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class mycomparison&#123;    public:    bool operator()(const pair&lt;int, int&gt;&amp; a, const pair&lt;int, int&gt;&amp; b)&#123;        return a.second &gt; b.second;    &#125;&#125;;    priority_queue&lt; pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt; , mycomparison&gt; q;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用小顶堆，优先排除较小元素，将较大元素保留在优先队列中。</p><h1 id="单调栈">2. 单调栈</h1><h2 id="右侧最高气温">2.1. 右侧最高气温</h2><p><a href="https://programmercarl.com/0739.每日温度.html">最高气温</a></p><p>查找右边 比 当前元素更小的元素</p><ol><li>右边比自身大，找到了，当前元素出栈</li><li>右边比自身小，没找到，入栈</li></ol><p>栈中元素为待查找的元素，找到了就出栈</p><h2 id="nums1元素在nums2中下一个最大元素">2.2. nums1元素在nums2中下一个最大元素</h2><p><a href="https://programmercarl.com/0496.下一个更大元素I.html">nums1元素在nums2中下一个最大元素</a></p><ol><li>先计算<code>num2</code>中下一个更大元素的结果，保存在<code>map</code>中</li><li><code>num1</code>从<code>map</code>中取得结果</li></ol><h2 id="循环数组的下一最大元素">2.3. 循环数组的下一最大元素</h2><p><a href="https://programmercarl.com/0503.下一个更大元素II.html#算法公开课">循环数组的下一最大元素</a></p><p><code>nums</code>是一个循环数组，最后一个元素接在第一个元素</p><blockquote><ol><li>对数组循环时， 使用 <strong><code>% nums.size()</code></strong> 对数组循环遍历</li><li>遍历次数增加一倍，从<code>1</code>遍历到 <code>2*n</code></li></ol></blockquote><h2 id="接雨水">2.4. 接雨水</h2><p><a href="https://programmercarl.com/0042.接雨水.html#思路">接雨水</a></p><p>左边和右边高度高于中间时，中间出现凹槽， 可以接到雨水</p><h3 id="暴力求解">2.4.1. 暴力求解</h3><p>当前节点<code>j</code></p><ol><li><p>左边<code>[0,j-1]</code>最大高度<code>lheight</code>,右边<code>[j+1 , end]</code>最大高度<code>rheight</code>，每次暴力求解这两个指针</p></li><li><p>计算高度差，使用列方向计算求和</p><p><img src="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/20210402091208445.png" alt="列方向求和" style="zoom:75%;"></p></li></ol><h3 id="动态规划">2.4.2. 动态规划</h3><ol><li><code>j</code>左边最大高度 = <code>j-1</code>左边最高高度，或者<code>height[j-1]</code></li><li>右边计算公式为 <code>rheight[j] =  max(rheight[j+1] , height[j+1])</code></li></ol><p>先计算出<code>dp</code>， 代替<a href="#暴力求解">暴力求解</a> 中的双指针</p><h3 id="单调栈-1">2.4.3. 单调栈</h3><p>单调递增栈中，栈底 &gt; 栈头</p><p>如果出栈<code>j</code>， 栈头元素&gt; <code>j</code>, 即将入栈元素 &gt; <code>j</code>， 出现凹槽，计算这个凹槽</p><p>宽 = <code>入栈元素 - 栈顶元素</code>， 高度 = <code>min(入栈， 栈顶) - 出栈元素(凹槽)</code></p><p><img src="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/20210223092629946.png" alt="行计算"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表-字符串</title>
      <link href="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="哈希表">1. 哈希表</h1><p><strong>感谢<a href="https://programmercarl.com/">代码随想录</a></strong></p><h2 id="快乐数">1.1. 快乐数</h2><p><a href="https://programmercarl.com/0202.快乐数.html#思路">快乐数</a></p><p>查找数字是否重复出现，使用哈希表存储</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;set&gt;set&lt;int&gt; s;s.insert(a); &#x2F;&#x2F; 插入数据if(s.find(a)!&#x3D; s.end())&#123;    &#x2F;&#x2F; 查找数据是否在s中    &#x2F;&#x2F;如果出现 !&#x3D; s.end(), 没出现 &#x3D;&#x3D; s.end()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="两数之和">1.2. 两数之和</h2><p><a href="https://programmercarl.com/0001.两数之和.html#算法公开课">两数之和</a></p><ol><li>map存放在之前的数据，也是当前查询中匹配的数据</li><li>map中key对应数值，value对应索引</li><li>unordered_map中使用Hash存储， map中使用红黑树存储</li></ol><h2 id="三数之和">1.3. 三数之和</h2><p><a href="https://programmercarl.com/0015.三数之和.html#思路">三数之和</a></p><ol><li><p>使用三个指针，查找指针对应的数据之和是否为0</p></li><li><p>指针去重，结果中不能包含统一的数据，所以在取得结果后再去重，而不是先去重再计算结果</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(i&gt; 0 &amp;&amp; nums[i]&#x3D;&#x3D; nums[i-1])&#123;continue;&#x2F;&#x2F;对已有结果去重&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>vector<int><strong>{</strong>1， 2，3<strong>}</strong>，使用{}作为临时vector</int></p></li><li><code>for( ; ; )</code> 中第一个式子只对第一次循环有效，循环中赋初值需放在循环内</li></ol><h2 id="两次hash统计">1.4. 两次hash统计</h2><p><a href="https://programmercarl.com/1207.独一无二的出现次数.html#思路">独一无二出现次数</a></p><p>出现次数只出现一次，返回<code>true</code></p><ol><li><p>先统计<code>数字</code>出现次数</p><blockquote><p>数字中如果有负数，计算次数时， 数组索引需增加最小值</p></blockquote></li><li><p>统计 <code>出现次数</code>的次数</p><blockquote><p>出现次数为0 的次数，直接跳过</p></blockquote></li></ol><h1 id="字符串">2. 字符串</h1><h2 id="反转字符串">2.1. 反转字符串</h2><p><a href="https://programmercarl.com/0541.反转字符串II.html#思路">反转字符串2</a></p><ol><li>对于有规律的计数时，使用i = i+ num， </li><li>reverse(begin()+i， begin+k)，反转范围为[i,k）</li></ol><h2 id="花式反转">2.2. 花式反转</h2><p><a href="https://programmercarl.com/0151.翻转字符串里的单词.html#思路">先反转整体，再反转局部</a></p><ol><li>去除空格时，sum值代表字符串的长度</li><li>当s 遍历到结尾时，也是一个反转条件</li></ol><h2 id="KMP算法">2.3. KMP算法</h2><p>获得next数组</p><ol><li>初始化为0</li><li>如果s[i] 与s[j] 相同，最长的 j +1；</li><li>否则与next[j-1]的字串进行比较；</li></ol><p>比较</p><ol><li>如果s[i] 与t[j] 相同， j++ ，比较下一位</li><li>否则返回到最长的公共子串的下一位， 即next[j-1]比较</li></ol><blockquote><p>next初值赋值为1 时，相当于next 向右移动了一位，此时不相同时，取next[j]即可</p></blockquote><h2 id="重复子串">2.4. 重复子串</h2><p><a href="https://programmercarl.com/0459.重复的子字符串.html">重复子串</a></p><p><img src="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8-%E5%AD%97%E7%AC%A6%E4%B8%B2/20220728104931.png" alt="图二"></p><p><strong>结论： 如果s是由重复序列组成，那么s+s中一定具有s</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论0</title>
      <link href="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA0/"/>
      <url>/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA0/</url>
      
        <content type="html"><![CDATA[<h1 id="history">1. history</h1><h2 id="岛屿">1.1. 岛屿</h2><h2 id="图查找算法">1.2. 图查找算法</h2><h3 id="并查集的实现-并查集理论基础-代码随想录">1.2.1. 并查集的实现   并查集理论基础 | 代码随想录</h3><ol><li>并查集，是将一个集合内所有数据放入一个连通图中，即为father[u]= v；</li><li>查询一个并查集，是查询根节点是否相同，find(u)== find(v)</li><li>初始化，所有的并查集都指向自身</li><li>路径压缩，节点在find过程中都执行根节点</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 使用数据存放并查集vector&lt;int&gt; father(n, 0);void init()&#123;    for(int i &#x3D; 0;i&lt; father.size();i++)&#123;        father[i]&#x3D; i;    &#125;&#125;int find(int u)&#123;    if(father[u]&#x3D;&#x3D;u) return u;    else &#123;        father[u]&#x3D;find(father[u]);&#x2F;&#x2F; 路径压缩，指向根节点    &#125;    return father[u];&#125;int is_same(int u, int v)&#123;    int a &#x3D; find(u);    int b &#x3D; find(v);    if(a &#x3D;&#x3D; b) return 1;    else return 0;&#125;void join(int u, int v)&#123;    int a &#x3D; find(u);    int b &#x3D; find(v);    if(a &#x3D;&#x3D; b) return ;    father[u]&#x3D; v;    return ;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="prim算法">1.2.2. prim算法</h3><ol><li>选择最小边e,v（e是树中，v是树外的数据）</li><li>将节点v加入树中</li><li>更新与v的节点的权重<ol><li>此处记录树的连接关系，记录当前节点的父亲</li></ol></li></ol><h3 id="kruskal-算法">1.2.3. kruskal 算法</h3><ol><li>完成并查集</li><li>对边的权重排序</li><li>选择最小边<ol><li>如果在并查集中，跳过</li><li>不在并查集中，加入节点树种</li></ol></li></ol><h3 id="拓扑排序">1.2.4. 拓扑排序</h3><ol><li>计算节点入度</li><li>选择入度为0 的节点，加入处理队列q, 并将入度替换为-1</li><li>处理队列q<ol><li>cur指向的所有节点，入度减1</li><li>如果入度等于1，加入处理队列q, 并将入度替换为-1</li><li>记录出队元素cur.</li></ol></li></ol><blockquote><p>出队元素不等于总元素数量时， <strong>判断有向图中 存在环</strong></p></blockquote><h3 id="dijkstra算法">1.2.5. dijkstra算法</h3><p><strong><u>权值不能为负数，prim算法权值可以是负数，负数情况使用ford算法</u></strong></p><ol><li>选择最小边并且该节点没有被访问过</li><li>标记该节点，已经被访问过</li><li>更新非访问节点到源点的最小距离，同时当前节点的父亲</li></ol><h3 id="使用边权重的dijkstra算法">1.2.6. 使用边权重的dijkstra算法</h3><p>使用边的权值进行计算</p><ol><li>建立小顶堆</li><li>从小顶堆中选择最小的边</li><li>标记边连线的点已经被访问过了</li><li>更新edge相连的顶点的权重</li></ol><h1 id="附录">2. 附录</h1><h2 id="建立小顶堆">2.1. 建立小顶堆</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;queue&gt;class mycomparison&#123;    bool operator(const pair&lt;int, int&gt;&amp; a, const pair&lt;int, int&gt;&amp; b)&#123;        return a.second&gt; b.second;    &#125;&#125;priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int,int&gt;&gt; , mycomparison&gt; p;&#x2F;*a&gt; b时 ，是小顶堆；a&lt; b时， 是大顶堆；*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对vector数组进行排序">2.2. 对vector数组进行排序</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;algorithm&gt;vector&lt;int&gt; edges;sort(edges.begin() , edges.end(), [](const edge&amp; a, const edge&amp; b)&#123;return a&lt; b;&#125;);&#x2F;*a&lt; b， 升序排序；a&gt; b， 降序排序；默认情况是升序排序；*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="哈希表">2.3. 哈希表</h2><h3 id="数组作为哈希表">2.3.1. 数组作为哈希表</h3><h3 id="stl中的哈希表">2.3.2. stl中的哈希表</h3><p>此时就要使用另一种结构体了，set ，关于set，C++ 给提供了如下三种可用的数据结构：</p><ul><li>std::set</li><li>std::multiset</li><li>std::unordered_set</li></ul><p>std::set和std::multiset底层实现都是红黑树，std::unordered_set的底层实现是哈希表， 使用unordered_set 读写效率是最高的，并不需要对数据进行排序，而且还不要让数据重复，所以选择unordered_set。</p><h2 id="回溯算法">2.4. 回溯算法</h2><p>算法的模板</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">void backtracking(参数)&#123;    if(终止条件）&#123;        存放结果;       return;    &#125;    for(选择:本层集合中的元素)&#123;        处理节点;        backtracking(路径， 选择列表); &#x2F;&#x2F;递归        回溯，撤销处理结果;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>vector<int> a </int></p><p>a.push_back(int b) 压入数据， a.pop_back(), 弹出数据</p><p>还可以采用insert， + ，压入数据，使用erase(begin()+ i ,end())弹出数据</p></blockquote><p>使用切割时候，需要注意下一次开始为本次切割后的下一次位置，此处回溯时候不需要还原，其余元素均需要还原。还原时候注意还原的位置。</p><p><a href="https://programmercarl.com/0131.分割回文串.html#算法公开课">回溯问题</a></p><h3 id="分割字符串方法">2.4.1. 分割字符串方法</h3><ol><li>函数传递，参数<code>s + start + end</code></li><li>使用string 切割，<code>string s = s.substr(start, end)</code></li></ol><h3 id="两阶vector初始化方法">2.4.2. 两阶vector初始化方法</h3><p><code>is_palind_rome.resize(s.size(), vector&lt;bool&gt;(s.size(), false));</code></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/07/10/c/STL/"/>
      <url>/2025/07/10/c/STL/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构">1. 数据结构</h1><h2 id="list">1.1. list</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;list&gt;List&lt;int&gt; mylist;list&lt;string&gt; names&#x3D; &#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;;list&lt;int&gt; list(my_list.begin(), mylist.end());list&lt;int&gt; tenZeros(10);&#x2F;&#x2F; 初始化十个数，默认为0list&lt;int&gt; tenSeverns(10,7); &#x2F;&#x2F; 初始化十个7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加元素">1.1.1. 添加元素</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mylist.push_back(10);mylist.push_front(10);&#x2F;&#x2F; 在这个迭代器之前插入元素auto it &#x3D; mylist.begin();mylist.insert(it+1, 15);&#x2F;&#x2F; 在这个迭代器后插入一串元素mylist.insert(it, vec.begin() ,vec.end());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问">1.1.2. 访问</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mylist.enpty()mylist.front()mylist.back()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="删除元素">1.1.3. 删除元素</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mylist.pop_front(); &#x2F;&#x2F;有返回吗mylist.pop_back();auto it &#x3D; mylist.begin();it &#x3D; mylist.erase(it);mylist.erase(mylist.begin()+1, mylist.end());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历">1.1.4. 遍历</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(auto it &#x3D; mylist.begin(); it !&#x3D; mylist.end() ;it++)&#123;(*it) ++; &#125;for(auto num : mylist)&#123;    num++;&#125;for(auto&amp; num :mylist)&#123;num ++; &#x2F;&#x2F;修改值时使用引用   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合并">1.1.5. 合并</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mylist.sort(); &#x2F;&#x2F; 默认从小到大排序mylist.sort([](int a, int b)&#123;    return a&gt;b;&#125;);&#x2F;&#x2F;a&gt;b 从大到小排序&#x2F;&#x2F; 合并 ,要求list1, list2都需要排序list1.merge(list2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="唯一化">1.1.6. 唯一化</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mylist.unique();&#x2F;&#x2F; 自定义相等mylist.unique([](int a, int b)&#123;return abs(a-b)&lt;2;&#125;);&#x2F;&#x2F; 反转 revList.reverse();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拼接">1.1.7. 拼接</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">std::list&lt;int&gt; listA &#x3D; &#123;1, 2&#125;;std::list&lt;int&gt; listB &#x3D; &#123;3, 4, 5&#125;;listA.splice(listA.end(), listB); &#x2F;&#x2F; listA: &#123;1, 2, 3, 4, 5&#125;, listB: &#123;&#125;listX.splice(listX.end(), listY, it_y); &#x2F;&#x2F; listX: &#123;10, 20, 30&#125;, listY: &#123;40, 50&#125;listP.splice(listP.end(), listQ, first_q, last_q);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vector">1.2. vector</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;vector&lt;int&gt; myv;&#x2F;&#x2F; 从数组中创建vectorarr &#x3D; &#123;1,2,3,4&#125;;myv &#x3D; vector&lt;int&gt; (arr, arr+ sizeof(arr)&#x2F; sizeof(arr[0]));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入数据">1.2.1. 插入数据</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">myv.push_back(value);myv.emplace_back(value1, value2);&#x2F;&#x2F; value1 ,value2 可以组成结构体数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="访问元素">1.2.2. 访问元素</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">myv[0] ;try&#123;    myv.at(0);    &#x2F;&#x2F; 对数据边界检测，返回Out_of_range 异常&#125;catch &#123;const out_of_range&amp; e&#125;&#123;    cerr&lt;&lt; e.what()&lt;&lt;endl;&#125;auto it &#x3D; myv.front(); &#x2F;&#x2F; 返回引用，指针？值引用？auto it &#x3D; myv.back();int* data&#x3D; myv.data();&#x2F;&#x2F; 返回数据数组指针<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序">1.2.3. 排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;sort(my.begin() , my.end());&#x2F;&#x2F; 从小到大排序sort(my.begin(), my.end(), [](int a, int b)&#123;return a&gt;b;  &#125;);sort(my.begin(), my.end(), greater&lt;int&gt;());&#x2F;&#x2F; 从大到小排序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合并-1">1.2.4. 合并</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; merge(v1.size() + v2.size());&#x2F;&#x2F; v1，v2完成排序，合并结果在merge中merger(v1.begin, v1.end() ,v2.begin(), v2.end(), merge.begin());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="stack-and-queue">1.3. stack and queue</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stack&gt;stack&lt;int&gt; mys &#x3D; stack&lt;int, vector&lt;int&gt;&gt; (vec); &#x2F;&#x2F; 指定底层容器有什么效果mys.push();mys.top();mys.pop();mys.size();mys.empty();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;queue&lt;int&gt; myq ;queue&lt;int, list&lt;int&gt;&gt; myq(vec);myq.push();myq.front(); &#x2F;&#x2F; 对头使用front, 栈顶使用topmyq.back(); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="deque">1.4. deque</h2><p>使用方法与vector类似，存储使用块与链表链接，比vector的性能好</p><h2 id="map">1.5. map</h2><p>数据有序排列</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;map&gt;map&lt;string, age&gt; mymap &#x3D;&#123;&#123;&quot;a&quot;,20&#125;&#125;;mymap[&quot;b&quot;]&#x3D;20;auto [it, inserted] &#x3D; mymap.insert&#123;&#123;&quot;c&quot;,10&#125;&#125;;mymap.emplace(&quot;c&quot;,10);&#x2F;&#x2F; 如果插入已存在，inserted值为false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问-1">1.5.1. 访问</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mymap[&quot;a&quot;]; &#x2F;&#x2F; 没有自动创建元素mymap.at[&quot;b&quot;];&#x2F;&#x2F; 没有抛出异常out_of_rangeauto it &#x3D; mymap.find(key);if(it !&#x3D; mymap.end())&#123;    return 0;&#125;&#x2F;&#x2F; 对键进行计数，map默认最多有1个键值if(mymap.count(key))&#123;    &#125;for(auto&amp; pair: mymap)&#123;    pair.first; &#x2F;&#x2F; key是第一个元素    pair.second; &#x2F;&#x2F;value是第二个元素&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unordered-map">1.5.2. unordered_map</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;unordered_map&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用Hash表映射</p><h3 id="multimap">1.5.3. multimap</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">multimap&lt;string, int&gt; mymap;&#x2F;&#x2F; 不可以使用[], at()&#x2F;&#x2F;find()， 返回一个迭代器&#x2F;&#x2F;equal_range(key), 返回一个pair, 包含两个迭代器，表示所有具有该键的元素的范围（[first, last)）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unordered-multimap">1.5.4. unordered_multimap</h3><p>使用方法与multimap相同</p><h2 id="pair">1.6. pair</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;utility&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="set">1.7. set</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;set&gt;set&lt;int, [](int a, int b)&#123;    return a&gt;b&#125;&gt; set1 &#x3D; &#123;1,2,3,4&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用红黑树，自定义操作符">1.8. 使用红黑树，自定义操作符</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct person&#123;    int age;        bool operator&lt;(const Person&amp; other) const&#123;        if(age !&#x3D; other.age)&#123;            return age&lt; other.age;        &#125;    &#125;        friend ostream&amp; operator&lt;&lt;(ostream&amp;&amp; os, const person&amp; p)&#123;        os&lt;&lt;p.age&lt;&lt;endl;        return os;    &#125;&#125;map&lt;person, int&gt; mymap;struct PointCompare &#123;    bool operator()(const Point&amp; p1, const Point&amp; p2) const &#123;        if (p1.x !&#x3D; p2.x) &#123;            return p1.x &lt; p2.x;        &#125;        return p1.y &lt; p2.y;    &#125;&#125;;std::map&lt;Point, std::string, PointCompare&gt; pointMap;&#x2F;&#x2F; 这里不能使用out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="priority-queue">1.9. priority_queue</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 只能使用仿函数类型class mycomparison&#123;    public:    bool operator()(const int&amp; a,const int&amp; b)const&#123;        if(a&gt;b)&#123;            return true;        &#125;else&#123;            return false;        &#125;    &#125;&#125;;priority_queue&lt;int&gt; q;&#x2F;&#x2F; 大顶堆，数据大的在顶端priority_queue&lt;int, vector&lt;int&gt;, mycomparison&gt; min_pq; &#x2F;&#x2F;小顶堆，小数据在顶端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="numeric">1.10. numeric</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;numeric&gt;int sum &#x3D; std::accumulate(numbers.begin(), numbers.end(), 0);&#x2F;&#x2F; 默认求和int product &#x3D; std::accumulate(numbers.begin(), numbers.end(), 1, std::multiplies&lt;int&gt;());&#x2F;&#x2F; 默认求积#include &lt;algorithm&gt;auto min_it &#x3D; min_element(number.begin(), number.end(), mycomparison);auto max_it &#x3D; max_element(number.begin(), number.end(), mycomparison);auto minmax &#x3D; minmax_element(number.begin(), number.end(),mycomparison);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习</title>
      <link href="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习">1. 深度学习</h1><h2 id="数据读取">1.1. 数据读取</h2><h3 id="标签转换为数据迭代器">1.1.1. 标签转换为数据迭代器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torch.utils import data# 传入多个数据，类似数据压缩 data_arrays，对数据进行解压缩dataset &#x3D; data.TensorDataset(data_arrays)# 创建迭代器，batch_sizedata.DataLoader(dataset, batch_size, shuffle&#x3D;is_train)# iter返回一个迭代器对象， next读取迭代器的下一个数据next(iter(data))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从torchvision-datasets读取">1.1.2. 从torchvision.datasets读取</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torchvision import transformsfrom torch.utils import dataimport torchvisiondef load_data(batch_size, resize &#x3D; None): # 定义数据处理方式       trans &#x3D; [transforms.ToTensors()]    if resize:        trans.insert(0, transforms.Resize(resize))    trans &#x3D; transforms.Compose(trans)# 使用Compose转换        # 选择数据导出模式    &#39;&#39;&#39;    root - 数据保存地址    train - 训练数据    transforms 转换模式    download 是否选择下载    &#39;&#39;&#39;    mnist_train &#x3D; torchvision.datasets.FashionMNIST(    root &#x3D; &quot;..&#x2F;data&quot;, train &#x3D; True, transforms &#x3D; trans, download &#x3D; True)        &#39;&#39;&#39;    batch_size: 每个批次包含多少个样本。shuffle: 是否在每个 epoch 开始时打乱数据（训练集通常为 True，测试集通常为 False）。num_workers (可选): 用于数据加载的子进程数量，可以加快数据读取速度。    &#39;&#39;&#39;    data &#x3D; data.DataLoader(mnist_train, batch_size, shuffle &#x3D; True,                          num_workers &#x3D; 3)       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="序列数据">1.1.3. 序列数据</h3><p>对于总长度T， 时间$\tau$ ,将数据分为</p><script type="math/tex; mode=display">y_t = X_t \\x_t = [x_[t-\tau]... x_{t-1}] \\但是x_t 相对Y_t少了\tau个，可以舍弃，也可以填充0</script><pre class="line-numbers language-python" data-language="python"><code class="language-python">tau &#x3D; 4features &#x3D; torch.zeros((T - tau, tau))for i in range(tau):    features[:, i] &#x3D; x[i: T - tau + i]labels &#x3D; x[tau:].reshape((-1, 1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>读取数据</li><li>词元化（转换为单词或字符）</li><li>转换为词元与数字的映射</li><li>将映射作用在序列数据上，转换为向量表示</li><li><a href="#squence">数据预处理代码</a></li></ol><h3 id="文本序列数据">1.1.4. 文本序列数据</h3><ol><li>读取数据到string中</li><li>使用split(\t) 分割为英法双语，然后使用.split(‘ ‘)将单词分割</li><li>然后将单词词元，建立词表</li><li>使用词表，转换为向量，对向量进行阶段或填充，然后在向量末尾增加<eos>，再统计序列中有效的单元数量valid_len</eos></li><li>指定批量大小，转换为小批量迭代器</li></ol><p><a href="#读取文本序列数据">读取文本序列代码</a></p><h2 id="模型">1.2. 模型</h2><h3 id="线性模型linear">1.2.1. 线性模型linear</h3><p>第一个指定输入特征形状，即2，第二个指定输出特征形状</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torch import nnnet &#x3D; nn.Sequential(nn.Linear(2, 1))loss &#x3D; nn.MSELoss()trainer &#x3D; torch.optim.SGD(net.parameters(), lr&#x3D;0.03)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="展平层">1.2.2. 展平层</h3><p>将(batch_size, channel, height, weight) 转换为(batch_size, channel<em> height</em>weight)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nn.Flatten(start_dim &#x3D; 1, end_dim &#x3D;-1) # 默认保留第一维batch_sizenn.LogSoftmax(dim&#x3D;1) # 作用于最后一个维度，进行归一化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="MLP">1.2.3. MLP</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torch import nnnet &#x3D; nn.Sequential(nn.Flatten(),nn.Linear(784, 256),nn.ReLU(),nn.Linear(256, 10))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CNN">1.2.4. CNN</h3><p>不变性：无论使用什么方法找到这个物体，都与物体的位置无关</p><p>原因：与像素点计算的卷积核都是相同的，不随着位置的改变而改变</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">&#39;&#39;&#39;param1: 输入通道param2: 输出通道parma3: 卷积核大小param4: 参数&#39;&#39;&#39;conv2d &#x3D; nn.Conv2d(1,1, kernel_size&#x3D;(1, 2), bias&#x3D;False)&#39;&#39;&#39;卷积核大小 &#x3D; input_channels* kernel_size, 每一个卷积核计算的出来都是一个二维图形卷积核数量 &#x3D; output_channels&#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="填充padding">1.2.4.1. 填充padding</h4><p>卷积核最好选择奇数</p><p>填充高度与宽度满足$p_h = k_h -1 , p_w = k_w -1$,  在上下填充的高度与宽度分别为 ${p_h}/{2} , p_w/2$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">conv2d &#x3D; nn.Conv2d(1,1, kernel_size&#x3D;(3, 3),padding &#x3D; 1, bias&#x3D;False)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="步幅">1.2.4.2. 步幅</h4><p>输出形状公式为</p><script type="math/tex; mode=display">\lfloor（n_h-k_h-+p_h+s_h)/s_h\rfloor \\p_h = k_h-1 \\所以结果为（n_h+s_h-1)/s_h, \\可以整除情况下，=（n_h+s_h)/s_h</script><pre class="line-numbers language-python" data-language="python"><code class="language-python">conv2d &#x3D; nn.Conv2d(1, 1, kernel_size&#x3D;(3, 5), padding&#x3D;(1, 2), stride&#x3D;(3, 4))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>当以每像素为基础应用时，$1\times 1$卷积层相当于全连接层。</li></ul><h3 id="批量归一化层BatchNorm">1.2.5. 批量归一化层BatchNorm</h3><script type="math/tex; mode=display">\mathrm{BN}(\mathbf{x}) = \boldsymbol{\gamma} \odot \frac{\mathbf{x} - \hat{\boldsymbol{\mu}}_\mathcal{B}}{\hat{\boldsymbol{\sigma}}_\mathcal{B}} + \boldsymbol{\beta}.</script><p>对特征维度进行归一化,$\gamma、\beta$ 是拉伸和偏移参数</p><ol><li><p>对特征维度进行归一化</p><pre class="line-numbers language-none"><code class="language-none">mean &#x3D; X.mean(dim &#x3D; 0, keepdim &#x3D; True)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>卷积层</p><ol><li>对通道维度进行归一化</li></ol></li><li><p>训练状态下使用小批次的样本均值与方差，测试状态使用的移动平均估算的均值与方差</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">&#39;&#39;&#39;param: 输入通道数&#39;&#39;&#39;nn.BatchNorm2d(6)  nn.BatchNorm1d(128)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="残差块">1.2.6. 残差块</h3><p>训练是模型训练出F(X) = H(x)- X</p><p><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250423225436209.png" alt="image-20250423225436209"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import torch from torch import nnfrom torch.nn import functional as Fclass Residual(nn.Module):    def __init__(self , input_channels, num_channels, use_1x1conv&#x3D; False, strides &#x3D;1):        super().__init__()        self.conv1 &#x3D; nn.Conv2d(input_channels, num_channels, kernel_size &#x3D; 3, paddding &#x3D; 1, stride &#x3D; strides)        self.conv2 &#x3D; nn.Conv2d(num_channels, num_channels, kernel_size &#x3D; 3, paddding &#x3D; 1, stride &#x3D; strides)        # 修改X的通道数量，与f(x) - x匹配        if use_1x1conv :            self.conv3 &#x3D; nn.Conv2d(input_channels, num_channels, kernel_size &#x3D;1 ,padding &#x3D; 0, stride &#x3D; strides)        else :            self.conv3 &#x3D; none        self.bn1 &#x3D; nn.BatchNorm2d(num_channels)        self.bn2 &#x3D; nn.BatchNorm2d(num_channels)    def forward(self,X):        Y &#x3D; F.relu(self.bn1(self.conv1(X)))        Y &#x3D; self.bn2(self.conv2(Y))        # 修改X输出通道数量        if conv3 :            X &#x3D; self.conv3(X)        # 实现Y &#x3D; f(x) +X        Y &#x3D; Y+ X        Y &#x3D; F.relu(Y) return Y        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="池化层pooling">1.2.7. 池化层pooling</h3><p>汇聚卷积层计算出的信息，降低卷积层对位置的敏感性，同时降低对空间降采样表示的敏感性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torch import nnnn.MaxPool2d((3,3), padding &#x3D;(0,1), stride &#x3D; (0,1))  # 最大池化层nn.AvgPool2d((2, 3), stride&#x3D;(2, 3), padding&#x3D;(0, 1))  # 平均池化层&#39;&#39;&#39;param1 : 输出层形状(1,1), 网络自动计算padding, stride ,k ,转化为(1,1)的输出维度&#39;&#39;&#39;nn.AdaptiveAvgPool2d((1,1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>池化层不需要指出Input_channels, output_channels， <strong>input_channels =output_channels</strong></p><p>例如，Lenet网络</p><p><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250423211333286.png" alt="image-20250423211333286"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">net &#x3D; nn.Sequential(    nn.Conv2d(1, 6, kernel_size&#x3D;5, padding&#x3D;2), nn.Sigmoid(),    nn.AvgPool2d(kernel_size&#x3D;2, stride&#x3D;2),    nn.Conv2d(6, 16, kernel_size&#x3D;5), nn.Sigmoid(),    nn.AvgPool2d(kernel_size&#x3D;2, stride&#x3D;2),    nn.Flatten(),    nn.Linear(16 * 5 * 5, 120), nn.Sigmoid(),    nn.Linear(120, 84), nn.Sigmoid(),    nn.Linear(84, 10))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环神经网络RNN">1.2.8. 循环神经网络RNN</h3><script type="math/tex; mode=display">隐藏输出\\\mathbf{H}_t = \phi(\mathbf{X}_t \mathbf{W}_{xh} + \mathbf{H}_{t-1} \mathbf{W}_{hh}  + \mathbf{b}_h).\\输出\\\mathbf{O}_t = \mathbf{H}_t \mathbf{W}_{hq} + \mathbf{b}_q.</script><h4 id="深度循环deep-rnn">1.2.8.1. 深度循环deep_rnn</h4><p>RNN相当于Drnn中，$H_{t}^{0} = X_t$</p><script type="math/tex; mode=display">\mathbf{H}_t^{(l)} = \phi_l(\mathbf{H}_t^{(l-1)} \mathbf{W}_{xh}^{(l)} + \mathbf{H}_{t-1}^{(l)} \mathbf{W}_{hh}^{(l)}  + \mathbf{b}_h^{(l)})\\\mathbf{O}_t = \mathbf{H}_t^{(L)} \mathbf{W}_{hq} + \mathbf{b}_q</script><h4 id="双向循环rnn">1.2.8.2. 双向循环rnn</h4><p><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250424175214314.png" alt="image-20250424175214314"></p><p><strong>多用于对文本的编码，而不是预测文本</strong></p><h4 id="代码介绍">1.2.8.3. 代码介绍</h4><p>输入X = （time_step ,batch_size, feature), output = (time_step ,batch_size, num_hidden*(1/2)), state = (time_step ,batch_size, num_hidden)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torch import nnrnn &#x3D; nn.RNN(num_input, num_hiddens)gru_layer &#x3D; nn.GRU(num_inputs, num_hiddens)lstm_layer&#x3D;nn.LSTM(num_inputs, num_hiddens)# drnn&#39;&#39;&#39;X_&#123;batch* num_input&#125;* W_&#123;num_input * num_hidder&#125; num_inputs: 输入的特征数量num_hidden：隐神经元数量 &#x3D; 隐状态的特征数量bidirectional: 双向循环网络&#39;&#39;&#39;lstm_layer &#x3D; nn.LSTM(num_inputs, num_hidden, num_layers, bidirectional&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RNN 利用<strong>时间维度</strong>的参数共享实现了对<em>*时间位置</em>，每一个时间步使用的一套参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def rnn(inputs, state, params):    # inputs的形状：(时间步数量，批量大小，词表大小)    W_xh, W_hh, b_h, W_hq, b_q &#x3D; params        H, &#x3D; state    outputs &#x3D; []    # X的形状：(批量大小，词表大小)    for X in inputs:        H &#x3D; torch.tanh(torch.mm(X, W_xh) + torch.mm(H, W_hh) + b_h)        Y &#x3D; torch.mm(H, W_hq) + b_q        outputs.append(Y)    return torch.cat(outputs, dim&#x3D;0), (H,)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250424173608710.png" alt="image-20250424173608710"></p><h4 id="梯度衰减">1.2.8.4. 梯度衰减</h4><p>减小梯度，避免梯度爆炸，使得梯度始终保持在$\theta$ 以下</p><script type="math/tex; mode=display">\mathbf{g} \leftarrow \min\left(1, \frac{\theta}{\|\mathbf{g}\|}\right) \mathbf{g}.</script><p><a href="#grad_clipping">梯度裁剪代码</a></p><h2 id="激活函数">1.3. 激活函数</h2><p>将模型从线性变为非线性</p><h3 id="relu">1.3.1. relu</h3><script type="math/tex; mode=display">\operatorname{ReLU}(x) = \max(x, 0).</script><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch.relu(X)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="sigmod">1.3.2. sigmod</h3><p>特征图像，曲线在（0，1）中，关于0.5对称</p><script type="math/tex; mode=display">$$\operatorname{sigmoid}(x) = \frac{1}{1 + \exp(-x)}.</script><script type="math/tex; mode=display"><pre class="line-numbers language-python" data-language="python"><code class="language-python">y &#x3D; torch.sigmod(X)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>### tanh特征图像，曲线在（-1，1）中，关于0对称</script><script type="math/tex; mode=display">\operatorname{tanh}(x) = \frac{1 - \exp(-2x)}{1 + \exp(-2x)}</script><pre class="line-numbers language-python" data-language="python"><code class="language-python">y &#x3D; torch.tanh(x)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="损失函数">1.4. 损失函数</h2><h3 id="均方误差">1.4.1. 均方误差</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss &#x3D; nn.MSELoss()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="交叉熵损失">1.4.2. 交叉熵损失</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss &#x3D; nn.CrossEntropyLoss(reduction&#x3D;&#39;none&#39;) # 返回的是一个张量，反向传播需要计算为标量# 相当于 NLLLoss(LogSoftmax(logits), target)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="NLLLoss">1.4.3. NLLLoss</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss &#x3D; nn.NLLLoss()  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="训练过程">1.5. 训练过程</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">num_epoch &#x3D; 2for epoch in range(num_epoch):    for X, y in data_iter :        l &#x3D; loss(net(X), y)        train.zero_grad()        # 清除训练模型的梯度, 返回的是一个标量        l.backward()          # 反向计算梯度        trainer.step()        l &#x3D; loss(net(features), labels)  # 计算总体梯度    print(f&#39;epoch&#123;epoch&#125;, loss&#123;1:0.2f&#125;&#39;)                    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型问题">1.6. 模型问题</h2><h3 id="复杂性因素">1.6.1. 复杂性因素</h3><ol><li>可调整参数的数量。当可调整参数的数量（有时称为<strong>自由度</strong>）很大时，模型往往更容易过拟合。</li><li>参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合。</li><li>训练样本的数量。即使模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型。</li></ol><h3 id="K折交叉验证">1.6.2. K折交叉验证</h3><p>一个epoch中，将训练数据分为K份，在k-1份上进行训练，在第K份上进行验证</p><h3 id="L2正则化">1.6.3. L2正则化</h3><script type="math/tex; mode=display">\begin{aligned}\mathbf{w} & \leftarrow \left(1- \eta\lambda \right) \mathbf{w} - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \mathbf{x}^{(i)} \left(\mathbf{w}^\top \mathbf{x}^{(i)} + b - y^{(i)}\right).\end{aligned}</script><p>每次都减小一定的权重，岭回归相对于线性回归增加了L2正则化，LASSO回归相当于增加了L1回归，相当于参数选择</p><ol><li>选择权重参数，然后正则化</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 选择参数组for name, param in net.named_parameters():    # param.requires_grad 确保只包含需要梯度的参数    if param.requires_grad:        # 根据参数名称判断是否是偏置项        if &#39;bias&#39; in name: # 简单的判断，更严格的判断可以是 name.endswith(&#39;.bias&#39;)            params_without_wd.append(param)        else:            params_with_wd.append(param)# 初始化优化器，使用参数组trainer &#x3D; torch.optim.SGD([    &#123;&#39;params&#39;: params_with_wd, &#39;weight_decay&#39;: wd&#125;,    &#123;&#39;params&#39;: params_without_wd, &#39;weight_decay&#39;: 0&#125; # 对偏置项设置 weight_decay 为 0], lr&#x3D;lr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>对所有参数进行正则化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">trainer &#x3D; torch.optim.SGD([net.parameters(), lr &#x3D; lr, weigth_decay &#x3D; wd])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="暂退法（Dropout">1.6.4. 暂退法（Dropout)</h3><p>随即丢弃部分神经元</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nn.Dropout(ratio)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="随机初始化">1.6.5. 随机初始化</h3><p>暂退法和随机初始化，都可以减小神经元的对称性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torch.nn.init as initclass SimpleMLP(nn.Module):    def __init__(self):        super(SimpleMLP, self).__init__()        self.fc1 &#x3D; nn.Linear(784, 128) # 例如处理 28x28 图像展平后的输入        self.relu &#x3D; nn.ReLU()        self.fc2 &#x3D; nn.Linear(128, 64)        self.relu2 &#x3D; nn.ReLU()        self.fc3 &#x3D; nn.Linear(64, 10) # 例如输出 10 个类别的概率        # 在这里调用自定义初始化函数        self._initialize_weights()    def _initialize_weights(self):        print(&quot;正在进行自定义初始化...&quot;)        for m in self.modules(): # 遍历模型的所有模块 (包括子模块自身)            # print(f&quot;处理模块: &#123;m&#125;&quot;) # 可以打印查看正在处理的模块类型            if isinstance(m, nn.Linear):                # 对线性层的权重使用 He&#x2F;Kaiming 初始化                init.kaiming_normal_(m.weight, mode&#x3D;&#39;fan_in&#39;, nonlinearity&#x3D;&#39;relu&#39;)                # 对线性层的偏置初始化为常数 0                if m.bias is not None: # 检查偏置是否存在                    init.constant_(m.bias, 0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录">1.7. 附录</h2><p><b id="squence"> squence 序列数据预处理 </b></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 读取序列数据d2l.DATA_HUB[&#39;time_machine&#39;] &#x3D; (d2l.DATA_URL + &#39;timemachine.txt&#39;,                                &#39;090b5e7e70c295757f55df93cb0a180b9691891a&#39;)def read_time_machine():  #@save    &quot;&quot;&quot;将时间机器数据集加载到文本行的列表中&quot;&quot;&quot;    with open(d2l.download(&#39;time_machine&#39;), &#39;r&#39;) as f:        lines &#x3D; f.readlines()    return [re.sub(&#39;[^A-Za-z]+&#39;, &#39; &#39;, line).strip().lower() for line in lines]lines &#x3D; read_time_machine()# 词元化def tokenize(lines, token&#x3D;&#39;word&#39;):  #@save    &quot;&quot;&quot;将文本行拆分为单词或字符词元&quot;&quot;&quot;    if token &#x3D;&#x3D; &#39;word&#39;:        return [line.split() for line in lines]    elif token &#x3D;&#x3D; &#39;char&#39;:        return [list(line) for line in lines]    else:        print(&#39;错误：未知词元类型：&#39; + token)print(type(lines[0]))tokens &#x3D; tokenize(lines)# 词元与数值的映射class Vocab:  #@save    &quot;&quot;&quot;文本词表&quot;&quot;&quot;    def __init__(self, tokens&#x3D;None, min_freq&#x3D;0, reserved_tokens&#x3D;None):        if tokens is None:            tokens &#x3D; []        if reserved_tokens is None:            reserved_tokens &#x3D; []        # 按出现频率排序        counter &#x3D; count_corpus(tokens)        self._token_freqs &#x3D; sorted(counter.items(), key&#x3D;lambda x: x[1],                                   reverse&#x3D;True)        # 未知词元的索引为0        self.idx_to_token &#x3D; [&#39;&lt;unk&gt;&#39;] + reserved_tokens        # 单词到索引梭顺序        self.token_to_idx &#x3D; &#123;token: idx                             for idx, token in enumerate(self.idx_to_token)&#125;                for token, freq in self._token_freqs:            if freq &lt; min_freq:                break            if token not in self.token_to_idx:                # 顺序到单词                self.idx_to_token.append(token)                self.token_to_idx[token] &#x3D; len(self.idx_to_token) - 1    def __len__(self):        return len(self.idx_to_token)    def __getitem__(self, tokens):        if not isinstance(tokens, (list, tuple)):            return self.token_to_idx.get(tokens, self.unk)        return [self.__getitem__(token) for token in tokens]    def to_tokens(self, indices):        if not isinstance(indices, (list, tuple)):            return self.idx_to_token[indices]        return [self.idx_to_token[index] for index in indices]    @property    def unk(self):  # 未知词元的索引为0        return 0    @property    def token_freqs(self):        return self._token_freqsdef count_corpus(tokens):  #@save    &quot;&quot;&quot;统计词元的频率&quot;&quot;&quot;    # 这里的tokens是1D列表或2D列表    if len(tokens) &#x3D;&#x3D; 0 or isinstance(tokens[0], list):        # 将词元列表展平成一个列表        tokens &#x3D; [token for line in tokens for token in line]    return collections.Counter(tokens)def load_corpus_time_machine(max_tokens&#x3D;-1):  #@save    &quot;&quot;&quot;返回时光机器数据集的词元索引列表和词表&quot;&quot;&quot;    lines &#x3D; read_time_machine()    tokens &#x3D; tokenize(lines, &#39;char&#39;)    vocab &#x3D; Vocab(tokens)    # 因为时光机器数据集中的每个文本行不一定是一个句子或一个段落，    # 所以将所有文本行展平到一个列表中    corpus &#x3D; [vocab[token] for line in tokens for token in line]    if max_tokens &gt; 0:        corpus &#x3D; corpus[:max_tokens]    return corpus, vocab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b id="grad_clipping"> 梯度衰减</b></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def grad_clipping(net, theta):  #@save    &quot;&quot;&quot;裁剪梯度&quot;&quot;&quot;    if isinstance(net, nn.Module):        params &#x3D; [p for p in net.parameters() if p.requires_grad]    else:        params &#x3D; net.params    norm &#x3D; torch.sqrt(sum(torch.sum((p.grad ** 2)) for p in params))    if norm &gt; theta:        for param in params:            param.grad[:] *&#x3D; theta &#x2F; norm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取文本序列数据">1.7.1. 读取文本序列数据</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">import osimport torchfrom d2l import torch as d2l# 下载并读出序列d2l.DATA_HUB[&#39;fra-eng&#39;] &#x3D; (d2l.DATA_URL + &#39;fra-eng.zip&#39;,                           &#39;94646ad1522d915e7b0f9296181140edcf86a4f5&#39;)#@savedef read_data_nmt():    &quot;&quot;&quot;载入“英语－法语”数据集&quot;&quot;&quot;    data_dir &#x3D; d2l.download_extract(&#39;fra-eng&#39;)    with open(os.path.join(data_dir, &#39;fra.txt&#39;), &#39;r&#39;,             encoding&#x3D;&#39;utf-8&#39;) as f:        return f.read()raw_text &#x3D; read_data_nmt()print(raw_text[:75])# 处理序列def preprocess_nmt(text):    &quot;&quot;&quot;预处理“英语－法语”数据集&quot;&quot;&quot;    def no_space(char, prev_char):        return char in set(&#39;,.!?&#39;) and prev_char !&#x3D; &#39; &#39;    # 使用空格替换不间断空格    # 使用小写字母替换大写字母    text &#x3D; text.replace(&#39;\u202f&#39;, &#39; &#39;).replace(&#39;\xa0&#39;, &#39; &#39;).lower()    # 在单词和标点符号之间插入空格    out &#x3D; [&#39; &#39; + char if i &gt; 0 and no_space(char, text[i - 1]) else char           for i, char in enumerate(text)]    return &#39;&#39;.join(out)# 词元化，并区分出feature与labeldef tokenize_nmt(text, num_examples&#x3D;None):    &quot;&quot;&quot;词元化“英语－法语”数据数据集&quot;&quot;&quot;    source, target &#x3D; [], []    for i, line in enumerate(text.split(&#39;\n&#39;)):        if num_examples and i &gt; num_examples:            break        parts &#x3D; line.split(&#39;\t&#39;)        if len(parts) &#x3D;&#x3D; 2:            # 之前标点符号之间增加了空格，使用空格分割            source.append(parts[0].split(&#39; &#39;))            target.append(parts[1].split(&#39; &#39;))    return source, targetsource, target &#x3D; tokenize_nmt(text)# 阶段或填充词元def truncate_pad(line, num_steps, padding_token):    &quot;&quot;&quot;截断或填充文本序列&quot;&quot;&quot;    if len(line) &gt; num_steps:        return line[:num_steps]  # 截断    return line + [padding_token] * (num_steps - len(line))  # 填充truncate_pad(src_vocab[source[0]], 10, src_vocab[&#39;&lt;pad&gt;&#39;])# 统计序列数据valid_lendef build_array_nmt(lines, vocab, num_steps):    &quot;&quot;&quot;将机器翻译的文本序列转换成小批量&quot;&quot;&quot;    lines &#x3D; [vocab[l] for l in lines]    lines &#x3D; [l + [vocab[&#39;&lt;eos&gt;&#39;]] for l in lines]    array &#x3D; torch.tensor([truncate_pad(        l, num_steps, vocab[&#39;&lt;pad&gt;&#39;]) for l in lines])    valid_len &#x3D; (array !&#x3D; vocab[&#39;&lt;pad&gt;&#39;]).type(torch.int32).sum(1)    return array, valid_lendef load_data_nmt(batch_size, num_steps, num_examples&#x3D;600):    &quot;&quot;&quot;返回翻译数据集的迭代器和词表&quot;&quot;&quot;    text &#x3D; preprocess_nmt(read_data_nmt()) # 读取序列    source, target &#x3D; tokenize_nmt(text, num_examples)  # 词元化序列    src_vocab &#x3D; d2l.Vocab(source, min_freq&#x3D;2, # 建立词表                          reserved_tokens&#x3D;[&#39;&lt;pad&gt;&#39;, &#39;&lt;bos&gt;&#39;, &#39;&lt;eos&gt;&#39;])    tgt_vocab &#x3D; d2l.Vocab(target, min_freq&#x3D;2,                          reserved_tokens&#x3D;[&#39;&lt;pad&gt;&#39;, &#39;&lt;bos&gt;&#39;, &#39;&lt;eos&gt;&#39;])    src_array, src_valid_len &#x3D; build_array_nmt(source, src_vocab, num_steps)  # 填充或阶段    tgt_array, tgt_valid_len &#x3D; build_array_nmt(target, tgt_vocab, num_steps)    data_arrays &#x3D; (src_array, src_valid_len, tgt_array, tgt_valid_len)    data_iter &#x3D; d2l.load_array(data_arrays, batch_size)   # 创建小批量迭代器    return data_iter, src_vocab, tgt_vocab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端代码的联合使用</title>
      <link href="/2025/05/24/java/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/05/24/java/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="html-css-javascript">1. html+ css+ javascript</h1><h2 id="html">1.1. html</h2><h3 id="常用插件">1.1.1. 常用插件</h3><ol><li>HTML CSS Support</li><li>Live Server</li><li>Auto Rename Tag</li><li>open in browser</li></ol><h3 id="常用示例">1.1.2. 常用示例</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 这里放置文档的元信息 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文档标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 连接外部样式表或脚本文件等 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>styles.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 这里放置页面内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 其他内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 这里放置文档的元信息 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文档标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 连接外部样式表或脚本文件等 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>styles.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 这里放置页面内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 其他内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css">1.2. css</h2><h3 id="规则">1.2.1. 规则</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span> <span class="token punctuation">&#123;</span>    <span class="token property">属性1</span><span class="token punctuation">:</span> 属性值1<span class="token punctuation">;</span>    <span class="token property">属性2</span><span class="token punctuation">:</span> 属性值2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入方式">1.2.2. 导入方式</h3><ol><li>内联使用</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>这是一段内联样式文本。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>外部样式表</p><p>写在<head>中 </head></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">            <span class="token selector">h2</span> <span class="token punctuation">&#123;</span>                       <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>                        <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>外部样式表</p><p>使用link连接外部资源，type为“text/css”，href指向样式内容</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./css/style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="选择器">1.2.3. 选择器</h3><div class="table-container"><table><thead><tr><th>选择器</th><th>形式</th></tr></thead><tbody><tr><td>元素</td><td>p</td></tr><tr><td>类</td><td>.highlight</td></tr><tr><td>id</td><td>#header</td></tr><tr><td>通用选择</td><td>*</td></tr><tr><td>子元素</td><td>父元素&gt; 子元素</td></tr><tr><td>后代</td><td><code>ul li</code> 选择了所有在 <code>&lt;ul&gt;</code> 元素内部的 <code>&lt;li&gt;</code> 元素。</td></tr><tr><td>相邻兄弟</td><td><code>元素名 + 元素名</code>，例如，<code>h2 + p</code> 选择了与 <code>&lt;h2&gt;</code> 相邻的 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td>/<em> 通用兄弟选择器 </em>/</td><td>h4 ~ p {             background-color: #1b91ff;         }</td></tr><tr><td>伪类选择器</td><td>用户交互时的属性变化<br>包括鼠标悬停（<code>:hover</code> ）、链接状态（<code>:active</code>）、第一个子元素（<code>:first-child</code>）</td></tr></tbody></table></div><h3 id="属性">1.2.4. 属性</h3><p>了解了如何选中我们想要的元素，接下来，我们来学习 CSS 常用的样式属性。CSS 的属性有上百个，但是这不意味着，我们每个都要学习，更多的属性可以参考 <a href="https://www.runoob.com/cssref/css-reference.html">这里</a></p><h4 id="盒子模型">1.2.4.1. 盒子模型</h4><p>描述了文档中的每个元素都被看作是一个矩形的盒子，这个盒子包含了内容、内边距、边框和外边距。</p><p><img src="/2025/05/24/java/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/202311141906963.png" alt="img"></p><p>其中，从内到外分别是：</p><div class="table-container"><table><thead><tr><th style="text-align:center">属性名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>内容（Content）</code></td><td style="text-align:center">盒子包含的实际内容，比如文本、图片等。</td></tr><tr><td style="text-align:center"><code>内边距（Padding）</code></td><td style="text-align:center">围绕在内容的内部，是内容与边框之间的空间。可以使用 <code>padding</code> 属性来设置。</td></tr><tr><td style="text-align:center"><code>边框（Border）</code></td><td style="text-align:center">围绕在内边距的外部，是盒子的边界。可以使用 <code>border</code> 属性来设置。</td></tr><tr><td style="text-align:center"><code>外边距（Margin）</code></td><td style="text-align:center">围绕在边框的外部，是盒子与其他元素之间的空间。可以使用 <code>margin</code> 属性来设置。</td></tr></tbody></table></div><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.demo</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span> <span class="token comment">/* 设置背景色 */</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span> <span class="token comment">/* 转换成行内块元素 */</span>            <span class="token property">border</span><span class="token punctuation">:</span> 10px solid green<span class="token punctuation">;</span> <span class="token comment">/* 设置边框样式 */</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token comment">/* 设置内边距 */</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span> <span class="token comment">/* 设置外边距 */</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浮动">1.2.4.2. 浮动</h4><p>标准流，浮动、定位</p><p>使用float控制浮动格式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.left, .right</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 添加浮动，元素统一向左浮动，向右同理 float:right*/</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清除浮动格式，在后续的模块中不再浮动，不允许后续模块浮动</p><ol><li>加上一个空的块级元素，使用clear属性</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>            <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>父模块属性中使用clearfix</p></li><li><p>使用overflow: hidden 属性</p></li></ol><h4 id="定位">1.2.4.3. 定位</h4><p>相关属性：</p><p>top ,bottom , left ,right</p><p>postion属性值</p><div class="table-container"><table><thead><tr><th>position</th><th>value</th></tr></thead><tbody><tr><td>relative</td><td>相对于正常文档定位</td></tr><tr><td>absolute</td><td>相对最近的已经定位的祖先元素定位，没有，则相对初始包含块定位</td></tr><tr><td>fixed</td><td>固定位置</td></tr></tbody></table></div><h2 id="javascript">1.3. javascript</h2><h3 id="导入方式-1">1.3.1. 导入方式</h3><ol><li>内联方式（inline):</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>外部引入</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myscript.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="基本语法">1.3.2. 基本语法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token punctuation">;</span> <span class="token comment">// 声明变量</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//声明并初始化变量</span><span class="token keyword">const</span> <span class="token constant">PI</span><span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">//声明一个常量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div class="table-container"><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left"><code>var</code></th><th style="text-align:left"><code>let</code></th></tr></thead><tbody><tr><td style="text-align:left"><strong>作用域</strong></td><td style="text-align:left">函数作用域</td><td style="text-align:left">块级作用域</td></tr><tr><td style="text-align:left"><strong>变量提升</strong></td><td style="text-align:left">声明会被提升，赋值不提升</td><td style="text-align:left">存在提升，但有暂时性死区</td></tr><tr><td style="text-align:left"><strong>重复声明</strong></td><td style="text-align:left">允许在同作用域内重复声明</td><td style="text-align:left">不允许在同块级作用域内重复声明</td></tr></tbody></table></div><h4 id="函数">1.3.2.1. 函数</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">funtion <span class="token function">hello</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//闭包是指一个函数能够访问并记住其词法作用域，即使该函数在当前词法作用域之外执行。闭包使得函数可以保持对其创建时的作用域的引用</span><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> outerVar <span class="token operator">=</span> <span class="token string">"I am outer"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outerVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问了外部函数的变量</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> inner<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关联html中的事件">1.3.2.2. 关联html中的事件</h4><div class="table-container"><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onClick</td><td>鼠标点击</td></tr><tr><td>onMouseOver</td><td>鼠标经过</td></tr><tr><td>onMouseOut</td><td>鼠标移出</td></tr><tr><td>onChange</td><td>文本内容改变</td></tr><tr><td>onSelect</td><td>文本框选中</td></tr><tr><td>onFocuse</td><td>光标聚集</td></tr><tr><td><code>onBlur</code></td><td>移开光标</td></tr><tr><td><code>onLoad</code></td><td>网页加载</td></tr><tr><td><code>onUnload</code></td><td>关闭网页</td></tr></tbody></table></div><p>事件处理程序是与特定事件相关联的函数。当事件发生时，关联的事件处理程序将被调用。在 HTML 中，可以通过以下方式添加事件处理程序：</p><ol><li><p>html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bottom</span> <span class="token special-attr"><span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">'</span><span class="token value javascript language-javascript"><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">'</span></span></span><span class="token punctuation">></span></span> Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bottom</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>DOM属性</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> botton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myButton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>botton<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>addEventListener</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myButton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Button clicked!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取元素，并修改内容">1.3.3. 获取元素，并修改内容</h3><p>DOM 中的一切都是节点。文档本身是一个文档节点，而文档中的元素、属性和文本都是不同类型的节点。主要的节点类型包括：</p><ol><li><code>元素节点（Element Nodes）</code>： 表示 HTML 或 XML 文档中的元素，如 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code> 等。</li><li><code>属性节点（Attribute Nodes）</code>： 表示元素的属性，如 class、id 等。</li><li><code>文本节点（Text Nodes）</code>： 表示元素的文本内容</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 修改元素文本内容</span>element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'新的文本内容'</span><span class="token punctuation">;</span><span class="token comment">// 添加新的子元素</span><span class="token keyword">var</span> newElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 移除子元素</span><span class="token keyword">var</span> childElement <span class="token operator">=</span> element<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>childElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="致谢">2. 致谢</h1><p>摘录自<a href="https://docs.geeksman.com/front-end/1.front-end-html.html#html">Luo</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
      <url>/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="大模型">1. 大模型</h1><p>训练流程</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250516165010562.png" alt="image-20250516165010562"></p><h2 id="预训练">1.1. 预训练</h2><p>无监督学习，学习先验的背景知识</p><p>大模型的输出总的概率与原数据比较，不需要</p><script type="math/tex; mode=display">L(u) =\sum_{i}{\log(p(u_i| u_0,..., u_{i-1})|\theta)}</script><ol><li><p>数据获取</p><ol><li>网页爬取，数据没有处理</li><li>重复</li><li>拼写错误</li></ol></li><li><p>数据清洗</p><ol><li><p>转换文本格式</p></li><li><p>去重</p><ol><li>URL爬取的网站去重</li><li>文档的相似度</li><li>对文档分组30M， 超过6次重复， 删除其余5行</li><li>启发式过滤，使用token级的KL散度去重</li></ol><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250516172556394.png" alt="image-20250516172556394"></p><ol><li>数据打包<pre><code> 1. &lt;BOS&gt; &lt;EOS&gt; 2. 一行一行的训练，而不是一句一句的训练</code></pre></li><li>观测模型，使用测试集对中间模型测试</li><li>数据比例，代码模型中平衡代码补全（中间填充）与代码编写（从前向后编写）的任务，两种数据集都需要</li></ol></li></ol></li></ol><h3 id="继续预训练">1.1.1. 继续预训练</h3><p>当前的base model 对于专业领域的效果很差，继续与训练补全知识。</p><p>加入新的数据，调整学习率</p><ol><li>warmup 的步数不会影响最终的结果</li><li>学习率较大，下游任务更好</li><li>对原有模型继续warmup，效果更差</li></ol><p>使用梯形的学习率，保存拐点位置的学习率，继续预训练时候，使用拐点数据预训练，保持较高的搜索速度，拟合新增的数据集</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250516173720277.png" alt="image-20250516173720277"></p><h3 id="scaling-up">1.1.2. scaling up</h3><p>扩大模型的参数和容量</p><h3 id="尺度定律">1.1.3. 尺度定律</h3><p>模型的损失是可预测的，与模型的算力，大小，数据集有较大的关系</p><ol><li>模型的参数</li><li>数据的大小</li><li>算力</li></ol><p>模型与参数、大小、算力由直接的关系，不需要训练，就能知道最终的训练结果</p><h4 id="尺度定律-1">1.1.3.1. 尺度定律</h4><ol><li><p>模型与参数、大小、算力由直接的关系，与模型形状弱依赖</p><ol><li>某个网络的占比</li><li>隐层数量的占比</li><li>每个head的大小</li></ol><p>的影响很小，不需要对此调参</p></li><li><p>其他变量充足的时候，我们就知道模型最后的效果</p></li></ol><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519222325535.png" alt="image-20250519222325535"></p><ol><li><p>过拟合的普遍性，一味增加其中一项，模型效果就会进入衰退阶段</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519223024436.png" alt="image-20250519223024436"></p></li><li><p>同等算力下，调整模型大小和数据集的大小</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519223337327.png" alt="image-20250519223337327"></p></li><li><p>模型在训练集与测试集上表现高度相关</p></li><li><p>训练数据有显示，仍然可以重复使用数据进行训练得到可预测的“尺度定律”</p></li><li><p>其他模型（包括transform)都具有尺度定律</p></li></ol><h4 id="利用尺度定律">1.1.3.2. 利用尺度定律</h4><ol><li><p>固定模型的大小，更改预训练的数据量</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519224015225.png" alt="image-20250519224015225"></p></li><li><p>规定算力大小，训练不同大小的模型，（训练到模型收敛较难，可以得到算力的大小）</p></li></ol><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519224308944.png" alt="image-20250519224308944"></p><h3 id="涌现">1.1.4. 涌现</h3><p>大模型在训练数量的规模时，准确率会发生突变</p><h2 id="后训练">1.2. 后训练</h2><p>对齐人类的要求，回答问题有用、无害</p><h3 id="指令微调">1.2.1. 指令微调</h3><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519225029335.png" alt="image-20250519225029335"></p><ol><li><p>上下文学习</p><ol><li>用户给出例子，模型不更新参数直接学习</li></ol><p>使用例子训练，模型直接输出</p></li><li><p>预训练-微调</p><ol><li>在目标任务上进行微调</li></ol><p>给出命令前缀，然后训练</p></li><li><p>指令微调</p><ol><li>在非目标任务上进行泛化，在任务上泛化很好</li></ol></li></ol><p>指令-回答， 对回答的预测计算损失函数</p><h3 id="数据合成">1.2.2. 数据合成</h3><ol><li>人工构建任务例子</li><li>使用强模型根据种子任务生成指令</li><li>将生成的指令再给另一个强模型，获得指令的回答，得到&lt;指令，回答&gt; 对</li></ol><h3 id="test-scaling">1.2.3. test scaling</h3><p>模型输出多个结果，打分选择结果</p><p>过程奖励模型&gt;结果奖励模型</p><p>选择框架</p><p>   <img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250523163748097.png" alt="image-20250523163748097"></p><h3 id="微调方法">1.2.4. 微调方法</h3><h4 id="lora">1.2.4.1. lora</h4><p>增加低秩矩阵</p><h4 id="前缀调整">1.2.4.2. 前缀调整</h4><p>训练的模型权重不再调整，k,v前分别添加可训练的连续前缀向量</p><p>冻结原权重，增加可训练模块</p><h4 id="提示调整">1.2.4.3. 提示调整</h4><p>训练文本前增加提示命令</p><h4 id="adapter">1.2.4.4. adapter</h4><p>在前馈神经网络前增加低秩矩阵</p><h4 id="LoRAMoE">1.2.4.5. LoRAMoE</h4><p>微调插入专家模型中的LoRA适配器</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250523200928848.png" alt="image-20250523200928848"></p><h2 id="强化学习">1.3. 强化学习</h2><p>最大化智能体获得的期望累计奖励</p><h3 id="PPO函数">1.3.1. PPO函数</h3><p>策略： 大模型生成句子的过程$\pi$</p><p>轨迹： 一系列的动作，大模型生成句子时候，的状态与动作</p><script type="math/tex; mode=display">\tau  = s_1, a_1, ..s_n, a_n</script><p>奖励：$R(\tau)$，一整条轨迹的奖励</p><p>基于策略的强化学习的目标：找到一种策略，是在这个策略的轨迹上的奖励分数最大</p><script type="math/tex; mode=display">\begin{align}\underset{\pi_\theta}{argmax} j({\pi_\theta}) &= \underset{\pi_\theta}{argmax}E_{\tau~\pi}|R(\tau)|\\& = \sum_\tau R(\tau)P(\tau|\pi_\theta)\end{align}</script><p>LOSS函数的梯度：</p><script type="math/tex; mode=display">\begin{align*}\nabla J(\pi_\theta) &= \sum_\tau R(\tau) \nabla P(\tau|\pi_\theta) \\&= \sum_\tau R(\tau) P(\tau|\pi_\theta) \frac{\nabla P(\tau|\pi_\theta)}{P(\tau|\pi_\theta)} \\&= \sum_\tau R(\tau) P(\tau|\pi_\theta) \nabla \log(P(\tau|\pi_\theta)) \\&= \mathbb{E}_{\tau \sim \pi_\theta} [R(\tau) \nabla \log(P(\tau|\pi_\theta))]\end{align*}</script><p>路径的概率，从$s_0$递推，推到T-1,计算出T的概率</p><script type="math/tex; mode=display">P(\tau|\pi_\theta) = \rho_0(s_0) \prod_{t=0}^{T-1} P(s_{t+1}|s_t, a_t)\pi_\theta(a_t|s_t)</script><script type="math/tex; mode=display">\nabla \log\left(P(\tau|\pi_\theta)\right) = \nabla \left[ \log \rho_0(s_0) + \sum_{t=0}^{T-1} \log P(s_{t+1}|s_t, a_t) + \sum_{t=0}^{T-1} \log \pi_\theta(a_t|s_t) \right]</script><p>前两项和策略模型的参数 $\theta$ 无关，可舍去。于是 </p><script type="math/tex; mode=display">\nabla \log\left(P(\tau|\pi_\theta)\right) = \sum_{t=0}^{T-1} \nabla \log \pi_\theta(a_t|s_t)</script><p>带入Loss的梯度中，使用每时刻的奖励函数代替总路径$R(\tau)$</p><script type="math/tex; mode=display">\nabla J(\pi_\theta) = \mathbb{E}_{\tau \sim \pi_\theta}\left[ \sum_{t=0}^{T-1} \Psi_t \nabla \log \pi_\theta(a_t|s_t) \right]</script><p>$\psi_t$的组成形式</p><ol><li>$\sum_{t=0}^\infty r_t$                        轨迹的累积奖励   </li><li>$\sum_{t’=t}^\infty \gamma^{t’-t} r_{t’}$                        轨迹的折扣奖励   </li><li>$\sum_{t’=t}^\infty \gamma^{t’-t} r_{t’} - b(s_t)$                        引入基线    </li><li>$Q^\pi(s_t, a_t)$                        动作价值函数   </li><li>$A^\pi(s_t, a_t)$                        优势函数   </li><li>$r_t + V^\pi(s_{t+1}) - V^\pi(s_t)$                        时序差分残差</li></ol><p>累计折扣奖励</p><script type="math/tex; mode=display">G_t = r_t + \gamma r_{t+1} + \gamma^2 r_{t+2} + \dots + \gamma^{T-t-1} r_{T-1} = r_t + \gamma G_{t+1}</script><p>动作价值函数：在策略<em>π</em> 下，从状态 <em>s_t</em> 开始并执行动作 <em>a_t</em> 后，未来所有折扣奖励的<strong>期望</strong>。</p><script type="math/tex; mode=display">\begin{align}Q_\pi(s_t, a_t) &= \mathbb{E}_\pi[G_t | s_t, a_t] \\&= \mathbb{E}_\pi\left[\sum_{t=0}^{T-t} \gamma^{t'} r_{t'} | s_t, a_t\right] \\&= \mathbb{E}_\pi[r_t | s_t, a_t] + \mathbb{E}_\pi[\gamma V_\pi(S_{t+1}) | s_t, a_t] \\&= \sum_{s_{t+1} \in \mathcal{S}} P(s_{t+1}|s_t, a_t)R(s_t, a_t, s_{t+1}) + \gamma \sum_{s_{t+1} \in \mathcal{S}} P(s_{t+1}|s_t, a_t)V_\pi(s_{t+1})  \\& 贝尔曼期望方程，将 G_t 拆分为当前奖励和未来价值\\&= \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[r + \gamma V_\pi(s_{t+1})]\end{align}</script><p>优势函数:在策略 π<em>π</em> 下，在状态 <em>s_t</em> 执行动作 <em>a_t</em> 相对于在该状态下平均（期望）价值的“优势”或“额外价值”。</p><script type="math/tex; mode=display">\begin{align}A_\pi(s_t, a_t) &= Q_\pi(s_t, a_t) - V_\pi(s_t) \\&= \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[r_t + \gamma V_\pi(s_{t+1})] - \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[V_\pi(s_t)] \\&= \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[r_t + \gamma V_\pi(s_{t+1}) - V_\pi(s_t)] \\&= \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[\text{TD\_error}]\end{align}</script><h3 id="价值损失">1.3.2. 价值损失</h3><p>这里提到的“价值训练过程”通常指的是在强化学习中，<strong>价值函数（Value Function）的估计和更新过程</strong>。这通常通过训练一个神经网络（价值网络/Critic网络）来预测状态的价值 V(s)<em>V</em>(<em>s</em>) 或状态-动作对的价值 Q(s,a)<em>Q</em>(<em>s</em>,<em>a</em>)。最常见的训练方法是使用<strong>均方误差（Mean Squared Error, MSE）损失</strong></p><p>价值函数 V<strong>ϕ<em>(</em>s</strong>t<em>) 的目标是准确估计<strong>未来累积折扣奖励</strong>。因此，训练它的方法就是让它的预测值 </em>V<strong>ϕ<em>(</em>s</strong>t*) 尽可能接近“真实”的累积折扣奖励 R_t。</p><p>价值损失采用的是MSE损失，最小化如下目标函数： </p><script type="math/tex; mode=display">\mathcal{L}_{\text{critic}}(\phi) = \mathbb{E}_{t}\left[\left(V_\phi(s_t) - R_t\right)^2\right]</script><p>其中$V_\phi(s_t)$为价值模型预测出来的回报，$R_t$为实际得到的回报。</p><p>$R_t$ 是理论标签值，需要计算出来</p><p>如果使用时序差分目标，则 </p><script type="math/tex; mode=display">R_t = r_t + \gamma V_\phi(s_{t+1})</script><p>如果使用GAE目标，则 <script type="math/tex">R_t = \hat{A}^{\text{GAE}}_t + V'_\phi(s_t)</script> </p><h3 id="RLHF">1.3.3. RLHF</h3><h4 id="构建奖励模型">1.3.3.1. 构建奖励模型</h4><ol><li><p>收集偏好数据，对模型回答的多个数据，评估排序，不是打分</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121011621.png" alt="image-20250530121011621"></p></li><li><p>损失函数，max(做好回答- 最差回答)</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121104796.png" alt="image-20250530121104796"></p></li><li><p>只获取最后一个token的评估</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121333003.png" alt="image-20250530121333003"></p></li><li><p>使用KL散度，避免与模型的差距较大</p></li><li><p>使用PPO函数，计算历史和未来的奖励</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121812769.png" alt="image-20250530121812769"></p></li></ol><h4 id="总体流程">1.3.3.2. 总体流程</h4><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121856320.png" alt="image-20250530121856320"></p><p><strong>RLHF实开源链接</strong>：</p><ol><li><code>https://github.com/huggingface/trl</code></li><li><code>https://github.com/OpenRLHF/OpenRLHF</code></li><li><code>https://github.com/hiyouga/LLaMA-Factory</code></li><li><code>https://github.com/WangRongsheng/awesome-LLM-resourses</code></li></ol><h3 id="RLAIF">1.3.4. RLAIF</h3><p>模型选择结果，替换人类标记，同时需要使用双重判断</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530170449430.png" alt="image-20250530170449430"></p><ol><li>D-RLAIF，模型直接打分，不再训练</li><li>常规RLAIF，先训练奖励模型</li></ol><h3 id="DPO算法-direct-perference-option">1.3.5. DPO算法(direct perference option)</h3><p>由偏好学习的数据，直接用于模型的训练</p><p>目标：</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530171548497.png" alt="image-20250530171548497"></p><p>损失函数：</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530171648715.png" alt="image-20250530171648715"></p><h3 id="SPLN（self-play">1.3.6. SPLN（self play)</h3><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173051126.png" alt="image-20250530173051126"></p><h4 id="main-play">1.3.6.1. main play</h4><p>区分某个回答是人类的回答</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173622192.png" alt="最大化人类回答与机器回答的区别"></p><h4 id="opponent-play">1.3.6.2. opponent play</h4><p>不需要区分人类回答和LLM回答</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173750170.png" alt="image-20250530173750170"></p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173801712.png" alt="image-20250530173801712"></p><p>得到优化目标</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173906352.png" alt="image-20250530173906352"></p><p>最大化生成与真实标注的信息与自己生成信息的差距</p><h3 id="self-rewarding">1.3.7. self-rewarding</h3><p>模型给自己提供奖励，在优化回复的功能是，优化模型指令遵循与打分的能力</p><ol><li>初始模型，具有基础能力</li><li>种子数据集，少量数据集，<ol><li>指令微调，只有回答</li><li>评估微调，回答排序</li></ol></li></ol><p>模型使用种子数据集，生成新的prompt，模型自己打分，取最高分与最低分，加入数据集，用于DPO训练。</p><p>不断迭代</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530175457392.png" alt="image-20250530175457392"></p><h2 id="微调">1.4. 微调</h2><ol><li>增加参数微调</li></ol><ol><li>软提示微调： 在embeding之前怎么增加soft prompt，训练优化增加的soft prompt ，模型的参数固定<ol><li>且不同的任务可以使用不同的soft prompt</li></ol></li><li>适配器微调： 在模型前后增加一个层</li></ol><ol><li><p>选择性微调</p><ol><li>学习优化哪些参数，优化任务结果，使用正则化，惩罚修改较多的参数<img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530182117984.png" alt="image-20250530182117984"></li><li>指定修改部分参数</li></ol></li><li><p>重参数微调，调整子空间参数</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530182340311.png" alt="image-20250530182340311"></p><ol><li><p>Low-Rank Adaption(LoRA)，优化两个低秩矩阵，与原矩阵组合</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530182623192.png" alt="image-20250530182623192"></p></li><li><p>学习模型的缩放因子</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530183050936.png" alt="image-20250530183050936"></p></li></ol></li></ol><h2 id="知识蒸馏">1.5. 知识蒸馏</h2><p>教师模型将知识提取出来，学生模型学习其中内容</p><h3 id="基于特征的知识">1.5.1. 基于特征的知识</h3><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250523201806237.png" alt="image-20250523201806237"></p><h4 id="多个教师教学">1.5.1.1. 多个教师教学</h4><h3 id="基于关系的知识">1.5.2. 基于关系的知识</h3><h2 id="模型剪枝">1.6. 模型剪枝</h2><p>删除权重小于一定阈值的连接或神经元节点，获得更加稀疏的矩阵</p><h3 id="结构化剪枝">1.6.1. 结构化剪枝</h3><p>参数从起点到重点，图中有相连，则保留</p><h1 id="简短">2. 简短</h1><h2 id="预训练-1">2.1. 预训练</h2><h3 id="词表化">2.1.1. 词表化</h3><h4 id="BBPE-byte-level-BPE">2.1.1.1. BBPE(byte-level BPE)</h4><p>单词量过大时，每一个单词一个token使用，词表空间较大</p><p>单词使用字节标识，采用unicode 编码作为最小颗粒度，将单词切割为字节token</p><p>例如，对于不存在的字节“待”，使用3个字节标识(中文在unicode编码中使用三个字节表示)</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-4cd433a354233d03bc2aad15745a7285_1440w.jpg" alt="img"></p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-66a59222fb083b240eac861eb026c73c_r.jpg" alt="img"></p><h3 id="模型预训练">2.1.2. 模型预训练</h3><p>采用无监督学习，学习输入文本的特征，学习语言语法</p><p>输入一堆文本，让模型做 Next Token Prediction 的任务，学习基础语法，初步学习。</p><p>类似与transfomer论文中的对语言的输入学习输出。</p><h2 id="指令微调-1">2.2. 指令微调</h2><p>GPT-3只能完成续写任务,InstructGPT可以根据指令回答问题</p><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-a7a8e7aed0750d189f792b19e8272dfe_r.jpg" alt="img"></p><h3 id="监督学习">2.2.1. 监督学习</h3><p>给出指令问题，并给出答案，监督模型学习</p><ol><li><p>指令: 在面试中如何回答这个问题？</p><ol><li>输入:当你在车里独处时，你会想些什么？</li><li>输出:如果是在晚上，我通常会考虑我今天所取得的进步，如果是在早上，我会思考如何做到最好。我也会尝试练习感恩和活在当下的状态，以避免分心驾驶。</li></ol></li><li><p>指令: 按人口对这些国家进行排名。</p><ol><li>输入:巴西，中国，美国，日本，加拿大，澳大利亚</li><li>输出:中国，美国，巴西，日本，加拿大，澳大利亚</li></ol></li></ol><p>模型学习指令回答方式，准确的响应问题</p><h2 id="奖励模型">2.3. 奖励模型</h2><p>之前，模型只是简单学习了语言学习的内容，但是并不知到语言中是否正确，或者错误，这将导致预训练模型中原先「错误」或「有害」的知识没能在 SFT 数据中被纠正。</p><h3 id="利用偏序对训练奖励模型">2.3.1. 利用偏序对训练奖励模型</h3><p><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-29f8de16d921303fc6ee5c338fc68800_1440w.jpg" alt="img"></p><p>偏序对是指：不直接为每一个样本直接打分，而是标注这些样本的好坏顺序，标准A比B好多少，而不是具体的分数。</p><blockquote><p>直接打分：A句子（5分），B句子（3分）<br>偏序对标注：A &gt; B</p></blockquote><p>模型通过尝试最大化「好句子得分和坏句子得分之间的分差」，从而学会自动给每一个句子判分。</p><h2 id="强化学习（Reinforcement-Learning，PPO）">2.4. 强化学习（Reinforcement Learning，PPO）</h2><p>进行Reward model之后，需要使用RM进化模型</p><ol><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编码器 - 解码器</title>
      <link href="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/"/>
      <url>/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="编码器-解码器">1. 编码器 - 解码器</h1><h2 id="基本框架">1.1. 基本框架</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">class Encoder(nn.Module):    def __init__(self, **kwargs):        super(Encoder, self).__init__(**kwargs)    def forward(self, X, *args):        raise NotImplementedError  # 占位符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">class Decoder(nn.Module):    def __init__(self, **kwargs):        super(Decoder, self).__init__(**kwargs)        def init_state(self, enc_outputs, *args):        raise NotImplementedError    def forward(self, X, *args):        raise NotImplementedError  # 占位符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">class EncoderDecoder(nn.Module):    &quot;&quot;&quot;编码器-解码器架构的基类&quot;&quot;&quot;    def __init__(self, encoder, decoder, **kwargs):        super(EncoderDecoder, self).__init__(**kwargs)        self.encoder &#x3D; encoder        self.decoder &#x3D; decoder    def forward(self, enc_X, dec_X, *args):        enc_outputs &#x3D; self.encoder(enc_X, *args)        # 编码器的输出最为解码器输入的一部分        dec_state &#x3D; self.decoder.init_state(enc_outputs, *args)        return self.decoder(dec_X, dec_state)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="seq2seq">1.2. seq2seq</h2><p><img src="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/image-20250424214252355.png" alt="image-20250424214252355"></p><h3 id="编码器">1.2.1. 编码器</h3><ol><li>将序列(时间步)的数字转换为张量</li><li>通过rnn输出上下文变量C，隐状态</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class Seq2SeqEncoder(nn.Encoder):def __init__(self, vocab_size, embed_size, num_hiddens, num_layers, dropout &#x3D; 0, **kwargs):        super(Seq2SeqEncoder, self).__init__(**kwargs)       &#39;&#39;&#39;编码层       将数字编码为为向量       输入(batch_size, feature) 输出(batch_size, feature, embed_size)       &#39;&#39;&#39;        self.embeding &#x3D; nn.Embedding(vocab_size, embed_size)        self.rnn &#x3D; nn.gru(embed_size, nn_hiddens, num_layers, dropout &#x3D; dropout)    def forward(self, X, *args):        # 输出&#39;X&#39;的形状：(batch_size,num_steps,embed_size)        X &#x3D; self.embedding(X)        # 在循环神经网络模型中，第一个轴对应于时间步        X &#x3D; X.permute(1, 0, 2)        # 如果未提及状态，则默认为0        output, state &#x3D; self.rnn(X)        # output的形状:(num_steps,batch_size,num_hiddens)        # state的形状:(num_layers,batch_size,num_hiddens)        return output, state<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解码器">1.2.2. 解码器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">class Seq2SeqDecoder(nn.Decoder):    def __init__(self, vocab_size, embed_size, num_hiddens, num_layers,                 dropout&#x3D;0, **kwargs):        super(Seq2SeqDecoder, self).__init__(**kwargs)        self.embedding &#x3D; nn.Embedding(vocab_size, embed_size)        self.rnn &#x3D; nn.GRU(embed_size + num_hiddens, num_hiddens, num_layers,                          dropout&#x3D;dropout)        self.dense &#x3D; nn.Linear(num_hiddens, vocab_size)   def init_state(self, enc_outputs, *args):    # 用隐状态来初始化上下文变量    return enc_outputs[1]        def forward(self, X, state):        X &#x3D; self.embedding(X).permute(1, 0,2 )                # state[-1] 的维度为(layer_num , batch_size, num_hiddens)        context &#x3D; state[-1].repeat(X.shape[0], 1, 1)        # 在feature上增加了元素C        X_and_c &#x3D; torch.cat(X, context, 2)        output, state &#x3D; self.rnn(X_and_context, state)        output &#x3D; self.dense(output).permute(1, 0, 2)        return output , state        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练过程">1.2.3. 训练过程</h3><p>不同点：</p><ol><li>定义使用MarkedSoftmaxCELoss 损失函数</li><li>塑造解码器输入，原序列前增加bos, 删除eos</li></ol><p>相同点：</p><ol><li>apply(init(m)), optimizer , loss,  net.train()</li><li>分epoch, 分批量，optimizer.zero_gred(),  net(x) , l = loss(y_hat, Y), l.backward(),  grad_clipping(net, theta), optimizer.step()</li></ol><h3 id="预测过程">1.2.4. 预测过程</h3><ol><li><p>net.eval()</p></li><li><p>准备序列数据</p></li><li><p>对src编码，得到dec_state=context</p></li><li><p>传入一个<bos>数据</bos></p></li><li><p>dec_X 的维度为(1, 1)</p><p>​    Y 的维度为(1, 1, embed_size)</p><p>​    每一次更新dec_X, 更新了decodor的隐藏状态</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">def predict_seq2seq(net, src_sentence, src_vocab, tgt_vocab, num_steps,                   device, save_attention_weights&#x3D;False):   &quot;&quot;&quot;序列到序列模型的预测&quot;&quot;&quot;   # 在预测时将net设置为评估模式   net.eval()   &#39;&#39;&#39;   准备序列数据   &#39;&#39;&#39;   src_tokens &#x3D; src_vocab[src_sentence.lower().split(&#39; &#39;)] + [       src_vocab[&#39;&lt;eos&gt;&#39;]]   enc_valid_len &#x3D; torch.tensor([len(src_tokens)], device&#x3D;device)   src_tokens &#x3D; d2l.truncate_pad(src_tokens, num_steps, src_vocab[&#39;&lt;pad&gt;&#39;])   # 添加批量轴   enc_X &#x3D; torch.unsqueeze(       torch.tensor(src_tokens, dtype&#x3D;torch.long, device&#x3D;device), dim&#x3D;0)   &#39;&#39;&#39;   对src编码，得到dec_state&#x3D;context   &#39;&#39;&#39;   enc_outputs &#x3D; net.encoder(enc_X, enc_valid_len)   dec_state &#x3D; net.decoder.init_state(enc_outputs, enc_valid_len)   &#39;&#39;&#39;    传入一个&lt;bos&gt;数据   &#39;&#39;&#39;   dec_X &#x3D; torch.unsqueeze(torch.tensor(       [tgt_vocab[&#39;&lt;bos&gt;&#39;]], dtype&#x3D;torch.long, device&#x3D;device), dim&#x3D;0)   output_seq, attention_weight_seq &#x3D; [], []   for _ in range(num_steps):       &#39;&#39;&#39;        dec_X 的维度为(1, 1), 每一次传入上一个时间步中预测出的值       Y 的维度为(1, 1, embed_size)       每一次更新dec_X, 更新了decodor的隐藏状态       &#39;&#39;&#39;       Y, dec_state &#x3D; net.decoder(dec_X, dec_state)       # 我们使用具有预测最高可能性的词元，作为解码器在下一时间步的输入       dec_X &#x3D; Y.argmax(dim&#x3D;2)       pred &#x3D; dec_X.squeeze(dim&#x3D;0).type(torch.int32).item()       # 保存注意力权重（稍后讨论）       if save_attention_weights:           attention_weight_seq.append(net.decoder.attention_weights)       # 一旦序列结束词元被预测，输出序列的生成就完成了       if pred &#x3D;&#x3D; tgt_vocab[&#39;&lt;eos&gt;&#39;]:           break       output_seq.append(pred)   return &#39; &#39;.join(tgt_vocab.to_tokens(output_seq)), attention_weight_seq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <strong>这里可以优化使用束搜索</strong></p><h3 id="损失函数">1.2.5. 损失函数</h3><ol><li><p>计算pred与label的Loss</p></li><li><p>计算序列的掩码</p></li><li><p>将loss与序列掩码相乘</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">class MaskedSoftmaxCELoss(nn.CrossEntropyLoss):    &quot;&quot;&quot;带遮蔽的softmax交叉熵损失函数&quot;&quot;&quot;    # pred的形状：(batch_size,num_steps,vocab_size)    # label的形状：(batch_size,num_steps)    # valid_len的形状：(batch_size,)    def forward(self, pred, label, valid_len):        weights &#x3D; torch.ones_like(label)        weights &#x3D; sequence_mask(weights, valid_len)  # 掩码        self.reduction&#x3D;&#39;none&#39;        unweighted_loss &#x3D; super(MaskedSoftmaxCELoss, self).forward(            pred.permute(0, 2, 1), label)        weighted_loss &#x3D; (unweighted_loss * weights).mean(dim&#x3D;1)        return weighted_loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="掩码">1.2.5.1. 掩码</h4><ol><li>生成序列掩码，可以使用arrange&lt; valid_len获取</li><li>将所有掩码位置 置为0</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">def sequence_mask(X, valid_len, value&#x3D;0):    &quot;&quot;&quot;在序列中屏蔽不相关的项&quot;&quot;&quot;    maxlen &#x3D; X.size(1)    # 生成掩码    print(torch.arange((maxlen), dtype&#x3D;torch.float32,                        device&#x3D;X.device)[None, :] )    print(valid_len[:,None])    &#39;&#39;&#39;    (none,:)是在dim &#x3D; 0上创建一个&#x3D;1 的维度    广播机制后mask &#x3D; (batch_size, time_stem)    &#39;&#39;&#39;    mask &#x3D; torch.arange((maxlen), dtype&#x3D;torch.float32,                        device&#x3D;X.device)[None, :] &lt; valid_len[:, None]    print(mask)    X[~mask] &#x3D; value    return X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="预测序列评估">1.2.5.2. 预测序列评估</h4><p>我们将BLEU定义为：</p><script type="math/tex; mode=display">\exp\left(\min\left(0, 1 - \frac{\mathrm{len}_{\text{label}}}{\mathrm{len}_{\text{pred}}}\right)\right) \prod_{n=1}^k p_n^{1/2^n},</script><h1 id="注意力机制">2. 注意力机制</h1><p>查询值query, 键值对（key, value)，每一个key 对应一个query</p><p>注意力权重计算的是query对key的关注程度，attention(query_num , key_num)，每一行是当前查询对所有键的注意力，然后与query计算，得到每一个查询对query的注意力结果</p><script type="math/tex; mode=display">attention_weight = \alpha(query, key)\\f(x) = attention_weight * query</script><h2 id="常见机制">2.1. 常见机制</h2><h3 id="掩蔽注意力机制操作">2.1.1. 掩蔽注意力机制操作</h3><p>对键值中不需要的部分掩蔽为0，具体操作是</p><ol><li>将atterntion_weight(batch, query, key) 中的key维度数据通过掩码，转换为较小数</li><li>使用softMax，较小数转换为0，key对应此处的权重就是0了</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">def masked_softmax(X, valid_len):    &#39;&#39;&#39;    X：attention_weigth &#x3D; (batch_size, query , key)    valid_len 不同批次掩蔽的长度，&#x3D;（batch_size) 或 (batch_size, key)    &#39;&#39;&#39;    if valid_lens is None:        return nn.functional.softmax(X, dim&#x3D;-1)    else:        shape &#x3D; X.shape        if valid_lens.dim() &#x3D;&#x3D; 1:            valid_lens &#x3D; torch.repeat_interleave(valid_len, shape[1])        else:            valid_lens &#x3D; valid_lens.reshape(-1)        &#39;&#39;&#39;        sequence_mash: 将param1中的第1维度按照 valid_lens的长度掩蔽，大于的掩蔽为values        &#39;&#39;&#39;        X &#x3D; sequence_mask(X.reshape(-1, shape[-1]), valid_lens,values&#x3D;&#x3D; -1e6)        return nn.functional.softmax(X.shape[shape], dim &#x3D;-1) # 对掩蔽维度归一化      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加性注意力">2.1.2. 加性注意力</h3><p>键，查询有时是矢量<strong>（不同长度）</strong>转换为相同长度的矢量</p><script type="math/tex; mode=display">a(\mathbf q, \mathbf k) = \mathbf w_v^\top \text{tanh}(\mathbf W_q\mathbf q + \mathbf W_k \mathbf k) \in \mathbb{R}</script><ol><li>线性层操作，query=&gt;(batch ,query, hidden_num),key=&gt;(batch ,key hidden_num)</li><li>得到注意力矩阵，query=&gt;(batch ,query,1 hidden_num)，key=&gt;(batch ,1，key hidden_num)， query+key =&gt;query=&gt;(batch ,query,key, hidden_num)</li><li>$W_t$ 是线性层(hidden_num, 1)， 移除最后一个维度，得到attention_weight =(batch ,query,key,)</li><li>使用掩蔽注意力，对key上无用的权重屏蔽</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class AddictiveAttention(nn.Module):    def __init__(self, key_size, query_size, num_hiddens, dropout, **kwargs):        super(AddictiveAttention, self).__init__(**kwargs)        self.W_k&#x3D; nn.Linear(key_size, num_hiddens)        self.W_q &#x3D; nn.Linear(query_size, num_hiddens)        self.W_v &#x3D; nn.Linear(num_hiddens, 1)        self.dropout&#x3D; nn.Dropout(dropout)            def forward(selk, query, key ,values, valid_lens):        query, key &#x3D; W_q(query), W_k(key)                attention &#x3D; query.unsquence(2) + key.unsquence(1)        attention &#x3D; nn.tanh(attention)        attention &#x3D; W_v(attention)                self.atterntion_weight &#x3D; masked_softmax(attention, valid_lens)        return torch.bmm(self.attention_weight, values)        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="点积注意力">2.1.3. 点积注意力</h3><p>计算效率高，但是要求query, key具有相同的张量长度，权重函数：</p><script type="math/tex; mode=display">a(\mathbf q, \mathbf k) = \mathbf{q}^\top \mathbf{k}  /\sqrt{d}</script><p>方差缩放，防止梯度消失</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">class DotProductAttention(nn.Module):    def __init__(self, dropout, **kwargs):        super(DotProductAttention, self).__init__(**kwargs)        self.dropout &#x3D; nn.Dropout(dropout)           def forward(self, query, key,values, valid_lens):    # attention(batch_size, query_size, key_size)        attention &#x3D; torch.bmm(query, key.transpose(1,2))&#x2F; math.sqrt(d)        self.attention_weight &#x3D; masked_softmax(attention, valid_len)        # 输出(batch_size, query_size, feature_size)        return torch.bmm(self.dropout(self.attention_weight), values)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多头注意力">2.1.4. 多头注意力</h3><p>使用多个结构一样，参数不一样的注意力去学习不同的知识</p><p><img src="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/image-20250516113430112.png" alt="image-20250516113430112"></p><p>将键值对分为多个子空间，每个注意力机制学习一个子空间的特征，得到H组的注意力权重，然后将注意力权重通过线性层汇聚</p><p><img src="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/image-20250425155705305.png" alt="image-20250425155705305"></p><p>常规思路：</p><ol><li>将query, key, values映射到子空间，使用不同的Linear映射</li><li>将不同头的注意力结果合并在一起，在feature维度上合并</li><li>再通过一个Linear线性层，连接所有head</li></ol><p>并行思路</p><ol><li>将query,key, values映射到完整空间，然后将完整空间查分成子空间，head与batch组成一个伪batch</li><li>再将子空间的数据通过点积注意力</li><li>将head从batch中分离出来，与feature合并，效果与非并行情况相同</li><li>最后通过线性层</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class MultiHeadAttention(nn.Module):    def __init__(self, key_size, query_size, value_size, num_hiddens, num_head, dropout, bias &#x3D; false, **kwargs):       self.num_head &#x3D; head        self.attention &#x3D; d2l.DotProductAttention(dropout)        self.W_k &#x3D; nn.Linear(key_size, num_hiddens)        self.W_q &#x3D; nn.Linear(query_size, num_hiddens)        self.W_v &#x3D; nn.Linear(value_size, num_hiddens)        self.W_o &#x3D; nn.Linear(num_hiddens, num_hiddens) # 全连接层            def forward(self, query ,key ,values, valid_lens):               # 转换为(batch_size* head, key&#x2F;query , num_hidden&#x2F;head)        query &#x3D; transpose(self.W_q(query),  self.head_num)        keys &#x3D; transpose_qkv(self.W_k(keys), self.num_heads)        values &#x3D; transpose_qkv(self.W_v(values), self.num_heads)                # 将掩码扩展为batch*head        if valid_len is not None:            valid_lens &#x3D; torch.repeat_interleave(            valid_lens, repeats &#x3D; self.num_heads , dim &#x3D;0)                    output &#x3D; self.attention(query, key ,value, valid_len)                output_concat&#x3D;transpose_output(output, self.num_heads)        return self.W_o(output_concat)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="附录">3. 附录</h1><h2 id="BLEU">3.1. BLEU</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">def bleu(pred_seq, label_seq, k):  #@save    &quot;&quot;&quot;计算BLEU&quot;&quot;&quot;    pred_tokens, label_tokens &#x3D; pred_seq.split(&#39; &#39;), label_seq.split(&#39; &#39;)    len_pred, len_label &#x3D; len(pred_tokens), len(label_tokens)    score &#x3D; math.exp(min(0, 1 - len_label &#x2F; len_pred))    for n in range(1, k + 1):        num_matches, label_subs &#x3D; 0, collections.defaultdict(int)        for i in range(len_label - n + 1):            label_subs[&#39; &#39;.join(label_tokens[i: i + n])] +&#x3D; 1        for i in range(len_pred - n + 1):            if label_subs[&#39; &#39;.join(pred_tokens[i: i + n])] &gt; 0:                num_matches +&#x3D; 1                label_subs[&#39; &#39;.join(pred_tokens[i: i + n])] -&#x3D; 1        score *&#x3D; math.pow(num_matches &#x2F; (len_pred - n + 1), math.pow(0.5, n))    return score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研要求</title>
      <link href="/2025/05/24/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E8%A6%81%E6%B1%82/"/>
      <url>/2025/05/24/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E8%A6%81%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="666f19edf31fd0a9299bd24b6c55edd81b03edafdf451be7b61631d3fdd8c021"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 保研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 保研 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/05/24/java/web%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="web课程学习内容">1. web课程学习内容</h1><ol><li>mvc格式<ol><li>javabean周期</li><li>javabean 与mvc组成</li></ol></li><li>jsp中使用数据库<ol><li>mysql建立</li><li>JDBC连接，解决乱码</li><li>查询</li><li>用结果集操作数据库表</li><li>预处理语句</li></ol></li><li>jsp的文件操作<ol><li>FILE类</li><li>文件操作流</li><li>文件上床下载</li></ol></li><li>xml<ol><li>xml基本结构</li><li>dom 解析器</li><li>sax解析器</li><li>xml与css显示</li></ol></li><li>化妆品销售</li></ol><h1 id="web">2. web</h1><p><img src="C:/Users/34999/AppData/Roaming/Typora/typora-user-images/image-20250522212412585.png" alt="流程"></p><p><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250522212605681.png" alt="学习流程"></p><h2 id="html">2.1. html</h2><h3 id="标题">2.1.1. 标题</h3><p>h1</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>https://www.cctv.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 央视网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>span : 没有语义的标签</p><p><span style="color: gray;"> </span></p><h3 id="css引入">2.1.2. css引入</h3><ol><li>行内样式，写在标签的style属性中</li><li>内部样式：写在<style> 标签中</li><li>外部，<code>&lt;link rel= &quot;stylesheet&quot; href= &quot;style.css&quot;&gt;</code></li></ol><p><span style="color: gray;"> today </span> </p><style>     span{        color: red;    }</style> <h4 id="颜色">2.1.2.1. 颜色</h4><div class="table-container"><table><thead><tr><th>种类</th><th>使用方法</th></tr></thead><tbody><tr><td>关键字</td><td>red</td></tr><tr><td>rgb</td><td>rag(red ,green ,blue)</td></tr><tr><td>rgba</td><td>rgba(red, green, blue ,透明度)</td></tr><tr><td>十六进制</td><td>#</td></tr></tbody></table></div><h4 id="css选择器">2.1.2.2. css选择器</h4><div class="table-container"><table><thead><tr><th style="text-align:left">选择器类型</th><th style="text-align:left">写法（语法）</th><th style="text-align:left">示例</th><th style="text-align:left">示例说明</th></tr></thead><tbody><tr><td style="text-align:left"><strong>元素选择器</strong></td><td style="text-align:left"><code>元素名称 &#123; ... &#125;</code></td><td style="text-align:left"><code>h1 &#123; ... &#125;</code></td><td style="text-align:left">选择页面上所有的 <code>&lt;h1&gt;</code> 标签</td></tr><tr><td style="text-align:left"><strong>类选择器</strong></td><td style="text-align:left"><code>.class属性值 &#123; ... &#125;</code></td><td style="text-align:left"><code>.cls &#123; ... &#125;</code></td><td style="text-align:left">选择页面上所有 <code>class</code> 属性为 <code>cls</code> 的标签</td></tr><tr><td style="text-align:left"><strong>ID 选择器</strong></td><td style="text-align:left"><code>#id属性值 &#123; ... &#125;</code></td><td style="text-align:left"><code>#hid &#123; ... &#125;</code></td><td style="text-align:left">选择页面上 <code>id</code> 属性为 <code>hid</code> 的标签</td></tr><tr><td style="text-align:left"><strong>分组选择器</strong></td><td style="text-align:left"><code>选择器1, 选择器2 &#123; ... &#125;</code></td><td style="text-align:left"><code>h1, h2 &#123; ... &#125;</code></td><td style="text-align:left">选择页面上所有的 <code>&lt;h1&gt;</code> 和 <code>&lt;h2&gt;</code> 标签</td></tr><tr><td style="text-align:left"><strong>属性选择器</strong></td><td style="text-align:left"><code>元素名称[属性] &#123; ... &#125;</code></td><td style="text-align:left"><code>input[type] &#123; ... &#125;</code></td><td style="text-align:left">选择页面上所有有 <code>type</code> 属性的 <code>&lt;input&gt;</code> 标签</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><code>元素名称[属性名=&quot;值&quot;] &#123; ... &#125;</code></td><td style="text-align:left"><code>input[type=&quot;text&quot;] &#123; ... &#125;</code></td><td style="text-align:left">选择页面上 <code>type</code> 属性为 <code>text</code> 的 <code>&lt;input&gt;</code> 标签</td></tr><tr><td style="text-align:left"><strong>后代选择器</strong></td><td style="text-align:left"><code>元素1 元素2 &#123; ... &#125;</code> （注意有空格）</td><td style="text-align:left"><code>form input &#123; ... &#125;</code></td><td style="text-align:left">选择 <code>&lt;form&gt;</code> 标签内的所有 <code>&lt;input&gt;</code> 标签</td></tr></tbody></table></div><h3 id="video">2.1.3. video</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">width</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>width = 80% 长度占父类框架的占比<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>音频</p><pre class="line-numbers language-none"><code class="language-none">&lt;audio src&#x3D;“ ” controls&gt;&lt;&#x2F;audio&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="段落">2.1.3.1. 段落</h4><p></p><p>hello &lt;/p&gt;</p><p></p><h4 id="加粗">2.1.3.2. 加粗</h4><p><b> hello </b></p><p><strong> hello </strong></p><p><u> / <ins> 下划线</ins></u></p><p><i> / <em> 倾斜</em></i></p><p><s> / <del> 删除线</del></s></p><h4 id="特殊符号">2.1.3.3. 特殊符号</h4><div class="table-container"><table><thead><tr><th>&nbsp;</th><th>空格</th></tr></thead><tbody><tr><td>&lt;</td><td>&lt;</td></tr><tr><td>&gt;</td><td>&gt;</td></tr></tbody></table></div><h3 id="盒子模型">2.1.4. 盒子模型</h3><p><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250524155210755.png" alt="image-20250524155210755"></p><div class="table-container"><table><thead><tr><th>div</th><th>span</th></tr></thead><tbody><tr><td>一行显示一个</td><td>一行显示多个</td></tr><tr><td>宽度默认为父元素的宽度</td><td></td></tr><tr><td>可以设置height, weigth</td></tr></tbody></table></div><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>  <span class="token comment">/* 定义的内容展示区域的宽度 */</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 20px 20px 20px 20px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 20px 20px 20px 20px <span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 20px solid #100000<span class="token punctuation">;</span> <span class="token comment">/*宽度 边框 颜色*/</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>    <span class="token comment">/* content-box 内容盒子； bordor-box 边框盒子        /* 当前的盒子居中显示 */</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 10px auto<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对齐方式">2.1.4.1. 对齐方式</h4><p>弹性布局flex</p><div class="table-container"><table><thead><tr><th>属性</th><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>display</td><td>flex</td><td></td></tr><tr><td>flex-direction</td><td>row x<br><br>column y轴</td><td></td></tr><tr><td>justify-content</td><td>1. flex-start 从头开始<br>flex-end<br>center<br>space-around    均分<br> space-between  两边贴边</td></tr></tbody></table></div><h3 id="表格">2.1.5. 表格</h3><div class="table-container"><table><thead><tr><th>&lt;table</th><th>整个表格</th><th>border: 边框宽度<br>width: 表格的宽度<br><br>cellspacing: 单元之间的空间</th></tr></thead><tbody><tr><td>&lt;tr</td><td>表格的行</td><td></td></tr><tr><td>&lt;td/th</td><td>表格的列</td><td>&lt;th是表头，&lt;td 是普通表格</td></tr></tbody></table></div><h3 id="表单">2.1.6. 表单</h3><p>提升与表格的交互，并在input前增加标识</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>    用户名:    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>input<ol><li>text</li><li>password</li><li>radio 单选按钮，相当与select option</li><li>checkbox</li></ol></li><li>select</li><li>textarea, 更大的文本框输入</li></ol><h2 id="javascript">2.2. javascript</h2><p>js代码最后放置在body的末尾</p><p>结尾的;可有可无</p><ol><li><p>内部脚本</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>外部脚本</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>/.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>在<body> 内外，都可以被执行</body></p><h3 id="定义变量">2.2.1. 定义变量</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//定义变量</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//声明常量</span><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">;</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回a的类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 弹窗</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//控制台</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Body标签中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="拼接字符串">2.2.1.1. 拼接字符串</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">let</span> b<span class="token operator">=</span> <span class="token string">'tom'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello my name is'</span><span class="token operator">+</span>b<span class="token operator">+</span> <span class="token string">'year is'</span><span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用'+字符串拼接</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> yeas is</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// 使用` $&#123;&#125;模板字符串输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数function">2.2.2. 函数function</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 匿名函数</span><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象">2.2.3. 对象</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span> <span class="token string">'刚满十八岁'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//简化为</span>    <span class="token function">sing</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="json">2.2.3.1. json</h4><p>JavaScript 对象标记法（使用js对象语法书写的文本）</p><p>不同的是，所有的变量名使用<code>“”</code>引起</p><div class="table-container"><table><thead><tr><th>JSON.stringify()</th><th>js对象-&gt; json 变量的字符串</th></tr></thead><tbody><tr><td>JSON.parse()</td><td>json -&gt; 没有字符串的变量</td></tr></tbody></table></div><h3 id="DOM">2.2.4. DOM</h3><p>文档对象模型： 将标记语言的各个组成部分封装为对应的对象；</p><div class="table-container"><table><thead><tr><th>Document</th><th>整个文档</th></tr></thead><tbody><tr><td>Element</td><td>元素对象</td></tr><tr><td>Attribute</td><td>属性对象</td></tr><tr><td>Text</td><td>文本内容的对象</td></tr><tr><td>Comment</td><td>注释形成的对象</td></tr></tbody></table></div><p><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250525161235954.png" alt="image-20250525161235954"></p><h4 id="获取对象">2.2.4.1. 获取对象</h4><p>选择器对应css中的选择器<a href="#css选择器">css选择器</a> </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取匹配到的第一个元素</span>document<span class="token punctuation">.</span><span class="token function">querySelectorALL</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取所有匹配到的元素</span><span class="token comment">//得到的是一个节点集合，有长度，有索引</span><span class="token keyword">let</span> hs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>#title<span class="token punctuation">)</span><span class="token punctuation">;</span>hs<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'修改后的内容'</span> <span class="token punctuation">;</span> <span class="token comment">// innerHTML代表文本内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间监听">2.2.5. 时间监听</h3><p>语法： 事件源.addEvenListener(‘事件类型’, 事件触发执行的函数);</p><ul><li>事件源：document中对象</li><li>事件类型： 点击click</li><li>事件处理的函数：要做什么事</li></ul><h4 id="事件类型">2.2.5.1. 事件类型</h4><div class="table-container"><table><thead><tr><th>鼠标</th><th>click</th></tr></thead><tbody><tr><td></td><td>mouseenter</td></tr><tr><td></td><td>mouseleave</td></tr><tr><td>键盘</td><td>keydown 按键触发</td></tr><tr><td></td><td>keyup 按键抬起</td></tr><tr><td>焦点</td><td>focus 进入输入框</td></tr><tr><td></td><td>blur 离开输入框</td></tr><tr><td>表单事件</td><td>input 输入时触发</td></tr><tr><td></td><td>submit 提交时触发</td></tr></tbody></table></div><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>func1<span class="token punctuation">,</span> func2<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./utils.js"</span> <span class="token comment">// js导入函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>utils.js中的内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> functtion <span class="token function">printLog</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用export标记</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html导入时候，需表明类型是模块化的js</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/1.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="vue">2.3. vue</h2><p>Vue是一款构建用户界面的渐进式的JavaScript框架</p><p>构建用户界面：针对数据构建</p><p>渐进式：可以只使用一部分</p><p><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250525174822695.png" alt="image-20250525174822695"></p><ol><li>准备<ol><li>引入Vue模块 </li><li>创建Vue程序的应用示例，控制视图的元素</li><li>准备元素，被Vue控制</li></ol></li><li>数据驱动<ol><li>准备数据</li><li>通过差值表达式渲染界面</li></ol></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>        &#123;&#123;message&#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span><span class="token punctuation">&#123;</span> creatApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/vue@3/dist/vue.esm-browser.js"</span><span class="token punctuation">;</span>    <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"hello vue"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用mount接管app</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vue指令">2.3.1. vue指令</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-xxx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="v-for遍历">2.3.1.1. v-for遍历</h4><p>key的值避免复用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in items<span class="token punctuation">"</span></span> <span class="token attr-name">:</span> <span class="token attr-name">key</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> &#123;&#123;item&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>v-bind</strong>：动态为html绑定属性值，src, style,alt</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token attr-name">,</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;item.src&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">:alt</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;item.alt&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- vlind:属性，然后对应v-for中的内容// : 简写形式 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>v-if/v-show</strong>:控制元素的显示/隐藏</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--v-if：根据条件判断结果，判断结果输出/隐藏，不一定创建不频繁使用紧跟v-else-if, v-elsev-show: 根据条件结果，调用css 中display格式，分别用来显示和隐藏，会创建频繁使用“”之间的结果判断--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>e.job==1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 帮助人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>v-model</strong>: 双向绑定元素与vue data，绑定输入的内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchForm.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>v-on</strong>： 为html绑定事件</p><p>引号中绑定的是函数动作，可以简化为@click</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在vue中定义方法</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const app &#x3D; createApp(&#123;data()&#123;return&#123;        &#125;&#125;,    method:&#123;        handle()&#123;        &#125;    &#125;&#125;).mount(&quot;#app&quot;)&#x2F;&#x2F; 使用时需要将button的类型设置为button<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="致谢">3. 致谢</h1><p><a href="https://www.bilibili.com/video/BV1yGydYEE3H?spm_id_from=333.788.videopod.episodes&amp;vd_source=8f246175d50731783a1ab3dafac1f6ab&amp;p=2">02.Web前端开发初识_哔哩哔哩_bilibili</a></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>transformer</title>
      <link href="/2025/05/24/deeplearn/Transformer/"/>
      <url>/2025/05/24/deeplearn/Transformer/</url>
      
        <content type="html"><![CDATA[<h1 id="Transformer">1. Transformer</h1><h2 id="模型基本框架">1.1. 模型基本框架</h2><p><img src="/2025/05/24/deeplearn/Transformer/image-20250425173522602.png" alt="image-20250425173522602"></p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516114212148.png" alt="image-20250516114212148"></p><h2 id="编码器">1.2. 编码器</h2><ol><li>通过嵌入层</li><li>对位置进行编码</li><li>经过编码器层<ol><li>注意力层：<ol><li>注意力机制</li><li>残差+ 规范化层</li></ol></li><li>前馈网络<ol><li>前馈网络</li><li>残差+ 规范化层</li></ol></li></ol></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class TransformerEncoder(d2l.Encoder):    def __init__(self, vocab_size, key_size, query_size, value_size,                 num_hiddens, norm_shape, ffn_num_input, ffn_num_hiddens,                 num_heads, num_layers, dropout, use_bias&#x3D;False, **kwargs):        super(TransformerEncoder, self).__init__(**kwargs)        self.num_hiddens &#x3D; num_hiddens                self.embedding &#x3D; nn.Embedding(vocab_size, num_hiddens)        self.pos_encoding &#x3D; d2l.PositionalEncoding(num_hiddens, dropout)        self.blks &#x3D; nn.Sequential()        for i in range(num_layers):            self.blks.add_module(&quot;block&quot;+str(i),                EncoderBlock(key_size, query_size, value_size, num_hiddens,                             norm_shape, ffn_num_input, ffn_num_hiddens,                             num_heads, dropout, use_bias))                def forward(self, X, valid_lens, *args):        # 因为位置编码值在-1和1之间，        # 因此嵌入值乘以嵌入维度的平方根进行缩放，        # 然后再与位置编码相加。        X &#x3D; self.pos_encoding(self.embedding(X) * math.sqrt(self.num_hiddens))        self.attention_weights &#x3D; [None] * len(self.blks)        for i, blk in enumerate(self.blks):            X &#x3D; blk(X, valid_lens)            self.attention_weights[                i] &#x3D; blk.attention.attention.attention_weights        return X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EncoderBlock层">1.2.1. EncoderBlock层</h3><p><img src="/2025/05/24/deeplearn/Transformer/image-20250425175900742.png" alt="image-20250425175900742"></p><ol><li>注意力层：<ol><li>注意力机制</li><li>残差+ 规范化层</li></ol></li><li>前馈网络<ol><li>前馈网络</li><li>残差+ 规范化层</li></ol></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class EncoderBlock(nn.Module):    &quot;&quot;&quot;Transformer编码器块&quot;&quot;&quot;    def __init__(self, key_size, query_size, value_size, num_hiddens,                     norm_shape, ffn_num_input, ffn_num_hiddens, num_heads,                     dropout, use_bias&#x3D;False, **kwargs):    super(EncoderBlock, self).__init__(**kwargs)        self.attention &#x3D; d2l.MultiHeadAttention(            key_size, query_size, value_size, num_hiddens, num_heads, dropout,            use_bias)        self.addnorm1 &#x3D; AddNorm(norm_shape, dropout)        self.ffn &#x3D; PositionWiseFFN(            ffn_num_input, ffn_num_hiddens, num_hiddens)        self.addnorm2 &#x3D; AddNorm(norm_shape, dropout)    def forward(self, X, valid_lens):        Y &#x3D; self.addnorm1(X, self.attention(X, X, X, valid_lens))        return self.addnorm2(Y, self.ffn(Y))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多头注意力机制">1.2.1.1. 多头注意力机制</h4><p>将键值对分为多个子空间，每个注意力机制学习一个子空间的特征，得到H组的注意力权重，然后将注意力权重通过线性层汇聚</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250425155705305.png" alt="image-20250425155705305"></p><p>常规思路：</p><ol><li>将query, key, values映射到子空间，使用不同的Linear映射</li><li>将不同头的注意力结果合并在一起，在feature维度上合并</li><li>再通过一个Linear线性层，连接所有head</li></ol><p>并行思路</p><ol><li>将query,key, values映射到完整空间，然后将完整空间查分成子空间，head与batch组成一个伪batch</li><li>再将子空间的数据通过点积注意力</li><li>将head从batch中分离出来，与feature合并，效果与非并行情况相同</li><li>最后通过线性层</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class MultiHeadAttention(nn.Module):    def __init__(self, key_size, query_size, value_size, num_hiddens, num_head, dropout, bias &#x3D; false, **kwargs):       self.num_head &#x3D; head        self.attention &#x3D; d2l.DotProductAttention(dropout)        self.W_k &#x3D; nn.Linear(key_size, num_hiddens)        self.W_q &#x3D; nn.Linear(query_size, num_hiddens)        self.W_v &#x3D; nn.Linear(value_size, num_hiddens)        self.W_o &#x3D; nn.Linear(num_hiddens, num_hiddens) # 全连接层            def forward(self, query ,key ,values, valid_lens):               # 转换为(batch_size* head, key&#x2F;query , num_hidden&#x2F;head)        query &#x3D; transpose(self.W_q(query),  self.head_num)        keys &#x3D; transpose_qkv(self.W_k(keys), self.num_heads)        values &#x3D; transpose_qkv(self.W_v(values), self.num_heads)                # 将掩码扩展为batch*head        if valid_len is not None:            valid_lens &#x3D; torch.repeat_interleave(            valid_lens, repeats &#x3D; self.num_heads , dim &#x3D;0)                    output &#x3D; self.attention(query, key ,value, valid_len)                output_concat&#x3D;transpose_output(output, self.num_heads)        # 输出为（batch_size, query_size, hidden_size)        return self.W_o(output_concat)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="残差-规范化层">1.2.1.2. 残差+规范化层</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">class AddNorm(nn.Module):    &quot;&quot;&quot;残差连接后进行层规范化&quot;&quot;&quot;    def __init__(self, normalized_shape, dropout, **kwargs):        super(AddNorm, self).__init__(**kwargs)        self.dropout &#x3D; nn.Dropout(dropout)        self.ln &#x3D; nn.LayerNorm(normalized_shape)    def forward(self, X, Y):        # Y+X 残差网络        # Ln 层归一化        return self.ln(self.dropout(Y) + X)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="残差层">1.2.1.2.1. 残差层</h5><p>训练是模型训练出F(X) = f(x)- X</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250423225436209.png" alt="image-20250423225436209"></p><p>对应模型中 支线 为x ，前馈神经网络中预测是f(X), 相加后得到准确预测的F(X)</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250425181440459.png" alt="image-20250425181440459"></p><h5 id="批量归一化层BatchNorm">1.2.1.2.2. 批量归一化层BatchNorm</h5><script type="math/tex; mode=display">\mathrm{BN}(\mathbf{x}) = \boldsymbol{\gamma} \odot \frac{\mathbf{x} - \hat{\boldsymbol{\mu}}_\mathcal{B}}{\hat{\boldsymbol{\sigma}}_\mathcal{B}} + \boldsymbol{\beta}.</script><p>对特征维度进行归一化,$\gamma、\beta$ 是拉伸和偏移参数</p><ol><li><p>对特征维度进行归一化</p><pre class="line-numbers language-none"><code class="language-none">mean &#x3D; X.mean(dim &#x3D; 0, keepdim &#x3D; True)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>卷积层</p><ol><li>对通道维度进行归一化</li></ol></li><li><p>训练状态下使用小批次的样本均值与方差，测试状态使用的移动平均估算的均值与方差</p></li></ol><h3 id="前馈网络层">1.2.2. 前馈网络层</h3><p>这里的线性层可以使用1*1cnn网络代替，代替结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">class PositionWiseFFN(nn.Module):    &quot;&quot;&quot;基于位置的前馈网络&quot;&quot;&quot;    def __init__(self, ffn_num_input, ffn_num_hiddens, ffn_num_outputs,                 **kwargs):        super(PositionWiseFFN, self).__init__(**kwargs)        self.dense1 &#x3D; nn.Linear(ffn_num_input, ffn_num_hiddens)        self.relu &#x3D; nn.ReLU()        self.dense2 &#x3D; nn.Linear(ffn_num_hiddens, ffn_num_outputs)    def forward(self, X):        return self.dense2(self.relu(self.dense1(X)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解码器">1.3. 解码器</h2><p><img src="/2025/05/24/deeplearn/Transformer/image-20250425181429443.png" alt="image-20250425181429443"></p><ol><li>通过嵌入层</li><li>对位置进行编码</li><li>经过解码器层<ol><li>第一个注意力层 ， query ,key, value,都是解码器输入</li><li>第二个注意力层， query 来自解码器输入 ， key, values来自编码器输入<ol><li>交叉注意力机制中，<strong>key,value</strong>来源使用一致，这里key,values来自编码器输入</li></ol></li><li>前馈神经网络</li></ol></li><li>全连接层</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class TransformerDecoder(d2l.AttentionDecoder):    def __init__(self, vocab_size, key_size, query_size, value_size,                 num_hiddens, norm_shape, ffn_num_input, ffn_num_hiddens,                 num_heads, num_layers, dropout, **kwargs):        super(TransformerDecoder, self).__init__(**kwargs)        self.num_hiddens &#x3D; num_hiddens        self.num_layers &#x3D; num_layers        self.embedding &#x3D; nn.Embedding(vocab_size, num_hiddens)        self.pos_encoding &#x3D; d2l.PositionalEncoding(num_hiddens, dropout)        self.blks &#x3D; nn.Sequential()        for i in range(num_layers):            self.blks.add_module(&quot;block&quot;+str(i),                DecoderBlock(key_size, query_size, value_size, num_hiddens,                             norm_shape, ffn_num_input, ffn_num_hiddens,                             num_heads, dropout, i))        self.dense &#x3D; nn.Linear(num_hiddens, vocab_size)            def init_state(self, enc_outputs, enc_valid_lens, *args):        return [enc_outputs, enc_valid_lens, [None] * self.num_layers]    X &#x3D; self.pos_encoding(self.embedding(X) * math.sqrt(self.num_hiddens))        self._attention_weights &#x3D; [[None] * len(self.blks) for _ in range (2)]        for i, blk in enumerate(self.blks):            X, state &#x3D; blk(X, state)            # 解码器自注意力权重            self._attention_weights[0][                i] &#x3D; blk.attention1.attention.attention_weights            # “编码器－解码器”自注意力权重            self._attention_weights[1][                i] &#x3D; blk.attention2.attention.attention_weights        return self.dense(X), state            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解码器层">1.3.1. 解码器层</h3><p>经过解码器层</p><ol><li>第一个注意力层 ， query ,key, value,都是解码器输入</li><li>第二个注意力层， query 来自解码器输入 ， key, values来自编码器输入</li><li>前馈神经网络</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class DecoderBlock(nn.Module):    &quot;&quot;&quot;解码器中第i个块&quot;&quot;&quot;    def __init__(self, key_size, query_size, value_size, num_hiddens,                 norm_shape, ffn_num_input, ffn_num_hiddens, num_heads,                 dropout, i, **kwargs):        super(DecoderBlock, self).__init__(**kwargs)        self.i &#x3D; i        self.attention1 &#x3D; d2l.MultiHeadAttention(            key_size, query_size, value_size, num_hiddens, num_heads, dropout)        self.addnorm1 &#x3D; AddNorm(norm_shape, dropout)        self.attention2 &#x3D; d2l.MultiHeadAttention(            key_size, query_size, value_size, num_hiddens, num_heads, dropout)        self.addnorm2 &#x3D; AddNorm(norm_shape, dropout)        self.ffn &#x3D; PositionWiseFFN(ffn_num_input, ffn_num_hiddens,                                   num_hiddens)        self.addnorm3 &#x3D; AddNorm(norm_shape, dropout)def forward(self, X, state):        enc_outputs, enc_valid_lens &#x3D; state[0], state[1]        # 训练阶段，输出序列的所有词元都在同一时间处理，        # 因此state[2][self.i]初始化为None。        # 预测阶段，输出序列是通过词元一个接着一个解码的，        # 因此state[2][self.i]包含着直到当前时间步第i个块解码的输出表示        if state[2][self.i] is None:            # 使用当前输入的数据进行预测            key_values &#x3D; X        else:            &#39;&#39;&#39;            state[2] 中存放者上一个时间步，留下的已经每个块之前计算好的key_value            # 加上y_t之前的数据一起预测            &#39;&#39;&#39;            key_values &#x3D; torch.cat((state[2][self.i], X), axis&#x3D;1)        state[2][self.i] &#x3D; key_values        if self.training:            batch_size, num_steps, _ &#x3D; X.shape            # dec_valid_lens的开头:(batch_size,num_steps),            # 其中每一行是[1,2,...,num_steps]            dec_valid_lens &#x3D; torch.arange(                1, num_steps + 1, device&#x3D;X.device).repeat(batch_size, 1)        else:            dec_valid_lens &#x3D; None        # 自注意力        X2 &#x3D; self.attention1(X, key_values, key_values, dec_valid_lens)        Y &#x3D; self.addnorm1(X, X2)        # 编码器－解码器注意力。        # enc_outputs的开头:(batch_size,num_steps,num_hiddens)        Y2 &#x3D; self.attention2(Y, enc_outputs, enc_outputs, enc_valid_lens)        Z &#x3D; self.addnorm2(Y, Y2)        return self.addnorm3(Z, self.ffn(Z)), state        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在transformer结构中，query与key权重对values值进行查询，values值是编码器的输入，为什么就可以查询到解码器想要的结果呢？比如，编码器编码我是李华，解码器对I 查询 我，ji</p><h2 id="优化">1.4. 优化</h2><p>Adam， 自动调整学习率</p><p>warm up 和逆平方根衰减</p><h2 id="BERT">1.5. BERT</h2><h3 id="预训练（无监督-自监督）">1.5.1. 预训练（无监督/自监督）</h3><p>自监督</p><ol><li>完形填空</li><li>预测下一句</li></ol><h3 id="微调（有监督）">1.5.2. 微调（有监督）</h3><p>需要根据下游任务添加输出层，添加的层需要重新训练</p><ol><li>两个句子分类</li><li>单个句子的分类</li><li>问答任务<ol><li>找到答案正确的文本位置</li></ol></li><li>命名实体位置标记<ol><li>标记实体位置（begin ,inside ,O（非实体））</li></ol></li></ol><h2 id="Decoder-only">1.6. Decoder_only</h2><p><strong>优点</strong>：</p><ol><li>Decoder-only的注意力矩阵始终是满秩，表达能力更强</li><li>不会浪费Encoder的参数，输入可以直接作用与decoder</li></ol><h3 id="预训练">1.6.1. 预训练</h3><p>test prediction 预测文本</p><h3 id="微调">1.6.2. 微调</h3><p>test prediction + task classfication 的损失相加</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516123238590.png" alt="task"></p><h2 id="GPT-2">1.7. GPT-2</h2><p><strong>无需微调，预训练的模型就可以解决下游任务</strong></p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516123552285.png" alt="image-20250516123552285"></p><p>Zero-shot, One-shot, Few-shot</p><p>使用任务提示（prompt）和少量示例直接输入</p><h3 id="lay-N放在模块前">1.7.1. lay N放在模块前</h3><ol><li>尺度定律： 模型的大小与Loss线性拟合</li><li>涌现能力： 大模型效果迅速提升</li></ol><h2 id="GPT">1.8. GPT</h2><p>参数数量增多，需要减少计算量。</p><h3 id="sparse-attention">1.8.1. sparse attention</h3><p>减少attention的计算量，只关注临近部分和前面的部分权重</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516124911687.png" alt="image-20250516124911687"></p><h3 id="chatgpt">1.8.2. chatgpt</h3><p>增加人类反馈强化学习（RLHF) ,与人互动</p><h2 id="LLAMA">1.9. LLAMA</h2><h3 id="swiGLU">1.9.1. swiGLU</h3><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516155254082.png" alt="image-20250516155254082"></p><p>使用swi激活函数，同时使用门控机制（GLU)，选择性激活函数</p><p>优点： swish激活函数更平滑，GLU实现选择性激活</p><h3 id="GQA-grouped-query-attention">1.9.2. GQA-grouped-query attention</h3><p>减少k,v的head 数量，query共享重复的k,v，减少参数</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516155516226.png" alt="image-20250516155516226"></p><h3 id="layer-norm-变体">1.9.3. layer norm 变体</h3><p>RMSNorm:均方根归一化</p><p><strong>取出平移，只保留缩放</strong></p><p>优点：计算简单</p><p><img src="/2025/05/24/deeplearn/Transformer/image-20250516160128424.png" alt="image-20250516160128424"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp+servlet</title>
      <link href="/2025/05/24/java/jsp/"/>
      <url>/2025/05/24/java/jsp/</url>
      
        <content type="html"><![CDATA[<h1 id="java基础">1. java基础</h1><h2 id="修饰符">1.1. 修饰符</h2><h3 id="final">1.1.1. final</h3><h1 id="servlet">2. servlet</h1><h2 id="http协议">2.1. http协议</h2><pre class="line-numbers language-http" data-language="http"><code class="language-http">http:&#x2F;&#x2F;ip:端口&#x2F;资源路径?name&#x3D; eg : http:&#x2F;&#x2F;127.0.0.1&#x2F;myweb&#x2F;servlet?name &#x3D; zhangsan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>支持客户/服务端</li><li>支持get ,post请求</li><li>传输内容，类型可以有Content-Type</li><li>http无连接，http1.1之后支持可持续连接</li><li>http无状态信息</li></ol><h3 id="请求和responce">2.1.1. 请求和responce</h3><h4 id="请求request">2.1.1.1. 请求request</h4><ol><li><p>请求行</p><blockquote><p>get的请求放在请求行中</p></blockquote><p>method Request_url http_version 换行</p></li><li><p>请求头</p><ol><li>键值对</li></ol></li><li><p>请求体</p><ol><li>get没有请求行</li></ol></li></ol><h4 id="response">2.1.1.2. response</h4><ol><li>状态行</li><li>响应头</li><li>响应正文</li></ol><h3 id="消息头">2.1.2. 消息头</h3><ul><li><em>referer</em>: 请求前来位置</li><li><em>Location</em>: 请求达到位置</li><li><em>refresh</em>: 自动跳转时间</li></ul><h2 id="服务器">2.2. 服务器</h2><p>接受客户端的请求,调用程序处理,返回程序数据</p><h3 id="tomcat目录">2.2.1. tomcat目录</h3><ul><li>bin: 启动或关闭的配置文件</li><li>conf: 配置servel端口号等信息文件</li><li>lib: 运行时使用的java包</li><li>logs :日志文件</li><li>webapps: web应用</li><li>works: 工作目录</li></ul><h3 id="使用idea-集成tomcat">2.2.2. 使用idea 集成tomcat</h3><h2 id="servlet实现">2.3. servlet实现</h2><ol><li>创建java类</li><li>实现servlet规范, 继承HttpServlet类</li><li>重写service 方法,用于处理请求</li><li>设置注释,指定访问方法的路径</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Webservlet(name &#x3D; , value &#x3D;&#123; , &#125;) value可以指定多个名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="servlet执行流程">2.3.1. servlet执行流程</h3><ol><li>从请求头中找到主机</li><li>访问请求头中的资源,第一次访问创建一个对象</li><li>将参数交给req, 通过resp响应参数</li></ol><h3 id="三种访问方式">2.3.2. 三种访问方式</h3><p>继承方式</p><p>HttpServlet -&gt; GenericServlet &gt; Servlet</p><h3 id="service-doPost-doGet">2.3.3. service ,doPost, doGet</h3><p>调用service 实际上调用doPost, doGet</p><blockquote><p>不知道post 或 get ,写service</p></blockquote><h3 id="servlet生命周期">2.3.4. servlet生命周期</h3><p>请求访问servlet容器时候,检查容器中是否存在该资源对象,没有调用init方法,第二次访问时,调用service.程序停止售,调用destory方法</p><p><img src="/2025/05/24/java/jsp/image-20250503221820723.png" alt="image-20250503221820723"></p><h3 id="HttpServletRequest-获取请求">2.3.5. HttpServletRequest 获取请求</h3><p>HTTp的请求都封装在Req对象中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">String value &#x3D; Req.getParameter(&quot;&quot;) 获取名称对应的值String[] values &#x3D; Req.getParameterValues(&quot;&quot;) 同一个name存在多个值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="请求乱码问题">2.3.5.1. 请求乱码问题</h4><p>乱码原因: request 封装时候,使用的ISO ,不支持中文编码</p><p>get 不会乱码，post有乱码</p><p>解决办法: 设置请求的编码方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">req.sertCharacterEncoding(&quot;utf-8&quot;) &#x2F;&#x2F; 只值对post代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">String name &#x3D; new String(req.getParameter(name)).getBytes(&#39;ISO-8859-1&#39;, charameter &#x3D; &#39;utf-8&#39;) &#x2F;&#x2F;适用于所有get 与post<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="请求转发">2.3.5.2. 请求转发</h4><ol><li>服务器行为</li><li>前台地址栏不发生改变,只产生输出</li><li>只有一个请求</li><li>req, resp对象共享</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">req.getRequestDispatcher(&quot;跳转网址&quot;).forward(req, resp);req.setAttribute(String name , Object value);&#x2F;&#x2F;设置新的对象值req.getAttribute(String name);req.removeAttribute(String name);&#x2F;&#x2F;删除对象值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HttpServletResponse-响应请求">2.3.6. HttpServletResponse 响应请求</h3><p>使用流输出方法响应</p><ol><li>getWritter() 字符输出流(输出字符串)</li><li>getOutputStream(), 字节输出流(输出任意数据)</li></ol><p><strong>两种流不能同时使用</strong></p><h4 id="响应乱码">2.3.6.1. 响应乱码</h4><p><strong>原因</strong>： 服务端和客户端的编码格式一致</p><p>解决办法：同时设置服务端和客户端的编码，保证编码格式一致</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 设置服务端的编码格式response.setCharacterEncoding(&quot;UTF-8&quot;);&#x2F;&#x2F; 设置客户端代码response.setHeader(&quot;content_type&quot;, &quot;text&#x2F;html; charset&#x3D; UTF-8&quot;);&#x2F;&#x2F; 同时设置编码格式response.setContentType(&quot;text&#x2F;html; charset&#x3D; UTF-8&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="客户端重定向">2.3.6.2. 客户端重定向</h4><p>服务端指导客户端的行为</p><blockquote><p>地址栏发生改变，写入location</p><p>服务器接受location</p></blockquote><p>有两次请求</p><blockquote><p>请求对象不共享</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">response.sendRedirect(&quot;s05&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="请求转发与重定向的区别">2.3.6.3. 请求转发与重定向的区别</h4><div class="table-container"><table><thead><tr><th>请求转发</th><th>重定向</th></tr></thead><tbody><tr><td>一次请求，request数据共享</td><td>两次请求</td></tr><tr><td>服务端跳转</td><td>客户端跳转</td></tr><tr><td>绝对地址到当前项目中，不能向外跳转</td><td>可以向域外跳转</td></tr></tbody></table></div><h2 id="Cookie对象">2.4. Cookie对象</h2><p>浏览器中将数据存放在客户端中，在客户端中处理数据，减少网络传输与数据库查询</p><p>由服务器写入客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 服务器写入Cookie 到客户端中，客户端保存CookieCookie cookie &#x3D; new Cookie(name &#x3D; &quot;a&quot;, value &#x3D; &#39;b&#39;);response.addCookie(cookie)&#x2F;&#x2F; 获取CookieCookie[] conkie &#x3D; request.getCookies(); &#x2F;&#x2F; 获取客户端路径下所有的Cookie对象&#x2F;&#x2F;将Cookie 的name 与需要查找的Cookie作比较<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置对象存在时间">2.4.1. 设置对象存在时间</h3><p>设置maxAge存活时间 ，从创建Cookie对象开始</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">cookie.setMaxAge(time);&#x2F;*1. 负整数，只在浏览器内存中存在2. 正整数，保存磁盘对应的时间，关闭后依旧计数，时间为s3. 0 ： 删除这个Cookie*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意点">2.4.2. 注意点</h3><ol><li>Cookie 只在当前浏览器中有效，不跨浏览器和及其</li><li>Cookie不支持存放中文，使用时候需要编码/解码</li><li>新的同名name Cookie 将覆盖之前的Cookie</li><li>Cookie的存储数量有上限，Cookie的大小有限，4KB左右</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">String name &#x3D; &quot;陈龙&quot;;&#x2F;&#x2F; 中文通过URLEncoder.encode()编码name &#x3D; URLEncoder.encoder(name);&#x2F;&#x2F; 使用时，需URLDecoder.decoder()解码name &#x3D; URLDecoder.decoder(name);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Cookie的访问路径">2.4.3. Cookie的访问路径</h3><ol><li>当前浏览器下如何项目任何资源都可以获取Cookie</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">cookie.setPath(&quot;&#x2F;&quot;);&#x2F;&#x2F; 默认本项目cookie.setPaht(&quot;&#x2F;s02&quot;);&#x2F;&#x2F; 设置指定站点名cookie.setPath(&quot;&#x2F;sc03&quot;);&#x2F;&#x2F; 指定项目的指定资源访问cookiecookie.setPaht(&quot;s03&#x2F;co1&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有访问的路径包括  <em>cookie的路径</em> 时， 能够获取这个cookie</p><h2 id="HttpSession-对象">2.5. HttpSession 对象</h2><p>属于服务器对象， 标识一次对话，确定是否为一个用户的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">HttpSession session &#x3D; request.getSession(); &#x2F;&#x2F; 如session 对象存在，则获取 ；否则第一次创建对象<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一次请求到了服务器，标识启动了会话，客户端向服务器传递JSESSIONID的cookie，用于标识服务器中对应的session， 如果有，则共享数据，没有创建sesion,同时给客户端创建JSESSIONID的cookie.</p><h3 id="设置域对象">2.5.1. 设置域对象</h3><p>HttpSession 与 request 的区别</p><p>重定向： 只要session会话不是小，session一直共享数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">HttpSession session &#x3D; request.getSession();session.setAttribute(&quot;name&quot;, &quot;hello&quot;);session.getAttribute(&quot;name&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="session-对象的销毁">2.5.2. session 对象的销毁</h3><p>默认是30min， 一旦有操作，session 重新计时</p><blockquote><p>在conf/web.xml中修改session_config中timeout,单位为1min</p></blockquote><h4 id="设置到期时间">2.5.2.1. 设置到期时间</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">session.setMaxInactiveInterval(15); &#x2F;&#x2F;单位为s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="立即销毁">2.5.2.2. 立即销毁</h4><p>退出登录，立马销毁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">session.invalidate(); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="关闭浏览器，Cookie对象销毁">2.5.2.3. 关闭浏览器，Cookie对象销毁</h4><p>session 需要JSESSIONID ，JSESSIONID默认在浏览器内存中有效，Cookie消失后，session 结束</p><h4 id="关闭服务器失效">2.5.2.4. 关闭服务器失效</h4><h2 id="ServletContext对象">2.6. ServletContext对象</h2><h3 id="获取对象">2.6.1. 获取对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">ServletContext servletContext1 &#x3D; request.getServletContext();&#x2F;&#x2F; session对象获取ServletContext servletContext2 &#x3D; request.getSession().getServletContext();&#x2F;&#x2F; ServletConfig对象中获取getServletConfig().getServletContext();&#x2F;&#x2F; servlet中直接获取ServletContext servletContext4 &#x3D; getServletContext();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取服务器信息String serverInfo &#x3D; request.getServletContext().getServerInfo();&#x2F;&#x2F; 获取项目路径String realPath &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;&quot;);&#x2F;&#x2F; 从根目录下获取<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Servlet-域对象">2.6.2. Servlet 域对象</h3><ol><li><p>request 域对象</p><p>再一次请求中有效，请求转发有效，重定向无效</p></li><li><p>session 对象</p><p>一次会话中有效，session销毁后无效</p></li><li><p>servletContext 对象</p><p>服务器中始终有效</p></li></ol><h2 id="文件上传下载">2.7. 文件上传下载</h2><h3 id="上传">2.7.1. 上传</h3><h4 id="前端实现">2.7.1.1. 前端实现</h4><ol><li>准备表单form</li><li>设置表单的请求类型 ‘method =”post”</li><li>设置表达类型为文件上传类型 enctype = “multipart/form-data”</li><li>设置文件提交的地址 active = “提交路径”</li><li>准备表单元素<ol><li>普通的表单项 type = “text”</li><li>文件项 type = “file”</li><li>设置表单元素的name值</li></ol></li></ol><h4 id="后端实现">2.7.1.2. 后端实现</h4><p>添加注解<code>MultipartConfig</code>, servlet将 multipart/form-data 的post封装在part对象中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@MultipartConfigPart part &#x3D; request.getPart(&quot;name&quot;);String fileName &#x3D; part.getSubmittedFileName(); &#x2F;&#x2F; 获取提交文件名称；String realPath &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;&quot;);&#x2F;&#x2F; 需要自行指定保存路径String saveName&#x3D; fileName+&#39;&#x2F;&#39;+ realPath;part.write(saveName);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件下载">2.7.2. 文件下载</h3><h4 id="超链接下载">2.7.2.1. 超链接下载</h4><ol><li>没有download属性<ol><li>浏览器识别文件，跳转显示，否则下载</li></ol></li><li>有download属性<ol><li>指定属性值，为下载名</li></ol></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>download/text.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 图片文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>download/text.png<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token punctuation">></span></span>图片文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="后端下载">2.7.2.2. 后端下载</h4><ol><li><p>设置request和response的编码类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">request.setCharacterEncoding(&quot;UTF-8&quot;);response.setContentType(&quot;text&#x2F;html; charset &#x3D; UTF-8&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取文件名称</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">String fileName &#x3D; request.getParameter(&quot;name&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断文件名称是否为空</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 文件名&#x3D; null 或者全是空格if(fileName &#x3D;&#x3D; null || &quot;&quot;.equals(fileName.trim()))&#123;    response.getWritter().write(&quot;输出提示信息&quot;);    response.getWritter().close();&#x2F;&#x2F; 关闭信息&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将路径转换为file 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">String path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;download&#x2F;&quot;);File file &#x3D; new File(path+ fileName);&#x2F;&#x2F; 检查文件存在&#x2F;&#x2F;是否为文件夹if(file.exist()&amp;&amp; file.isFile())&#123;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出</p><ol><li><p>设置响应类型， 浏览器无法解析的MINE类型 “application/x-msdoanload”, “application/octet-stream”</p><ol><li>response.setContentType(“application/x-msdoanload”)</li></ol></li><li><p>设置响应头，下载文件筐和文件名</p><ol><li>response.setHeader(“Content_Dispostion”, ”attachment;filename=”+ fileName);</li></ol></li><li><p>输出流和输入流</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">InputStream in &#x3D;  new FileInputSream(file);ServletOutputSream out &#x3D; response.getOutputStream();byte[] bytes &#x3D; new byte[1024];int len &#x3D; 0;while((len &#x3D; in.read(byte))!&#x3D; -1)&#123;    out.write(bytes,0 , len);&#125;&#x2F;&#x2F; 关闭资源out.close();in.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简便实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response.setContentType(&quot;application&#x2F;octet-stream&quot;); &#x2F;&#x2F; 设置为通用的二进制流类型response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;\&quot;&quot; + fileName + &quot;\&quot;&quot;); &#x2F;&#x2F; 提示浏览器下载文件&#x2F;&#x2F; 使用 try-with-resources 确保流被正确关闭try (InputStream in &#x3D; new FileInputStream(file);    ServletOutputStream out &#x3D; response.getOutputStream()) &#123;    &#x2F;&#x2F; 使用 transferTo 方法进行拷贝 (Java 9+)    in.transferTo(out);    &#x2F;&#x2F; 注意：在 try-with-resources 块结束时，in 和 out 会自动关闭&#125; catch (IOException e) &#123;    &#x2F;&#x2F; 处理可能的 IO 异常    e.printStackTrace(); &#x2F;&#x2F; 在实际应用中应该记录日志或返回更友好的错误信息    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, &quot;文件读取或传输失败&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> servlet </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/24/%E6%9D%82%E9%A1%B9/done_url/"/>
      <url>/2025/05/24/%E6%9D%82%E9%A1%B9/done_url/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="a24a8e9923adc73f8734bf4d54f0f52b3c7aaa3a7338ff83a9c89288fcfbac47">4fbb2435fd3b6574fd4f7bd145822884a098a0719a519100aebfe4c2fde4f5a0b742ef9261977b6e3a9b4c3e50829a470e690778866554ee319777c27fc8d372d445bc34ce0815f9126ccbdb184b46eb9e78f871294fe7a7b3c58ac1b6ef19add18dffb744ecb7e98080827e173e466133046651ab70423598fdf7baa145809b0518243cc3962fdae97283ff57888465c714936a21428f2916ad58ae556cf843e238c090515ef0788309dfeb4e0498a241956600f541f1c73efefcd8ec48ead5c300cc0ed4ecbca27dab55c2812181460d9903a118ea2bad531f7c16baa52070a963405f115aa1a627350322077063a4d16a5329d1730ad9d02d7f1a2c69eb527582f766e9f3895abe85a22307c109713a5ace6ff0bbcb82c6f3a1fab5bd640e122571f1d47d85ae85daaeeefab990396dcbf359d1eb4e2d31e6fe8880a10965774b467c14506c40fcd79e01abee68ec6a2d00140e8ae05e3aae3583ce3ee4f2c253967667cce2caaea5850866eaa4fba018799e6f820aa77708ca20439af2a8b93a29bb2aec22273169ef05804893beefa0d2303e520a2d39276e1d51a7f0247cbf6cb79e16a6095c10d7910789e3bda26ac3da96bf0ffdc0143f1f4c3b2d7442f2a4d2d2b6e44a1281840ab6768dd63d49158a36d3ee50b58ea42f29317ed36a8b3ae92bc0cf8ce0b1d1bf4b0ebff7a9d11a5fbc5ecf5d3ee6a3eacce8d321d11fb8d999a97f03f301933f1ea88863a3b34e7885f1e5df5aa174ccf27923b9fdd3017b7f87ef19964125584dce4ff7cc68d26b5a88c4a94c23c8e56a559d778529382af5922b5c37bfaba45194a8ca28f4d9bd69d5110ed4b7957b06df2ff4edd079f42d4471941f5b30830b067b51e6860fea39e6d0b9f545135eed44b7b2bad6d6b1b1ce5a4de570dd82b1c2492a9e548369396c0a0a88069551f03614aa58ca1c6a11001217382c6890491f434b8bc37a80f20289abdeed80cddf4e2144039bd392a8033aee7d25019e004fea5c5bcfd2e5851d304cc5fdea93562b74bfad3ad2c65907786c0aea421151340b3a058616e0c5ff3d4d970f64b1cf1c62e2a891c694ef9f71db0e780ec875562eb3d833a18c036348dc94fb52c0a842ac0412dd4b4e352f51e9a6c4dbe0d2ee00f62f9f87b9a7b3aa507f4a9d8b10f6310c01df785d6daec05a9ea009f58cd17adf0e2ef732e10b0574c6e79245da6d12fca112fe6e97fa4ac509e81376a5fcb5f0bb410d2f287f6cc8be9ea90bc60f8bdadcaf16d4c44ded9a4d202ae7b6dc791f96064ee3e9b23313230fe8e21a3918e9c5b00ed80ea0205e951a77dc82e79d51c95b28608366516a27120f2e9441bb0bdfbb28070d95e7fc007fceec387f7a3efe93c41c15b3bdf7e72d6af8313b3ba6cc1a09939ac2f9344828edb728d9d0259b6ee592b409bba57fb84dfb50c82160775448498c56b39bb36b967083d6798434a2e413c4f2fd3da5277416fa7da231a9478866ee3514d31645d8ba8268aa7380935494f6d6b6055f0d19068f8cfa0dd18555d003404654467345027bb2d3bddf92c7d4fd46b556f099619628a86ce5d50f3bca6921ac111ec5acf9cb41ef48a2e28d68cdbfdc86a1464066eaead11c8df0c209d541170efa61175d74a8cdbf250a95f65857e396ab7ab87d37b962c1349496098b96d1d9a4e4d0fc0c69380c3b753ac8158095600eae6886fa61876eab302f60ba3203fdbe3159c9fd19ebb4e596bd250fc2421b47c111a9201d283563ead3eef58a33836e9fda5c87a2a25ec4fdc6da3fc2c51e94d7fb45f4a1ff6e48d69ea33924c75f62eef38961d3651cd9d4bf0c401075b1e3ad272ba613b63b8c62c71a71cd7a020f8605e8547ee32e01592e42abfbc73b02e5dc7c71a440fe0a4b429e489dd0ed6065412881512cff9ea3eff255fc2b09fee537da3a898c4e3abf31067187da0e8cfde71ae087bcad</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.3. 线性回归的简洁实现 — 动手学深度学习 2.0.0 documentation</title>
      <link href="/2025/05/24/deeplearn/250224~3.3.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250224~3.3.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="a80bb3eb76826986e9be24dee8e5181c361ff9121986ed17a89d9a87384de296">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0bae7cf1f108b131d8cf7cfef630bcb60e5f9fda98f86fd38c651c3f8f0abfbdd0a6088a45091d466dd95dfd8d18467540188f42059ed1cc831057111030ef596d7a614f06585145ef319391037d90987d0c676ce32e3c1101d40ded99ce2b6110aa7d1617a0427b35824bb44e9008c2d926888490de5c7adae48c8e16df7b4142b3d03deaa590521de9b27e4c8c08e4face896d68f97a72da6a5971850acb8e5cc2b49316fb6a5fcf9abe57809e2161a0a05f19c340e5a56820f98ffd6d8f56a8ecc2cf6d882ec0c7cced550c395ac46e7694624658bac82944bdf83fd79e1a0b175883b4c455eba8d2b15eed9d19896cf356b052eb347425793d49f284c49ddd544fd04a7ed01e3e777e9dc36c7941bb1650a6db84a9ca2a8d9c23e33ae04140520d1dc03ac272f183848db373d036d1ffccefe58a764df7edd65991c76f9656645d73ecefaff4dff9bcf48237f51b9eeb9a88815557e8705359ec0077e7a3f9cbf90636a062ba7dc09d24c83d6f461fafa8673da951f9f91d9ea2321b6347c3ddb08754c3734cd8055834549e12b11ce23fddeecafc8704efcf060176ceaf660d99c9bbf766b2e5bd6bd7cb5bf8fcd3fe63c28d963cc809b3f73757e847cd2695141dfc8a0a09ab7f742542f10efc76c310fd8cda133a1f8079dcc1f147ddba21962e67edff5134009412bbb276f4261e2a008d010f91d7548b9d87340b406ad5824d3de88ce9ee72d9d3cadd555f838d940180afe6f7c83dd44e732f5229bfe9da636cdaed5125e31577b6e105cb4673b0d79c1cf46215080365fae2d10c21eeab6a9f3ed0f508936afba3dd2345a431bda8d53b5e914fc8d242400fee2028cd7139363288840f98cd75e4f39f5902664639496564deb842e12e02ac5ad86ac90493b1697cc6b98a56fa276860d7cdfc9c12afd9438d2886cd5a8e7f24ab53a69880de0d075a9778f8087813ce4cb87d57cb2e605b8f6610ba1ddb4f77273bb4bf4d8a84a03d2f14d50b07a1ddee4ea1b65ccc381125d7ddb474e04363df94c1cbf1e6c853d8de47351907d524ed401bb71f13250f05e9122107bcdaae1f2eb4c5f6c1ea5fd786017c71e64d0831a0250fdfe08ee6e6413bf2ca17b21a3687f587ae52718137fff4539abdfca2ac1bd167fa34e30cf53f3843b2dcd42651d4e377b6b9967dea1d29c6f0b32e7c47de97a8a018d0325aa8a0be0c7ea19fd43c23226ed8f35223ee27d1673c653f2449f7f66b9ca4d24b7e9f3dca9449ba7fc8bb2d3adfcc05166764568b49bbd995d7165b27275e59e34ccb94aa351a16a4adb5d5352c60cbb3b307877880d0d6410e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.1. 线性回归 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250224~3.1.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250224~3.1.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="bb63b8b1991191306c637f011f7cc2a19e2605a44977449a19c5dc193e83c519">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0bae7cf1f108b131d8cf7cfef630bcb60e8a63cff3affdad4196ea3b3d2bb3e3df4b785af3711d3c158f5bf1dca36612a2abc35b220cac76193b063378b46e46291e7f1dbe5fc63dd677e29144448e05baf7b0efe49c2e6211996743342692845e057c2bf2d54bf3659be6b52ff08dd49dab586796b45fa28f77a8eb35ded65dc5bf42350813c8e587b42be2f83d258e992e4d1e55ed7d2324b32a2e9baf9ca5b4a655d945cbdb75162e78f683502b97b61f4cf8b2e7468addc63638d8594d8b53b261f4bcf9dbcab89b51df2b5009566017fbefc3bc8ee9ebb607586ddc09597ec538589dcd93b0668de491b723de06d4be542ee37e963e2f706f23b4ddcc926cb96c4b695d476954550ba6a7f04a3f746cb02bf1a20b84eb8af2c982b495982fe94245f04dd701817561d7cc8be00ecb7e67971674a9dc823f5e15c998cb55f14cbb5e9e98edd1bcd5ca2eb8b2d22587b2845b057b373ab21d56bb08569d66eabf0a3a2c27e8b407ef0592073a3bb40d5b46f8483b3e35e71583519e5214b6e7f613f2ea1026421d4398720ac3c43f985f0285b2e74cf2620345339dbccf4b558ac0132d12046263445f0b83b3a8d840254e67eb1f1d6f73f11ae71aa3d2d2e86bddd0fa524f6c21587f83f17d149003dcba5afd23e77c124d3755d9a623688986db6ee94c9c46a3dc422d6ee1f02519e20285e348de2c62f4e81877e2f12ed809b47edc0d607f0e0f79ce254a5a60dc34956651c84b5167cc0e166dfbccb95b3c8b950f417e064f51a966b1fa6cf4484734585c4589063579eb2d9b9843c5335093d563ad2375bead16784a824637f8ee0005a7fd6af3d2717677c4e9530b3d0a6dc1372488a3957a131689d41e24a5e2061748313fdaf19a0f63f568e20b484898f0099b44b9719f497144cb10c38523e8b906947c7c7905b74f1736655842e61343fd211b2920146a1a2ee6a9b97391314b414cb79dbcd782d38d6227542dd52080f68453785316e597fdc018b7b09a159dde01755bd35aaa72ea63f61e10231fce6935b93dfd4a55f920e461a8c31bdc6d25432e07d872293450831cfc462be7847ba895a978754daa1a9a5f0d266c8699830755cadbabaedaad2f5b821005e1f77fe3afbd0cf862e8b91668910fe17620accdf62b1d830a7612096f190bf555077e08416b73f82716d5f3f4778fc6a307cf6a39cd37cca7948331a41af502e01258c43102ea988aea0eca54981cac6ad3eaea7fc281013f8b61b510de2dd16c861b83b1021adb4766b41b3e0d4304ef2744b1d4267e32447783b6f8f8febeb80b23c4c9d8a7b60bb30c39edddbc1e3bf2c18818c54fcef32a302d4a78c5b7f15bcbe3710a415a6169d75bcdccdf4804674ad7647826e0fff380b88eb6556bae79ef3c99afa6d05c7cb41a0a3c08756cbbfb7c4bb5c8db52975e26e62dc1663829ae06e7e613844c28482e23d11871e627559e036f129d812c3470162e2e62e91afafcff45d7654753e7022329b7d9f9b6c5b87a2aac6d8dd4d6890016c798d31178ee39f152fce3b5b5451c9ef4d96350dfd3966ad98a8732c5e84cef881baa1cd7d12b1499abbb908d8c96649c99ac66e2aee3763e9d8de9aea8fe1c347781bb3c34c0722c1e554ea0258d9c1efa9ed80318c80b4b849635fdcc8027070e26591d0324817d0cb0921834d77faa1a119bee04300f5da46f3e424ecb39daa93c9df13b4f27554477f10c8ecdeb6215f0320fc712146ac33ab3b892eb5a2b82465ce815beafa6f2638b60594c1ba60d45122eae9cfb22badf41273f2daac3603ff2342a6ead57ea085df825ac8feca903fb9751877186b630856f301c505580f98795731ebfe8b1e1eaf8a2af1fa6966aadd3cf635f4568023fc5132fb9ccabd6d980b1f48786b1cc281323cfb0b80d4af1b42c8e87726291bf8c28cf22644bfb2df30b1efeea646a068db0a0e9e4af061a2896f204401a1bc593a8d479521e5f27501459e199cedcfbc14005d5a4c71a9f27b77a60c77e7b9aca1cc7aafac81feeb52d6bccfca441d7d5dff4863358170654ee74c9a8f4dea26fb762724901ba4885f0bc20b8c7679248ec3863fba68a119f2e41fa4217fa6adf19b6f0603f4a3786ebfeb75554b90632636fde1dad6a958e598b2354de49b0c8c1f0e7ab7eb5e6c4b27e19f4e940bc8b07b89e5f2e7a71c7ebcadf974808e61bf013310d00bd1670bc0799903e9beaf94b6f89147873e3b11c21a332d5abd510c158525dd4a4e1481016951bc9665cb9183f0ed5a7ec929b0da1a71efd7c55c8e65a75e4a5d498c0e7dbc8bca37bcfa3206d37122ea73857cdac6b72c88ccd8a9abdded0053914930f8be3d98b5a7fb2db8c8342b50604754d2eed9a940cedad1745ca0ba52c43d7279753d947b99116058609dfff3f26a80b6c478e6e749b668ce48e4e735e9b6818b99e7d37abc5775b1c2dab11203c746964f416304936d7b9eb8f8bae8947461748143b5e44c69f3631ddfe0b265690f80a0318b3a8feb07d3810aac798df424ed519d9a6f4ecf732b3f74b575e91a0def2868cf3792f86be63d732cf7bc9b044951d36ac20c3e44b78a6020085c9b30fd174974ef42912bb62dbca79c7201794c5ea7f8b099d9d90b0e9368d203898b04ca1e2a1947c50df31cccab8bd1535ade6cf689a635e7872af28b0e339fd7798816c3bd876d61402162323a43e6c9a4e2bdf65963b7caa32f2bd35f0e9eca349cb79c2a8b1b6019c3396a02f6a4453030b084c1268864620817a91c528973a11fe322e24890c6af0d1ef3833eb9bdf4a3e581c18564f606c8dae0ccac0bddbff6b6fd91bd88bf0c812bfc913ff4e426fb003c514645fda8cbc1a09cabc9655e21e0e24f19146b07fb8dfdd17e1adc0ae5e1f24f95e3143a1853a16ac4b86280899d94023cb6984f7856cf778bef3508e8a1b8e670913953f20e04c007d308d5047c7f78bb2fe5c66bfa9af5a758fd95ae12454247ffc183ae50293348ef4fdc78ca2d32b2ccf653711e555ac485fc924c527a7aca03de0fe58040bc02ceb031cb938208eb6ab512776ec58f29dc3d95ec5fd394fdb60a5ff7b69fad2712b5ba91e0b530c272a116dfec4d1ebca43fbd049688fe2b2412324143bd2071858e2c7ec497540d0ba59e96dcd95c870b2324915a87186c21ac3178a552747a956595ab94c91eaf3b3fa7d21b8d2d138fc26a3c13ee097d78d4ad71b22f651e4dce114a8b22c428f480ef5db0b0bbc1ab9c14c40e4a60c43d179c8372dfe181281ef619cfa511778f389c806e8ef8e971f6d114e33cca6d54ffa5f3fcae67bd926a1c52cabd15aefbd8a059d2125945bc4b838f24b90b4071850812ac2b5435ac3f21d619b422936e01896760ccf423333d454b0ef89753d077672df9a8abde78bad37e7cb2f490a5bbff93392d75e17eb1a66d45ca602de53a9eeeceda4ca772758581338932fa4badcb0be374375ef88af4eed38ccae44d130b6c47d026694de20a6cff5506bc0266c38ff57ed85aee0fecd78943bd5673cffe21bc0f33da00431108076ecc6172d52d2f586be60be56a7baffe03acb415f25fdc49397f227874cde9b181e9ac5adbb25fb1a5b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3. 线性代数 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250223~2.3.%20%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250223~2.3.%20%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="598a14e603568bbb0260fe566b9570e1768a7a93060db5010aca274aeae905a7">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0bae7cf1f108b131d8cf7cfef630bcb60e9ebc76c33cede934e6003bf68b21abc3b83b81eec0c34ae3b45f770708dd5fc18e8f208336c569c89aa7b01c3eb270b6062dde53e09ac1317e2c7cd64ea74e31cef9d9c06345fc525ace5089dc16d88543be407e989d8d9fad755fd2e0f8e3c9fff224814b5e9500a16b3627741a998434f2ce4c086c6a9addda5d7cc6a303607bce37e27229cfa70061a2536c182a31458d87364c57d8beef6e8fd331ba3f3bdb4a5b7ce82519f82cdbee7ed8eaacad063e8ca2eae56bb19bbc6fd245ae0968ea49f4a2f2bc61578b60cba5b8b3da1216959ba6a1943b6653a4b4889d2b896e47f6181afb134119fc0dcef896a32dd3069677906af83a1b3625eada92a9c7192ebba7c526465b147ee0d925bf1aaf6a2a985491eb0ed8cd36ef0863a9a279386e83b36e082e88712de8a2878dcef2421e7df001714598d736daf27d25d91c3bebffce5bcd9645d140065140a235325f3f941dae6301f81c7398f4c8360fbe99c6bfe468ea9288c3e9eaf4a12431d10c7d2e4999e131de27bcccc55d876d5279c31da02ab9da0dd3c27847469addef2ff320df69c013044ac7c30fb8f8e45921d8c4377feaf81533e93423aedf5fc4b6366b4cfcbfe2205aa03e10892f61b258b21b97a9b1cc662ffe4ca43017fa88a340895ab077341480cc4e1a03788eb17290d5a925339eb86b02b23bdf9e286258ea3d291373a7ef86a6889081e6c87a82023d8c44a284d5d497a8d152f74208803cbda9c7985314cccf2a4f2bf677cff2e1cd6c5602455437f5b776466fb294578010a7abd141f9704f2a8ce94b0448673b3a892dec78416cba6e2611a303eb377c5c9b59fcc6c8e1680ab670bcbe4556b87dbbbf4d53fcc76e4309734ff25272034186cde3098e172c758160e8860ca509ec1a054811a7b2ffc1b08210e45a8bdfe1ada57b88a591301141d44b6fc5fa6b756a630a8d8f8346a341cc7b8132613bac3edd3a87cf9dfeb457312e1ae7b13b8c20dd9b9d6d5dbbab5dc9403085e20659e681355501ce4d64e5c1aea79ce634b3600ac90898a4ff36f2583010958bb4b27809c0c1a37bdeb61ea605c7f065a54f6f50ed2a37a60b1443195cd1707dc5417be1f4bc10f31737d71bb4b20dd5ea462a9c1b1b0dc1fcabdcc0565397fdf4eb31b5ce9a641a6f475fbe3e984d2d1ca8ea2aa67f655c4c047103d5e275076994d18211fffb50b720a375267d5f88ce9cbed6316383e42e0797c215ba75d3cf944aee3c6e94f7c88d2d11e29e110bf155b9e17fe14456940b006ad6da8b2ff346d6a3b9901439c8d47fa39c7136599a970bbf7bdf44fcab9e489c58a74e2c5bd1c320d3043485a94d85f30e14c6507affbe1ff5b389fff84476b6fd868d6d3cd976cefa6ca7019de790b0e8a5d1ea038ee1af4362b10db3a0e1e0b0816a0caadb0a8b77a7d48af4614dcf972e4d4aec4e4b3af86af2e1c7dc305d7189cb5376d5f134ab5977541b5066f6ed52274e6421b7997f9a2392c7031ce4f0296850e8a42a670c2e568818691643abb0309f01c500ba31f6a2d874ca13eb195f5009fc46c7f514429414007da09302bdaafc7873736a14575a7264ad908654dcc3c170125c695ce54eceaf10b7fd023cbc5a1f4570df8e5fb3af181efdc8f8baa48e067892ca0d3239d8f10cdaca8aecf37e4b7de2f37d37b1cc6692e8718ceedfeee1316ebc2e82488afc9cf273aed27004d17a719385243f130ee898a0428b047f5ba26fb757fd97fed5663c8be74303697a9d0df043adef8df77c5caba2ab655445d58a39eb2f9ee6cda8c7e88efcf7ab7fd946d2be2e375234353eaa9d4c05ebeea6c7b92c2517abf346f443dfb4fef46e8601b7dfe68674a614381701069b5050360de5f6c2d5c8ae05308a21833b02aefb068d39d0650a2ea07a8f8ece7ccee442878dea2716d2b940036fbbaa24de809fc39115169e90bda24112dbd3867638d4bf82645dbab567294d1ff212854c4ea8dc90429e6025316b57f5caaaf8ef27d974e3fd1c2920c5fc5b67999ce3fbb15e4b1f0d07ec4bd1252ffdac8a4dcc5dfd65e4d80958fce59c26ece4e759faeb457227a92fc3caaf57f37524946ceb345e0b0fd489ae8000fa04da4b3363f1ee0fc5cfbd30b39717d90b6a1e30d6fe6e56466a5ad1d3d0c247b75cd117656f40b3aaea94526a1b4d2235413ab4ef1a427d2b4ed0997b5052f935ab18af290f3abbc8eff219588f0cddd7200a7a29c3a5c1a7820b05e6d6de9d23dffcc5d8d88372174d5b6e0c8148388da2822b1573cc1851697492f6b50ec535785b42bb49050c0019be69df69229c63cbfca7a2ee6e7af47a25924a00f4d57010657b9dc86c8c00d74741ff67aad06cbeca63f2a3532fe3b1321cfb2f40d410d18ada783f5b43854bfc11995d068d25c717e79cb7194698aac5ed7018bc7995440b7ca8dec864eb42759b3b2c00c782f43c2db6230e841f8e19690cb1bab1ec9a452aec4d93adaebe4a2d40feba2b091dccfc07230d434edbc98a08b47188ba2d393044ac1b114e73e1dd3e9e3bb98d454255fb24a88e3ee3da3bd2303dcc0a92647f073fd7b8eba25d447aa6ccb4fd34ed295dfb0efe6dc1d0896aec597a6b6f5789b33c0847ba925c3adb87c8ed8620a6bb7da423cd37fadc20abf3b18d1947548f3594f4178f8ece4bb90b18bb5a8457ab33bcc3612ad14170ed1e1f7e7c4106a396557a409a898eb4b5811cd76162d34e672751ffe65e5399ae812ec49ffa3cd872238849474941051459c8c3516d3e8d69c645a82159d4829d48d4b9b86aff8d14e61457231667774df8788521f965c8d9978917d6b05ea6dcbd7f4d39c04e6f61b7ad829a07e99508ca866d43b986824b6d32a8f770a1d45bab4a67e5a5e2e675805a869e1c537564a5ac936041e2422a267cdb7a33c237f6d59fcf222e9a59f9e58e900d813cc8931025d38f10634c683e182def3d0126479cf571beeb2065144271808a88c323a2f927ff0ae30bfec627704ec270fc96324dc352e6862b4db3ba07741695ffa050e2699522bd7d1be9fce9d34ceffaa216c414c48b9b5eda44ca6ed54a92d968c8add54d9baf4a7a28e6dff6f87d45058b44e9c9bce391c539673ec2bf287be206cd9cba027bf95842de228629f9366ff433df38c59092b96fa3297ecf3f312a5509b17974606c53016429e231154c50ab047a947810d1f819d2fd9ca072d4d055dcfc5b137e02d30818d174684d3fecd3877c376cdcdcb8a0930565c7ec098e2df87c7d95e9291f0917219dfa7b1b07c0201e7f775835ad9b88442014035131cf768bb2b1a3f8a1828bebc1c9f7948b002cf1102cb874b40ee665c4ec0cdc9126947d39bc305a1cd423cc4b3e231447bf48277d02732406d539afe2d35c577f8703aa76b9766eaff93896baa230afec7d361616a0dc09ae49c537aa78e2fcd981110ee4252fdd641d96dbc7f569871b8c88e0ba579042fa14af01622e38b4c8989791777ad05b01fdb0f34508dfcbbc26e0dc3a6b29c6d5f790d14b3eb81337481d580850a30fe54175f00436b07a36ea96a5c370e1f25db12e1f128079ec209c5b2e9e70140f7eba0d8852c071fe32babe3398cf69a8c4aef66fadd2c06bb0ac2134e972226110a922103236781996e1d01aa7c9472b32dec214706a3267fae00928b880c22e5d1e3193be9f3328ceb0a98c7363d072911d3acdad15a06dfe99581b405ad1e3cbafc16c7348ef47793eb90cfb359e3f6a33ef7d435a06c0693b30ab68b817b21278d69b64492e3b9559ce67d3f69d2aead41f2f8fe8d3fbcbc2f65b86675ff2d7c95c47f1c3d9b80bfbfdaf75f8b78b02f3e6961fde3e994351d6601844da5ea1809ef38e09dc0bef1f14fd9a7a89c94dd03645f507fc3ac289d15eedf506862540e788b46717dd5688a1fadd15775f1bade0986875eb558317adb267bef0d3ab29cf27d1f45ad107817beaa0dbb3ef2330f928a42f312c19c5345bbbe978021ff7295af749cf7dd0b5debe5336fa0dd3df29a74ca2820748a6c657cef23fcc5a809ea5c351a10c6e2c0f34867428142beb2932d607bfdaca72635500a852b50a1afecf13b6d45ea49eaa68e511fa04dedec969c3a81c5597b955b1edd7830e7f0ed837677b4e875f86fad52de26f8c74ee4d5a5b4131ffaddc9637d932927df13fa42880145e8dac0c46777e17e4a373496cc35b12e25996b1dc05062d4dd67edf3c295c8a8c407aecb3478c291163e091bcd471c7523a2d8f9c74aebc534bbacad67d9c2eddfa8a412f4432d4315f56f3be258c8f47d7ce2dbded56a776c3fab2e2a856495407f02aea259d8c5fa6fb3dc1ac34a5deb849835a6670f9a1bd9ba2a9b566a88d5eee679b06288f4cc32c31fc</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2. 数据预处理 — 动手学深度学习 2.0.0 documentation</title>
      <link href="/2025/05/24/deeplearn/250223~2.2.%20%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250223~2.2.%20%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="aae4e1800acef633df349c7da6c7539cabd4fcad509409a65aaa0c9165023ece">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0bae7cf1f108b131d8cf7cfef630bcb60efd52249f16f8437060cda3c52d08cfb5d6b84549e44134207be9bd8865e14be3b5f7a3c636e2481089da6dca79bdb838cebf411737ac8e75c3f955a9344b9193557d7c76b8ac259d165d13ab558887e047df13b03d8a5b486a4cac1a5ee8a36e7ab78cd8ef6af459fc6826cb4175f99c99bca619778addd0ee940de51c498ab66d4d8e32bb29b35a4c89a59286074151df25341b7bafe45d12ea78d1eed76045b5af7732ada952345440452f487f45395037444940f5195a09e16ae34165b1fe19c2c31be0d1daae5c357941bb0576d489b333eae872694765ed1f8d5dfa09ab7366c4200673f7b1200786f79d6711822c6eb13f7081fa88fbc1340b737dcc87bd6997f3f7e7f7d5e2db3f189d6276e0a215f4b35ea20155a3bda9720550f7b91e30ad7a243c658f7eebd0d95bb1f642bc0451c815400385040dd57b51130324cf484a5c6f2f080e8bca0164aa08892ec8b91bf071962a4484b36b04b503cff4bfa6dd2ef477b00bc194359054453a8216f17ead3b572bf826cb2c7dbb980753c0bfd96a487224f7ae492de34a7bf36647b1a74859a75313a0043e242b8831822c55b390dbf70b400fe4a4528b0e9999c2bdadafb4b17e8d27648d12a51174db</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1. 数据操作 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250223~2.1.%20%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250223~2.1.%20%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="8be05a1daf89c8836caad12188770b112e5c10a7ce1181ddc71bfbedd2dcb962">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0bae7cf1f108b131d8cf7cfef630bcb60e14251b1bfef4ab10ba5a76a7142a2866f9f7f359bf571bc859f507e08cdbf002bd60053e36b8d7ca5cb7a57d727178f182389b3364930a1c501b8b53b923ad1e9dbc49ad0636a2dc77664159f39cebc3da3de85895f78b07a97af9da0f52803cfde91324fa20ef449f5b205531225170b46070d3688cede657e14235d0cfa01429ed46288f0e6749b80cc7b5ac1f9c225c86295589ce9e28aaa2550249281b071996cfe1ad53aceef9c3745e8121f08ed5476941a327429075681405e9fabd18f35173e4c636aade02857d780172871ef1784b17e362b17c15f65b211280fb6e5ef24edd6152e2a8732b7e51fce2843a35175a66c81184638ad9e218d8b50162b4f798495f3ef9b0451bc3b3a4c9ec4aff17aae273b3a05b0d8034aa0748faf5d3f3ec80f229473fd8c756fc3d28f85d44957c0bcc98543e937b31d5d3a288d28ab9e3c2c3e24b569bd82168ee8f84f1b46979f94b9d4261c6900687050fb7bc05a60b94cdae1d1720d00cb7865d55b78ab6f68f30d78a3ac64d8f5d2307777896ccc65f4bd77007de5d8112909187087923e776a484c8093117eecaa1eeb39643a3d18aeaa74d4707ba1d50e1fe40bc62c645c1bb722715e63c6797428c2e41e5128daa49e6a0356e99d5cf0cff4bf6638c24603ae2a47b32738941faf7622eae40def345309108eab9cf5edc33fb3bc1aaada4e87dc5501bb3c5d908501ecbc8760f3100b1d99665e7f1b95a1c14decc003d1607a3fb8fcf9b79a8ba28b6ae7aecc9aca1abd059768fd67081dca41bb907a768bf191009105b7f94233a76f621d6aefac2cc2e6a0733064d2b38ea9892de1dcda98ae4576ca9bc1f64df1e921f25b5ec48261db1d503f337b6cca5e0a53641c8ffdb6691314a365b4fa085c6c90b0555457f356ce9122ab6696bb70951508b5158c7c30f9e86c14b226781fdb82a25f9acdbe69cf3460b2672028167e0a61a6c2b8b09a9dee922d1283b8a7447d7aa0a3e183a1c4b353be0a4bfb0cfc42c3e9fcde33fddbec955ef391c39fcd29abec9d95664ec74a86fa2dd76d7038f9f30381fcb9249c8461b4002a21c03d42ac67f1f39c88a646e80cb4f2254844fd37cb42283d7e603e9328a66e090aa96392f73a0267786d044ec504d964d4eddc9774e9df3bf035fc1a0776c8967b388355eda3259db569db68d3d7b42b516966624b06ed6a8752626ea5edd81d7b556fa7b4f0ce1bab440aaba84ba75dda9e59e94d18eae083cb501e1447aada9fb0871e8e96e30d6a65c538c67513621076dcfe8cb48441789d8a9b370e7431b144742bba64ef18c7e396f2f6b2db51b99a7c63e798f394a81139fb759a7b6dcad2d78a4286415eee5709f0e9fea63bd3c58d852cd0e4a522bd5adac42e62efc32bd3b44de002f3e4a9767cb3afb263de1ddc890271f7f77aca2ad0fbe1ef900fdf7468fa7e7412fd274ea21281f771e1e86c799c53dd11c8be2b7b482ca97efc39f06dc2c4ccd44b6e2c6cd0dac59523bdb7f779688e2b4dcfec99a3c67ca6554b32e56c972eb6742e855fd589d162e2190306539d859ecf059edebd88181fdd86e4007bc566b17c8945ee5c6041857555342049b19e4c8d8f75ae4b4cf22cefa080fae0897145fa7f96ee0914765c999eb25ecb03ea08c13e02077790099d5c30b931749d34b64aa82c46e985b2b3b8e58b0f45a9c02b793b2901b9bea479baaf8030e5b590fabbafa9fa55c6b17eab61a188f57d142a9ade103de4055d6dbb7db32bdb5bc6adce128f17eec2fc7d46e3ca8d31d9b9fb71ff61e2649406c84cf118b4e370c0c823d0339343217174e7a5bf45ef01b4614cfacc1206b1a0964440573bd06b78b68287ff59a33d5c0a713d1ecc9b7e15b01d9a3b438d09afd37a8461e5a57a563d615949bf12ab177b73c947c5ab4e8a77e0e6dee92ec7a553a62123679c9e5b6b43b24add45c5eb4997cff18ad139f85afb0c960062b4ce76bfbe5a294e097ec0914f6d48890f53996b512e7122b93c7f7617459fda0f0d0ba63d298e4f33548fc908306a701bdbbe770168fe052d6f5b87cf0b880324642ad2cbcf6225b3cbc066a6f28473f262e2687ffbac0d3530dcae46d7220e5625d58a1e443765465cc63830a4e2f633d4848aff35fcee7c7cc42bf4667f10d47f92e50950005ecf7a64a209c8eb0128661f96d892517a8095d870f6bec909cc3293b779cef8c69774df4e48d76f5678d6097cb2a32de1c599fbe3036f9d331660126bf1692394bb8ddb315533f6dfecc3620cff5b28987e323544f95dc392df59b109b232bde46fd84ae06621e838b62fae14c15afe25adecac8dae189e14b0fcd5758870b1046690bdf1acea12c37475dd6d4a3743e4a5d1b4e26c5722a6d5d3ef6a1792fcc05bb5c1142dc3adda9abb0d09bfd1a9a258729ba82c9dc3ff863e62db41531a855d66189482b41b0415b1206ec0af3dae5886b8104f56e82ce7b14d9ad0c39c904257e2e0c7ec7920bf51b59cb0faf0af5a32c183a9380d19c7b70188304d27f411a437720c7acc99b96fe52a882bbab2b34563edef798595a436e92d0638995a32a741f2a1798b0bf3b98bde3f7ae809e4feaea8e11c561590b5c0e89db998d64bc86cb4bcb6805be9606ca55bcdcdfbb738d4844ba133458e415c055ed1e862c54a2c4fe641bc97a4f3cf1bdddeea889f555973d411767993c4ec3d09228c760799b05ed8f6502f20bd1167e7ded461024acccb2fb064726ba2cf6ce1c132b55ca7249e25787e20fdccec0040064fad700a56200e5d4ff285c98d39dedb73dd6fb11d5f3dbd9f9c863a73d63e580a9bd947125784a20d522b8bb576973eb6d3040985a59e8047f7c85bd290168620f07f9df0b51de02f760b85d5a8a0573208bc08621d7c1ddd62ab49f7c50e5a1787208dd625bab565d92d2d477844f6e2dd354d538ac6a9586e6ee25d762bc751d98b8232cae0a371d9bd00e054cf2f1a1b7049f2f19d20d1289a7bbe5be2565e16993715798d8b874f33c91bbd5303bea292b4e02f897bcf728624b7cebbfd9c35c9305c3e9c58a2168e18edacb03c52ccde0aef0ea244250e28fdb2765e32a8773e0951555db49e872d3657feeec65579b004be5453cba43e905499e0dc56e283fd3b2d724cbc33af5c3a53d57d1bb6ccbf1c0a878ca104c9b1a5664e1a3f4a3bfdcff471715242cdcb65c5ed8c22eb0011e028929e565e1ca7918cf22cd4b636825d25817aa7dcc4b8a3707590389d6f9e638233270f42b94682c77cff7056c9515b7d4c01c1ba1a0338989dd4ecec89055c41ab0e5a73cec142c3b21983ee978d0208a7914a5fb0664d923fea4c3f889efacd02a0c1396720638c46dcd9be9c03e5cbfec682c1dc1aa71211985c153056c0ee8d6decefd5b42455dc8904b152db7db0dd772945dfd6f4d0b18f6f883df39ce18cc34c1de6f1b6e23720a19379da9af00fdcf59cec2b5a0d2ed756d14efc6fc6c3207d8d652263c5852512783feb8babd5f66741acda10fd369</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于本地git通过ssh链接github时 time out问题的解决方法_github timeout-CSDN博客</title>
      <link href="/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250218~%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0git%E9%80%9A%E8%BF%87ssh%E9%93%BE%E6%8E%A5github%E6%97%B6%20time%20out%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95_github%20timeout-CSDN%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250218~%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0git%E9%80%9A%E8%BF%87ssh%E9%93%BE%E6%8E%A5github%E6%97%B6%20time%20out%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95_github%20timeout-CSDN%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="e1ad28e67c8e08c2eb48ae4568b9b7c429e06d465f513c6ca8019ccb634b9d8e">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0bae7cf1f108b131d8cf7cfef630bcb60eba450451260b3741c5d18f11ec897ce5d018f7d34c82e033479c2e232508dd65d0020a3f66e0f817aa5f3d84f7606b23c0a979871bce7fba58e45379fb206c7d8d837fcc3d48da2354435c27c77d3eddb080cef27f5cd693ca180bf639ece40ece9ada0381d43a57d845ed71d493aaed41876aa9104b78fa83dc01ae8b935068bcbb4ccbae6e39bef15da82ec6d4a972389387136a7bf7606a62601470ea70d1a1c2b459ae336b936fd0b1a438ac40f9df4524db490e15b754f909b2349db25ef8f9d6b920cf7277ccfb8a42acaf2f8acdf7402838122ac1383e63ff12920bcb47d511df48c7de136cd6d5b602125d0b5ad9663fe6d1f503bed0186ebc9adeda408664efacb55af6b90d7b243faf67cfee36c5099e08e36509d5aed6867517c7dd3688c4e870bed0403357504bd35dce2058f08bdae4f4dc7dccb34e772a4980e04fb01ca26cfe6a863ec5ea129faf7d0c726deb15c28f8ec36b4558c9880f4e2232e3aceca95b656ab1e5d99b1c970ee4e8b22e12ed45ba576cb8e163cf1f8ea784e77b25d762e00827ea23bb3935f0899d5cfc43eb2bce0d57d6b0dcdba4fc52725ad8049630b372c35ee8c0d0fbe5258c4f53de75b96729a060fd4da20632646268b161891231b1e7956c5ecf9e127ccd301c6f19d4c59c73632ceee7b112987de9d4b5aa4ec4aad2abdbfd705f653af95cafb8e70a05e00333dcff52eddd0b79603be65454176e8798535ae953790cf4d005b39064d9cbce2419007472fc467056ffb16875fa17ec0f234a5ac0855254e21124026d2f38df83983d1d98def2012835998f1f9bbe7b6b1f04b206015c90c15f26c6c606524c351b1c50c886fbb94272c3213f7d61031380e3050271a6210c05a2de69b6f1b62dcb7b02dffe6dee5f21033caa41f2d59e8a66c9cb1b3a27d4eefd7498092a532e948dba08ad8a521fe0d007197bfaf896d483214caedec47058b51d49fef69a0cd771c270069fd8840ec6ac5ff997033e18893b5692e8f40409e410748ef555cdf88c0d8405f537f7de8fbc5eafaf6d86538cc7d6dd81a4ee55af18982c3e623789882949b51d8aa1dbaa3e03225aa7bcc39bf2eb8d356dfcd8a90872604b97ca9f2a35b0fdc90f2968f53cb805d416743573734759b05b6c2272c853de99295b9411ac7a5e70bad421f1f17c6b3bed761d1ea17ea4561059c4fa1bbc65ff85e4bc3deb6f4054eade6de90c148586fa18c5814da98a67e2b8fe0ca8da6ced02755bd6ca5336bad7e2d013a058784ff9ad1db614356ab99461338da1763111e3e6194c798d9b05322f8880bc243289b8632bc1e9e6b670812e77ff7f62416f2bc087288c72d07f0e15464242081ae8cccc36e202068826bfc7bea31713e639117a2efd3be7e5653f96b434b8bfcda092b54738574272cb79a26177a0d2279d23df91d747017dc63803bc497d4393430b323d438ed1b5ea96e246e7afa320bf88551c97c7b9a7209c5443d6ed05c3d98b2b343bf9c8a8c6e9e165a3035b2cdc49224d2db95b513608dd073f9017daffb6724a65b7145b754ac76e50d5a20875814701f7be770f2e3ad187b3e7ced1394832672df45b2169e06b8c794d37967204000f14ece6fb2904d0fb8e8ebaae3e9c9d7ac2effeb2aea2595efcd6ed2cb116e5011b3161e21af6dd58ac7677e73873af7d40c49bbfee35ba452b79ad86d1aa47c6b7438c44a4605d55285881daf344d0304cb5fce3e2c312321dc16a1dfc24b51376deb8ffbcd9eab5fcf36fc75ca3cbee26c58e2cca5051175aafc2cb5896a20aa6383f180a7ae00df8b42ae2591b70cd4e170dc7a4d1387f9d45233d497d0de219d8954cf6ee42ab0d712812792cbef0445ab9c857188469c4abdafc192912038c3351dd9dc899d4e69e5f4cae5492d0595a64b5206d8cdadf0b8ee1315e21da1c7223306c93e2cf232c4c828dec34ea1a6c2f0c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL Ubuntu22.04默认用户（default用户）更改_wsl ubuntu切换用户-CSDN博客</title>
      <link href="/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250215~WSL%20Ubuntu22.04%E9%BB%98%E8%AE%A4%E7%94%A8%E6%88%B7%EF%BC%88default%E7%94%A8%E6%88%B7%EF%BC%89%E6%9B%B4%E6%94%B9_wsl%20ubuntu%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7-CSDN%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250215~WSL%20Ubuntu22.04%E9%BB%98%E8%AE%A4%E7%94%A8%E6%88%B7%EF%BC%88default%E7%94%A8%E6%88%B7%EF%BC%89%E6%9B%B4%E6%94%B9_wsl%20ubuntu%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7-CSDN%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="6ffde551be1cef01fc5fe079e57547f28531669fa2d5ff7b688b9e78c2e983d9">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0bae7cf1f108b131d8cf7cfef630bcb60e73469ab53f8a3ba7e51e054e23ce9e1cbafc730395d6dfe96c63035d86061b8ce6679a693a438ba67ef47e9e74ffafea45b89db152e678ff908801ad280eb490545febedb7ee5a714f2165e7b318b609f787fe6118bc909052a2fe1d29332bbeeb054df0491efa117c06b6386e0667b9df00891d88d4cf9794fac2a1d893ef4768f2610729f4c8dc6c25e081c59d6ab8316e3fb34ab1cd4523d1a7ded629cb1a0019a08a1e4cc2763b53e1172e0a1c1a005ae19c8f7a706cdf9f117ba0a5f2b3be93633d5153fbd853453ece446d341f7a49cd604cb7eaa19ae8c8ccc1b5a2bc44543ea5fd178c931e4f04d2e2dc0ae08bd0a9f8113008fd65142f7195a629041ddcd60c7e0ba65b1b6bf1119e50547c99ca90015d0e7b8bf4baa62fdb4de87afc712da195656386aba751c2b553ca2bc2736b50c31da1058f511f0e232ed9fb0fb5c8eff3833e5fcaaf2c6653f453f6d6bd6aa5688d5feacf65e8ebaa80ce8a53f41a2fb3191bebe635321faa91d9749d10f7c32ba06556c4424318c6a72f4a193ad3166276e133045ce59df1549578ea12af77793704748f6defd976d2ba287cc07cb7bf1e1313f3879abbb097b608c364f521fd7b7bc309402e6bd3904c5f74fe67d7e4cada4765ac2849bd86be933b50875fbeb4f7a8086a2ff4f0fb60e37dcfd55fcbd2b132935fec75a1d89fd950a7c43f08b7ab230ec4db139677050c3873e27da8fed7fe4e0d0b019bb00947c0d14240c4d911d1778ff6b55e0bd623170f95bfd12547edfe8e94112baca45f78da452b528951cd20eaaa79ecb130d40394dd0fd511e142cbe1f199482eae18dd522205a774e20f9da918a5ae77f7072cbd37919600c3304682d79c33bf0d311d41e5f40eb69a4767523d5a39d45b9f0cd213997f32c91b29d42662af3e1316efe9cf59e92558f3cf193d31033abfab353712a6d269745fe857b46ce7e30807776bfcd8079327946c3f508ef7a3c17302c8c3fbae5759252b264c7ad5294c00</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. 前言 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250211~1.%20%E5%89%8D%E8%A8%80%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250211~1.%20%E5%89%8D%E8%A8%80%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="fbc8388ba2d42cbe84bb9448dd9f662a8dacda97e60c422c46ef38afc5b58a7d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研交流</title>
      <link href="/2025/03/15/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E4%BA%A4%E6%B5%81/"/>
      <url>/2025/03/15/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E4%BA%A4%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="679e0b7f3f4c501ef6eabdb8004813e2a2c945436f819c08ea5d52d50d53ef60"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苍穹外卖</title>
      <link href="/2025/03/11/java/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
      <url>/2025/03/11/java/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="c1b129103ac98c80f6cba4ca462177044d27474836a3449348e1e2fd72c9ec5d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器常用命令</title>
      <link href="/2025/03/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2025/03/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="一、程序测试的常用命令">1. 一、程序测试的常用命令</h1><p>其中<code>top</code>内存监控输出的文件里面，每行对应的数字分别与如下对应。</p><h1 id="二、运行的Shell脚本">2. 二、运行的Shell脚本</h1><ol><li><p>首先在Linux系统中新建一个文件。</p></li><li><p>之后在<code>mlcs.sh</code>文件中输入要运行的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kill -9 进程id  # 提前杀死进程，只限于咱们自己用户下的进程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&gt;</code> 将内容输出到文件里面，如果原文件存在，则直接覆盖。</p><p><code>&gt;&gt;</code> 将内容输出到文件里，如果原文件存在则直接追加到原文件中。</p></li></ol><h2 id="内存监控命令">2.1. 内存监控命令</h2>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top -b -c -d 2 | grep &quot;你想监控程序的那个名字，能唯一识别就行&quot; &gt; &quot;输出到的文件名字&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   例如，我要监控名字里面包括<code>mlcs.exe</code>的这个进程，将信息输出到同级目录下的<code>memory.txt</code>这个文件里面：</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top -b -c -d 2 | grep &quot;mlcs.exe&quot; &gt; &quot;memory.txt&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   其中<code>-d</code>参数代表几秒监控一下内存，这里设置每2秒监控一次。</p><p>删除所有包名称包括mlsc.exe的进程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkill -f me_test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   断开终端也可运行某程序的命令：</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nohup 要执行的命令 &gt; output.log 2&gt;&amp;1 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   比如我要执行程序的命令是<code>mlcs.exe</code>：</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nohup .&#x2F;mlcs.exe &gt; output.log 2&gt;&amp;1 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   其中<code>output.log</code>就是日志输出，随便什么名字都行，默认存储到当前路径下。</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">touch mlcs.sh  # 其中mlcs是文件名，随便起<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   比如我要循环执行某一个程序：</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">for ((i &#x3D; 1; i &lt;&#x3D; 12; i++))do    for ((j &#x3D; 1; j &lt;&#x3D; 20; j++))    do        # 要循环执行的命令        # 其中可以通过$&#123;i&#125;或者$&#123;j&#125;获得i和j的变量值，进行命令拼接        # 比如其中$&#123;i&#125;就是获得变量，将最后运行的结果输出到result.txt中，        # 其中结果指的是在命令行输出的结果        .&#x2F;w_mlcs.exe $&#123;i&#125; &gt;&gt; result.txt    donedone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   一定要在Linux系统中手动输入，不要从在Windows系统下输入，然后将文件传到Linux中，他们两个系统的编码方式不同，否则会运行失败。</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chmod 777 mlcs.sh.&#x2F;mlcs.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mit6.S191</title>
      <link href="/2025/03/02/deeplearn/mit6-S191/"/>
      <url>/2025/03/02/deeplearn/mit6-S191/</url>
      
        <content type="html"><![CDATA[<h1 id="概述">1. 概述</h1><h2 id="感知器">1.1. 感知器</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302173357938.png" alt="image-20250302173357938"></p><h2 id="激活函数">1.2. 激活函数</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302173418796.png" alt="image-20250302173418796"></p><h2 id="损失函数">1.3. 损失函数</h2><h3 id="分类">1.3.1. 分类</h3><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302180326931.png" alt="image-20250302180326931"></p><h3 id="定量">1.3.2. 定量</h3><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302180340787.png" alt="image-20250302180340787"></p><h2 id="梯度下降">1.4. 梯度下降</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302181222102.png" alt="image-20250302181222102"></p><h2 id="反向传播">1.5. 反向传播</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302201710606.png" alt="image-20250302201710606"></p><ol><li><strong>反向传播（Backpropagation）</strong>：<ul><li>反向传播是通过计算损失函数关于每个权重的梯度，来更新网络的权重。</li><li>从输出层开始，逐步向后（即从神经网络的最后一层到第一层）计算每个神经元对总损失的贡献。这被称为“反向传播”，因为它是沿着网络反向传播误差信号。</li></ul></li></ol><h3 id="反向传播的步骤">1.5.1. 反向传播的步骤</h3><ol><li><strong>计算输出层的误差</strong>：<ul><li>比较预测值和真实值，计算输出层的误差。</li></ul></li><li><strong>计算梯度</strong>：<ul><li>使用链式法则（Chain Rule）计算每一层的梯度，这样就可以知道每个权重对于损失的影响。</li></ul></li><li><strong>更新权重</strong>：<ul><li>知道了梯度后，就可以使用一定的学习率（learning rate）来调整权重，使得损失下降。具体来说，如果权重导致了更高的损失，就往反方向调整它。</li></ul></li></ol><h2 id="学习率">1.6. 学习率</h2><p>学习率自动调整算法</p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302202502602.png" alt="image-20250302202502602"></p><h2 id="分批梯度下降">1.7. 分批梯度下降</h2><p>？</p><h2 id="正则化和早停机制">1.8. 正则化和早停机制</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302203604219.png" alt="image-20250302203604219"></p><p>随机丢失部分神经元</p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302203650285.png" alt="image-20250302203650285"></p><h1 id="RNN">2. RNN</h1><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302210306088.png" alt="image-20250302210306088"></p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302210728169.png" alt="image-20250302210728169"></p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302210739335.png" alt="image-20250302210739335"></p><h2 id="顺序建模的设计标准">2.1. 顺序建模的设计标准</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302211357941.png" alt="image-20250302211357941"></p><p>Word prediction example <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=1910s">31:50</a>  - Backpropagation through time <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2020s">33:40</a> - Gradient issues <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2235s">37:15</a> - Long short term memory (LSTM) <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2400s">40:00</a> - RNN applications <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2640s">44:00</a>- Attention fundamentals  <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2806s">46:46</a> - Intuition of attention <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2953s">49:13</a> - Attention and search relationship <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=3082s">51:22</a> - Learning attention with neural networks <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=3465s">57:45</a> - Scaling attention and applications <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=3608s">1:00:08</a> - Summary</p><h2 id="随着时间反向传播-梯度消失，学习能力下降">2.2. 随着时间反向传播-梯度消失，学习能力下降</h2><h2 id="lstm">2.3. lstm</h2><p>通过忘记一部分</p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250303154530054.png" alt="image-20250303154530054"></p><h1 id="卷积神经网络">3. 卷积神经网络</h1><p>获取不同框中的物体，两个神经网络共同使用。 </p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304202546754.png" alt="image-20250304202546754"></p><h1 id="强化学习">4. 强化学习</h1><h2 id="自动编码器">4.1. 自动编码器</h2><p>将数据编码，降维</p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304220654243.png" alt="image-20250304220654243"></p><p>解码器</p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304220912390.png" alt="image-20250304220912390"></p><p>增加概率扭曲</p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304222137386.png" alt="image-20250304222137386"></p><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304224849011.png" alt="image-20250304224849011"></p><h2 id="生成式对抗网络">4.2. 生成式对抗网络</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304225133095.png" alt="image-20250304225133095"></p><h2 id="强化学习-1">4.3. 强化学习</h2><p><img src="/2025/03/02/deeplearn/mit6-S191/image-20250322173651016.png" alt="强化学习与无监督学习的区别"></p><h1 id="致谢">5. 致谢</h1><ol><li><a href="https://introtodeeplearning.com/2021/index.html">MIT Deep Learning 6.S191</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cate深度学习 </tag>
            
            <tag> 麻省理工网课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy_pandas</title>
      <link href="/2025/02/23/deeplearn/numpy-pandas/"/>
      <url>/2025/02/23/deeplearn/numpy-pandas/</url>
      
        <content type="html"><![CDATA[<h1 id="NumPy-与-Pandas-用法总结">1. NumPy 与 Pandas 用法总结</h1><h2 id="NumPy-用法">1.1. NumPy 用法</h2><h3 id="安装-NumPy">1.1.1. 安装 NumPy</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip install numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导入-NumPy">1.1.2. 导入 NumPy</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">import numpy as np<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建数组">1.1.3. 创建数组</h3><ul><li>从列表或元组创建数组<pre class="line-numbers language-python" data-language="python"><code class="language-python">arr &#x3D; np.array([1, 2, 3])matrix &#x3D; np.array([[1, 2], [3, 4]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>使用内置函数创建数组<pre class="line-numbers language-python" data-language="python"><code class="language-python">zeros &#x3D; np.zeros((2, 3))       # 全零数组ones &#x3D; np.ones((3, 4))         # 全一数组arange &#x3D; np.arange(0, 10, 2)   # 创建一个范围数组linspace &#x3D; np.linspace(0, 1, 5)  # 等间距数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="数组属性">1.1.4. 数组属性</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">shape &#x3D; arr.shape               # 数组形状dtype &#x3D; arr.dtype               # 数据类型size &#x3D; arr.size                 # 数组元素总数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组切片与索引">1.1.5. 数组切片与索引</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">slice_arr &#x3D; arr[1:3]                  # 切片element &#x3D; arr[1]                       # 单个元素row_slice &#x3D; matrix[0, :]               # 第一行col_slice &#x3D; matrix[:, 1]               # 第二列sub_matrix &#x3D; matrix[0:2, 0:2]          # 子矩阵<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组操作">1.1.6. 数组操作</h3><ul><li>统计操作<pre class="line-numbers language-python" data-language="python"><code class="language-python">sum_arr &#x3D; np.sum(arr)                  # 求和mean_arr &#x3D; np.mean(arr)                # 均值max_arr &#x3D; np.max(arr)                  # 最大值min_arr &#x3D; np.min(arr)                  # 最小值std_arr &#x3D; np.std(arr)                  # 标准差<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>数学操作<pre class="line-numbers language-python" data-language="python"><code class="language-python">add_arr &#x3D; arr + 10                     # 加法mul_arr &#x3D; arr * 2                      # 乘法exp_arr &#x3D; np.exp(arr)                  # 指数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>矩阵运算<pre class="line-numbers language-python" data-language="python"><code class="language-python">dot_product &#x3D; np.dot(matrix, matrix)   # 矩阵乘法transpose &#x3D; matrix.T                    # 转置inverse &#x3D; np.linalg.inv(matrix)         # 矩阵求逆（需方阵）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="广播">1.1.7. 广播</h3><p>NumPy 支持广播，使得不同形状的数组可以进行运算。<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">result &#x3D; arr + np.array([1, 2, 3])     # 广播机制<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><h2 id="Pandas-用法">1.2. Pandas 用法</h2><h3 id="安装-Pandas">1.2.1. 安装 Pandas</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip install pandas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导入-Pandas">1.2.2. 导入 Pandas</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">import pandas as pd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建-DataFrame-和-Series">1.2.3. 创建 DataFrame 和 Series</h3><ul><li>从字典创建 DataFrame<pre class="line-numbers language-python" data-language="python"><code class="language-python">data &#x3D; &#123;&#39;A&#39;: [1, 2], &#39;B&#39;: [3, 4]&#125;df &#x3D; pd.DataFrame(data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>从列表创建 Series<pre class="line-numbers language-python" data-language="python"><code class="language-python">s &#x3D; pd.Series([1, 2, 3, 4])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="常用属性">1.2.4. 常用属性</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">columns &#x3D; df.columns              # 列名index &#x3D; df.index                  # 索引shape &#x3D; df.shape                  # 形状dtypes &#x3D; df.dtypes                # 数据类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问数据">1.2.5. 访问数据</h3><ul><li>行选择<pre class="line-numbers language-python" data-language="python"><code class="language-python">row &#x3D; df.iloc[0]                 # 按位置选择第一行row_label &#x3D; df.loc[0]            # 按标签选择第一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>列选择<pre class="line-numbers language-python" data-language="python"><code class="language-python">column_A &#x3D; df[&#39;A&#39;]                # 选择列 Acolumn_B &#x3D; df[[&#39;B&#39;]]              # 选择列 B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>切片选择<pre class="line-numbers language-python" data-language="python"><code class="language-python">subset &#x3D; df.iloc[0:2, 0:2]       # 选择子集<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="数据操作">1.2.6. 数据操作</h3><ul><li>增加/删除列<pre class="line-numbers language-python" data-language="python"><code class="language-python">df[&#39;C&#39;] &#x3D; [5, 6]                   # 添加新列 Cdf.drop(&#39;C&#39;, axis&#x3D;1, inplace&#x3D;True) # 删除列 C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>数据过滤<pre class="line-numbers language-python" data-language="python"><code class="language-python">filtered_df &#x3D; df[df[&#39;A&#39;] &gt; 1]      # 过滤条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="统计分析">1.2.7. 统计分析</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">mean_A &#x3D; df[&#39;A&#39;].mean()             # 计算均值sum_A &#x3D; df[&#39;A&#39;].sum()               # 计算求和describe &#x3D; df.describe()             # 描述性统计<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数据处理">1.2.8. 数据处理</h3><ul><li>排序<pre class="line-numbers language-python" data-language="python"><code class="language-python">sorted_df &#x3D; df.sort_values(by&#x3D;&#39;A&#39;)  # 根据列 A 排序<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>缺失值处理<pre class="line-numbers language-python" data-language="python"><code class="language-python">df.fillna(0, inplace&#x3D;True)          # 填充缺失值df.dropna(inplace&#x3D;True)             # 删除包含缺失值的行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="数据导入与导出">1.2.9. 数据导入与导出</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">df.to_csv(&#39;file.csv&#39;, index&#x3D;False)  # 导出为 CSV 文件df &#x3D; pd.read_csv(&#39;file.csv&#39;)         # 从 CSV 文件导入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="读热码转换">1.2.10. 读热码转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd.get_dummies(data, columns&#x3D;None, drop_first&#x3D;False, dummy_na&#x3D;False, ...)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>主要参数：</p><ul><li>data: 要编码的数据，可以是 DataFrame 或 Series。</li><li>columns: 指定要进行编码的列名。如果不提供，所有类型的对象列都会被处理。</li><li>drop_first: 布尔值，默认为 False。如果为 True，则删除第一个类别的列，以避免虚拟变量陷阱（dummy variable trap），即多重共线性问题。</li><li>dummy_na: 布尔值，默认为 False。如果为 True，那么将生成一个额外的列，用于指示缺失值（NaN）的存在。这一列会在原始数据中出现 NaN（缺失值）的地方标记为 1，其余为 0。</li></ul><h2 id="使用-NumPy-数组作为-DataFrame-的数据">1.3. 使用 NumPy 数组作为 DataFrame 的数据</h2><p>您还可以使用 NumPy 数组作为 DataFrame 的数据并指定索引和列名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python复制代码# 创建 NumPy 数组data &#x3D; np.array([[1, 2], [3, 4]])# 将 NumPy 数组转换为 DataFrame，并指定索引和列名df &#x3D; pd.DataFrame(data, index&#x3D;[&#39;row1&#39;, &#39;row2&#39;], columns&#x3D;[&#39;A&#39;, &#39;B&#39;])print(df)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tensorflow">1.4. tensorflow</h2><ol><li>转换为tensors，不能改变</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">tf.constant([[2, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>转换为variable</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown_基础语法</title>
      <link href="/2025/02/19/%E6%9D%82%E9%A1%B9/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/02/19/%E6%9D%82%E9%A1%B9/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法">1. markdown语法</h1><h2 id="插入引用">1.1. 插入引用</h2><h3 id="单行注释">1.1.1. 单行注释</h3><ul><li><p>示例</p><p><img src="/2025/02/19/%E6%9D%82%E9%A1%B9/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20250219113809368.png" alt="image-20250219113809368"></p></li></ul><blockquote><p>单行引用</p></blockquote><h3 id="多行引用">1.1.2. 多行引用</h3><blockquote><p>多行引用<br>引用文字</p></blockquote><h3 id="引用省略">1.1.3. 引用省略</h3><blockquote><p>引用<br>引用</p></blockquote><h3 id="引用中使用其他语法">1.1.4. 引用中使用其他语法</h3><blockquote><ol><li>表项</li><li>第二列表</li></ol></blockquote><h2 id="代码引用">1.2. 代码引用</h2><h3 id="段间代码">1.2.1. 段间代码</h3><p>这是一段段内代码</p><h3 id="段中代码">1.2.2. 段中代码</h3><p>这是段中<code>return 0</code>代码</p><h2 id="插入链接">1.3. 插入链接</h2><p>Markdown 支持两种形式的链接语法： 内联式和引用式两种形式。</p><h3 id="内联式">1.3.1. 内联式</h3><p>中括号内为显示文本，后面紧接一对圆括号. 圆括号里面放所需的 URL 链接,</p><ul><li><strong>示例：</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">[01.Markdown语法说明](https:&#x2F;&#x2F;github.com&#x2F;appinncom&#x2F;Markdown-Syntax-CN&#x2F;blob&#x2F;master&#x2F;syntax.md)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>显示效果</strong></li></ul><p><a href="https://github.com/appinncom/Markdown-Syntax-CN/blob/master/syntax.md">markdown语法说明</a></p><h3 id="引用式">1.3.2. 引用式</h3><ul><li><p>第一行：<br>引用式链接使用连续两个中括号，第一个中括号放显示文本，第二个中括号里面要填入用以辨识链接的标记。<br>标记可以有字母、数字、空白和标点符号</p></li><li><p>第二行：定义链接</p><ul><li>需要单独占一行。格式是：<br>（1）中括号中包含标记文本 可以用三个以上的空白符来添加缩进可以用三个以上的空白符来添加缩进;<br>（2）接着是冒号;<br>（3）接着是链接的 URL;<br>（4）接着是可选的标题, 可以用单引号, 双引号, 或者圆括号包围。</li></ul></li><li><p>链接的定义可以放在文件中的任何一个地方，比较常见的做法就是直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样</p></li><li><p><strong>示例</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">我们可以在 [02.Markdown中文文档][link1]这个网站查看MD语法样式。[link1]:https:&#x2F;&#x2F;markdown-zh.readthedocs.io&#x2F;en&#x2F;latest&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>展示效果</strong></p><p>  我们可以再[02.markdown中文文档][link1]这个网站查看MD语法样式</p></li></ul><pre><code>[link1]: https://markdown-zh.readthedocs.io/en/latest/</code></pre><h2 id="致谢">1.4. 致谢</h2><p><a href="https://pamarus.github.io/2020/05/03/markdown-1-ji-chu-yu-fa-xue-xi-ji-kuai-su-ru-men/">Markdown（1）：基础语法学习及快速入门 | Pamarus</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmware+mobax</title>
      <link href="/2024/11/29/%E6%9C%8D%E5%8A%A1%E5%99%A8/vmware-mobax/"/>
      <url>/2024/11/29/%E6%9C%8D%E5%8A%A1%E5%99%A8/vmware-mobax/</url>
      
        <content type="html"><![CDATA[<h1 id="VMware-网络连接失败">1. VMware 网络连接失败</h1><p>转自</p><p><a href="https://blog.csdn.net/m0_37259197/article/details/78221016">VMware 虚拟机无法连接网络解决办法_vmware 没网络-CSDN博客</a></p><h1 id="Mobaxterm-重新连接">2. Mobaxterm 重新连接</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组-链表</title>
      <link href="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>感谢<a href="https://programmercarl.com/">代码随想录</a></strong></p><h1 id="数组">1. 数组</h1><h2 id="滑动窗口">1.1. 滑动窗口</h2><p>不断调整起始位置和终止位置，处理一块区间内的数据。</p><p>在本题中实现滑动窗口，主要确定如下三点：</p><ul><li><strong>窗口内是什么？</strong></li><li><strong>如何移动窗口的起始位置？</strong></li><li><strong>如何移动窗口的结束位置？</strong></li></ul><p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p><p>窗口的起始位置如何移动：<strong>如果当前窗口的值大于等于s了，窗口就要向前移动了（也就是该缩小了）。</strong>确定好移动的情况，并处理需要优先移动窗口还是先处理窗口中的数据。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210312160441942.png" alt="滑动窗口" style="zoom:67%;"></p><p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</p><h2 id="螺旋数组">1.2. 螺旋数组</h2><p><strong>确定边界处理的不变量，确保每个子问题的结构都是相同的</strong></p><p>然后按照不变量写出每次循环的次数</p><p><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/20220922102236.png" alt="循环数组" style="zoom:50%;"></p><h1 id="链表">2. 链表</h1><h2 id="删除链表">2.1. 删除链表</h2><p><a href="https://programmercarl.com/0019.删除链表的倒数第N个节点.html#算法公开课">删除倒数第n值</a></p><p>删除列表时，最好增加dummy_head节点，删掉头节点更方便</p><p><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.png" alt="增加dummy-head"></p><h2 id="链表相交">2.2. 链表相交</h2><p><a href="https://programmercarl.com/面试题02.07.链表相交.html#思路">返回相交链表节点</a></p><p><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/20211219221723.png" alt="img"></p><ol><li>求A，B的长度$l_A,l_B$</li><li>为方便起见，将A始终未较长链表，否则将A，B交换 </li><li>根据$l_A,l_B$ 的差值，将长端链表对齐</li><li>依次比较</li></ol><h2 id="环形链表">2.3. 环形链表</h2><p><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/20220925103433.png" alt="20220925103433"></p><script type="math/tex; mode=display">slow = x+y \\fast = x+y+n(y+z) \\fast = 2*slow</script><p> 计算得到</p><script type="math/tex; mode=display">x = (n-1)(y+z)+z</script><p>代表，<strong>从头节点走向环形入口  = 从相遇点出发走n个节点</strong></p><p>// 先向前走再进行验证，否则第一个就相等了</p><h2 id="交换链表">2.4. 交换链表</h2><h3 id="交换相邻连个元素链表">2.4.1. 交换相邻连个元素链表</h3><p><a href="https://programmercarl.com/0024.两两交换链表中的节点.html#思路">交换两个元素</a></p><blockquote><p>链表中，没有头指针，增加一个虚拟头指针dummyhead</p></blockquote><ol><li>获得cur-&gt;next, 因断链，保存cur-&gt;next</li><li>获得cur-&gt;next-&gt;next,  因断链，保存cur-&gt;next-&gt;next-&gt;next</li><li>获得cur-&gt;next-&gt;next-&gt;next</li></ol><p><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/image-20250917200804409.png" alt="image-20250917200804409" style="zoom:80%;"></p><h3 id="反转链表">2.4.2. 反转链表</h3><p><a href="https://programmercarl.com/0234.回文链表.html#思路">回文链表</a></p><ol><li><p>使用快慢指针，找到链表中间节点</p><blockquote><p>slow 与 fast 同时指向 head 节点开始</p><ol><li>偶数链表， slow节点在中间靠后节点</li></ol><p><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/image-20250917212330639.png" alt="image-20250917212330639" style="zoom:80%;"></p><ol><li><p>奇数链表，slow节点在中间节点</p><p><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/image-20250917212525497.png" alt="image-20250917212525497" style="zoom:80%;"></p></li></ol></blockquote></li><li><p>后半段链表翻转</p><blockquote><ol><li>需使用pre节点存放前一节点</li><li>断开链表后，需要存放后一节点</li></ol><p><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/image-20250917213101697.png" alt="image-20250917213101697" style="zoom:80%;"></p></blockquote></li><li><p>前后两端比较，不同则返回错误</p></li></ol><h2 id="前缀和">2.5. 前缀和</h2><p>将之间计算的结果累加保存在数据中，之后使用时使用结算完成的数组</p><p><strong>需要更具题目要求，选择计算什么样的前缀数组</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">while (~scanf(&quot;%d%d&quot;, &amp;a, &amp;b))&#x2F;&#x2F;按位取反，如果结果是eof&#x3D;-1,取反之后结果为0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="双指针">3. 双指针</h1><h2 id="双指针指向头尾">3.1. 双指针指向头尾</h2><p><a href="https://programmercarl.com/1207.独一无二的出现次数.html#思路">有效的山脉数量</a></p><ol><li><code>left</code> 与 <code>right</code>分别从前后遍历</li><li>如果二者相遇，则是有效的山脉</li></ol><h2 id="移出元素">3.2. 移出元素</h2><p><a href="https://programmercarl.com/0283.移动零.html#思路">移出0</a></p><ol><li>slow 指向新的指针</li><li>fast 指向旧的指针</li><li>将旧指针的元素放在新指针的位置</li></ol><h2 id="右移元素">3.3. 右移元素</h2><p><a href="https://programmercarl.com/0189.旋转数组.html#思路">右移数组元素</a></p><p>依旧可以使用<a href="#移出元素">移动元素</a> 的思想</p><ol><li>slow 指向 新的指针</li><li>fast 指向旧的指针</li></ol><blockquote><p>需要注意：</p><ol><li>移动数据，会对数据进行覆盖，应复制一个元素</li><li>fast指针不能越界，需进行 <code>fast = (fast+1) % nums.size()</code></li></ol></blockquote><h2 id="左右元素相同">3.4. 左右元素相同</h2><ol><li>left, right 分别代替<code>i</code>左右元素之和</li><li><code>right = sum - left - num[i]</code></li></ol><h1 id="感谢">4. 感谢</h1><p><a href="https://programmercarl.com/">代码随想录</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++进程管理（-）-thread</title>
      <link href="/2024/09/21/c/c-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2024/09/21/c/c-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="cb7f208f3434da8475a544cfd718ddf09dd062cc47c28741f3e9780822c9cdde"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
