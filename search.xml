<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数学公式无法显示</title>
      <link href="/2025/09/13/hexo/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/"/>
      <url>/2025/09/13/hexo/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="数学公式无法显示">1. 数学公式无法显示</h1><p>转载自<a href="https://blog.csdn.net/crazy_scott/article/details/79293576">hexo下LaTeX无法显示的解决方案_hexo中latex直接空白了-CSDN博客</a></p><h2 id="安装插件">1.1. 安装插件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-math –save # mathjax插件npm uninstall hexo-renderer-marked –savenpm install hexo-renderer-kramed –save  # hexo 的渲染引擎<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="解决语义冲突">1.2. 解决语义冲突</h2><ol type="1"><li>博客根目录，<code>node_modules\kramed\lib\rules\inline.js</code>中修改第11行</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_>])/,</span><span class="token literal-property property">escape</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\([`*\[\]()#$+\-.!_>])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2" type="1"><li>同一文件，第二十行</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><span class="token literal-property property">em</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\*((?:\*\*|[\s\S])+?)\*(?!\*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="配置文件">1.3. 配置文件</h2><p>主题目录下的<code>_config.yml</code>文件</p><ol type="1"><li>mathjax 默认false 修改为 true</li><li>更换cdn 的url ，渲染速度更快</li></ol><pre class="line-numbers language-json" data-language="json"><code class="language-json"># MathJax Supportmathjax:  enable: true  per_page: true  #cdn: &#x2F;&#x2F;cdn.bootcss.com&#x2F;mathjax&#x2F;2.7.1&#x2F;latest.js?config&#x3D;TeX-AMS-MML_HTMLorMML  cdn: &#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.1&#x2F;MathJax.js?config&#x3D;TeX-AMS-MML_HTMLorMML<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="博客">1.4. 博客</h2><p>如果使用到数学公式，在博客的Front-matter中打开mathjax开关</p><pre class="line-numbers language-none"><code class="language-none">---title: index.htmldate: 2018-2-8 21:01:30tags:mathjax: true--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prism 更换代码块格式</title>
      <link href="/2025/09/13/hexo/prism-%E6%9B%B4%E6%8D%A2%E4%BB%A3%E7%A0%81%E5%9D%97%E6%A0%BC%E5%BC%8F/"/>
      <url>/2025/09/13/hexo/prism-%E6%9B%B4%E6%8D%A2%E4%BB%A3%E7%A0%81%E5%9D%97%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="prism-更换代码块格式">1. prism 更换代码块格式</h1><h2 id="格式介绍">1.1. 格式介绍</h2><p>hexo 中支持 <a href="https://github.com/highlightjs/highlight.js">highlight.js</a> 与 <a href="https://github.com/PrismJS/prism">prismjs</a> 两种代码高亮库</p><p>两种库的下载地址</p><ol type="1"><li><a href="https://highlightjs.org/download">highlight</a></li><li><a href="https://prismjs.com/">Prism</a></li></ol><p>hexo 切换代码高亮样式中, 在<code>highlight</code>与<code>prism</code>中进行切换</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">syntax_highlighter: prismjshighlight:  enable: false  line_number: true  auto_detect: false  tab_replace: &#39;&#39;  wrap: true  hljs: falseprismjs:  enable: true  preprocess: true  line_number: true  # 此处与下方的prism_plugin都需要开启  tab_replace: &#39;&#39;prism_plugin:  mode: &#39;preprocess&#39;    # realtime&#x2F;preprocess  theme: &#39;tomorrow&#39;  # 主题都行  line_number: true    # default false  #如果为true就会显示代码号，而且会分两边显示，显得不友好  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>prism 较 highlight 更好用，以下介绍prism <a href="https://www.jianshu.com/p/f395d92a1110">Hexo博客：六、prism代码高亮 - 简书</a></p><h2 id="prism">1.2. prism</h2><ol type="1"><li><p>从<a href="https://prismjs.com/">Prism</a>下载样式</p><ol type="1"><li>主题： 自行选择，plugin中自带主题</li><li>语言： 自行选择</li><li>plugins: line_number 一定要选</li></ol></li><li><p>将样式保存在<code>hexo-blog\themes\自己的主题\source\libs\prism\prism.js</code></p><blockquote><p>或使用 <a href="https://www.jianshu.com/p/f395d92a1110">在head 和 footer 中增加js 与 css 的引用</a>， 但是我没有成功，可能是主题不同，文件后缀不同导致</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/09/11/test/"/>
      <url>/2025/09/11/test/</url>
      
        <content type="html"><![CDATA[<p><span class="math display">$$隐藏输出\\mathbf{H}*t = \phi(\mathbf{X}\*t \mathbf{W}\*{xh} + \mathbf{H}*{t-1} \mathbf{W}_{hh} + \mathbf{b}_h).\输出\\mathbf{O}_t = \mathbf{H}*t \mathbf{W}*{hq} + \mathbf{b}_q.$$</span></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import numpy as npimport os<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>25美赛</title>
      <link href="/2025/09/09/%E6%9D%82%E9%A1%B9/25%E7%BE%8E%E8%B5%9B%E5%9B%9E%E9%A1%BE/"/>
      <url>/2025/09/09/%E6%9D%82%E9%A1%B9/25%E7%BE%8E%E8%B5%9B%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="review_25">1. review_25</h1><h2 id="两阶段预测">1.1. 两阶段预测</h2><h3 id="lightgbm">1.1.1. LightGBM</h3><p>预测是否有概率获奖，二分类，不能获奖置为0</p><p>原理：基于决策树，采用梯度提升框架，迭代训练一系列的决策树，组合形成一个强学习器。每次迭代前，新的弱学习其会你和前一个模型预测的残差（梯度），从而逐步减少模型的误差。</p><p>主要使用：</p><ol type="1"><li>梯度采样，采样梯度较大的样本，较少训练数据量</li><li>基于EFB 特征捆绑，将少数几个特征捆绑，减少训练特征</li><li>提高训练并行策略</li></ol><p>因此成为Light，更轻量化的梯度提升机器学习框架</p><h3 id="random-effects-tobit-model">1.1.2. random effects Tobit model</h3><p><span class="math display"><em>y</em>*<sub><em>i</em></sub> = <em>β</em>′<em>x</em><sub><em>i</em></sub> + <em>ϵ</em><sub><em>i</em></sub></span></p><p>截断等式中，等式左边预测的并不是获得奖牌数量，因为对于真实获得0奖牌的国家，其因变量对应的<span class="math inline"><em>y</em></span>可能是负值，因此不能直接使用最小二乘法。</p><p>使用<span class="math inline">$y_i = \begin{cases} y_i^* &amp; \text{if } y_i^* &gt; 0 \\ 0 &amp; \text{if } y_i^* \le 0 \end{cases}$</span> 进行最大似然估计y，求出系数</p><p>因为模型对不同国家的不同时间进行观测， 不同国家具有潜在的异质性，需要对不同的国家增加变量<span class="math inline"><em>u</em><sub><em>i</em></sub></span>，同一国家不同时间段，个体随机效应系数是相同的</p><p>预测奖牌数量，预测过程中没有小于0的值， 因为对第一阶段中能获奖的国家进行预测，本阶段预测的国家奖牌数量均大于1</p><h2 id="量化国家---项目关系">1.2. 量化国家 - 项目关系</h2><h3 id="hhi">1.2.1. HHI</h3><p>Herfindahl-Hirschman Index 起初用于衡量企业的垄断关系，这里用来量化国家在某个项目中的领先地位</p><h3 id="imp">1.2.2. IMP</h3><p>Monopoly Power Index ,量化某个项目对于国家的重要程度，</p><p><span class="math inline"><em>I</em><em>M</em><em>P</em> = <em>i</em><em>国</em><em>占</em><em>据</em><em>的</em><em>H</em><em>H</em><em>I</em><em>系</em><em>数</em>/<em>该</em><em>国</em><em>家</em><em>总</em><em>的</em><em>H</em><em>H</em><em>I</em><em>系</em><em>数</em></span></p><h2 id="great-coach-作用">1.3. great coach 作用</h2><h3 id="hhi-1">1.3.1. HHI</h3><p>判断某个国家在该项目的领先地位变化</p><h3 id="welchs-t-检验">1.3.2. Welch’s t 检验</h3><p><span class="math display">$$t = \frac{两部分均值之差}{两部分均值的方差}$$</span></p><p>t 值反映两者之间是否存在显著差异， 当波动性超过拒绝值时，可以判断两部分的方差具有波动，标识此处发生断点</p><p>针对教练任教时间，检测领先地位是否有断点出现，检测P值</p><h3 id="投资项目">1.3.3. 投资项目</h3><p>优先选择金牌数量少、这个项目该国家具有一定的基础并且对国家总体项目重要程度，而且这个项目开放，不要有垄断国家的出现。</p><h2 id="结果分析">1.4. 结果分析</h2><ol type="1"><li>好的教练对项目的长期提升具有极大的帮助</li><li>限制单个国家的参赛人数，可以降低项目的垄断系数，例如：足球本是资本投入项目，应有某个大国垄断，但是因为一次只有一对参赛，垄断系数较低；相反，田径比赛的垄断系数</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deepseek 调用方法</title>
      <link href="/2025/09/02/%E6%9D%82%E9%A1%B9/deepseek-%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2025/09/02/%E6%9D%82%E9%A1%B9/deepseek-%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>c</p><h1 id="deepseek-调用方法">1. deepseek 调用方法</h1><h2 id="api_key设置">1.1. API_KEY设置</h2><ol type="1"><li><p>设置<code>URL = "https://deepseek.com/chat/completions/"</code></p></li><li><p>导入系统变量，借助<code>os</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">os.getenv(&quot;变量名称&quot;, default &#x3D; 默认值)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="请求头">1.2. 请求头</h2><ol type="1"><li><code>authorization</code> : Bearer API_KEY， 认证信息</li><li><code>Content-Type: application/json</code>, 请求内容格式，post 仅能使用Json</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">header &#x3D; &#123;    &quot;authorization&quot;: f&quot;Bearer &#123;API_KEY&#125;&quot;    &quot;Content-Type&quot;: &quot;application&#x2F;json&quot;,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="请求内容payload">1.3. 请求内容payload</h2><ol type="1"><li><code>model</code>: 选择模型</li><li><code>messages</code>: 发送的内容数组<ol type="1"><li><code>role</code>：角色</li><li><code>content</code>: 内容</li></ol></li><li><code>temperature</code>: 设置为 0 ，模型输出更加稳定， 1，模型输出更发散</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload &#x3D; &#123;    &quot;model&quot;: deepseek-chat,    &quot;messages&quot;:[        &#123;&quot;role&quot;: &quot;system&quot;, &quot;content&quot;:&quot;命令要求&quot; &#125;，        &#123;&quot;role&quot;: &quot;User&quot;, &quot;content&quot;: &quot;用户输入&quot;&#125;,        &#123;&quot;role&quot;: &quot;&quot;&#125;    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发送请求">1.4. 发送请求</h2><p>发送内容，使用<code>post</code>请求</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">resp &#x3D; requests.post(url, header &#x3D; header, payload &#x3D; payload, timeout &#x3D;timeout)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="response-返回内容">1.5. response 返回内容</h2><p>返回内容在<code>resp.json()['choices'][0]['message']['content']</code>, 提取出结果并返回</p><figure><img src="/2025/09/02/%E6%9D%82%E9%A1%B9/deepseek-%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/image-20250902102742498.png" alt="image-20250902102742498"><figcaption aria-hidden="true">image-20250902102742498</figcaption></figure><h1 id="翻译">2. 翻译</h1><ol type="1"><li><p>将文本块切分成小段，指定分块大小，存放在数组中</p></li><li><p>对分段后每一段进行翻译</p><blockquote><h2 id="for-遍历">2.1. for 遍历</h2><ol type="1"><li><p><code>for i in 迭代器</code></p><p>迭代器: 列表等</p></li><li><p>for idx, ck in enumerate(n):</p></li><li><p>for i in range(1, n) :</p><p>范围是[1,n）</p></li></ol></blockquote></li></ol><h1 id="day3">3. day3</h1><ol type="1"><li><p>输入错误： <code>EOFerror</code></p></li><li><p><code>requests.post</code> 发送请求时，需要包裹在<code>try</code>中</p></li><li><p><code>requests</code>发送数据，解析数据检查</p><ol type="1"><li><p>检查requests是否接收</p><p><code>except requests.exception.RequestException as e</code></p></li><li><p>检查网络是否</p><p><code>resp.ok</code></p></li><li><p>数据转换是否成<code>json</code></p><p><code>except ValueError</code></p></li><li><p>是否可以从数据中提取出值</p><p>`except {KeyError, IndexError, TypeError}</p></li></ol></li></ol><h2 id="使用超时重传发送">3.1. 使用超时重传发送</h2><p>如果遇到<code>rest</code>请求错误，或者返回的<code>resq</code>状态码有问题，使用退避算法，进行规避<code>n</code>次，超过则返回</p><ol type="1"><li>重复遍历<code>n</code>次</li><li>如果遇到<code>请求错误</code>,查看是否超过重复次数，没有，<code>time.sleep</code>一段时间后，再次运行重传</li><li>超过重复请求后，返回错误</li></ol><h1 id="day4">4. day4</h1><h2 id="markdown-渲染">4.1. markdown 渲染</h2><p>使用<code>rich</code>库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from rich.console import Consolefrom rich.markdown import Markdownconsole &#x3D; Console()markdown_string &#x3D; &quot;&quot;&quot;&quot;&quot;&quot;markdown &#x3D; Markdown(markdown_string)console<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="输出markdown-到word-文件中">4.2. 输出markdown 到word 文件中</h2><ol type="1"><li>首先检查文件目录存在</li></ol><p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import osoutput_dir &#x3D; os.path.dirname(output_file)if output_dir and not os.path.exist(output_dir):   os.makedirs(output_dir)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><ol start="2" type="1"><li>使用<code>pypandoc</code>输出</li></ol><p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import pypandoc&quot;&quot;&quot;to: &quot;目标格式&quot;format：&quot;当前格式&quot;outputfile: &quot;输出文件&quot;&quot;&quot;&quot;pypandoc.convert_text(makedown_string, to&#x3D; &#39;docx&#39;, format &#x3D; &#39;markdown&#39;, outputfile &#x3D; output_filepath)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><ol start="3" type="1"><li>同时可以尝试检查<code>ImportError , Exception</code>等错误</li></ol><h3 id="直接调用pandoc-命令行工具">4.2.1. 直接调用pandoc 命令行工具</h3><ol type="1"><li><p>创建临时文件.md存储markdown内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">temp_md_file &#x3D; &quot;temp.md&quot;with open(temp_md_file, &#39;w&#39;, encoding&#x3D; &#39;utf-8&#39;) as f:    f.write(m_str)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>subprocess.run</code>执行命令</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import subprocesscommand &#x3D; [&#39;pandoc&#39;, &#39;-f&#39;, &#39;markdown&#39;, &#39;t&#39;,&#39;doc&#39;, &#39;o&#39;, output_filename, temp_md_file]result &#x3D; subprocess.run(command, capture_output &#x3D; True, text &#x3D; True, encoding &#x3D; &#39;utf-8&#39;)if result.returncode &#x3D;&#x3D; 0:    return &quot;转换正确&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最后删除临时文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">if os.path.exist(temp_md_file):    os.remove(temp_md_file)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1 id="section">5. 9.8</h1><p>win11 主要文件夹路径</p><p>任务栏：<code>C:\Users\用户名\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar</code></p><p>开始菜单：<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs</code></p><p>IE开始菜单<code>C:\Users\用户名\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\StartMenu</code></p><h1 id="section-1">6. 9.10</h1><h2 id="path类">6.1. path类</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">from pathlib import Pathp_path &#x3D; Path(路径)# 组合路径config_path &#x3D; p_path &#x2F; &quot;config.txt&quot; .name # 文件名.suffix # 文件后缀.stem # 无后缀的文件名.parent # 父目录.is_absolute # 是否为祖先路径.revolve() # 转换为相对路径# 创建文件# parents&#x3D;True 会创建所有不存在的父目录# exist_ok&#x3D;True 避免目录已存在时报错Path(路径).mkdir(exist_ok &#x3D; True, parents &#x3D; True)Path(路径).touch()  # 创建空文件p_path.write_text(str) # 写入文件content &#x3D; file.read_text() # 读取文件内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> GPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> GPT </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件读取方法</title>
      <link href="/2025/09/01/%E6%9D%82%E9%A1%B9/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95/"/>
      <url>/2025/09/01/%E6%9D%82%E9%A1%B9/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="文件读取">1. 文件读取</h1><h2 id="open函数">1.1. open()函数</h2><ol type="1"><li><p><code>open</code>函数配合<code>read() / readline() / readlines()</code></p><p><code>open(file, mode ='r' , encoding = None)</code></p></li><li><p><code>with</code>语句确保文件在使用完毕后自动关闭</p></li></ol><pre class="line-numbers language-pythoN" data-language="pythoN"><code class="language-pythoN">with open(&#39;example.txt&#39;,&#39;r&#39;, encoding &#x3D; &#39;utf-8&#39;) as f:    content &#x3D; f.read()  # 读取整个文件    line1 &#x3D; f.readline() # 读取第一行    lines &#x3D; f.readlines() # 读取所有，作为一个列表    for i, line in enumerate(f):        print(i, line)    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 文件读取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http请求消息</title>
      <link href="/2025/09/01/%E6%9D%82%E9%A1%B9/http%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF/"/>
      <url>/2025/09/01/%E6%9D%82%E9%A1%B9/http%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="http-请求格式">1. http 请求格式</h1><h2 id="section">1.1. </h2>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论</title>
      <link href="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/"/>
      <url>/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/</url>
      
        <content type="html"><![CDATA[<h1 id="图论-搜索">1. 图论 搜索</h1><p><strong>感谢<a href="https://programmercarl.com/0101.对称二叉树.html#思路">代码随想录</a></strong></p><h2 id="图论基础">1.1. 图论基础</h2><h3 id="邻接矩阵">1.1.1. 邻接矩阵</h3><p>邻接矩阵使用二维数组保存信息，矩阵中每个节点代表一个元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">typedef struct Node&#123;    int data;&#125;Node;typedef vector&lt;vector&lt;Node&gt;&gt; Graph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="邻接表">1.1.2. 邻接表</h3><p>邻接表—— 一个节点连接中存在弧 节点的首指针</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; 弧节点信息typedef struct arc&#123;int info;struct arc* next;&#125;arc, *acrlink;&#x2F;&#x2F; 节点信息，包含弧节点首指针typedef struct Node&#123;    int info;    arclink* firstArc;&#125;Node,Nodelink;&#x2F;&#x2F; 使用数组存放typedef vector&lt;Node&gt; Graph;&#x2F;&#x2F; 使用链表存放typedef link&lt;Node&gt; Graph;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有向图">1.1.3. 有向图</h3><p>有向图的边<span class="math inline">(<em>a</em>, <em>b</em>)</span>， 其中只存放 a-&gt;b的边</p><h3 id="无向图">1.1.4. 无向图</h3><p>无向图的边(a, b), a 节点中存放一条a-&gt;b的边， b节点存放一条 b-&gt;a的边</p><h3 id="连通分量">1.1.5. 连通分量</h3><p>无向图中 能够从一个节点到所有的节点的 <strong>最大子图</strong></p><figure><img src="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/20240511102449.png" alt="123 是连通分量， 12不是连通分量"><figcaption aria-hidden="true">123 是连通分量， 12不是连通分量</figcaption></figure><h3 id="强连通分量">1.1.6. 强连通分量</h3><p>有向图中， 增加了方向，依旧是连通分量成为强连通分量</p><h3 id="弱连通分量">1.1.7. 弱连通分量</h3><p>有向图中，增加了方向，不是连通分量 ； 减少方向，是连通分量，是弱~；</p><figure><img src="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/20240511115235.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><h2 id="岛屿数量">1.2. 岛屿数量</h2><ol type="1"><li>每次遍历可以得到一个连通分量， 遍历总次数 = 所有连通分量= 岛屿数量</li><li>使用visited 数组标识 已访问节点</li></ol><h3 id="深度搜索dfs">1.2.1. 深度搜索dfs</h3><ol type="1"><li><p>中止条件：</p><ol type="1"><li>节点访问过 ，<code>visited[i][j]  = true</code></li><li>节点没有相连，<code>g[i][j] = 0</code></li></ol></li><li><p>处理逻辑：</p><ol type="1"><li><p>开始对其节点遍历，将其标识为<code>true</code></p></li><li><p>对所有相邻节点遍历</p><blockquote><p>图中相邻节点是其上、下、左、右坐标</p></blockquote></li><li><p>对节点遍历之前需要对节点坐标进行检查</p></li></ol></li><li><p>返回值，没有返回值</p></li></ol><h3 id="广度搜索bfs">1.2.2. 广度搜索BFS</h3><ol type="1"><li><p>取出队列首元素，将其所有相邻节点加入队列中，依次遍历，直到队列中元素为空</p></li><li><p>使用<code>visited</code> 数组标识遍历过的节点</p><ol type="1"><li><p>在加入队列时，标记已访问</p><blockquote><p>加入队列时没有标记， 出队列时标记，下一个访问当前节点会再次放入队列中，多次遍历</p><figure><img src="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/20250124094043.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure></blockquote></li></ol></li></ol><h2 id="岛屿的最大面积">1.3. 岛屿的最大面积</h2><p>一次遍历 = 一个连通分量= 一个岛屿， 统计每次遍历过程中的最大遍历节点数量</p><blockquote><p>写<code>if-else</code>时， 尽可能把结果都包含在内，没有操作时再不写</p><ol type="1"><li>有节点遍历时，节点数量 +1</li><li>没有节点遍历时，节点数量初始为0</li></ol></blockquote><ol type="1"><li><code>dfs</code><ol type="1"><li>优先处理节点，进入函数后，首先操作本节点， <code>count</code>初始为0</li><li>优先处理相邻节点，须在进入下一节点时，就将下一个节点处理，count 初始为1</li></ol></li><li><code>bfs</code>，只有在加入队列时处理，处理的是当前节点，初始化为0</li></ol><h2 id="孤岛的最大面积">1.4. 孤岛的最大面积</h2><p>孤岛 = 四周没有与图的边沿相连</p><ol type="1"><li>将所有与陆地相连的岛都置为海洋</li><li>计算剩下岛的面积</li></ol><p>两个边沿， 从四个边沿开始遍历，遍历的节点置为0，使用grid作为标识，此时可不用visited</p><ol type="1"><li><code>[0][i]</code>, <code>[n-1][i]</code></li><li><code>[i][0]</code>, <code>[i][m-1]</code></li></ol><h2 id="水流问题">1.5. 水流问题</h2><p><a href="https://programmercarl.com/kamacoder/0103.水流问题.html#思路">求出能流向低处的节点</a></p><ol type="1"><li>暴力求解，求当前节点能否到达 边界</li><li>逆推， 从边界向上推，看左边界能到的哪些节点<code>firstBoard</code>，以及有边界<code>secondBoard</code></li><li>左右边界都能到达，为逆推结果</li></ol><h2 id="建造最大岛屿">1.6. 建造最大岛屿</h2><p><a href="https://programmercarl.com/kamacoder/0104.建造最大岛屿.html#思路">海洋中造出一块岛， 连接其他岛屿，组成最大面积</a></p><ol type="1"><li><p>首先统计每个岛屿的面积，并为每个岛屿附上标识，并建立标识对应的面积</p><blockquote><p>建立标识后，可以标识当前节点已被访问，可以用这个标识代替<code>visited</code></p></blockquote></li><li><p>统计 0 值附近所有岛屿面积的和，不同的岛屿需要去重</p></li><li><p>比较出最大值</p></li></ol><h2 id="岛屿的周长">1.7. 岛屿的周长</h2><p><a href="https://programmercarl.com/kamacoder/0106.岛屿的周长.html#思路">岛屿与海相邻的周长</a></p><p>岛的陆地是一个正方形，每一条边，与海洋相连都是陆地周长，因此可以<strong>使用图论的方法</strong>，而不是总时搜索</p><ol type="1"><li><p>陆地地界的边沿是有一块海洋，边长加1</p><blockquote><p>矩阵边沿也是海洋，也要统计</p></blockquote></li><li><p>每两块相邻的陆地都需要减去2个边沿，= 每相邻一块陆地，需要减去一个边沿</p><p>统计所有陆地<code>sum</code>,总边数<code>4*sum</code> ，统计相邻陆地数<code>cover</code>,减去边沿<code>cover</code></p><p>陆地边沿 = <code>sum*4 - cover</code></p></li></ol><h2 id="字符串接龙">1.8. 字符串接龙</h2><p><a href="https://kamacoder.com/problempage.php?pid=1183">字符串作为路径，广度搜索</a></p><figure><img src="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/20250317105155.png" alt="字符串接龙是无向图"><figcaption aria-hidden="true">字符串接龙是无向图</figcaption></figure><ol type="1"><li>无向图中可以使用<code>广度搜索</code>，找打目标节点，即为<code>最短路径</code></li><li>遍历时需要使用<code>visited</code>标识节点，避免循环，此时<code>visited</code>可以使用<code>set</code>标识，也可以使用<code>map</code>，同时标识走到这里的最短路径</li><li>对字符串的替换是对图可行路径的查找，找到了在集合中，标识找到了一条可行路径</li></ol><h2 id="邻接表遍历">1.9. 邻接表遍历</h2><p>邻接表中是以，节点作为数组元素，同时还有节点后指向 一个链表，指向与节点相连的节点</p><p><code>vector&lt;list&lt;int&gt;&gt; g(n+1)</code>，以数组序号作为节点元素，数组的<code>list</code>作为相邻链表</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">&#x2F;&#x2F; 深搜和广搜中都需要对相邻节点的列表进行遍历&#x2F;&#x2F; list的遍历方法&#x2F;&#x2F;1. 指针for(auto it &#x3D; list.begin() ; it !&#x3D;  list.end() ; i++)&#123;&#125;&#x2F;&#x2F; 使用遍历for(auto i : list)&#123;&#125;&#x2F;&#x2F; 不能使用类似vector 的for(int i &#x3D; 0 ; i &lt; vector.size() ;i++)&#123;&#125;，list不能使用下标去访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="算法">2. 算法</h1><h2 id="并查集">2.1. 并查集</h2><p>含义： 一个集合中的元素指向同一个根节点， 根节点指向自身</p><ol type="1"><li>初始化，所有节点指向自身</li><li>插入时，将节点 -&gt; 该集合的<code>根节点</code><ol type="1"><li>如果是集合 插入 集合， 需要将集合 的<code>根节点</code> 指向 另一个集合的 <code>根节点</code></li></ol></li><li>比较时，比较两个元素的根节点是否相同</li><li>查找， 迭代查找根节点(指向自身的 节点)<ol type="1"><li>并查集的缩小： 在查找到根节点时， 将当前元素的<code>父节点</code>指向<code>根节点</code>，减少深度，加快查询</li></ol></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">n &#x3D; 1000;vector&lt;int&gt; father &#x3D; vector&lt;int&gt;(1000, 0);void init(vector&lt;int&gt;&amp; father)&#123;    for(int i &#x3D; 0 ; i&lt; father.size() ; i++)&#123;        father[i] &#x3D; i ;    &#125;&#125;void find(vector&lt;int&gt; father, int u  )&#123;    if( u &#x3D;&#x3D; father[u]) return u;    else&#123;       int u_father &#x3D; find(father[u]);        father[u] &#x3D; u_father;        &#x2F;&#x2F; 简化为 father[u] &#x3D; find[u]        return u_father;    &#125;&#125;bool isSame(vector&lt;int&gt; father, int u,  int v)&#123;  int u_father &#x3D; find(u);    int v_father &#x3D; find(v);    return u_father &#x3D;&#x3D; v_father;&#125;void join(vector&lt;int&gt; father, int u , int v)&#123;    int u_father &#x3D; find(u);    int v_father &#x3D; find(v);    if(u_father &#x3D;&#x3D; v_father) return ;    &#x2F;&#x2F; 注意这里插入时，插入的是根节点，不是将u,v 插入    else father[v_father] &#x3D; u_father;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无向图中是否有路径">2.2. 无向图中是否有路径</h2><ol type="1"><li>将所有的节点加入并查集中</li><li>查看节点<code>i, j</code> 是否重复出现在并查集中，如果是，那就有路径</li></ol><h2 id="无向图中冗余连接">2.3. 无向图中冗余连接</h2><ol type="1"><li>如果边<code>i, j</code> 冗余，=》 顶点<code>i,j</code>之前就插入在并查集中，具有相同的根</li><li>删除最后一个并查集相同根 的 两个节点组成的边</li></ol><h2 id="有向图中的冗余连接">2.4. 有向图中的冗余连接</h2><p>与<a href="#无向图中冗余连接">无向图</a> 不同，有向图冗余边有以下情况：</p><ol type="1"><li>入度为2 的节点， 一定会有两个边，删除其中1条</li><li>如果删除只有还是一个树 ， 这条边可以删除， = 所有节点可以组成并查集</li><li>如果不能构成树，那一定是一个环， 这个边就不是应该删除的边，应是零一条边</li><li>如果没有入度为1的节点，一定是有环图<ol type="1"><li>将节点依次加入并查集中，删除最后一个形成环的节点</li></ol></li></ol><blockquote><p>删除冗余的最后一条边</p><ol type="1"><li>成环的最后一条边 -&gt; 最后使得并查集冗余的边</li><li>节点度为2的边，二选一，选择最后一个插入列表的进行判断</li></ol></blockquote><h2 id="最小生成树">2.5. 最小生成树</h2><h3 id="prim">2.5.1. prim</h3><p>算法步骤：</p><p>初始化： <code>minDist</code>中<code>默认权重</code>不要超过 <code>最大值</code>，否则无法选择节点</p><ol type="1"><li>选择距离最小生成树最小的节点</li><li>将节点加入树中</li><li>更新其他节点到最小生成的距离</li></ol><p>使用数据结构<code>minDist</code> 保存节点到当前生成树的最短路径，</p><blockquote><ul><li>最终， <code>minDist</code>中保存着最小生成树的权值</li><li>isTree 记录当前节点是否在树中</li><li>parent 记录与其相连的节点， 记录生成树边</li></ul></blockquote><h3 id="kruscal">2.5.2. kruscal</h3><p>对所有边操作，之前邻接表，邻接矩阵都是对顶点的描述，这里需要定义关于边的数据结构</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">typedef struct edge&#123;    int e1;    int e2;    int w;&#125;Edge ; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol type="1"><li>将所有边保存</li><li>按照权重对边，从小到大<strong>排序</strong></li><li>对所有边遍历<ol type="1"><li>在同一个并查集中，跳过</li><li>在不同集合中，加入结果，并加入在同一个并查集中</li></ol></li></ol><h2 id="拓扑排序">2.6. 拓扑排序</h2><p><a href="https://programmercarl.com/kamacoder/0047.参会dijkstra朴素.html#思路">topology_sort</a></p><p>对于一个给定的有向图，转换为线性的排序； 图中有环时，不能做线性排序</p><p>=&gt; 节点入度为<code>0</code> 的时候，没有依赖，选择作为结果</p><blockquote><ul><li><code>拓扑排序</code>可以用于<code>有向图</code> 无环判断</li><li><code>无向图</code>的环判断可以使用<code>并查集</code>判断</li></ul></blockquote><ol type="1"><li><p>统计所有边入度， a-&gt;b， 统计<code>b</code>节点的度</p></li><li><p>选择度为0 的节点，加入待处理集中，可以使用<code>queue</code>作为待处理</p></li><li><p>删除节点<code>i</code>，并将其加入结果集中</p><blockquote><p>删除节点<code>i</code>，是删除与其相邻的节点，此时入度为0 ，只有<code>i-&gt;j</code>的边，将节点<code>j</code>入度 -1 即可</p></blockquote></li></ol><h1 id="最短路径">3. 最短路径</h1><h2 id="单源最短路径dijkstra">3.1. 单源最短路径Dijkstra</h2><p>选择 节点<code>i</code> 到<strong>原点</strong>的最近距离</p><blockquote><p>prim 寻找节点<code>i</code>到<strong>生成树</strong>的最近距离，原理相同，不过<code>minDist</code>存放值不同1</p></blockquote><ol type="1"><li><p>选择距离源点最近的节点</p><blockquote><p>dijkstra 的源点到 源点的距离为<code>0</code>，初始化源点为0</p><p>prim 初始树没有生成，初始节点均为<code>INT_MAIX-1</code>(方便选择第一个节点)</p></blockquote></li><li><p>将节点插入结果集中，标志为已访问</p></li><li><p>更新节点相邻节点 的 <code>minDist</code></p></li></ol><p>借助三个数组：</p><ol type="1"><li><code>minDist[j]</code>: <code>j</code>到源点的最小值</li><li><code>visited[j]</code>： <code>j</code>是否已找到最小值</li><li><code>parent[j]</code>: 与<code>j</code>相连的父节点，每次更新最小值时，更新</li></ol><h3 id="使用边进行dijkstra">3.1.1. 使用边进行Dijkstra</h3><p>其中有两处修改</p><ol type="1"><li><p>使用邻接表代替邻接矩阵</p></li><li><p>使用堆排序选择 距离源点最近的节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cur &#x3D; q.top() ;&#x2F;&#x2F; 最小的距离节点q.pop();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>替换掉使用<code>for</code>对<code>minDist</code>的遍历，查找最小距离节点</p></li><li><p>遍历中，使用对边遍历，代替对节点遍历，</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">while(!q.empty()) &#x2F;&#x2F; 所有的边都保存在q中<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>修改之后使用的数据结构：</p><ol type="1"><li><code>priority_queue&lt;Arc, vector&lt;Arc&gt; , greater&lt;Arc&gt;&gt;</code> 对边权重的小顶堆</li></ol><blockquote><p>小顶堆中a &lt; b，需要使用 &gt;</p><ol type="1"><li><p>重定义Arc中的<code>&gt;</code> ，使其能够 <code>&gt;</code>比较运算</p></li><li><p>使用greater<arc> ，使用<code>&gt;</code></arc></p><p>也可以重定义一个比较类，替换2</p></li></ol><p>比较类写法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">class Arc&#123;public:    int node;    int w;    &#x2F;&#x2F; &gt; 紧跟在operator之后    &#x2F;&#x2F; 参数使用 const + &amp;    &#x2F;&#x2F; 函数需要使用const     bool operator&gt;(const Arc&amp; other) const&#123;        return this-&gt;w &gt; other.w;    &#125;&#125;; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="bellman-ford算法">3.2. Bellman-ford算法</h2><p>可以用于解决具有负权边的结果 ， 对边进行缩放，此时可以只存储边</p><blockquote><p>dijskra不能处理具有负权边的结果， 使用的是贪心算法，选择当前最近的边，对 负权边忽视最优结果</p></blockquote><p>Bellman-ford算法类似于动态规划的算法， <code>minDist[i] = min(minDist[i] ,  minDist[j-1] + value)</code>,</p><p>通过<code>n-1</code> 次迭代， 一定能找到最小边</p><ol type="1"><li><p>遍历<code>n-1</code>次</p></li><li><p>对所有边进行一次修改，每次修改更新最小边</p><p>如果<code>from</code> 节点 = <code>INT_MAX</code> ，没有到达<code>from</code> 节点，此时不修改<code>MinDist</code>结果</p></li></ol><h3 id="动态规划思想">3.2.1. 动态规划思想</h3><p><code>dp[k][j]</code> 是最多 <code>k</code>条边经过的最短路径，有两种计算结果</p><ol type="1"><li>刚好<code>k</code>次到达最短路径，<code>dp[k-1][v] +  weight</code>， <code>v</code>是能到达 <code>j</code>的节点</li><li>前<code>k-1</code>次已经到达最短路径， <code>dp[k-1][j]</code></li></ol><blockquote><p><code>dp[k][j] = min(dp[k-1][j] , min(dp[k-1][v]))</code></p></blockquote><h3 id="bellman-ford-队列优化算法">3.2.2. Bellman-ford 队列优化算法</h3><p>边<code>i-j</code> 中，只有<code>minDist[i]</code> 的权重发生改变，相邻的<code>minDist[j]</code>才需要发生改变， 与<code>i</code>相邻的所有节点都需要更新，此时使用<code>邻接表</code>存储图效果最好</p><p>此时，使用队列<code>queue</code>存放节点<code>i</code>， 作为待处理节点</p><p>同一节点可能未处理之前，可能被修改对此，因此使用<code>visited</code>数组，标识节点是否在队列中，在队列中不需要重复加入</p><blockquote><p>注意： 优化算法只对较少边的情况进行优化， 如果边的数量较多时，优化算法因为<code>queue</code>操作不适合优化</p></blockquote><h3 id="bellman-ford-判断负权回路">3.2.3. Bellman-ford 判断负权回路</h3><p><a href="https://programmercarl.com/kamacoder/0095.城市间货物运输II.html#思路">判断是否有回路，且值为负数权重</a></p><ol type="1"><li>由<a href="#Bellman-ford算法"><code>Bellman_ford</code>算法原理</a> 中， 松弛<code>n-1</code>次后， <code>minDist</code>结果不再发生改变</li><li>所有再多遍历一次，如果在第<code>n</code>后，还发生改变，那么一定出现了<code>负权回路</code></li></ol><h3 id="有限制的最短路径">3.2.4. 有限制的最短路径</h3><p><a href="https://programmercarl.com/kamacoder/0096.城市间货物运输III.html#思路">从<code>i- j</code> 限制经过<code>k</code>个节点</a> = 可以经过<code>k+1</code>条边</p><p><code>minDist</code>经过<code>k</code>轮松弛，得到最大长度为<code>k</code>的最短路径， 因此原题 = 经过<code>k+1</code>次最短路径得到的结果</p><p>但是由于算法采用了滚动数组， 导致第<code>i</code>条边应在第<code>i</code>轮更改，却在之前轮数中，修改，因此需要保留上一轮的数据，下一轮必须使用上一轮进行修改，保证结果正确性。</p><ol type="1"><li>使用缓存数组 存放 上一组中的最短路径</li><li>下一组计算时，需使用上一组的数据进行修改</li></ol><h4 id="dp-求解">3.2.4.1. DP 求解</h4><ol type="1"><li><p><code>dp[i][j]</code> 标识经历<code>i</code>条边，到达第<code>j</code>点的最短路径</p></li><li><p><code>dp[i][j]</code>的计算方式</p><ol type="1"><li>不经历 第<code>i</code>条边，可以到达<code>j</code>点， <code>dp[i-1][j]</code></li><li>经历第<code>i</code>条边，遍历所有<code>from-&gt;j</code>的边, 因<code>from</code>是到达的第<code>i-1</code>条边， 结果为<code>dp[i-1][from] + w</code></li></ol><p>两者最选择，取最小值</p></li><li><p>初始化，起始节点第<code>0</code>轮一定为0，其余初始化为<code>INT_MAX</code>,便于遍历</p></li><li><p>遍历顺序： 第一轮迭代次数 = 经历<code>k</code>条边，第二轮遍历所有节点即可</p></li></ol><h4 id="使用queue优化">3.2.4.2. 使用queue优化</h4><p>最主要问题： 统计迭代次数，并且使用上一次的计算结果算本次的更新结果</p><ol type="1"><li>使用<code>old_minDist</code>, <code>q_size</code>在每次迭代之前，统计上一次的迭代结果</li><li>结束上一次迭代中待更新的所有节点后，停止本次迭代， 迭代数量-1， 统计下一个迭代</li></ol><h2 id="多源最短路径算法floyd">3.3. 多源最短路径算法Floyd</h2><p>算法可以同时计算出<code>多个起源</code>到<code>各个终点</code>的距离，使用动态规划的思想</p><ol type="1"><li><p><code>dp[i][j][k]</code> 节点<code>i</code> -&gt; <code>j</code>经过经过<code>[0,k]</code>中节点的最短路径</p></li><li><p><code>dp[i][j][k]</code> 中<code>i-&gt;j</code>最短路径有两种计算方法：</p></li><li><p>经过<code>k</code>节点， 即分为两段<code>i-&gt;k-&gt;j</code>， 计算公式为<code>dp[i][k][k-1] + dp[k][j][k-1]</code></p></li><li><p>不经过<code>k</code>节点，从<code>k-1</code>节点经过，计算公式为<code>dp[i][j][k-1]</code></p><p>从中选择最优方案，<code>min(1, 2)</code></p></li><li><p>初始化：</p><ol type="1"><li>dp 有<code>k=0</code>时计算，初始<code>dp[i][j][0]</code>，经过0个节点，即为初始图路径值</li><li><code>dp[i][j][0]</code>其余边初始为最大值，便于比较出最小值</li></ol></li><li><p>遍历顺序：</p><ol type="1"><li><code>k</code>层计算依赖于<code>k-1</code>，所有优先计算出<code>k-1</code>层，<code>k</code>在第一层，从小向大遍历</li></ol></li></ol><h1 id="搜索算法">4. 搜索算法</h1><h2 id="a算法">4.1. A*算法</h2><ol type="1"><li>设计启发函数，由启发函数计算值为节点的选取增加权重</li><li>每次选择节点时，依照权重选择节点</li></ol><p>使用A*算法优化广度搜索算法(还可以优化Dijkstra算法)，</p><blockquote><p>广度搜索算法，每次出队相当于取出节点，在这里为出队的节点增加权重，每次出队按照权重低的出队</p></blockquote><ol type="1"><li>建立优先队列，从小到大排序，每次取出权重最小的节点</li><li>每次加入队列时，计算启发函数作为权重值</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础知识</title>
      <link href="/2025/08/28/c/base_study/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2025/08/28/c/base_study/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识">1. 基础知识</h1><h2 id="union联合体">1.1. Union联合体</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">union&#123;linkNode link;NetNode net;&#125;LinkOrNet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结构体中有两个变量，但是只能有一个变量占据内存</p><p>c++17 中替代方案variant</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;variant&gt;varient&lt;linkNode, NetNode&gt; a; LinkNode b;a&#x3D; b; &#x2F;&#x2F; 自动追踪<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划">1. 动态规划</h1><p><strong>感谢<a href="https://programmercarl.com/">代码随想录</a></strong></p><p>解题思路</p><ol type="1"><li>确定<code>dp</code>数组及其下标的含义</li><li>确定<code>dp</code>数组</li><li>确定如何初始化 ，和<code>dp</code>数组的遍历顺序</li><li>举例推导<code>dp</code>数组</li></ol><p>验证dp数组的Bug时</p><ol type="1"><li>打印程序日志</li><li>自行推导<code>dp</code>数组</li><li>检查<code>dp</code>数组与程序中哪里出现错误，对错误地方重点检查</li></ol><h2 id="斐波拉契数列">1.1. 斐波拉契数列</h2><ol type="1"><li><code>dp</code>是数列的值</li><li><code>dp[i] = dp[i-1]+ dp[i-2]</code>;</li><li>初始化<code>0，1</code>即可</li><li><strong>注意</strong>：题目中要求计算<code>n</code>的值，对应<code>f(n)</code>的值，不是<code>n-1</code></li></ol><h2 id="跳台阶最省力方法">1.2. 跳台阶最省力方法</h2><ol type="1"><li><code>dp[i]</code>是第i层台阶使用的力气，dp需要从<code>dp[i-1]</code> 与 <code>dp[i-2]</code>之间选择体力最小的值</li><li>题目中，从第0，1阶开始跳，初始值可以为0；</li><li>从前向后遍历</li></ol><h2 id="路径问题">1.3. 路径问题</h2><h3 id="深度搜索">1.3.1. 深度搜索</h3><h3 id="dp算法">1.3.2. dp算法</h3><ol type="1"><li><p><code>dp[i][j]</code>是到达i,j 的所有方法</p></li><li><p>因为只能i, j只能左边<code>dp[i-1][j]</code>和上面<code>dp[i][j-1]</code>共同决定，所以dp由两数之和决定</p></li><li><p>第一行和第一列只能由一种方法到达，初始化为1；</p></li><li><p>从前向后遍历</p></li><li><blockquote><p>因为dp是由上方和左边+1组成，可以使用一维累加数组完成dp数组的效果</p></blockquote></li></ol><h3 id="使用图论">1.3.3. 使用图论</h3><p>移动需要走M+n-2中方法，且其中需要走m-1中向下的步数，结果为<span class="math inline"><em>C</em><sub><em>m</em> + <em>n</em> − 2</sub><sup><em>m</em> − 1</sup></span></p><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20201209113602700-20230310120944078.png" alt="62.不同路径"><figcaption aria-hidden="true">62.不同路径</figcaption></figure><p>由于阶乘数字较大，先求分子分母阶乘会超过long long 类型，所以边计算分子边计算分母</p><ol type="1"><li>如果能够整除分母，且分母没有除完，选择除以分母</li><li>并且分子分母相加相减方向相同，尽快除以分母</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">int high &#x3D; m-1;int low &#x3D; m+n-2;int denominator &#x3D; high;long long numerator &#x3D; 1;&#x2F;&#x2F; 求分母for(int i &#x3D; 1 ; i&lt;&#x3D; high ;i++) &#123;    numerator*&#x3D; low;    while(denominator&gt;0 &amp;&amp; numerator%denominator&#x3D;&#x3D;0)&#123;        numerator&#x2F;&#x3D; denominator;        denominator--;    &#125;    low--;&#125;return numerator;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="有障碍的路径规划">1.4. 有障碍的路径规划</h2><ol type="1"><li><code>dp[i][j]</code>表示i, j 位置的路径选择方法， 所以当有障碍物时，无法到达这里，此时<code>dp[i][j]=0</code>,其余位置照常计算</li></ol><blockquote><p>牢牢记住dp的定义，如有异常情况，将dp值写出</p></blockquote><h2 id="整数拆分">1.5. 整数拆分</h2><p>整数从i 拆分后分为i, n-i;</p><p>最大值取值有两个选择：</p><ol type="1"><li><span class="math inline"><em>i</em> * (<em>n</em> − <em>i</em>)</span>，不进行下一轮的划分</li><li>$ i* 对(n-i)划分后的最大乘积$，因为i会从0-i 都会分割一次，所以只用对(n-i）进行划分，因为在遍历过程中都会遍历到</li><li>其中2中的第二部分为问题1的子集，使用dp求解</li></ol><p><code>dp[i] = max(dp[i],max(i*j,  j*dp(i-j)))</code></p><p>因为dp[i] 被计算多次，最后需选择最大值，所以对dp[i]求最大值</p><h2 id="二叉搜索树数量">1.6. 二叉搜索树数量</h2><ol type="1"><li><p>n个数组成二叉搜索树，以j为中间节点<code>1....j ....n</code></p><p>j左边有<code>j-1-1+1= j -1</code>个数字，构成二叉搜索树，数量为<code>dp[j-1]</code> j右边有<code>n - j-1+1 =n-j</code>个数字,构成二叉搜索树，数量为<code>dp[n-j]</code></p></li><li><p>左右子树为树的子问题, <code>dp[i] += dp[j-1]*dp[i-j]</code></p></li><li><p>初始化dp[0] =1;</p></li><li><p>遍历顺序为从前向后，遍历</p></li></ol><h1 id="背包问题">2. 背包问题</h1><h2 id="背包">2.1. 0-1背包</h2><ol type="1"><li>每种物品只能选择一个</li></ol><p><code>dp[物品i][重量w]</code> 表示当前 <code>物品i</code> 与<code>前面的物品[0-(i-1)]</code> 在<code>重量为w</code>情况下的最大价值</p><p>dp，当<code>重量j</code>足够放下<code>物品i</code>计算途径有两种</p><ol type="1"><li>放入，总重量为<code>j - w[i]</code> 时的最大价值，加上 <code>物品i</code> 的<code>价值v</code></li><li>不放入，总重量为上一个<code>物品i-1</code>在<code>重量j</code>情况下选择结果的最大值</li></ol><p><code>dp[i][j]</code>从以上选择最大结果，<code>dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]])+value[i]</code></p><ol start="2" type="1"><li>初始化，对于第一个放入物品情况初始化</li><li>遍历，从前向后遍历，重量可以等于总重量</li></ol><h2 id="数组分为两个相同的数组">2.2. 数组分为两个相同的数组</h2><ol type="1"><li>数组分的数组和界限为<code>sum/2</code>，等价为背包所能装的<code>总的质量</code><ol type="1"><li><code>每一个数字</code> =<code>放入的物品</code>，放入进去相当于有了重量</li><li>放入进去后，物品的总价值累加，等于sum/2 时，背包正好被放满</li></ol></li></ol><h2 id="压石机">2.3. 压石机</h2><p><a href="https://programmercarl.com/1049.最后一块石头的重量II.html#思路">使最后一块石头重量最小</a></p><p>两两组合使得质量最小 = 将石头分为两堆， 第一堆减去第二堆尽可能小 = 两石堆的质量差距相同</p><p>回到<a href="#数组分为两个相同的数组">问题2</a>中</p><p>现在将二维dp数组使用一维滚动数组代替</p><ol type="1"><li>先遍历物品，再遍历质量，因为dp[0-i]之前的数据是上一轮迭代结果，dp[i]需使用之前的数据，所有从后先前迭代</li><li>先遍历质量，再遍历物品，遍历得到当前质量j 下放下物品的最大价值，需计算出之前的数据，才能计算下一个质量下的最优值，所以必须从后向前迭代</li></ol><p>第二种遍历方式错误，会造成物品选择两次</p><h2 id="目标和">2.4. 目标和</h2><p><a href="https://programmercarl.com/0494.目标和.html#算法公开课">目标和</a></p><ol type="1"><li>将目标和转换为 <strong>数据求和等于某个值</strong>n</li><li>相当于将数值放入其中，可以得到值n</li></ol><p>和为<code>x</code>, 差的和为<code>sum -x</code> ,所以 <code>x- sum+x = target</code>，求出<code>x = (target+sum)/ 2</code>， 所以目标和为<code>(target+sum)/ 2</code></p><ol type="1"><li><p><code>dp[i][j]</code>是目标和为j 时选择i ，有多少组合方法</p></li><li><p>dp的组合方式</p><ol type="1"><li>选择i ， 则方法总数为上一个数字总和为j - num[i], 即<code>·dp[i-1][j-nums[i]]</code></li><li>不选择i，则方法总数为上一数字总和为<code>j</code> ,即<code>dp[i-1][j]</code></li></ol><p>总方法=<code>1+2</code></p></li><li><p>初始化：</p><ol type="1"><li>对于第一个数字，只有一种j 有一种方法，其余方法数为0；</li><li>对于剩余数字，当j = 0时，总数为0数字的2*n;</li></ol></li></ol><h2 id="字串">2.5. 0-1字串</h2><p><a href="https://programmercarl.com/0474.一和零.html#思路">0-1</a></p><p>一个字符串<code>strs= ["10", "0001", "111001", "1", "0"]</code>,求出有m个0， n个1的最大子集元素个数</p><p>此时题目相当于m,n相当于背包的重量，总重量小于m、n两个维度，字符串相当于物品，字符串0、1个数相当于每个物品的质量。</p><p>此时可以使用0-1背包</p><p>推荐使用滚动数组解决0-1背包问题</p><ol type="1"><li>初始化时将初始值置为0</li><li>优先物品遍历，质量遍历时使用倒序遍历</li></ol><h1 id="完全背包问题">3. 完全背包问题</h1><ol type="1"><li><p>背包物品数量有无穷多个，可以重复选择</p></li><li><p><code>dp[i][j]</code>公式含义： 第<code>i</code>个物品，在重量<code>j</code>条件下物品的最大价值</p></li><li><p><code>dp[i][j]</code>计算方式</p><ol type="1"><li>选择<code>i</code>, 预留重量<code>j- weight[i]</code>， 且背包中仍有<code>i</code>（区别0-1背包）， <code>dp[i][j- weight[i]]</code></li><li>不选择<code>i</code>, 不预留质量，不选择<code>i</code>,背包中只有<code>i-1</code>物品的最大值， <code>dp[i-1][j]</code></li></ol><p><code>dp[i][j] = max(dp[i][j- weight[i]], dp[i-1][j])</code></p></li><li><p>初始化</p><ol type="1"><li>对<code>i = 0</code>初始化</li><li>对<code>j = 0</code> 初始化</li></ol></li></ol><h2 id="零钱兑换">3.1. 零钱兑换</h2><p>此时求得是总的组合数，不是最大价值，<code>dp[i][j]</code> 是由<code>i</code> 是否选择两种情况组合的和</p><ol type="1"><li><code>dp[i][j] = dp[i][j- weight[i]] + dp[i-1][j]</code></li><li>初始化<ol type="1"><li>第一行初始化，如果可以整除，则有组合方式，初始化为1</li><li>第一列初始化，重量&gt;1 ,则重量=0时，只有一种组合方式，初始为1</li></ol></li></ol><blockquote><p>&lt; int &lt; unsigned int &lt; long long &lt; unsigned long long</p><table><colgroup><col style="width: 10%"><col style="width: 15%"><col style="width: 15%"><col style="width: 29%"><col style="width: 30%"></colgroup><thead><tr class="header"><th></th><th>int</th><th>unsigned int</th><th>long long</th><th>unsigned long long</th></tr></thead><tbody><tr class="odd"><td><cstdint></cstdint></td><td>int32_t</td><td>uint32_t</td><td>int64_t</td><td>uint64_t</td></tr><tr class="even"><td>范围</td><td>2,147,483,647</td><td>4,294,967,295</td><td>9,223,372,036,854,775,807</td><td>18,446,744,073,709,551,615</td></tr><tr class="odd"><td>十进制</td><td>2e9</td><td>4e10</td><td>9.2e18</td><td>1.8e19</td></tr></tbody></table></blockquote><h3 id="使用一维dp数组">3.1.1. 使用一维dp数组</h3><ol type="1"><li>使用滚动数组 <code>dp[j] = dp[j] + dp[j- weight[i]]</code><ol type="1"><li>不选择时<code>nochoose = dp[j]</code></li><li>选择时 <code>choose = dp[j-weight[i]]</code></li></ol></li><li>初始化<ol type="1"><li>dp[0] 只有一种组合方式，初始化为1</li></ol></li><li>遍历顺序<ol type="1"><li>先遍历物品，在遍历质量，是组合<ol type="1"><li>且遍历质量时，需<strong>顺序遍历</strong>，此时可以放置多个同一物品，需使用到之前的数据，</li></ol></li><li>先遍历质量，再遍历物品，是排列数量</li></ol></li></ol><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr class="header"><th>先遍历物品，再遍历质量</th><th>先遍历质量，再遍历物品</th></tr></thead><tbody><tr class="odd"><td>先放物品<code>i</code> ，再放入物品<code>i+1</code>，有放入顺序，排除顺序不同的情况，计算的是组合数</td><td>先计算出当前质量下所有物品的最大值，表示质量<code>j</code>所有组合情况，没有顺序问题，是排列数</td></tr></tbody></table><h2 id="求出排列数量">3.2. 求出排列数量</h2><p><a href="https://programmercarl.com/0377.组合总和Ⅳ.html#算法公开课">求出排列数量</a>有两种思路</p><ol type="1"><li><p>完全背包的排列问题：</p><ol type="1"><li><p>先遍历质量，再遍历物品， 可以得到排列数量</p></li><li><p>爬楼梯</p></li><li><p>爬到第<code>i</code> 层的值，等于之前能够爬到<code>i</code>的所有选择之和</p><p>$ dp[i] = {dp[i- 能到i的跳跃次数]} 总和$</p></li><li><p>题目中用于跳跃到n的次数= 数组中用于相加等于n 的所有元素</p></li></ol></li></ol><h2 id="爬楼梯-完全背包排列问题">3.3. 爬楼梯 = 完全背包排列问题</h2><p>爬n阶台阶，每次能爬m 阶，两种思路解决</p><ol type="1"><li><p>n阶台阶 = 背包总容量，m阶台阶是每次选择的物品质量，<code>价值 = 重量 = j</code>。dp[j]是装满<code>j</code>层的方法总数</p><p><code>dp[i] += dp[i-j]</code></p><p>完全背包问题，优先遍历质量，再遍历物品</p></li><li><p>爬到<code>i</code> 层是之前<code>i-m</code> 层所有爬楼方法的总和,</p><p><code>dp[i]  += dp[i-j]</code></p></li></ol><h2 id="零钱兑换的最小方法数">3.4. 零钱兑换的最小方法数</h2><p><a href="https://programmercarl.com/0518.零钱兑换II.html">零钱兑换</a></p><ol type="1"><li><code>dp[j]</code> 兑换<code>j</code>所需的金币数量</li><li><code>dp[j]</code> 由其 <code>dp[i- coins[i]]</code>兑换到当前值 的最小方法决定<ol type="1"><li><code>dp[j] = min(dp[j], dp[j- coins[i]])</code></li></ol></li><li>初始化，需比较最小值，需将<code>dp[j]</code> 初始化为<code>UINT64_MAX</code><ol type="1"><li><code>dp[0]</code> 方法数为0，初始化为0</li></ol></li><li>此时不是求总的组合数 / 排列数，任意顺序遍历均可</li></ol><h2 id="完全平方数">3.5. 完全平方数</h2><p><a href="https://programmercarl.com/0279.完全平方数.html#算法公开课">完全平方数</a></p><ol type="1"><li>dp与上一相同</li></ol><h2 id="字串拆分">3.6. 字串拆分</h2><p><code>i</code> 是需要达到的楼梯，</p><p><code>0-(i-1)</code>是能够到达<code>i</code>之前所有的楼梯，对这些元素遍历，并检查 <code>j - i</code> 之间能否跳到<code>i</code></p><p><code>dp[i] = dp[j] &amp;&amp; (i-j)能否到达</code></p><blockquote><p>切分<code>(i-j)</code> ，切记<code>i.j</code>均是加1 后的结果， 那么<code>j = j'+1</code>，起始位置为<code>j'+1</code> ,即为<code>j</code>, 总长度为<code>i' - j+1</code>= <code>i -1-j+1</code> = <code>i-j</code></p><p>切分范围为(j, i-j)</p></blockquote><h3 id="回溯遍历使用数组保存状态">3.6.1. 回溯遍历，使用数组保存状态</h3><p>使用memory保存状态，之后可以直接使用</p><h1 id="多重背包问题">4. 多重背包问题</h1><p>多重背包问题 = 物品展开的0-1背包问题</p><table><thead><tr class="header"><th>重量</th><th>价值</th><th>数量</th><th></th></tr></thead><tbody><tr class="odd"><td>物品0</td><td>1</td><td>15</td><td>2</td></tr><tr class="even"><td>物品1</td><td>3</td><td>20</td><td>3</td></tr><tr class="odd"><td>物品2</td><td>4</td><td>30</td><td>2</td></tr></tbody></table><table><thead><tr class="header"><th>重量</th><th>价值</th><th>数量</th><th></th></tr></thead><tbody><tr class="odd"><td>物品0</td><td>1</td><td>15</td><td>1</td></tr><tr class="even"><td>物品0</td><td>1</td><td>15</td><td>1</td></tr><tr class="odd"><td>物品1</td><td>3</td><td>20</td><td>1</td></tr><tr class="even"><td>物品1</td><td>3</td><td>20</td><td>1</td></tr><tr class="odd"><td>物品1</td><td>3</td><td>20</td><td>1</td></tr><tr class="even"><td>物品2</td><td>4</td><td>30</td><td>1</td></tr><tr class="odd"><td>物品2</td><td>4</td><td>30</td><td>1</td></tr></tbody></table><p>相当于先遍历物品，再遍历物品的个数，再遍历背包(遍历物品个数在内部也一样)</p><blockquote><p>物品<code>i</code> ， 质量为<code>j</code>, 最大数量为<code>k</code></p><p><code>dp[i][j]</code> 对于总重量<code>j</code>有两种计算方式</p><ol type="1"><li>不装： <code>dp[i-1][j]</code></li><li>装k个：<code>dp[i-1][j-k*weight[i]] +  k*value[i]</code></li><li>初始化：<ol type="1"><li><code>j = 0</code> 一列全部为0</li><li><code>i =</code></li></ol></li></ol><p>初始化，与取值都是错误的，二维数组很复杂</p></blockquote><p>建议使用滚动数组</p><p>物品<code>i</code> ， 质量为<code>j</code>, 最大数量为<code>k</code></p><p><code>dp[j]</code> 是物品<code>i</code>对于总重量<code>j</code>有两种计算方式</p><ol type="1"><li>不装： <code>dp[j]</code></li><li>装k个：<code>dp[j-k*weight[i]] +  k*value[i]</code></li></ol><p>如果先遍历物品再遍历质量时，此时每次放入一个，<strong>不再需要乘上系数<code>k</code></strong></p><h1 id="打家劫舍问题">5. 打家劫舍问题</h1><ol type="1"><li><p><code>dp[i]</code> 是第<code>i</code> 家可以打劫到的最大金额</p></li><li><p><code>dp[i]</code>可以选择偷 / 不偷</p></li><li><p>偷的话，需要偷<code>i-2</code>之前房屋的金额，加上第<code>i</code>家的前</p><p><code>dp[i-2]+ nums[i]</code></p></li><li><p>不偷的话，第<code>i-1</code>家可以被偷，所以第<code>i</code>的情况 = 第<code>i-1</code>家是否被偷的情况</p><p><code>dp[i] = dp[i-1]</code></p></li></ol><p><code>dp[i] = max(d[i-2]+ nums[i],  dp[i-1])</code></p><ol start="3" type="1"><li><p>初始化，需要初始化第0，1 家</p><ol type="1"><li>dp[0] = nums[0], dp[1] = max(dp[0] , dp[1]);</li></ol></li><li><p>遍历顺序，从前向后</p></li></ol><h2 id="成环的打家劫舍">5.1. 成环的打家劫舍</h2><p><a href="https://programmercarl.com/0213.打家劫舍II.html#思路">成环</a></p><p>成环后，将首尾分开讨论</p><ol type="1"><li><p>不偷头，那么最后一间可以被偷</p><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20210129160842491-20230310134008133.jpg" alt="不偷第一家"><figcaption aria-hidden="true">不偷第一家</figcaption></figure></li><li><p>不偷尾，那么第一间房间可以被偷</p><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20210129160821374-20230310134003961.jpg" alt="不偷最后一家"><figcaption aria-hidden="true">不偷最后一家</figcaption></figure></li></ol><p>求两次的能偷的最大价值，比较，返回最大值</p><h2 id="二叉树的打家劫舍">5.2. 二叉树的打家劫舍</h2><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20210223173849619.png" alt="二叉树"><figcaption aria-hidden="true">二叉树</figcaption></figure><p>树的后序遍历，统计孩子们偷钱，再由中间节点统计</p><ol type="1"><li>截至条件：<ol type="1"><li>到NULL节点，偷的最大值为0</li><li>到叶子节点，偷的最大值是当前值</li></ol></li><li>处理逻辑<ol type="1"><li>根节点偷<ol type="1"><li>跳过左右孩子，计算从左右孙子偷到的金额</li></ol></li><li>根节点不偷<ol type="1"><li>计算左右孩子偷盗的金额</li></ol></li><li>选择哪一个值更大，选择偷拿个</li><li>使用记忆化存储，使用<code>map&lt;root, val&gt;</code>,保存已访问节点的最大值，后续访问节点时，直接返回保存值</li></ol></li></ol><h3 id="树形的dp">5.2.1. 树形的dp</h3><p><code>dp[i]  取决于 i 的左右节点的dp[i-&gt;left], dp[i-&gt;right]</code></p><ol type="1"><li>截至条件，所以函数需要返回孩子节点的选择状态&lt;不偷，偷&gt;<ol type="1"><li>到NULL节点，返回&lt;0,0&gt;</li></ol></li><li>处理逻辑：<ol type="1"><li>当前节点偷，choose = val + 左右孩子不偷</li><li>当前节点不偷，可以考虑左右节点是否偷，nochoose = max(左孩子选择)+max(右孩子选择)</li></ol></li></ol><h1 id="股票问题">6. 股票问题</h1><blockquote><p>同一个<code>i</code>有两种状态， 状态之间互相推导</p></blockquote><ol type="1"><li><p>第<code>i</code>天有两种状态， 持有股票 / 不持有股票， 分别设置为 <code>dp[i][0]/ dp[i][1]</code></p></li><li><p>第<code>i</code>天持有股票，可由两种方式推导</p><ol type="1"><li><p>第<code>i-1</code> 持有股票</p></li><li><p>第<code>i-1</code>不持有股票，第<code>i</code>天购购入(因为之前没有购入股票，一切为0)</p></li><li><blockquote><p><code>dp[i][0] = max(dp[i-1][0],  - price[i])</code></p><p>如果之前卖出了股票，就成了由不持有股票状态<code>dp[i-1][1]-price[i]</code></p></blockquote></li></ol><p>第<code>i</code>天不持有股票，由两种方式推导</p><ol type="1"><li><p>第<code>i-1</code>不持有股票</p></li><li><p>第<code>i-1</code>天持有股票， 第<code>i</code>购入股票</p></li><li><blockquote><p><code>dp[i][1] = max(dp[i-1][1], dp[i-1][0] - price[i])</code></p></blockquote></li></ol></li><li><p>dp公式初始化，所有由第一天的状态组成，初始化</p><ol type="1"><li>第一天持有股票<code>dp[0][0] = -price[0]</code></li><li>第一天不持有股票 <code>dp[0][1] = 0</code></li></ol></li><li><p>遍历顺序，从前向后遍历</p></li></ol><h2 id="有限次购买股票">6.1. 有限次购买股票</h2><p><strong>问题：</strong><code>dp</code>数组由多种不同的状态，且不同状态之间互相推导</p><p><strong>解决方法：</strong> 找出所有可能的状态，并推导不同状态之间的公式</p><p>最多有<code>n</code>次购买股票，可以设置五种状态</p><table><thead><tr class="header"><th>0</th><th>没有操作</th><th><code>dp[i][0]</code></th></tr></thead><tbody><tr class="odd"><td>1</td><td>第一次持有股票</td><td><code>dp[i][1]</code></td></tr><tr class="even"><td>2</td><td>第一次不持有股票</td><td><code>dp[i][2]</code></td></tr><tr class="odd"><td>3</td><td>第二次持有股票</td><td><code>dp[i][3]</code></td></tr><tr class="even"><td>4</td><td>第二次不持有股票</td><td><code>dp[i][4]</code></td></tr></tbody></table><ol type="1"><li><p>第一次持有股票</p><ol type="1"><li><p>第<code>i-1</code>第一次持有股票</p></li><li><p>第<code>i</code>天没有操作状态购入股票</p></li></ol></li><li><p>第一次不持有股票</p><ol type="1"><li>第<code>i-1</code>天不持有股票</li><li>第<code>i-1</code>天 持有股票后，第<code>i</code>天卖出股票</li></ol></li><li><p>第二次持有股票</p><ol type="1"><li>第二次持有股票</li><li>第<code>i-1</code>天第一次不持有股票，第<code>i</code>天购入股票</li></ol></li><li><p>第二次不持有股票</p><ol type="1"><li>第二次不持有股票</li><li>第<code>i-1</code>天持有股票， 第<code>i</code>天卖出股票</li></ol></li></ol><p>初始化：在第0天</p><ol type="1"><li>第一次购入股票， 为<code>-price[0]</code></li><li>第一次不持有股票，相当于第一天买了又卖了， 0</li><li>第二次购入股票，相当于第一天买入又卖出，再买入， 为<code>-price[0]</code></li><li>略</li></ol><p>dp结果： 只买一次股票包含在买两次股票结果中，所以第二次卖出股票为最终结果</p><h2 id="限制k次购买股票">6.2. 限制k次购买股票</h2><p><a href="https://programmercarl.com/0188.买卖股票的最佳时机IV.html#算法公开课">k次购买</a></p><p><code>k</code>次购买有<code>2k</code>中持有与不持有状态，+1中首次误操作状态</p><ol type="1"><li><code>dp[i][j+1]</code>次状态有 <code>dp[i-1][j]</code> ， 上一种状态<code>dp[i-1][j]</code>转换组成<ol type="1"><li>由于奇数次状态为持有股票状态，需要购入股票，由上一状态 <code>- price[i]</code>得到</li><li>偶数次状态为不持有股票状态，卖出股票， 总的价格增加，由上一状态<code>+ price[i]</code>得到</li></ol></li><li><code>dp[i][j]</code>公式<ol type="1"><li><span class="math inline"><em>d</em><em>p</em>[<em>i</em>]][<em>j</em>] = <em>m</em><em>a</em><em>x</em>(<em>d</em><em>p</em>[<em>i</em> − 1][<em>j</em>], <em>d</em><em>p</em>[<em>i</em> − 1][<em>j</em> − 1] + ( − 1)<sup><em>j</em></sup> * <em>p</em><em>r</em><em>i</em><em>c</em><em>e</em><em>s</em>[<em>i</em>])</span></li><li>方便计算，可以将奇偶公式分开枚举</li></ol></li></ol><h2 id="含有冷冻期的股票购买">6.3. 含有冷冻期的股票购买</h2><p><a href="https://programmercarl.com/0309.最佳买卖股票时机含冷冻期.html#思路">卖出股票后一天时冷冻期，冷冻期后时不持有股票状态</a></p><p>尝试描述购买股票过程中有多少种状态，画出其状态转化图， 有四种状态，</p><ol type="1"><li>持有股票状态 ， <code>dp[i][1]</code></li><li>不持有股票状态, <code>dp[i][2]</code></li><li>冷冻期, <code>dp[i][3]</code></li><li>当天卖出股票状态(此时状态与2不同) <code>dp[i][4]</code></li></ol><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20250829214353940.png" alt="image-20250829214353940"><figcaption aria-hidden="true">image-20250829214353940</figcaption></figure><ol type="1"><li>当前持有股票，<ol type="1"><li>可由前一天持有股票<code>dp[i-1][1]</code>得到，</li><li><code>i-1</code> 天不持有股票，买入股票得到， <code>dp[i-1][2] -  price[i]</code></li><li><code>i-1</code>冷冻期中后一天，买入股票， <code>dp[i-1][3] - price[i]</code></li></ol></li><li>当前不持有股票</li><li><code>i-1</code>是冷冻期， <code>dp[i][3]</code></li><li>当前是冷冻期<ol type="1"><li><code>i-1</code>当天售出股票， <code>dp[i-1][4]</code></li></ol></li><li>当天售出股票<ol type="1"><li><code>i</code>持有股票，卖出， <code>dp[i-1][1] + price[i]</code></li></ol></li></ol><p>初始化：</p><ol type="1"><li>持有股票时， 因买入股票， 初始为<code>-price[0]</code></li><li>其余状态不持有股票，初始不买不入，初始为0</li></ol><p>遍历顺序：从前向后遍历</p><h2 id="含手续费的股票售出">6.4. 含手续费的股票售出</h2><p><a href="https://programmercarl.com/0714.买卖股票的最佳时机含手续费（动态规划）.html#算法公开课">卖出时缴纳手续费</a></p><ol type="1"><li>还是两种状态， 持有股票，不持有股票， 由持有股票售出股票-&gt; 不持有股票，需缴纳手续费</li><li>dp转换公式<ol type="1"><li><code>dp[i][0] = max(dp[i-1][0] , dp[i-1][1] - price[i])</code></li><li><code>dp[i][1] = max(dp[i-1][1], dp[i-1][0] + price[i] -fee)</code> ，售出时缴纳手续费</li></ol></li><li>初始化： 略</li><li>选择结果： 可以卖出，也可以不卖出，选择最大值情况</li></ol><h1 id="子序列问题">7. 子序列问题</h1><blockquote><p>字串问题操作数 = 不同结果的操作选择</p><ol type="1"><li>找到所有可能的操作</li><li>当前情况可以由哪些操作得到，上一操作状态又是什么</li><li>使用<code>max, min</code> 选择最合适的操作</li></ol></blockquote><p>可以近似于 爬楼梯问题， 能爬到 <code>num[i]</code> 位置的最大长度</p><ol type="1"><li><p><code>dp[i]</code>表示为 <code>i之前包括i内以nums[i]</code>为结尾的序列， 单调增序列的最大长度,</p></li><li><p><code>for 0: j</code> 中，能够爬到 <code>if(nums[j] &lt; nums[i])</code>中， 长度最大值</p></li></ol><p><code>if(nums[j]  &lt;  nums[i] )  dp[i] = max(dp[i], dp[j] +1)</code></p><ol start="3" type="1"><li>初始化，所有序列初始为1</li></ol><h2 id="最长连续子序列">7.1. 最长连续子序列</h2><p><a href="https://programmercarl.com/0674.最长连续递增序列.html#思路">子序列连续-递增</a></p><p>要求连续，所以只能从<code>j-1</code>跳到<code>j</code>的位置，所以只需要比较<code>nums[j-1] &lt; nums[j]</code>， 不需要从<code>[0,j-1]</code>全部与<code>nums[j]</code>比较</p><h2 id="最长重复子序列">7.2. 最长重复子序列</h2><ol type="1"><li><p><code>dp[i][j]</code> 表示 以<code>i-1</code> 结尾的A数组 与 以<code>j-1</code>结尾的B 数组 最长公共子序列</p><blockquote><p>因为<code>dp[i][j]</code> 时比较了了<code>i-1</code> 与<code>j-1</code>的序列结果， 所以表示以<code>i-1</code>为结尾的子序列</p></blockquote></li><li><p><code>if(A[i-1] == B[j-1])  dp[i][j] = max(dp[i-1][j-1]+1)</code> , 比较的当前位置，因为<code>i, j</code>比实际<code>i,j</code>大1， 所以<code>if</code>中减去了1</p></li><li><p>初始化 <code>i=0 , j=0</code> 各种情况都是错误，初始化为0</p></li></ol><p>遍历顺序： <code>dp[i][j]</code>需要从1 开始遍历</p><h3 id="一维dp数组">7.2.1. 一维dp数组</h3><ol type="1"><li><p><code>dp[j]</code>表示与<code>j-1</code>结尾的相同的最大长度</p><blockquote><p>因为是从上一个<code>i-1</code>复制下来得到，遍历过程中不能修改<code>j-1</code>的<code>dp</code>，否则影响后续计算</p></blockquote></li><li><p>·<code>if(A[i-1] == B[j-1])  dp[j] = max(dp[j-1]+1)</code></p></li><li><p>遍历顺序： <code>i</code>从头开始， <code>j</code>必须从后开始</p></li></ol><h2 id="最长公共子序列">7.3. 最长公共子序列</h2><ol type="1"><li><code>dp[i][j]</code> 表示以<code>i-1</code> 结尾的序列与 以<code>j-1</code>为结尾的序列，最长的公共子序列</li><li><code>dp[i][j]</code> 有两种计算方式<ol type="1"><li><code>A[i-1] == B[j-1]</code> ，长度+1, <code>dp[i-1][j-1]+1</code></li><li><code>A[i-1] ！= B[j-1]</code> ,需要看<code>i-1</code>和<code>j</code> / <code>i</code> 与<code>j-1</code> 是否有最长的公共子序列，从两者中选择最大值</li></ol></li><li>初始化：<ol type="1"><li><code>i=0, j=0</code>情况，因为序号为<code>0</code>为空串， 与另一条序列的公共序列一定为0</li></ol></li><li>遍历顺序： 从前向后</li></ol><h2 id="最大连续子序和">7.4. 最大连续子序和</h2><p><a href="https://programmercarl.com/0053.最大子序和（动态规划）.html#算法公开课">最大子序和</a></p><p>连续子序和，可以由上一个序列延续获得， 也可以上一序列中断， 由当前序列继续计算</p><ol type="1"><li><p><code>dp[i]</code> ，以<code>i</code>为结尾的最长子序和</p></li><li><p><code>dp[i] = max(dp[i-1]+ nums[i], nums[i])</code></p></li><li><p>初始化，<code>dp[0]</code> 可以选择自身开始，或者从0开始</p></li></ol><blockquote><p>题目要求子序长度 &gt;0 ，所以必须从自身开始</p></blockquote><ol start="4" type="1"><li>遍历顺序： 从前向后遍历</li></ol><h2 id="判断子序列">7.5. 判断子序列</h2><p>子序列a 对应 序列b 的子序列长度</p><p><code>dp[i][j]</code>是子序列a与序列b相同子序列长度</p><ol type="1"><li><p>相同时 ， <code>dp[i][j] = dp[i-1][j-1] + 1</code>;</p></li><li><p>不相同时，删除<code>j</code>节点，观察 <code>dp[i][j-1]</code>能到达的最大长度</p><blockquote><p>此时，只能删除<code>j</code>节点，删除<code>i</code>节点后，就不是原来的序列了</p></blockquote></li></ol><h2 id="不同的子序列">7.6. 不同的子序列</h2><p><a href="https://programmercarl.com/0115.不同的子序列.html#算法公开课">完整的序列<code>t</code></a>在<code>s</code>的子序列中出现的次数</p><ol type="1"><li><p><code>dp[i][j]</code>, 以<code>i-1</code>结尾的序列t ，在以<code>j-1</code>为结尾的序列<code>s</code>中子序列出现次数</p></li><li><p>有两种计算情况</p><ol type="1"><li><p><code>s[i-1] == t[j-1]</code> ，看<code>i-1, j-1</code> 时匹配的结果， 同时还可以删除<code>i-1</code>看匹配结果(<code>i-1</code>可能由重复情况)</p><blockquote><p>相同情况时，选择用<code>s[i]</code> 与 <code>t[j]</code>比较，因为<code>s[i]</code>前一位可能等于后一位，所有也需要向前移动一位比较</p></blockquote></li><li><p>不相同时，删除<code>i-1</code>看匹配结果，<code>dp[i-1][j]</code></p></li></ol></li><li><p>初始化，<code>i = 0 , j=0</code>都是异常情况</p><ol type="1"><li><code>i =0</code> , s为空串， <code>j</code>与<code>s</code>相同结果为0</li><li><code>j=0</code>时，<code>j</code>是空串，<code>s</code>中删除到最后，一定有一串与<code>j</code>相同，初始化为1</li></ol></li><li><p>遍历顺序： 从前向后遍历</p></li></ol><h2 id="删除操作">7.7. 删除操作</h2><p><a href="https://programmercarl.com/0583.两个字符串的删除操作.html#算法公开课">两个字串删除n次后，序列相同</a></p><h3 id="最长相同子序列长度">7.7.1. 最长相同子序列长度</h3><ol type="1"><li>求出两字串最长公共子序列，长度n；</li><li>字串a,b删除除了公共子序列外的其他元素，删除后结果相同，删除长度 = 删除操作此处</li></ol><h3 id="删除操作dp">7.7.2. 删除操作DP</h3><ol type="1"><li><p><code>dp[i][j]</code>是以<code>i-1</code>为结尾的串a，以<code>j-1</code>为结尾的字串b需要删除的最小次数</p></li><li><p><code>dp[i][j]</code>有两种情况，相同结尾，不同结尾</p><ol type="1"><li><p><code>a[i-1] == b[j-1]</code>， 不需要删除操作，操作次数 = <code>dp[i-1][j-1]</code></p></li><li><p><code>a[i-1] ！= b[j-1]</code>，需要删除 a,b的最后一个，或者两个都删除</p></li><li><p>删除<code>i-1</code> , <code>dp[i-1][j]+1</code></p></li><li><p>删除<code>j-1</code>, <code>dp[i][j-1]+1</code></p></li><li><p>两个都删除， <code>dp[i-1][j-1]</code>+2</p></li></ol><p>使用<code>max</code>对三种方案进行选择， 3 包含在1， 2中，可以省略3</p></li><li><p>初始化，<code>i=0, j=0</code>异常情况，需初始化</p><ol type="1"><li><code>i=0</code>， 字串<code>a = NULL</code>, 字串<code>b[j]</code> 需删除 <code>j</code>次</li><li>j = 0 ，同上</li></ol></li><li><p>遍历顺序： 从前向后</p></li></ol><h2 id="编辑距离">7.8. 编辑距离</h2><p>字串编辑有三种操作，字串<code>a[i]</code>, <code>b[j]</code>, 最后一位不同</p><ol type="1"><li><p>删除，删除a 的最后一位<code>a[i]</code>，<code>b</code>没有改变</p></li><li><p>增加，在<code>b[j-1]</code>后增加一位<code>a[i]</code>与a相同， 增加一位<code>a[i]</code>与删除一位<code>a[i]</code>的操作力度相同</p></li><li><p>替换，</p></li><li><p><code>dp[i][j]</code> 表示以<code>i-1</code>为结尾的串a，以<code>j-1</code>为结尾的字串b需要操作的最小次数</p></li><li><p><code>dp[i][j]</code>有两种情况，相同结尾，不同结尾</p><ol type="1"><li><p><code>a[i-1] == b[j-1]</code>， 不操作，记录之前的操作次数= <code>dp[i-1][j-1]</code></p></li><li><p><code>a[i-1] ！= b[j-1]</code>， 进行以上三种操作</p><ol type="1"><li>删除， <code>dp[i-1][j]+1, dp[i][j-1]+1</code></li><li>增加， <code>dp[i-1][j]+1, dp[i][j-1]+1</code></li><li>替换， <code>dp[i-1][j-1]+1</code></li></ol><p>使用<code>max</code>对操作进行选择</p></li></ol></li><li><p>初始化，<code>i= 0, j =0</code>的情况，处理同上</p></li><li><p>遍历顺序，从后向前遍历</p></li></ol><h1 id="回文">8. 回文</h1><h2 id="回文子串">8.1. 回文子串</h2><h3 id="dp算法-1">8.1.1. DP算法</h3><p><a href="https://programmercarl.com/0647.回文子串.html#算法公开课">求回文字串的数量</a></p><ol type="1"><li><p><code>dp[i][j]</code>表示 <code>[i,j]</code>之间的字符是否为回文字串， 然后统计数组dp中有多少个 <code>true</code>,, = 有多个回文字串</p></li><li><p>两种情况</p><ol type="1"><li><code>a[i] =  a[j]</code>,<ol type="1"><li><code>[i, j]</code>之间相同 / 相邻，一定是回文子串</li><li><code>[i,j]</code>之间不相邻，<code>dp[i+1][j-1]</code>是回文串，则<code>true</code></li></ol></li><li>不相同，不是回文串，跳过</li></ol></li><li><p>初始化</p><ol type="1"><li><code>dp[i][j]</code>全初始化为<code>false</code></li></ol></li><li><p>遍历顺序</p><p>从左下角开始遍历， 即 下-&gt; 上，左-&gt; 右遍历</p><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20210121171032473-20230310132134822.jpg" alt="647.回文子串"><figcaption aria-hidden="true">647.回文子串</figcaption></figure></li></ol><h3 id="双指针-中心扩散">8.1.2. 双指针 中心扩散</h3><p>回文串 由 中间1个 / 2个向左右扩散，统计扩散数量，不能扩散时，返回得到扩散的最大数量</p><ol type="1"><li>中间 1 个向左右 扩散</li><li>中间 2 个向左右扩散</li><li>相加得到结果</li></ol><h2 id="最长回文子串">8.2. 最长回文子串</h2><p><a href="https://programmercarl.com/0005.最长回文子串.html#思路">最长回文字串</a></p><p>字串要求 是连续的</p><h2 id="最长回文子序列">8.3. 最长回文子序列</h2><p><a href="https://programmercarl.com/0516.最长回文子序列.html#思路">最长回文序列</a></p><p>回文序列可以不连续</p><ol type="1"><li><p><code>dp[i][j]</code>，表示<code>[i,j]</code> 之间最大的回文序列长度</p></li><li><p><code>dp[i][j]</code>两种情况</p></li><li><p><code>a[i] == a[j]</code>，子序列长度加2 ， <code>dp[i+1][j-1]+2</code></p></li><li><p><code>a[i] != a[j]</code>，那就是前一个区间的最大长度，可以缩短<code>i/ j</code>，<code>max(dp[i-1][j], dp[i][j-1])</code></p></li><li><p>初始化</p><ol type="1"><li><p>由性质 <code>i == j</code>时候， <code>dp[i+1][j-1]+2</code></p><p>因为<code>i+1 &gt; j-1</code>无意义，所以<code>i==j</code>需要单独初始化</p></li><li><p>其余初始化为0</p></li></ol></li><li><p>遍历顺序： 下- &gt; 上， 左-&gt; 右</p><blockquote><p>遍历时， <code>i == j</code>时，已经初始化，且公式计算不到，所以<code>j</code>只需要从<code>i+1</code>开始遍历</p><p><code>dp[i+1][j-1]+2</code>,所以 `i &lt;= s.size()-2, i &gt;=0</p></blockquote><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20230102172155.png" alt="遍历顺序"><figcaption aria-hidden="true">遍历顺序</figcaption></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法</title>
      <link href="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
      <url>/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心算法">1. 贪心算法</h1><p><strong>感谢<a href="https://programmercarl.com/0101.对称二叉树.html#思路">代码随想录</a></strong></p><p>贪心算法——由局部最优推导出全局最优</p><h2 id="饼干分配">1.1. 饼干分配</h2><p>按照常识推导，但所用知识需要逻辑正确</p><p>大胃口 吃 大饼干，如果胃口大了，可以换小胃口 大饼干不能喂小胃口，如果饼干小了， 不能喂更小的饼干</p><p>小饼干去喂小胃口，如果饼干小了，换大饼干 小胃口不能吃小饼干，胃口大了，不能换大胃口</p><h2 id="贪心">1.2. 贪心</h2><p><a href="https://programmercarl.com/0376.摆动序列.html#思路">贪每一个波峰或波谷</a></p><ol type="1"><li>有变化： pre&lt; 0 &amp; cur &gt; 0 或 pre&gt; 0 &amp; cur&lt; 0</li></ol><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20201124174327597.png" alt="376.摆动序列"><figcaption aria-hidden="true">376.摆动序列</figcaption></figure><ol start="2" type="1"><li>平台,只记录最右边，pre&lt;=0 &amp; cur&gt;0</li></ol><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20230106170449.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><ol start="3" type="1"><li><p>平台上升， 平台期仍保持原有状态</p><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20230108171505.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure></li></ol><h2 id="最大连续和">1.3. 最大连续和</h2><p>当连续和 &lt; 0 时，后续增加会减小数值，应从当前位置继续开始</p><blockquote><p>注意： count计算后便与result比较，而不是先归零</p></blockquote><h2 id="买卖股票的最佳时机">1.4. 买卖股票的最佳时机</h2><p>总利润 = 每一条的利润</p><p>贪心：每次贪正利润</p><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/2020112917480858-20230310134659477.png" alt="122.买卖股票的最佳时机II"><figcaption aria-hidden="true">122.买卖股票的最佳时机II</figcaption></figure><h2 id="跳跃游戏">1.5. 跳跃游戏</h2><p><a href="https://programmercarl.com/0055.跳跃游戏.html#思路">跳跃游戏</a></p><p>从i 能够到达x = 从i的跳跃范围能够到达x，且i只能在跳跃范围内移动</p><h2 id="跳跃游戏2">1.6. 跳跃游戏2</h2><p><a href="https://programmercarl.com/0045.跳跃游戏II.html#思路">最短跳跃游戏</a></p><p>x 是第i-1次跳跃位置， cover(i-1)</p><p>如果i大于了cover(i-1)，则需要选择cover(i-1)中能跳跃的最大位置作为新一跳的界限，并增加一步</p><h2 id="k次取反最大数组和">1.7. k次取反最大数组和</h2><ol type="1"><li>选择将负数反转</li><li>选择最小的绝对值进行反转</li></ol><blockquote><p>或者每次选择最小值，反转，但是更复杂</p></blockquote><h2 id="加油站">1.8. 加油站</h2><p><a href="https://programmercarl.com/0134.加油站.html#算法公开课">加油，能够循环的起点</a></p><ol type="1"><li>首先排除不能循环的情况；</li><li>一定能够循环<ol type="1"><li>从0开始的区间为负值情况，则起点错误，从下一个起点开始，直到找到能够值不为负的区间</li></ol></li></ol><p>同时，从后向前相加，如果能加从0开始的最小和，相加为正数时，则为开始起点</p><h2 id="糖果分发">1.9. 糖果分发</h2><p><a href="https://programmercarl.com/0135.分发糖果.html#算法公开课">分发糖果</a>：要求分高的同学的糖果一定比两边分低的同学糖果数量多</p><blockquote><p>注意贪心比较的方向， 所有的结果都能比较得到</p></blockquote><ol type="1"><li>依次比较左右孩子，<ol type="1"><li>依次比较左孩子，<strong>从左向右遍历</strong>， 可以使用到上一次比较的结果</li><li>依次比较右孩子，<strong>从右向左遍历</strong>， 遍历时，选择max(本轮比右孩子多的糖果，从左边得到的糖果)</li></ol></li></ol><h2 id="柠檬水找零">1.10. 柠檬水找零</h2><p><a href="https://programmercarl.com/0860.柠檬水找零.html#算法公开课">柠檬水</a></p><p>优先将面额较大的零钱找出，因为小零钱更加万能</p><h2 id="根据身高重建序列">1.11. 根据身高重建序列</h2><p>讨论两个维度 ，首先固定一个维度，再讨论下一个维度</p><ol type="1"><li>按照身高从大到小排序，以此作为插入顺序，同时需要规定k值小的排在前面</li><li>高身高的优先插入后，后面小身高的插入不会影响k值</li></ol><p><code>vector</code> 与 <code>list</code>插入的区别， <code>vector</code>插入时涉及底层扩容，比list插入效率低</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; v;list&lt;int&gt; l;v.insert(v.begin()+pos, val);  &#x2F;&#x2F; 可以直接使用pos插入auto it &#x3D; l.begin();it &#x3D; next(it, pos);l.insert(it, val); &#x2F;&#x2F; 必须使用迭代器指定位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="射击气球">1.12. 射击气球</h2><p><a href="https://programmercarl.com/0452.用最少数量的箭引爆气球.html#思路">射击气球</a></p><p>贪心算法，一定要举出贪心的例子，来验证算法，</p><p>首先需要排序，根据排序顺序选择判断结果</p><ol type="1"><li>将右边界排序，记录最左边右端节点，但有其他值超过节点时，需射出一箭</li></ol><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20250827111033620.png" alt="image-20250827111033620"><figcaption aria-hidden="true">image-20250827111033620</figcaption></figure><ol start="2" type="1"><li><p>将左边界排序，记录最右端节点，如果其他值查过节点时，需要射出一箭</p><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20250827111332960.png" alt="image-20250827111332960"><figcaption aria-hidden="true">image-20250827111332960</figcaption></figure></li></ol><h2 id="无重叠区间">1.13. 无重叠区间</h2><p><a href="https://programmercarl.com/0435.无重叠区间.html">无重叠区间</a></p><ol type="1"><li><p>使用右边界，每一个不相交的区间是保留下的区间，其余都需删除</p><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20250827112819769.png" alt="image-20250827112819769"><figcaption aria-hidden="true">image-20250827112819769</figcaption></figure></li><li><p>左排序时，统计有重复区域的区间，然后删除</p><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20250827113408417.png" alt="image-20250827113408417"><figcaption aria-hidden="true">image-20250827113408417</figcaption></figure></li></ol><h2 id="划分字母区间">1.14. 划分字母区间</h2><p><a href="https://programmercarl.com/0763.划分字母区间.html#思路">区间</a></p><p>当区间[a,b]之间字符的最大值以达到时，这个区间为字母区间，并将a置为新的区间开始b+1</p><h2 id="合并区间">1.15. 合并区间</h2><p><a href="https://programmercarl.com/0056.合并区间.html#其他语言版本">合并区间</a></p><p>合并区间，从左向右比较，只能使用左排序</p><h2 id="最小单调递增数字">1.16. 最小单调递增数字</h2><p>如果有<code>n1 n2 n3</code>情况， 如果<code>n2 &gt; n3</code>， 则其最大的递增序列为<code>(n2-1) 9</code> 如果<code>n1 &gt; n2</code>， 最大为<code>(n1-1) 9 9</code></p><p>如果序列比较n-1与n，则for循环最小值为1</p><h2 id="监控二叉树">1.17. 监控二叉树</h2><ol type="1"><li><p><strong>优先从叶子节点开始监控</strong>，因为叶子节点监控数量为指数级</p><p>有三种节点状态</p><blockquote><ol type="1"><li>无监控</li><li>有监控</li><li>有摄像头</li></ol></blockquote><p>对叶子节点进行监控，则空节点需设置为有监控状态</p></li><li><p>状态返回</p><ol type="1"><li>left 与right 都是监控状态，则mid需返回无监控1</li><li>left，right有一个是无监控1， 则mid需设置有摄像头3，并增加一个摄像头</li><li>left, right有一个有摄像头，则mid返回有监控2</li></ol></li></ol><h2 id="友军数量">1.18. 友军数量</h2><p><a href="https://programmercarl.com/0649.Dota2参议院.html#思路">杀死后面的参议员</a></p><p>贪心思想： 前面杀死后面的所有参议员</p><blockquote><p>使用flag 标识，前方时候有敌军</p></blockquote><ol type="1"><li>前方有敌军，自身被杀死<ol type="1"><li>但是多了一个友军,flag+1</li></ol></li><li>前方没有敌军，自身还活着，友军数量+1</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/2025/08/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2025/08/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="回溯算法">1. 回溯算法</h1><p><strong>感谢<a href="https://programmercarl.com/0077.组合优化.html#算法公开课">代码随想录</a></strong></p><h2 id="组合问题">1.1. 组合问题</h2><ol type="1"><li><p>终止条件，满足题目条件</p></li><li><p>处理逻辑</p><ol type="1"><li>对当前所有可能结果遍历</li><li>调用函数</li><li>结果回溯，弹出函数修改的结果</li><li>在处理中，不合理的情况暂停，减枝</li></ol></li><li><p>函数参数选择</p></li></ol><h2 id="组合问题2">1.2. 组合问题2</h2><p><a href="https://programmercarl.com/0216.组合总和III.html#其他语言版本">组合问题</a></p><p>回溯算法： 宽度是for循环的数量，深度是满足条件回溯算法的深度</p><ol type="1"><li>终止条件：深度为K, 总和为n</li><li>处理逻辑：<ol type="1"><li>对于总和数&lt; 1，没有结果，剪枝</li></ol></li><li>参数，可以函数调用时导入K-1, n-i，进行递归和回溯</li></ol><h2 id="电话号码排列">1.3. 电话号码排列</h2><p><a href="https://programmercarl.com/0017.电话号码的字母组合.html">排列问题</a></p><p>使用index 标识树的深度，或者其他方式也行</p><ol type="1"><li>终止条件：达到指定深度</li><li>处理逻辑：<ol type="1"><li>对字串中的所有char 进行遍历</li></ol></li></ol><h2 id="组合问题-1">1.4. 组合问题</h2><p>组合中不同排序结果相同，使用startIndex标识开始位置，不同排序结果只记录一次</p><h2 id="组合总数">1.5. 组合总数</h2><p><a href="https://programmercarl.com/0040.组合总和II.html">组合去重</a></p><p>数据中有重复数据，题目要求每个数据在每次只能用一遍，重复数据可以在同一结果集中出现，但是由于元素重复，需要对重复数据去重</p><p>去重条件<code>candidates[i] == candidates[i-1] &amp;&amp; used[i-1]==false</code>，这一部分不是剪枝，必须去除这一部分</p><p><img src="/2025/08/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/20221021163812.png" alt="img" style="zoom:50%;"></p><h2 id="切分回文子串">1.6. 切分回文子串</h2><p><a href="https://programmercarl.com/0131.分割回文串.html#优化">切分回文子串</a></p><ol type="1"><li>终止条件： 切分线到达最后，切分结束</li><li>处理逻辑：<ol type="1"><li>切分出来的是回文子串则继续切分，否则返回，不再切割</li><li>判断方法：<ol type="1"><li>字串直接判断</li><li>DP首先计算出DP数组，<code>DP[i,j]</code> 数组标识<code>[i,j]</code>这范围内是否为回文子串， 回文子串<code>dp[i][j] = s[i] == s[j] &amp;&amp; dp[i+1][j-1]</code></li></ol></li></ol></li></ol><h2 id="复原ip地址">1.7. 复原IP地址</h2><p><a href="https://programmercarl.com/0093.复原IP地址.html#总结">复原Ip地址</a></p><ol type="1"><li>终止条件： 分割点数 == 3， 并且最后一个分割字串符合条件</li><li>处理逻辑：<ol type="1"><li>如果切分出来的是符合逻辑的IP, 继续切割</li><li>剪枝：<ol type="1"><li>当剩余字符数<code>s.size() - 1-(i+1)+1 = s.size()-i-1</code> 超过所需字符数 <code>3*(3- PointNum)</code> ，剪枝</li><li>少于所需字符数（3-point) ,剪枝</li></ol></li></ol></li><li>传递参数： 切割位置，切割的点数</li></ol><h2 id="分割子集">1.8. 分割子集</h2><p>搜集子集是将所有<strong>搜索路径上所有结果</strong> 组合和分割将<strong>叶子节点中符合条件的结果</strong>加入其中</p><p>如果题目要求集合中元素顺序，则下一个节点从i+1开始，如果当前节点可以重复使用从i开始；</p><p>节点中有重复元素，需要对重复元素去重，同一层中不能以当前节点继续，但是同一树仍可以继续使用</p><h2 id="子集去重">1.9. 子集去重</h2><p>有重复元素，去重</p><ol type="1"><li>对数据集排序</li><li>使用<code>num[i]!=num[i-1]</code> 对同层数据去重</li><li>对于需要使用已加入栈中的数据时，需要使用used对数据去重</li></ol><p><a href="https://programmercarl.com/0090.子集II.html#思路">子集去重</a></p><p><a href="https://programmercarl.com/0040.组合总和II.html">组合去重</a></p><h2 id="递增子集去重">1.10. 递增子集去重</h2><p><a href="https://programmercarl.com/0491.递增子序列.html#思路">递增序列去重</a></p><p>递增序列中去重，当前序列中有重复元素，不能使用sort对数组排序。</p><p>使用set对当前层数组去重，每一个函数中创建一个set, 对函数中的当前层有效。同一树枝上因为从i+1开始，不用去重，且set已更新，不影响下一层数据</p><ol type="1"><li>处理逻辑：<ol type="1"><li>符合条件的加入到path中</li></ol></li></ol><h2 id="排列问题">1.11. 排列问题</h2><p><a href="https://programmercarl.com/0046.全排列.html#算法公开课">排列</a></p><ol type="1"><li>终止条件： 到达满足条件</li><li>处理逻辑：<ol type="1"><li>遍历对整个数组遍历，因为不同顺序集合不同，此时不需要<code>startIndex</code>;</li><li>使用<code>used</code>标识这条链路上哪个元素被使用， 将<code>used</code>作为参数；</li></ol></li><li>参数： 数组，标识数组<code>used</code></li></ol><h2 id="排列问题去重">1.12. 排列问题去重</h2><p>因为排列问题需要从0开始，下一层中可能会使用到上一层的数据，需要使用used对检查是否在树枝，或同一层上；</p><p>判断条件：</p><ol type="1"><li><p><code>nums[i] == nums[i-1]</code>并且 <code>used[i-1] = false</code>表示同一层中上一个被使用</p><p>​ 下一层中上一个被使用，<code>used[i-1] =true</code>, 可以被接着使用。</p></li><li><p>同时，还需要使用used[i] 检查当前元素是否在树枝上使用过，使用过则跳过</p></li><li><p>或者使用set代替第一条对数据去重</p></li></ol><h2 id="重新安排路径">1.13. 重新安排路径</h2><p><a href="https://leetcode.cn/problems/reconstruct-itinerary/">搜索机票</a></p><p>将票数据转换为图<code>map&lt;string, map&lt;string, int&gt;&gt;</code></p><ol type="1"><li>终止条件： 节点数 = 机票数量+1</li><li>处理逻辑：<ol type="1"><li>对result最后一个节点的所有相连进行搜索</li><li>每搜索一次，删除一条机票，删除方式将第二个map数量-1，当= 0 时，不能从当前机票起飞</li></ol></li></ol><p>此题是欧拉路径，最好使用<code>Hierholzer</code> 算法，搜索算法可能进入贪心死循环</p><h2 id="n皇后">1.14. N皇后</h2><p><a href="https://programmercarl.com/0051.N皇后.html#思路">N皇后</a></p><ol type="1"><li>终止条件： 加在最后一行棋盘</li><li>处理逻辑：<ol type="1"><li>对棋盘上每一行进行遍历</li><li>符合条件的加入棋盘</li><li>进入下一轮</li><li>回溯，退出上一轮的修改</li></ol></li></ol><h2 id="数独">1.15. 数独</h2><p><a href="https://leetcode.cn/problems/sudoku-solver">37. 解数独 - 力扣（LeetCode）</a></p><ol type="1"><li>终止条件： 所有节点遍历结束，返回true;</li><li>处理逻辑：<ol type="1"><li>遍历宽度为1-9</li><li>遍历深度为所有节点遍历结束，因为是二维，不确定向那个方向移动，使用<code>!='.'</code>条件对已完成的跳过，实现对下一个移动方向的选择</li></ol></li></ol><p>详细代码注释如<a href="D:\code\leetcode\37.解数独.cpp">代码及注释</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="/2025/08/23/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%91/"/>
      <url>/2025/08/23/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="树">1. 树</h1><p><strong>感谢<a href="https://programmercarl.com/0101.对称二叉树.html#思路">代码随想录</a></strong></p><h2 id="深度遍历">1.1. 深度遍历</h2><h3 id="递归">1.1.1. 递归</h3><pre class="line-numbers language-none"><code class="language-none">1. 递归结束条件2. 当前递归操作3. 对那些节点进行递归4. 确定参数和返回值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="栈实现">1.1.2. 栈实现</h3><p>深度遍历中存在先进后出，所以此处使用栈</p><ol type="1"><li>先序遍历，栈中先进后出，出栈顺序为3，2<ol type="1"><li>中间节点</li><li>右节点</li><li>左节点</li></ol></li><li>中序遍历，当左节点与栈同时为空时，遍历结束<ol type="1"><li>将所有左节点压入栈中</li><li>左节点为空时，将栈中节点弹出，处理中间节点</li><li><code>cur= cur-&gt;right</code>， 处理右节点</li></ol></li><li>后序遍历，参照1， 然后reverse</li></ol><h3 id="null-bool表示">1.1.3. NULL/ bool表示</h3><p>先序遍历，中左右，</p><ol type="1"><li>加入栈中顺序为右左中，标识当前节点需处理时在栈后加入一个NULL</li><li>如果访问到NULL节点，需将下一节点弹出</li></ol><h2 id="反转二叉树">1.2. 反转二叉树</h2><p><a href="https://programmercarl.com/0226.翻转二叉树.html">反转二叉树</a></p><p>中序遍历不能反转二叉树，较为困难</p><h2 id="对称二叉树">1.3. 对称二叉树</h2><p><a href="https://programmercarl.com/0101.对称二叉树.html#思路">对称二叉树</a></p><ol type="1"><li>确定返回条件</li><li>当前节点比较左右字树是否相同</li><li>比较的是节点的内侧(left的右， right的左)，节点的外侧</li></ol><h2 id="树的最大深度">1.4. 树的最大深度</h2><p><a href="https://programmercarl.com/0104.二叉树的最大深度.html">树的最大深度</a></p><ol type="1"><li>后序遍历： 回溯，从后面的节点结算，得到当前节点的结果</li><li>前序遍历： 迭代，先计算当前节点，再依次计算后续节点，计算下一个节点时需要回溯</li></ol><h2 id="树的最小深度">1.5. 树的最小深度</h2><p><a href="https://programmercarl.com/0111.二叉树的最小深度.html">二叉树的最小深度</a></p><p>当节点的左右节点为都为NULL时，节点为叶子节点</p><ol type="1"><li><p>终止条件：节点为叶子节点时</p></li><li><p>后序遍历，</p><blockquote><p>注意：此时depth != 左右子树最小的节点，有可能左右子树有空子树</p><p>解决方法： 空子树设置深度初始值为最大值</p></blockquote></li></ol><h2 id="返回树的所有路径">1.6. 返回树的所有路径</h2><p><a href="https://programmercarl.com/0257.二叉树的所有路径.html#思路">树的所有路径</a></p><ol type="1"><li>路径的终止条件为达到叶子节点： 左右节点均为NULL;</li><li>此时对left与right递归时需要对left, right做检查，同时中间节点的初始需要放在if判断之前；</li></ol><p>两种方法回溯：</p><ol type="1"><li>使用vector存放路径，回溯时弹出最后一个元素；</li><li>使用参数对路径修改，回溯时参数不变，等于回溯；</li></ol><h2 id="左叶子之和">1.7. 左叶子之和</h2><p><a href="https://programmercarl.com/0404.左叶子之和.html#思路">左叶子之和</a></p><ol type="1"><li>终止条件：<ol type="1"><li>当前节点为空</li><li>是叶子节点</li></ol></li><li>当前逻辑：<ol type="1"><li>获取左子树的做叶子之和</li><li>当左子树为左叶子时，单独计算</li><li>获取右子树的左叶子之和</li></ol></li><li>求和相加，返回</li></ol><h2 id="路径之和">1.8. 路径之和</h2><p>递归函数是否有返回值，分为三种情况</p><ol type="1"><li>需要对树的所有路径遍历且不用处理递归返回值， 递归函数没有返回值void</li><li>需要对树的所有路径遍历且需要对递归返回值进行处理，递归函数有返回值int</li><li>之搜索一条符合条件的路径，则需要返回返回值，返回值通常为bool</li></ol><h3 id="找到路径即可">1.8.1. 找到路径即可</h3><p><a href="https://programmercarl.com/0112.路径总和.html#思路">找到路径即可</a></p><ol type="1"><li>终止条件为找到叶节点<ol type="1"><li>如果符合条件，返回true</li><li>不符合条件，返回false;</li></ol></li><li>如果左子树已经满足条件，返回true，不再搜索</li><li>对右子树进行搜索</li></ol><h3 id="找到所有可能的路径">1.8.2. 找到所有可能的路径</h3><p><a href="https://programmercarl.com/0112.路径总和.html#思路">找到所有可能的路径</a></p><ol type="1"><li>终止条件为找到叶节点<ol type="1"><li>符合条件，加入结果集中</li></ol></li><li>找完左子树，再找右子树</li></ol><h2 id="前序中序创建二叉树">1.9. 前序/中序创建二叉树</h2><ol type="1"><li><p>终止条件：</p><ol type="1"><li>数组为空时，返回NULL</li><li>数组为1个时，返回节点r</li></ol></li><li><p>处理逻辑：</p><ol type="1"><li>pre的第一个节点作为root节点</li><li>从中序in中找到与root相同的节点，以此为分割点，找到left ,right数组的长度</li><li>前序left, right与中序长度相同，所有区间为左开右闭</li></ol><table><colgroup><col style="width: 4%"><col style="width: 48%"><col style="width: 47%"></colgroup><thead><tr class="header"><th></th><th>left</th><th>right</th></tr></thead><tbody><tr class="odd"><td>pre</td><td>[leftPreorder+1, leftPreorder+1+left_size]</td><td>[ leftPreorder+1+left_size,rightPreorder]</td></tr><tr class="even"><td>In</td><td>[ leftInorder, break_point]</td><td>[break_point+1, rightInorder]</td></tr></tbody></table></li><li><p>参数中包含数组分割节点</p></li></ol><h2 id="创建最大树">1.10. 创建最大树</h2><ol type="1"><li>终止条件：可为叶子节点，也可以是NULL</li><li>处理逻辑：<ol type="1"><li>找到最大值索引，</li><li>使用索引分割两区间</li></ol></li></ol><h2 id="二叉搜索树">1.11. 二叉搜索树</h2><p><a href="https://programmercarl.com/0700.二叉搜索树中的搜索.html">二叉搜索树</a></p><p>左子树 &lt; 中间 &lt; 右子树</p><p>由中间值比较，确定对左子树/ 右子树一棵树进行搜索</p><h2 id="验证二叉搜索树">1.12. 验证二叉搜索树</h2><p>左子树的所有值 &lt; 中间 &lt; 右子树的所有值， 所以不能单独比较 左节点 &lt; 中间 &lt; 右节点</p><p>使用中序遍历，左中右，比较结果</p><ol type="1"><li>中序遍历，得到数组，检查数组是否是从小到大</li><li>中序遍历，保存遍历过程的做大值，保证遍历中的最大值&lt; 当前值</li></ol><h2 id="二叉树的最小差">1.13. 二叉树的最小差</h2><p>二叉树所有数的最小值是相邻两个遍历节点的差值最小</p><ol type="1"><li><p>中序遍历，得到数组后，求数组相邻数据的差值</p></li><li><p>中序遍历，保存上一个节点pre， 每次使用cur与pre做差值</p><blockquote><p>在中序结束后，将pre = cur， 将cur保存为下一变量的前一个节点</p></blockquote></li></ol><h2 id="找到最近公共祖先">1.14. 找到最近公共祖先</h2><p><a href="https://programmercarl.com/0236.二叉树的最近公共祖先.html#思路">最近公共祖先</a>从下向上查询路径，后序遍历</p><ol type="1"><li>终止条件：<ol type="1"><li>节点为NULL， 返回NULL</li><li>找到确定节点，返回true ,将result修改为当前路径；</li></ol></li><li>处理逻辑：<ol type="1"><li>如果p，q是不同树，那么更新result结果；</li><li>如果只有q，在路径上，不更新result;(因为可能出现q是p的父节点，由终止条件2修正)</li></ol></li></ol><h2 id="二叉搜索树的最近公共祖先">1.15. 二叉搜索树的最近公共祖先</h2><p><a href="https://programmercarl.com/0235.二叉搜索树的最近公共祖先.html#思路">二叉搜索树</a></p><p>二叉树有序，所以p,q的祖先节点位于[p,q]之间，且最近公共祖先是其遍历中的第一个，也只有这一个满足[p,q]条件</p><h2 id="二叉搜索树的插入">1.16. 二叉搜索树的插入</h2><p><a href="https://programmercarl.com/0701.二叉搜索树中的插入操作.html#思路">插入</a></p><ol type="1"><li>终止条件： 遇到空节点，新建一个节点，并加入在parent节点左/右</li><li>操作逻辑：<ol type="1"><li>val大于节点，进入右子树</li><li>val小于节点，进入左子树</li></ol></li></ol><blockquote><p>也可以不使用parent节点，终止条件中返回创建的节点，在操作时将返回的节点插入</p></blockquote><h2 id="二叉搜索树的删除">1.17. 二叉搜索树的删除</h2><p><a href="https://programmercarl.com/0450.删除二叉搜索树中的节点.html#算法公开课">删除</a></p><p>终止条件：删除时如果左右子树都在，需要将左子树放在右子树的最左节点的最左侧</p><h2 id="二叉树的修剪">1.18. 二叉树的修剪</h2><p><a href="https://programmercarl.com/0669.修剪二叉搜索树.html#思路">二叉树的修剪</a></p><ol type="1"><li>终止条件： 如果root==NULL时，返回NULL;</li><li>处理逻辑：<ol type="1"><li>中： 如果root &lt; left ,修建左子树，将左子树合适节点代替root返回，反之亦然</li><li>左： 对左子树修剪，返回结果赋值给root的左子树</li><li>右：同上</li></ol></li></ol><h2 id="有序数组-二叉搜索树">1.19. 有序数组-&gt;二叉搜索树</h2><p><a href="https://programmercarl.com/0108.将有序数组转换为二叉搜索树.html#算法公开课">有序数组构建二叉搜索树</a></p><ol type="1"><li>终止条件： 节点为空</li><li>处理逻辑：<ol type="1"><li>有序数组的中间位置为根节点</li><li>左子树，调用区间构建左子树</li><li>右同上</li></ol></li></ol><h2 id="二叉搜索树求和">1.20. 二叉搜索树求和</h2><p><a href="https://programmercarl.com/0538.把二叉搜索树转换为累加树.html#算法公开课">二叉搜索树转换为累加树</a></p><ol type="1"><li>终止条件： ~</li><li>处理逻辑：<ol type="1"><li>二叉树有序，选择右中左遍历</li><li>每次遍历时，需使用pre保存前一节点的累加和</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈-队列</title>
      <link href="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/"/>
      <url>/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="栈">1. 栈</h1><p><strong>感谢<a href="https://programmercarl.com/0101.对称二叉树.html#思路">代码随想录</a></strong></p><h2 id="栈模拟队列">1.1. 栈模拟队列</h2><p><a href="https://programmercarl.com/0232.用栈实现队列.html#算法公开课">模拟队列</a></p><figure><img src="https://file1.kamacoder.com/i/algo/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E7%89%88%E6%9C%AC2.gif" alt="232.用栈实现队列版本2"><figcaption aria-hidden="true">232.用栈实现队列版本2</figcaption></figure><p>使用两个栈模拟队列</p><ol type="1"><li>入队时， 直接入队</li><li>出队时， 将输入栈的数据放入输出栈中，将顺序倒置为先入先出</li><li>判空时，需要判断两个栈是否为空</li></ol><h2 id="队列模拟栈">1.2. 队列模拟栈</h2><figure><img src="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.gif" alt="225.用队列实现栈"><figcaption aria-hidden="true">225.用队列实现栈</figcaption></figure><p>可以使用一个队列实现栈的模拟</p><ol type="1"><li>入栈时，直接入队</li><li>出栈时，需要将前置数据依次排出，并放置在队首，<strong>出队时需要保留最后一个元素出队</strong></li></ol><h2 id="滑动窗口最大值">1.3. 滑动窗口最大值</h2><p><a href="https://programmercarl.com/0347.前K个高频元素.html#思路">滑动窗口最大值</a></p><p><code>deque</code> 用法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;deque&gt;deque&lt;int&gt; d;d.front(), d.back();d.push_back(), d.pop_back();d.push_front(), d.pop_front();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构建排序队列，将可能的最大值放入队列中，定义新的队列弹出方法</p><ol type="1"><li>入队，入队值如果大于栈顶值，将栈顶出栈，直到入队值小于栈顶值</li><li>出队，队首值如果等于移除的数据，将输出出栈</li><li>保持第一个值是最大值a，且比a小的值是在a之后入栈的，所以出队时a之前的数据已经弹出完毕</li></ol><h2 id="优先队列">1.4. 优先队列</h2><p><a href="https://programmercarl.com/0347.前K个高频元素.html#思路">前k个高频词汇</a></p><p><code>priority_queue</code>需要自定义排序类型</p><ol type="1"><li>使用` bool operator()(const int&amp; a, const int&amp; b)自定义比较类型</li><li>快排中left&gt; right，从大到小，优先队列反过来</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class mycomparison&#123;    public:    bool operator()(const pair&lt;int, int&gt;&amp; a, const pair&lt;int, int&gt;&amp; b)&#123;        return a.second &gt; b.second;    &#125;&#125;;    priority_queue&lt; pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt; , mycomparison&gt; q;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用小顶堆，优先排除较小元素，将较大元素保留在优先队列中。</p><h1 id="单调栈">2. 单调栈</h1><h2 id="右侧最高气温">2.1. 右侧最高气温</h2><p><a href="https://programmercarl.com/0739.每日温度.html">最高气温</a></p><p>查找右边 比 当前元素更小的元素</p><ol type="1"><li>右边比自身大，找到了，当前元素出栈</li><li>右边比自身小，没找到，入栈</li></ol><p>栈中元素为待查找的元素，找到了就出栈</p><h2 id="nums1元素在nums2中下一个最大元素">2.2. nums1元素在nums2中下一个最大元素</h2><p><a href="https://programmercarl.com/0496.下一个更大元素I.html">nums1元素在nums2中下一个最大元素</a></p><ol type="1"><li>先计算<code>num2</code>中下一个更大元素的结果，保存在<code>map</code>中</li><li><code>num1</code>从<code>map</code>中取得结果</li></ol><h2 id="循环数组的下一最大元素">2.3. 循环数组的下一最大元素</h2><p><a href="https://programmercarl.com/0503.下一个更大元素II.html#算法公开课">循环数组的下一最大元素</a></p><p><code>nums</code>是一个循环数组，最后一个元素接在第一个元素</p><blockquote><ol type="1"><li>对数组循环时， 使用 <strong><code>% nums.size()</code></strong> 对数组循环遍历</li><li>遍历次数增加一倍，从<code>1</code>遍历到 <code>2*n</code></li></ol></blockquote><h2 id="接雨水">2.4. 接雨水</h2><p><a href="https://programmercarl.com/0042.接雨水.html#思路">接雨水</a></p><p>左边和右边高度高于中间时，中间出现凹槽， 可以接到雨水</p><h3 id="暴力求解">2.4.1. 暴力求解</h3><p>当前节点<code>j</code></p><ol type="1"><li><p>左边<code>[0,j-1]</code>最大高度<code>lheight</code>,右边<code>[j+1 , end]</code>最大高度<code>rheight</code>，每次暴力求解这两个指针</p></li><li><p>计算高度差，使用列方向计算求和</p><p><img src="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/20210402091208445.png" alt="列方向求和" style="zoom:75%;"></p></li></ol><h3 id="动态规划">2.4.2. 动态规划</h3><ol type="1"><li><code>j</code>左边最大高度 = <code>j-1</code>左边最高高度，或者<code>height[j-1]</code></li><li>右边计算公式为 <code>rheight[j] =  max(rheight[j+1] , height[j+1])</code></li></ol><p>先计算出<code>dp</code>， 代替<a href="#暴力求解">暴力求解</a> 中的双指针</p><h3 id="单调栈-1">2.4.3. 单调栈</h3><p>单调递增栈中，栈底 &gt; 栈头</p><p>如果出栈<code>j</code>， 栈头元素&gt; <code>j</code>, 即将入栈元素 &gt; <code>j</code>， 出现凹槽，计算这个凹槽</p><p>宽 = <code>入栈元素 - 栈顶元素</code>， 高度 = <code>min(入栈， 栈顶) - 出栈元素(凹槽)</code></p><figure><img src="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/20210223092629946.png" alt="行计算"><figcaption aria-hidden="true">行计算</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表-字符串</title>
      <link href="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="哈希表-字符串">1. 哈希表-字符串</h1><p><strong>感谢<a href="https://programmercarl.com/">代码随想录</a></strong></p><h2 id="快乐数">1.1. 快乐数</h2><p><a href="https://programmercarl.com/0202.快乐数.html#思路">快乐数</a></p><p>查找数字是否重复出现，使用哈希表存储</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;set&gt;set&lt;int&gt; s;s.insert(a); &#x2F;&#x2F; 插入数据if(s.find(a)!&#x3D; s.end())&#123;    &#x2F;&#x2F; 查找数据是否在s中    &#x2F;&#x2F;如果出现 !&#x3D; s.end(), 没出现 &#x3D;&#x3D; s.end()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="两数之和">1.2. 两数之和</h2><p><a href="https://programmercarl.com/0001.两数之和.html#算法公开课">两数之和</a></p><ol type="1"><li>map存放在之前的数据，也是当前查询中匹配的数据</li><li>map中key对应数值，value对应索引</li><li>unordered_map中使用Hash存储， map中使用红黑树存储</li></ol><h2 id="三数之和">1.3. 三数之和</h2><p><a href="https://programmercarl.com/0015.三数之和.html#思路">三数之和</a></p><ol type="1"><li><p>使用三个指针，查找指针对应的数据之和是否为0</p></li><li><p>指针去重，结果中不能包含统一的数据，所以在取得结果后再去重，而不是先去重再计算结果</p></li></ol><p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(i&gt; 0 &amp;&amp; nums[i]&#x3D;&#x3D; nums[i-1])&#123;continue;&#x2F;&#x2F;对已有结果去重&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><ol start="3" type="1"><li>vector<int><strong>{</strong>1， 2，3<strong>}</strong>，使用{}作为临时vector</int></li><li><code>for( ; ; )</code> 中第一个式子只对第一次循环有效，循环中赋初值需放在循环内</li></ol><h1 id="字符串">2. 字符串</h1><h2 id="反转字符串">2.1. 反转字符串</h2><p><a href="https://programmercarl.com/0541.反转字符串II.html#思路">反转字符串2</a></p><ol type="1"><li>对于有规律的计数时，使用i = i+ num，</li><li>reverse(begin()+i， begin+k)，反转范围为[i,k）</li></ol><h2 id="花式反转">2.2. 花式反转</h2><p><a href="https://programmercarl.com/0151.翻转字符串里的单词.html#思路">先反转整体，再反转局部</a></p><ol type="1"><li>去除空格时，sum值代表字符串的长度</li><li>当s 遍历到结尾时，也是一个反转条件</li></ol><h2 id="kmp算法">2.3. KMP算法</h2><p>获得next数组</p><ol type="1"><li>初始化为0</li><li>如果s[i] 与s[j] 相同，最长的 j +1；</li><li>否则与next[j-1]的字串进行比较；</li></ol><p>比较</p><ol type="1"><li>如果s[i] 与t[j] 相同， j++ ，比较下一位</li><li>否则返回到最长的公共子串的下一位， 即next[j-1]比较</li></ol><blockquote><p>next初值赋值为1 时，相当于next 向右移动了一位，此时不相同时，取next[j]即可</p></blockquote><h2 id="重复子串">2.4. 重复子串</h2><p><a href="https://programmercarl.com/0459.重复的子字符串.html">重复子串</a></p><figure><img src="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8-%E5%AD%97%E7%AC%A6%E4%B8%B2/20220728104931.png" alt="图二"><figcaption aria-hidden="true">图二</figcaption></figure><p><strong>结论： 如果s是由重复序列组成，那么s+s中一定具有s</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论0</title>
      <link href="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA0/"/>
      <url>/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA0/</url>
      
        <content type="html"><![CDATA[<h2 id="岛屿">0.1. 岛屿</h2><h2 id="图查找算法">0.2. 图查找算法</h2><h3 id="并查集的实现-并查集理论基础-代码随想录">0.2.1. 并查集的实现 并查集理论基础 | 代码随想录</h3><ol type="1"><li>并查集，是将一个集合内所有数据放入一个连通图中，即为father[u]= v；</li><li>查询一个并查集，是查询根节点是否相同，find(u)== find(v)</li><li>初始化，所有的并查集都指向自身</li><li>路径压缩，节点在find过程中都执行根节点</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 使用数据存放并查集vector&lt;int&gt; father(n, 0);void init()&#123;    for(int i &#x3D; 0;i&lt; father.size();i++)&#123;        father[i]&#x3D; i;    &#125;&#125;int find(int u)&#123;    if(father[u]&#x3D;&#x3D;u) return u;    else &#123;        father[u]&#x3D;find(father[u]);&#x2F;&#x2F; 路径压缩，指向根节点    &#125;    return father[u];&#125;int is_same(int u, int v)&#123;    int a &#x3D; find(u);    int b &#x3D; find(v);    if(a &#x3D;&#x3D; b) return 1;    else return 0;&#125;void join(int u, int v)&#123;    int a &#x3D; find(u);    int b &#x3D; find(v);    if(a &#x3D;&#x3D; b) return ;    father[u]&#x3D; v;    return ;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="prim算法">0.2.2. prim算法</h3><ol type="1"><li>选择最小边e,v（e是树中，v是树外的数据）</li><li>将节点v加入树中</li><li>更新与v的节点的权重<ol type="1"><li>此处记录树的连接关系，记录当前节点的父亲</li></ol></li></ol><h3 id="kruskal-算法">0.2.3. kruskal 算法</h3><ol type="1"><li>完成并查集</li><li>对边的权重排序</li><li>选择最小边<ol type="1"><li>如果在并查集中，跳过</li><li>不在并查集中，加入节点树种</li></ol></li></ol><h3 id="拓扑排序">0.2.4. 拓扑排序</h3><ol type="1"><li>计算节点入度</li><li>选择入度为0 的节点，加入处理队列q, 并将入度替换为-1</li><li>处理队列q<ol type="1"><li>cur指向的所有节点，入度减1</li><li>如果入度等于1，加入处理队列q, 并将入度替换为-1</li><li>记录出队元素cur.</li></ol></li></ol><blockquote><p>出队元素不等于总元素数量时， <strong>判断有向图中 存在环</strong></p></blockquote><h3 id="dijkstra算法">0.2.5. dijkstra算法</h3><p><strong><u>权值不能为负数，prim算法权值可以是负数，负数情况使用ford算法</u></strong></p><ol type="1"><li>选择最小边并且该节点没有被访问过</li><li>标记该节点，已经被访问过</li><li>更新非访问节点到源点的最小距离，同时当前节点的父亲</li></ol><h3 id="使用边权重的dijkstra算法">0.2.6. 使用边权重的dijkstra算法</h3><p>使用边的权值进行计算</p><ol type="1"><li>建立小顶堆</li><li>从小顶堆中选择最小的边</li><li>标记边连线的点已经被访问过了</li><li>更新edge相连的顶点的权重</li></ol><h2 id="附录">0.3. 附录</h2><h3 id="建立小顶堆">0.3.1. 建立小顶堆</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;queue&gt;class mycomparison&#123;    bool operator(const pair&lt;int, int&gt;&amp; a, const pair&lt;int, int&gt;&amp; b)&#123;        return a.second&gt; b.second;    &#125;&#125;priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int,int&gt;&gt; , mycomparison&gt; p;&#x2F;*a&gt; b时 ，是小顶堆；a&lt; b时， 是大顶堆；*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对vector数组进行排序">0.3.2. 对vector数组进行排序</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">#include &lt;algorithm&gt;vector&lt;int&gt; edges;sort(edges.begin() , edges.end(), [](const edge&amp; a, const edge&amp; b)&#123;return a&lt; b;&#125;);&#x2F;*a&lt; b， 升序排序；a&gt; b， 降序排序；默认情况是升序排序；*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/07/10/c/STL/"/>
      <url>/2025/07/10/c/STL/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构">1. 数据结构</h1><h2 id="list">1.1. list</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;list&gt;List&lt;int&gt; mylist;list&lt;string&gt; names&#x3D; &#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;;list&lt;int&gt; list(my_list.begin(), mylist.end());list&lt;int&gt; tenZeros(10);&#x2F;&#x2F; 初始化十个数，默认为0list&lt;int&gt; tenSeverns(10,7); &#x2F;&#x2F; 初始化十个7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加元素">1.1.1. 添加元素</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mylist.push_back(10);mylist.push_front(10);&#x2F;&#x2F; 在这个迭代器之前插入元素auto it &#x3D; mylist.begin();mylist.insert(it+1, 15);&#x2F;&#x2F; 在这个迭代器后插入一串元素mylist.insert(it, vec.begin() ,vec.end());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问">1.1.2. 访问</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mylist.enpty()mylist.front()mylist.back()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="删除元素">1.1.3. 删除元素</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mylist.pop_front(); &#x2F;&#x2F;有返回吗mylist.pop_back();auto it &#x3D; mylist.begin();it &#x3D; mylist.erase(it);mylist.erase(mylist.begin()+1, mylist.end());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历">1.1.4. 遍历</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(auto it &#x3D; mylist.begin(); it !&#x3D; mylist.end() ;it++)&#123;(*it) ++; &#125;for(auto num : mylist)&#123;    num++;&#125;for(auto&amp; num :mylist)&#123;num ++; &#x2F;&#x2F;修改值时使用引用   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合并">1.1.5. 合并</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mylist.sort(); &#x2F;&#x2F; 默认从小到大排序mylist.sort([](int a, int b)&#123;    return a&gt;b;&#125;);&#x2F;&#x2F;a&gt;b 从大到小排序&#x2F;&#x2F; 合并 ,要求list1, list2都需要排序list1.merge(list2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="唯一化">1.1.6. 唯一化</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mylist.unique();&#x2F;&#x2F; 自定义相等mylist.unique([](int a, int b)&#123;return abs(a-b)&lt;2;&#125;);&#x2F;&#x2F; 反转 revList.reverse();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拼接">1.1.7. 拼接</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">std::list&lt;int&gt; listA &#x3D; &#123;1, 2&#125;;std::list&lt;int&gt; listB &#x3D; &#123;3, 4, 5&#125;;listA.splice(listA.end(), listB); &#x2F;&#x2F; listA: &#123;1, 2, 3, 4, 5&#125;, listB: &#123;&#125;listX.splice(listX.end(), listY, it_y); &#x2F;&#x2F; listX: &#123;10, 20, 30&#125;, listY: &#123;40, 50&#125;listP.splice(listP.end(), listQ, first_q, last_q);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vector">1.2. vector</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;vector&gt;vector&lt;int&gt; myv;&#x2F;&#x2F; 从数组中创建vectorarr &#x3D; &#123;1,2,3,4&#125;;myv &#x3D; vector&lt;int&gt; (arr, arr+ sizeof(arr)&#x2F; sizeof(arr[0]));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入数据">1.2.1. 插入数据</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">myv.push_back(value);myv.emplace_back(value1, value2);&#x2F;&#x2F; value1 ,value2 可以组成结构体数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="访问元素">1.2.2. 访问元素</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">myv[0] ;try&#123;    myv.at(0);    &#x2F;&#x2F; 对数据边界检测，返回Out_of_range 异常&#125;catch &#123;const out_of_range&amp; e&#125;&#123;    cerr&lt;&lt; e.what()&lt;&lt;endl;&#125;auto it &#x3D; myv.front(); &#x2F;&#x2F; 返回引用，指针？值引用？auto it &#x3D; myv.back();int* data&#x3D; myv.data();&#x2F;&#x2F; 返回数据数组指针<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序">1.2.3. 排序</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;algorithm&gt;sort(my.begin() , my.end());&#x2F;&#x2F; 从小到大排序sort(my.begin(), my.end(), [](int a, int b)&#123;return a&gt;b;  &#125;);sort(my.begin(), my.end(), greater&lt;int&gt;());&#x2F;&#x2F; 从大到小排序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合并-1">1.2.4. 合并</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; merge(v1.size() + v2.size());&#x2F;&#x2F; v1，v2完成排序，合并结果在merge中merger(v1.begin, v1.end() ,v2.begin(), v2.end(), merge.begin());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="stack-and-queue">1.3. stack and queue</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stack&gt;stack&lt;int&gt; mys &#x3D; stack&lt;int, vector&lt;int&gt;&gt; (vec); &#x2F;&#x2F; 指定底层容器有什么效果mys.push();mys.top();mys.pop();mys.size();mys.empty();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;queue&gt;queue&lt;int&gt; myq ;queue&lt;int, list&lt;int&gt;&gt; myq(vec);myq.push();myq.front(); &#x2F;&#x2F; 对头使用front, 栈顶使用topmyq.back(); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="deque">1.4. deque</h2><p>使用方法与vector类似，存储使用块与链表链接，比vector的性能好</p><h2 id="map">1.5. map</h2><p>数据有序排列</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;map&gt;map&lt;string, age&gt; mymap &#x3D;&#123;&#123;&quot;a&quot;,20&#125;&#125;;mymap[&quot;b&quot;]&#x3D;20;auto [it, inserted] &#x3D; mymap.insert&#123;&#123;&quot;c&quot;,10&#125;&#125;;mymap.emplace(&quot;c&quot;,10);&#x2F;&#x2F; 如果插入已存在，inserted值为false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问-1">1.5.1. 访问</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">mymap[&quot;a&quot;]; &#x2F;&#x2F; 没有自动创建元素mymap.at[&quot;b&quot;];&#x2F;&#x2F; 没有抛出异常out_of_rangeauto it &#x3D; mymap.find(key);if(it !&#x3D; mymap.end())&#123;    return 0;&#125;&#x2F;&#x2F; 对键进行计数，map默认最多有1个键值if(mymap.count(key))&#123;    &#125;for(auto&amp; pair: mymap)&#123;    pair.first; &#x2F;&#x2F; key是第一个元素    pair.second; &#x2F;&#x2F;value是第二个元素&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unordered_map">1.5.2. unordered_map</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;unordered_map&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用Hash表映射</p><h3 id="multimap">1.5.3. multimap</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">multimap&lt;string, int&gt; mymap;&#x2F;&#x2F; 不可以使用[], at()&#x2F;&#x2F;find()， 返回一个迭代器&#x2F;&#x2F;equal_range(key), 返回一个pair, 包含两个迭代器，表示所有具有该键的元素的范围（[first, last)）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="unordered_multimap">1.5.4. unordered_multimap</h3><p>使用方法与multimap相同</p><h2 id="pair">1.6. pair</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;utility&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="set">1.7. set</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;set&gt;set&lt;int, [](int a, int b)&#123;    return a&gt;b&#125;&gt; set1 &#x3D; &#123;1,2,3,4&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用红黑树自定义操作符">1.8. 使用红黑树，自定义操作符</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct person&#123;    int age;        bool operator&lt;(const Person&amp; other) const&#123;        if(age !&#x3D; other.age)&#123;            return age&lt; other.age;        &#125;    &#125;        friend ostream&amp; operator&lt;&lt;(ostream&amp;&amp; os, const person&amp; p)&#123;        os&lt;&lt;p.age&lt;&lt;endl;        return os;    &#125;&#125;map&lt;person, int&gt; mymap;struct PointCompare &#123;    bool operator()(const Point&amp; p1, const Point&amp; p2) const &#123;        if (p1.x !&#x3D; p2.x) &#123;            return p1.x &lt; p2.x;        &#125;        return p1.y &lt; p2.y;    &#125;&#125;;std::map&lt;Point, std::string, PointCompare&gt; pointMap;&#x2F;&#x2F; 这里不能使用out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="priority_queue">1.9. priority_queue</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 只能使用仿函数类型class mycomparison&#123;    public:    bool operator()(const int&amp; a,const int&amp; b)const&#123;        if(a&gt;b)&#123;            return true;        &#125;else&#123;            return false;        &#125;    &#125;&#125;;priority_queue&lt;int&gt; q;&#x2F;&#x2F; 大顶堆，数据大的在顶端priority_queue&lt;int, vector&lt;int&gt;, mycomparison&gt; min_pq; &#x2F;&#x2F;小顶堆，小数据在顶端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="numeric">1.10. numeric</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;numeric&gt;int sum &#x3D; std::accumulate(numbers.begin(), numbers.end(), 0);&#x2F;&#x2F; 默认求和int product &#x3D; std::accumulate(numbers.begin(), numbers.end(), 1, std::multiplies&lt;int&gt;());&#x2F;&#x2F; 默认求积#include &lt;algorithm&gt;auto min_it &#x3D; min_element(number.begin(), number.end(), mycomparison);auto max_it &#x3D; max_element(number.begin(), number.end(), mycomparison);auto minmax &#x3D; minmax_element(number.begin(), number.end(),mycomparison);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习</title>
      <link href="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习">1. 深度学习</h1><h2 id="数据读取">1.1. 数据读取</h2><h3 id="标签转换为数据迭代器">1.1.1. 标签转换为数据迭代器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torch.utils import data# 传入多个数据，类似数据压缩 data_arrays，对数据进行解压缩dataset &#x3D; data.TensorDataset(data_arrays)# 创建迭代器，batch_sizedata.DataLoader(dataset, batch_size, shuffle&#x3D;is_train)# iter返回一个迭代器对象， next读取迭代器的下一个数据next(iter(data))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从torchvision.datasets读取">1.1.2. 从torchvision.datasets读取</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torchvision import transformsfrom torch.utils import dataimport torchvisiondef load_data(batch_size, resize &#x3D; None): # 定义数据处理方式       trans &#x3D; [transforms.ToTensors()]    if resize:        trans.insert(0, transforms.Resize(resize))    trans &#x3D; transforms.Compose(trans)# 使用Compose转换        # 选择数据导出模式    &#39;&#39;&#39;    root - 数据保存地址    train - 训练数据    transforms 转换模式    download 是否选择下载    &#39;&#39;&#39;    mnist_train &#x3D; torchvision.datasets.FashionMNIST(    root &#x3D; &quot;..&#x2F;data&quot;, train &#x3D; True, transforms &#x3D; trans, download &#x3D; True)        &#39;&#39;&#39;    batch_size: 每个批次包含多少个样本。shuffle: 是否在每个 epoch 开始时打乱数据（训练集通常为 True，测试集通常为 False）。num_workers (可选): 用于数据加载的子进程数量，可以加快数据读取速度。    &#39;&#39;&#39;    data &#x3D; data.DataLoader(mnist_train, batch_size, shuffle &#x3D; True,                          num_workers &#x3D; 3)       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="序列数据">1.1.3. 序列数据</h3><p>对于总长度T， 时间<span class="math inline"><em>τ</em></span> ,将数据分为 <span class="math display">$$y_t = X_t \\x_t = [x_[t-\tau]... x_{t-1}] \\但是x_t 相对Y_t少了\tau个，可以舍弃，也可以填充0$$</span></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tau &#x3D; 4features &#x3D; torch.zeros((T - tau, tau))for i in range(tau):    features[:, i] &#x3D; x[i: T - tau + i]labels &#x3D; x[tau:].reshape((-1, 1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol type="1"><li>读取数据</li><li>词元化（转换为单词或字符）</li><li>转换为词元与数字的映射</li><li>将映射作用在序列数据上，转换为向量表示</li><li><a href="#squence">数据预处理代码</a></li></ol><h3 id="文本序列数据">1.1.4. 文本序列数据</h3><ol type="1"><li>读取数据到string中</li><li>使用split( 分割为英法双语，然后使用.split(’ ’)将单词分割</li><li>然后将单词词元，建立词表</li><li>使用词表，转换为向量，对向量进行阶段或填充，然后在向量末尾增加<eos>，再统计序列中有效的单元数量valid_len</eos></li><li>指定批量大小，转换为小批量迭代器</li></ol><p><a href="#读取文本序列数据">读取文本序列代码</a></p><h2 id="模型">1.2. 模型</h2><h3 id="线性模型linear">1.2.1. 线性模型linear</h3><p>第一个指定输入特征形状，即2，第二个指定输出特征形状</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torch import nnnet &#x3D; nn.Sequential(nn.Linear(2, 1))loss &#x3D; nn.MSELoss()trainer &#x3D; torch.optim.SGD(net.parameters(), lr&#x3D;0.03)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="展平层">1.2.2. 展平层</h3><p>将(batch_size, channel, height, weight) 转换为(batch_size, channel* height*weight)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nn.Flatten(start_dim &#x3D; 1, end_dim &#x3D;-1) # 默认保留第一维batch_sizenn.LogSoftmax(dim&#x3D;1) # 作用于最后一个维度，进行归一化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="mlp">1.2.3. MLP</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torch import nnnet &#x3D; nn.Sequential(nn.Flatten(),nn.Linear(784, 256),nn.ReLU(),nn.Linear(256, 10))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cnn">1.2.4. CNN</h3><p>不变性：无论使用什么方法找到这个物体，都与物体的位置无关</p><p>原因：与像素点计算的卷积核都是相同的，不随着位置的改变而改变</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">&#39;&#39;&#39;param1: 输入通道param2: 输出通道parma3: 卷积核大小param4: 参数&#39;&#39;&#39;conv2d &#x3D; nn.Conv2d(1,1, kernel_size&#x3D;(1, 2), bias&#x3D;False)&#39;&#39;&#39;卷积核大小 &#x3D; input_channels* kernel_size, 每一个卷积核计算的出来都是一个二维图形卷积核数量 &#x3D; output_channels&#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="填充padding">1.2.4.1. 填充padding</h4><p>卷积核最好选择奇数</p><p>填充高度与宽度满足<span class="math inline"><em>p</em><sub><em>h</em></sub> = <em>k</em><sub><em>h</em></sub> − 1, <em>p</em><sub><em>w</em></sub> = <em>k</em><sub><em>w</em></sub> − 1</span>, 在上下填充的高度与宽度分别为 <span class="math inline"><em>p</em><sub><em>h</em></sub>/2, <em>p</em><sub><em>w</em></sub>/2</span></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">conv2d &#x3D; nn.Conv2d(1,1, kernel_size&#x3D;(3, 3),padding &#x3D; 1, bias&#x3D;False)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="步幅">1.2.4.2. 步幅</h4><p>输出形状公式为 <span class="math display">$$\lfloor（n_h-k_h-+p_h+s_h)/s_h\rfloor \\p_h = k_h-1 \\所以结果为（n_h+s_h-1)/s_h, \\可以整除情况下，=（n_h+s_h)/s_h$$</span></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">conv2d &#x3D; nn.Conv2d(1, 1, kernel_size&#x3D;(3, 5), padding&#x3D;(1, 2), stride&#x3D;(3, 4))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>当以每像素为基础应用时，<span class="math inline">1 × 1</span>卷积层相当于全连接层。</li></ul><h3 id="批量归一化层batchnorm">1.2.5. 批量归一化层BatchNorm</h3><p><span class="math display">$$\mathrm{BN}(\mathbf{x}) = \boldsymbol{\gamma} \odot \frac{\mathbf{x} - \hat{\boldsymbol{\mu}}_\mathcal{B}}{\hat{\boldsymbol{\sigma}}_\mathcal{B}} + \boldsymbol{\beta}.$$</span></p><p>对特征维度进行归一化,<span class="math inline"><em>γ</em>、<em>β</em></span> 是拉伸和偏移参数</p><ol type="1"><li><p>对特征维度进行归一化</p><pre class="line-numbers language-none"><code class="language-none">mean &#x3D; X.mean(dim &#x3D; 0, keepdim &#x3D; True)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>卷积层</p><ol type="1"><li>对通道维度进行归一化</li></ol></li><li><p>训练状态下使用小批次的样本均值与方差，测试状态使用的移动平均估算的均值与方差</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">&#39;&#39;&#39;param: 输入通道数&#39;&#39;&#39;nn.BatchNorm2d(6)  nn.BatchNorm1d(128)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="残差块">1.2.6. 残差块</h3><p>训练是模型训练出F(X) = H(x)- X</p><figure><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250423225436209.png" alt="image-20250423225436209"><figcaption aria-hidden="true">image-20250423225436209</figcaption></figure><pre class="line-numbers language-python" data-language="python"><code class="language-python">import torch from torch import nnfrom torch.nn import functional as Fclass Residual(nn.Module):    def __init__(self , input_channels, num_channels, use_1x1conv&#x3D; False, strides &#x3D;1):        super().__init__()        self.conv1 &#x3D; nn.Conv2d(input_channels, num_channels, kernel_size &#x3D; 3, paddding &#x3D; 1, stride &#x3D; strides)        self.conv2 &#x3D; nn.Conv2d(num_channels, num_channels, kernel_size &#x3D; 3, paddding &#x3D; 1, stride &#x3D; strides)        # 修改X的通道数量，与f(x) - x匹配        if use_1x1conv :            self.conv3 &#x3D; nn.Conv2d(input_channels, num_channels, kernel_size &#x3D;1 ,padding &#x3D; 0, stride &#x3D; strides)        else :            self.conv3 &#x3D; none        self.bn1 &#x3D; nn.BatchNorm2d(num_channels)        self.bn2 &#x3D; nn.BatchNorm2d(num_channels)    def forward(self,X):        Y &#x3D; F.relu(self.bn1(self.conv1(X)))        Y &#x3D; self.bn2(self.conv2(Y))        # 修改X输出通道数量        if conv3 :            X &#x3D; self.conv3(X)        # 实现Y &#x3D; f(x) +X        Y &#x3D; Y+ X        Y &#x3D; F.relu(Y) return Y        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="池化层pooling">1.2.7. 池化层pooling</h3><p>汇聚卷积层计算出的信息，降低卷积层对位置的敏感性，同时降低对空间降采样表示的敏感性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torch import nnnn.MaxPool2d((3,3), padding &#x3D;(0,1), stride &#x3D; (0,1))  # 最大池化层nn.AvgPool2d((2, 3), stride&#x3D;(2, 3), padding&#x3D;(0, 1))  # 平均池化层&#39;&#39;&#39;param1 : 输出层形状(1,1), 网络自动计算padding, stride ,k ,转化为(1,1)的输出维度&#39;&#39;&#39;nn.AdaptiveAvgPool2d((1,1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>池化层不需要指出Input_channels, output_channels， <strong>input_channels =output_channels</strong></p><p>例如，Lenet网络</p><figure><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250423211333286.png" alt="image-20250423211333286"><figcaption aria-hidden="true">image-20250423211333286</figcaption></figure><pre class="line-numbers language-python" data-language="python"><code class="language-python">net &#x3D; nn.Sequential(    nn.Conv2d(1, 6, kernel_size&#x3D;5, padding&#x3D;2), nn.Sigmoid(),    nn.AvgPool2d(kernel_size&#x3D;2, stride&#x3D;2),    nn.Conv2d(6, 16, kernel_size&#x3D;5), nn.Sigmoid(),    nn.AvgPool2d(kernel_size&#x3D;2, stride&#x3D;2),    nn.Flatten(),    nn.Linear(16 * 5 * 5, 120), nn.Sigmoid(),    nn.Linear(120, 84), nn.Sigmoid(),    nn.Linear(84, 10))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环神经网络rnn">1.2.8. 循环神经网络RNN</h3><p><span class="math display">$$隐藏输出\\\mathbf{H}_t = \phi(\mathbf{X}_t \mathbf{W}_{xh} + \mathbf{H}_{t-1} \mathbf{W}_{hh}  + \mathbf{b}_h).\\输出\\\mathbf{O}_t = \mathbf{H}_t \mathbf{W}_{hq} + \mathbf{b}_q.$$</span></p><h4 id="深度循环deep_rnn">1.2.8.1. 深度循环deep_rnn</h4><p>RNN相当于Drnn中，<span class="math inline"><em>H</em><sub><em>t</em></sub><sup>0</sup> = <em>X</em><sub><em>t</em></sub></span> <span class="math display">$$\mathbf{H}_t^{(l)} = \phi_l(\mathbf{H}_t^{(l-1)} \mathbf{W}_{xh}^{(l)} + \mathbf{H}_{t-1}^{(l)} \mathbf{W}_{hh}^{(l)}  + \mathbf{b}_h^{(l)})\\\mathbf{O}_t = \mathbf{H}_t^{(L)} \mathbf{W}_{hq} + \mathbf{b}_q$$</span></p><h4 id="双向循环rnn">1.2.8.2. 双向循环rnn</h4><figure><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250424175214314.png" alt="image-20250424175214314"><figcaption aria-hidden="true">image-20250424175214314</figcaption></figure><p><strong>多用于对文本的编码，而不是预测文本</strong></p><h4 id="代码介绍">1.2.8.3. 代码介绍</h4><p>输入X = （time_step ,batch_size, feature), output = (time_step ,batch_size, num_hidden*(1/2)), state = (time_step ,batch_size, num_hidden)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torch import nnrnn &#x3D; nn.RNN(num_input, num_hiddens)gru_layer &#x3D; nn.GRU(num_inputs, num_hiddens)lstm_layer&#x3D;nn.LSTM(num_inputs, num_hiddens)# drnn&#39;&#39;&#39;X_&#123;batch* num_input&#125;* W_&#123;num_input * num_hidder&#125; num_inputs: 输入的特征数量num_hidden：隐神经元数量 &#x3D; 隐状态的特征数量bidirectional: 双向循环网络&#39;&#39;&#39;lstm_layer &#x3D; nn.LSTM(num_inputs, num_hidden, num_layers, bidirectional&#x3D;True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RNN 利用<strong>时间维度</strong>的参数共享实现了对**时间位置*，每一个时间步使用的一套参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def rnn(inputs, state, params):    # inputs的形状：(时间步数量，批量大小，词表大小)    W_xh, W_hh, b_h, W_hq, b_q &#x3D; params        H, &#x3D; state    outputs &#x3D; []    # X的形状：(批量大小，词表大小)    for X in inputs:        H &#x3D; torch.tanh(torch.mm(X, W_xh) + torch.mm(H, W_hh) + b_h)        Y &#x3D; torch.mm(H, W_hq) + b_q        outputs.append(Y)    return torch.cat(outputs, dim&#x3D;0), (H,)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><figure><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250424173608710.png" alt="image-20250424173608710"><figcaption aria-hidden="true">image-20250424173608710</figcaption></figure><h4 id="梯度衰减">1.2.8.4. 梯度衰减</h4><p>减小梯度，避免梯度爆炸，使得梯度始终保持在<span class="math inline"><em>θ</em></span> 以下 <span class="math display">$$\mathbf{g} \leftarrow \min\left(1, \frac{\theta}{\|\mathbf{g}\|}\right) \mathbf{g}.$$</span> <a href="#grad_clipping">梯度裁剪代码</a></p><h2 id="激活函数">1.3. 激活函数</h2><p>将模型从线性变为非线性</p><h3 id="relu">1.3.1. relu</h3><p><span class="math display">ReLU (<em>x</em>) = max (<em>x</em>, 0).</span></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch.relu(X)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="sigmod">1.3.2. sigmod</h3><p>特征图像，曲线在（0，1）中，关于0.5对称 <span class="math display"></span>(x) = .<span class="math display"></span></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">y &#x3D; torch.sigmod(X)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="tanh">1.3.3. tanh</h3><p>特征图像，曲线在（-1，1）中，关于0对称 <span class="math display"></span>(x) =  $$</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">y &#x3D; torch.tanh(x)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="损失函数">1.4. 损失函数</h2><h3 id="均方误差">1.4.1. 均方误差</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss &#x3D; nn.MSELoss()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="交叉熵损失">1.4.2. 交叉熵损失</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss &#x3D; nn.CrossEntropyLoss(reduction&#x3D;&#39;none&#39;) # 返回的是一个张量，反向传播需要计算为标量# 相当于 NLLLoss(LogSoftmax(logits), target)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="nllloss">1.4.3. NLLLoss</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss &#x3D; nn.NLLLoss()  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="训练过程">1.5. 训练过程</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">num_epoch &#x3D; 2for epoch in range(num_epoch):    for X, y in data_iter :        l &#x3D; loss(net(X), y)        train.zero_grad()        # 清除训练模型的梯度, 返回的是一个标量        l.backward()          # 反向计算梯度        trainer.step()        l &#x3D; loss(net(features), labels)  # 计算总体梯度    print(f&#39;epoch&#123;epoch&#125;, loss&#123;1:0.2f&#125;&#39;)                    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型问题">1.6. 模型问题</h2><h3 id="复杂性因素">1.6.1. 复杂性因素</h3><ol type="1"><li>可调整参数的数量。当可调整参数的数量（有时称为<strong>自由度</strong>）很大时，模型往往更容易过拟合。</li><li>参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合。</li><li>训练样本的数量。即使模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型。</li></ol><h3 id="k折交叉验证">1.6.2. K折交叉验证</h3><p>一个epoch中，将训练数据分为K份，在k-1份上进行训练，在第K份上进行验证</p><h3 id="l2正则化">1.6.3. L2正则化</h3>$$<p>$$</p><p>每次都减小一定的权重，岭回归相对于线性回归增加了L2正则化，LASSO回归相当于增加了L1回归，相当于参数选择</p><ol type="1"><li>选择权重参数，然后正则化</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 选择参数组for name, param in net.named_parameters():    # param.requires_grad 确保只包含需要梯度的参数    if param.requires_grad:        # 根据参数名称判断是否是偏置项        if &#39;bias&#39; in name: # 简单的判断，更严格的判断可以是 name.endswith(&#39;.bias&#39;)            params_without_wd.append(param)        else:            params_with_wd.append(param)# 初始化优化器，使用参数组trainer &#x3D; torch.optim.SGD([    &#123;&#39;params&#39;: params_with_wd, &#39;weight_decay&#39;: wd&#125;,    &#123;&#39;params&#39;: params_without_wd, &#39;weight_decay&#39;: 0&#125; # 对偏置项设置 weight_decay 为 0], lr&#x3D;lr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2" type="1"><li><p>对所有参数进行正则化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">trainer &#x3D; torch.optim.SGD([net.parameters(), lr &#x3D; lr, weigth_decay &#x3D; wd])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="暂退法dropout">1.6.4. 暂退法（Dropout)</h3><p>随即丢弃部分神经元</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nn.Dropout(ratio)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="随机初始化">1.6.5. 随机初始化</h3><p>暂退法和随机初始化，都可以减小神经元的对称性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from torch.nn.init as initclass SimpleMLP(nn.Module):    def __init__(self):        super(SimpleMLP, self).__init__()        self.fc1 &#x3D; nn.Linear(784, 128) # 例如处理 28x28 图像展平后的输入        self.relu &#x3D; nn.ReLU()        self.fc2 &#x3D; nn.Linear(128, 64)        self.relu2 &#x3D; nn.ReLU()        self.fc3 &#x3D; nn.Linear(64, 10) # 例如输出 10 个类别的概率        # 在这里调用自定义初始化函数        self._initialize_weights()    def _initialize_weights(self):        print(&quot;正在进行自定义初始化...&quot;)        for m in self.modules(): # 遍历模型的所有模块 (包括子模块自身)            # print(f&quot;处理模块: &#123;m&#125;&quot;) # 可以打印查看正在处理的模块类型            if isinstance(m, nn.Linear):                # 对线性层的权重使用 He&#x2F;Kaiming 初始化                init.kaiming_normal_(m.weight, mode&#x3D;&#39;fan_in&#39;, nonlinearity&#x3D;&#39;relu&#39;)                # 对线性层的偏置初始化为常数 0                if m.bias is not None: # 检查偏置是否存在                    init.constant_(m.bias, 0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录">1.7. 附录</h2><p><b id="squence"> squence 序列数据预处理 </b></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 读取序列数据d2l.DATA_HUB[&#39;time_machine&#39;] &#x3D; (d2l.DATA_URL + &#39;timemachine.txt&#39;,                                &#39;090b5e7e70c295757f55df93cb0a180b9691891a&#39;)def read_time_machine():  #@save    &quot;&quot;&quot;将时间机器数据集加载到文本行的列表中&quot;&quot;&quot;    with open(d2l.download(&#39;time_machine&#39;), &#39;r&#39;) as f:        lines &#x3D; f.readlines()    return [re.sub(&#39;[^A-Za-z]+&#39;, &#39; &#39;, line).strip().lower() for line in lines]lines &#x3D; read_time_machine()# 词元化def tokenize(lines, token&#x3D;&#39;word&#39;):  #@save    &quot;&quot;&quot;将文本行拆分为单词或字符词元&quot;&quot;&quot;    if token &#x3D;&#x3D; &#39;word&#39;:        return [line.split() for line in lines]    elif token &#x3D;&#x3D; &#39;char&#39;:        return [list(line) for line in lines]    else:        print(&#39;错误：未知词元类型：&#39; + token)print(type(lines[0]))tokens &#x3D; tokenize(lines)# 词元与数值的映射class Vocab:  #@save    &quot;&quot;&quot;文本词表&quot;&quot;&quot;    def __init__(self, tokens&#x3D;None, min_freq&#x3D;0, reserved_tokens&#x3D;None):        if tokens is None:            tokens &#x3D; []        if reserved_tokens is None:            reserved_tokens &#x3D; []        # 按出现频率排序        counter &#x3D; count_corpus(tokens)        self._token_freqs &#x3D; sorted(counter.items(), key&#x3D;lambda x: x[1],                                   reverse&#x3D;True)        # 未知词元的索引为0        self.idx_to_token &#x3D; [&#39;&lt;unk&gt;&#39;] + reserved_tokens        # 单词到索引梭顺序        self.token_to_idx &#x3D; &#123;token: idx                             for idx, token in enumerate(self.idx_to_token)&#125;                for token, freq in self._token_freqs:            if freq &lt; min_freq:                break            if token not in self.token_to_idx:                # 顺序到单词                self.idx_to_token.append(token)                self.token_to_idx[token] &#x3D; len(self.idx_to_token) - 1    def __len__(self):        return len(self.idx_to_token)    def __getitem__(self, tokens):        if not isinstance(tokens, (list, tuple)):            return self.token_to_idx.get(tokens, self.unk)        return [self.__getitem__(token) for token in tokens]    def to_tokens(self, indices):        if not isinstance(indices, (list, tuple)):            return self.idx_to_token[indices]        return [self.idx_to_token[index] for index in indices]    @property    def unk(self):  # 未知词元的索引为0        return 0    @property    def token_freqs(self):        return self._token_freqsdef count_corpus(tokens):  #@save    &quot;&quot;&quot;统计词元的频率&quot;&quot;&quot;    # 这里的tokens是1D列表或2D列表    if len(tokens) &#x3D;&#x3D; 0 or isinstance(tokens[0], list):        # 将词元列表展平成一个列表        tokens &#x3D; [token for line in tokens for token in line]    return collections.Counter(tokens)def load_corpus_time_machine(max_tokens&#x3D;-1):  #@save    &quot;&quot;&quot;返回时光机器数据集的词元索引列表和词表&quot;&quot;&quot;    lines &#x3D; read_time_machine()    tokens &#x3D; tokenize(lines, &#39;char&#39;)    vocab &#x3D; Vocab(tokens)    # 因为时光机器数据集中的每个文本行不一定是一个句子或一个段落，    # 所以将所有文本行展平到一个列表中    corpus &#x3D; [vocab[token] for line in tokens for token in line]    if max_tokens &gt; 0:        corpus &#x3D; corpus[:max_tokens]    return corpus, vocab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><b id="grad_clipping"> 梯度衰减</b></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def grad_clipping(net, theta):  #@save    &quot;&quot;&quot;裁剪梯度&quot;&quot;&quot;    if isinstance(net, nn.Module):        params &#x3D; [p for p in net.parameters() if p.requires_grad]    else:        params &#x3D; net.params    norm &#x3D; torch.sqrt(sum(torch.sum((p.grad ** 2)) for p in params))    if norm &gt; theta:        for param in params:            param.grad[:] *&#x3D; theta &#x2F; norm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取文本序列数据">1.7.1. 读取文本序列数据</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">import osimport torchfrom d2l import torch as d2l# 下载并读出序列d2l.DATA_HUB[&#39;fra-eng&#39;] &#x3D; (d2l.DATA_URL + &#39;fra-eng.zip&#39;,                           &#39;94646ad1522d915e7b0f9296181140edcf86a4f5&#39;)#@savedef read_data_nmt():    &quot;&quot;&quot;载入“英语－法语”数据集&quot;&quot;&quot;    data_dir &#x3D; d2l.download_extract(&#39;fra-eng&#39;)    with open(os.path.join(data_dir, &#39;fra.txt&#39;), &#39;r&#39;,             encoding&#x3D;&#39;utf-8&#39;) as f:        return f.read()raw_text &#x3D; read_data_nmt()print(raw_text[:75])# 处理序列def preprocess_nmt(text):    &quot;&quot;&quot;预处理“英语－法语”数据集&quot;&quot;&quot;    def no_space(char, prev_char):        return char in set(&#39;,.!?&#39;) and prev_char !&#x3D; &#39; &#39;    # 使用空格替换不间断空格    # 使用小写字母替换大写字母    text &#x3D; text.replace(&#39;\u202f&#39;, &#39; &#39;).replace(&#39;\xa0&#39;, &#39; &#39;).lower()    # 在单词和标点符号之间插入空格    out &#x3D; [&#39; &#39; + char if i &gt; 0 and no_space(char, text[i - 1]) else char           for i, char in enumerate(text)]    return &#39;&#39;.join(out)# 词元化，并区分出feature与labeldef tokenize_nmt(text, num_examples&#x3D;None):    &quot;&quot;&quot;词元化“英语－法语”数据数据集&quot;&quot;&quot;    source, target &#x3D; [], []    for i, line in enumerate(text.split(&#39;\n&#39;)):        if num_examples and i &gt; num_examples:            break        parts &#x3D; line.split(&#39;\t&#39;)        if len(parts) &#x3D;&#x3D; 2:            # 之前标点符号之间增加了空格，使用空格分割            source.append(parts[0].split(&#39; &#39;))            target.append(parts[1].split(&#39; &#39;))    return source, targetsource, target &#x3D; tokenize_nmt(text)# 阶段或填充词元def truncate_pad(line, num_steps, padding_token):    &quot;&quot;&quot;截断或填充文本序列&quot;&quot;&quot;    if len(line) &gt; num_steps:        return line[:num_steps]  # 截断    return line + [padding_token] * (num_steps - len(line))  # 填充truncate_pad(src_vocab[source[0]], 10, src_vocab[&#39;&lt;pad&gt;&#39;])# 统计序列数据valid_lendef build_array_nmt(lines, vocab, num_steps):    &quot;&quot;&quot;将机器翻译的文本序列转换成小批量&quot;&quot;&quot;    lines &#x3D; [vocab[l] for l in lines]    lines &#x3D; [l + [vocab[&#39;&lt;eos&gt;&#39;]] for l in lines]    array &#x3D; torch.tensor([truncate_pad(        l, num_steps, vocab[&#39;&lt;pad&gt;&#39;]) for l in lines])    valid_len &#x3D; (array !&#x3D; vocab[&#39;&lt;pad&gt;&#39;]).type(torch.int32).sum(1)    return array, valid_lendef load_data_nmt(batch_size, num_steps, num_examples&#x3D;600):    &quot;&quot;&quot;返回翻译数据集的迭代器和词表&quot;&quot;&quot;    text &#x3D; preprocess_nmt(read_data_nmt()) # 读取序列    source, target &#x3D; tokenize_nmt(text, num_examples)  # 词元化序列    src_vocab &#x3D; d2l.Vocab(source, min_freq&#x3D;2, # 建立词表                          reserved_tokens&#x3D;[&#39;&lt;pad&gt;&#39;, &#39;&lt;bos&gt;&#39;, &#39;&lt;eos&gt;&#39;])    tgt_vocab &#x3D; d2l.Vocab(target, min_freq&#x3D;2,                          reserved_tokens&#x3D;[&#39;&lt;pad&gt;&#39;, &#39;&lt;bos&gt;&#39;, &#39;&lt;eos&gt;&#39;])    src_array, src_valid_len &#x3D; build_array_nmt(source, src_vocab, num_steps)  # 填充或阶段    tgt_array, tgt_valid_len &#x3D; build_array_nmt(target, tgt_vocab, num_steps)    data_arrays &#x3D; (src_array, src_valid_len, tgt_array, tgt_valid_len)    data_iter &#x3D; d2l.load_array(data_arrays, batch_size)   # 创建小批量迭代器    return data_iter, src_vocab, tgt_vocab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端代码的联合使用</title>
      <link href="/2025/05/24/java/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/05/24/java/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="html-css-javascript">1. html+ css+ javascript</h1><h2 id="html">1.1. html</h2><h3 id="常用插件">1.1.1. 常用插件</h3><ol type="1"><li>HTML CSS Support</li><li>Live Server</li><li>Auto Rename Tag</li><li>open in browser</li></ol><h3 id="常用示例">1.1.2. 常用示例</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 这里放置文档的元信息 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文档标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 连接外部样式表或脚本文件等 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>styles.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 这里放置页面内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 其他内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 这里放置文档的元信息 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文档标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 连接外部样式表或脚本文件等 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>styles.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 这里放置页面内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一个链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 其他内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css">1.2. css</h2><h3 id="规则">1.2.1. 规则</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span> <span class="token punctuation">&#123;</span>    <span class="token property">属性1</span><span class="token punctuation">:</span> 属性值1<span class="token punctuation">;</span>    <span class="token property">属性2</span><span class="token punctuation">:</span> 属性值2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入方式">1.2.2. 导入方式</h3><ol type="1"><li>内联使用</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>这是一段内联样式文本。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2" type="1"><li><p>外部样式表</p><p>写在</p><head><p>中 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">            <span class="token selector">h2</span> <span class="token punctuation">&#123;</span>                       <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>                        <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></head></li><li><p>外部样式表</p><p>使用link连接外部资源，type为“text/css”，href指向样式内容</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./css/style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="选择器">1.2.3. 选择器</h3><table><thead><tr class="header"><th>选择器</th><th>形式</th></tr></thead><tbody><tr class="odd"><td>元素</td><td>p</td></tr><tr class="even"><td>类</td><td>.highlight</td></tr><tr class="odd"><td>id</td><td>#header</td></tr><tr class="even"><td>通用选择</td><td>*</td></tr><tr class="odd"><td>子元素</td><td>父元素&gt; 子元素</td></tr><tr class="even"><td>后代</td><td><code>ul li</code> 选择了所有在 <code>&lt;ul&gt;</code> 元素内部的 <code>&lt;li&gt;</code> 元素。</td></tr><tr class="odd"><td>相邻兄弟</td><td><code>元素名 + 元素名</code>，例如，<code>h2 + p</code> 选择了与 <code>&lt;h2&gt;</code> 相邻的 <code>&lt;p&gt;</code> 元素。</td></tr><tr class="even"><td>/* 通用兄弟选择器 */</td><td>h4 ~ p { background-color: #1b91ff; }</td></tr><tr class="odd"><td>伪类选择器</td><td>用户交互时的属性变化<br>包括鼠标悬停（<code>:hover</code> ）、链接状态（<code>:active</code>）、第一个子元素（<code>:first-child</code>）</td></tr></tbody></table><h3 id="属性">1.2.4. 属性</h3><p>了解了如何选中我们想要的元素，接下来，我们来学习 CSS 常用的样式属性。CSS 的属性有上百个，但是这不意味着，我们每个都要学习，更多的属性可以参考 <a href="https://www.runoob.com/cssref/css-reference.html">这里</a></p><h4 id="盒子模型">1.2.4.1. 盒子模型</h4><p>描述了文档中的每个元素都被看作是一个矩形的盒子，这个盒子包含了内容、内边距、边框和外边距。</p><figure><img src="/2025/05/24/java/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/202311141906963.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p>其中，从内到外分别是：</p><table><thead><tr class="header"><th style="text-align: center;">属性名</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>内容（Content）</code></td><td style="text-align: center;">盒子包含的实际内容，比如文本、图片等。</td></tr><tr class="even"><td style="text-align: center;"><code>内边距（Padding）</code></td><td style="text-align: center;">围绕在内容的内部，是内容与边框之间的空间。可以使用 <code>padding</code> 属性来设置。</td></tr><tr class="odd"><td style="text-align: center;"><code>边框（Border）</code></td><td style="text-align: center;">围绕在内边距的外部，是盒子的边界。可以使用 <code>border</code> 属性来设置。</td></tr><tr class="even"><td style="text-align: center;"><code>外边距（Margin）</code></td><td style="text-align: center;">围绕在边框的外部，是盒子与其他元素之间的空间。可以使用 <code>margin</code> 属性来设置。</td></tr></tbody></table><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.demo</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span> <span class="token comment">/* 设置背景色 */</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span> <span class="token comment">/* 转换成行内块元素 */</span>            <span class="token property">border</span><span class="token punctuation">:</span> 10px solid green<span class="token punctuation">;</span> <span class="token comment">/* 设置边框样式 */</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token comment">/* 设置内边距 */</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span> <span class="token comment">/* 设置外边距 */</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="浮动">1.2.4.2. 浮动</h4><p>标准流，浮动、定位</p><p>使用float控制浮动格式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.left, .right</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 添加浮动，元素统一向左浮动，向右同理 float:right*/</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清除浮动格式，在后续的模块中不再浮动，不允许后续模块浮动</p><ol type="1"><li>加上一个空的块级元素，使用clear属性</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>            <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2" type="1"><li><p>父模块属性中使用clearfix</p></li><li><p>使用overflow: hidden 属性</p></li></ol><h4 id="定位">1.2.4.3. 定位</h4><p>相关属性：</p><p>top ,bottom , left ,right</p><p>postion属性值</p><table><thead><tr class="header"><th>position</th><th>value</th></tr></thead><tbody><tr class="odd"><td>relative</td><td>相对于正常文档定位</td></tr><tr class="even"><td>absolute</td><td>相对最近的已经定位的祖先元素定位，没有，则相对初始包含块定位</td></tr><tr class="odd"><td>fixed</td><td>固定位置</td></tr></tbody></table><h2 id="javascript">1.3. javascript</h2><h3 id="导入方式-1">1.3.1. 导入方式</h3><ol type="1"><li>内联方式（inline):</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2" type="1"><li>外部引入</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myscript.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="基本语法">1.3.2. 基本语法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x<span class="token punctuation">;</span> <span class="token comment">// 声明变量</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//声明并初始化变量</span><span class="token keyword">const</span> <span class="token constant">PI</span><span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">//声明一个常量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr class="header"><th style="text-align: left;">特性</th><th style="text-align: left;"><code>var</code></th><th style="text-align: left;"><code>let</code></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><strong>作用域</strong></td><td style="text-align: left;">函数作用域</td><td style="text-align: left;">块级作用域</td></tr><tr class="even"><td style="text-align: left;"><strong>变量提升</strong></td><td style="text-align: left;">声明会被提升，赋值不提升</td><td style="text-align: left;">存在提升，但有暂时性死区</td></tr><tr class="odd"><td style="text-align: left;"><strong>重复声明</strong></td><td style="text-align: left;">允许在同作用域内重复声明</td><td style="text-align: left;">不允许在同块级作用域内重复声明</td></tr></tbody></table><h4 id="函数">1.3.2.1. 函数</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">funtion <span class="token function">hello</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//闭包是指一个函数能够访问并记住其词法作用域，即使该函数在当前词法作用域之外执行。闭包使得函数可以保持对其创建时的作用域的引用</span><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> outerVar <span class="token operator">=</span> <span class="token string">"I am outer"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outerVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问了外部函数的变量</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> inner<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关联html中的事件">1.3.2.2. 关联html中的事件</h4><table><thead><tr class="header"><th>事件</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>onClick</td><td>鼠标点击</td></tr><tr class="even"><td>onMouseOver</td><td>鼠标经过</td></tr><tr class="odd"><td>onMouseOut</td><td>鼠标移出</td></tr><tr class="even"><td>onChange</td><td>文本内容改变</td></tr><tr class="odd"><td>onSelect</td><td>文本框选中</td></tr><tr class="even"><td>onFocuse</td><td>光标聚集</td></tr><tr class="odd"><td><code>onBlur</code></td><td>移开光标</td></tr><tr class="even"><td><code>onLoad</code></td><td>网页加载</td></tr><tr class="odd"><td><code>onUnload</code></td><td>关闭网页</td></tr></tbody></table><p>事件处理程序是与特定事件相关联的函数。当事件发生时，关联的事件处理程序将被调用。在 HTML 中，可以通过以下方式添加事件处理程序：</p><ol type="1"><li><p>html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bottom</span> <span class="token special-attr"><span class="token attr-name">onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">'</span><span class="token value javascript language-javascript"><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">'</span></span></span><span class="token punctuation">></span></span> Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bottom</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>DOM属性</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> botton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myButton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>botton<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3" type="1"><li>addEventListener</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myButton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Button clicked!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取元素并修改内容">1.3.3. 获取元素，并修改内容</h3><p>DOM 中的一切都是节点。文档本身是一个文档节点，而文档中的元素、属性和文本都是不同类型的节点。主要的节点类型包括：</p><ol type="1"><li><code>元素节点（Element Nodes）</code>： 表示 HTML 或 XML 文档中的元素，如 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code> 等。</li><li><code>属性节点（Attribute Nodes）</code>： 表示元素的属性，如 class、id 等。</li><li><code>文本节点（Text Nodes）</code>： 表示元素的文本内容</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 修改元素文本内容</span>element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'新的文本内容'</span><span class="token punctuation">;</span><span class="token comment">// 添加新的子元素</span><span class="token keyword">var</span> newElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 移除子元素</span><span class="token keyword">var</span> childElement <span class="token operator">=</span> element<span class="token punctuation">.</span>firstChild<span class="token punctuation">;</span>element<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>childElement<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="致谢">2. 致谢</h1><p>摘录自<a href="https://docs.geeksman.com/front-end/1.front-end-html.html#html">Luo</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
      <url>/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="大模型">1. 大模型</h1><p>训练流程</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250516165010562.png" alt="image-20250516165010562"><figcaption aria-hidden="true">image-20250516165010562</figcaption></figure><h2 id="预训练">1.1. 预训练</h2><p>无监督学习，学习先验的背景知识</p><p>大模型的输出总的概率与原数据比较，不需要 <span class="math display"><em>L</em>(<em>u</em>) = ∑<sub><em>i</em></sub>log (<em>p</em>(<em>u</em><sub><em>i</em></sub>|<em>u</em><sub>0</sub>, ..., <em>u</em><sub><em>i</em> − 1</sub>)|<em>θ</em>)</span></p><ol type="1"><li><p>数据获取</p><ol type="1"><li>网页爬取，数据没有处理</li><li>重复</li><li>拼写错误</li></ol></li><li><p>数据清洗</p><ol type="1"><li><p>转换文本格式</p></li><li><p>去重</p><ol type="1"><li>URL爬取的网站去重</li><li>文档的相似度</li><li>对文档分组30M， 超过6次重复， 删除其余5行</li><li>启发式过滤，使用token级的KL散度去重</li></ol><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250516172556394.png" alt="image-20250516172556394"><figcaption aria-hidden="true">image-20250516172556394</figcaption></figure></li><li><p>数据打包 1. <bos> <eos> 2. 一行一行的训练，而不是一句一句的训练</eos></bos></p></li><li><p>观测模型，使用测试集对中间模型测试</p></li><li><p>数据比例，代码模型中平衡代码补全（中间填充）与代码编写（从前向后编写）的任务，两种数据集都需要</p></li></ol></li></ol><h3 id="继续预训练">1.1.1. 继续预训练</h3><p>当前的base model 对于专业领域的效果很差，继续与训练补全知识。</p><p>加入新的数据，调整学习率</p><ol type="1"><li>warmup 的步数不会影响最终的结果</li><li>学习率较大，下游任务更好</li><li>对原有模型继续warmup，效果更差</li></ol><p>使用梯形的学习率，保存拐点位置的学习率，继续预训练时候，使用拐点数据预训练，保持较高的搜索速度，拟合新增的数据集</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250516173720277.png" alt="image-20250516173720277"><figcaption aria-hidden="true">image-20250516173720277</figcaption></figure><h3 id="scaling-up">1.1.2. scaling up</h3><p>扩大模型的参数和容量</p><h3 id="尺度定律">1.1.3. 尺度定律</h3><p>模型的损失是可预测的，与模型的算力，大小，数据集有较大的关系</p><ol type="1"><li>模型的参数</li><li>数据的大小</li><li>算力</li></ol><p>模型与参数、大小、算力由直接的关系，不需要训练，就能知道最终的训练结果</p><h4 id="尺度定律-1">1.1.3.1. 尺度定律</h4><ol type="1"><li><p>模型与参数、大小、算力由直接的关系，与模型形状弱依赖</p><ol type="1"><li>某个网络的占比</li><li>隐层数量的占比</li><li>每个head的大小</li></ol><p>的影响很小，不需要对此调参</p></li><li><p>其他变量充足的时候，我们就知道模型最后的效果</p></li></ol><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519222325535.png" alt="image-20250519222325535"><figcaption aria-hidden="true">image-20250519222325535</figcaption></figure><ol start="3" type="1"><li><p>过拟合的普遍性，一味增加其中一项，模型效果就会进入衰退阶段</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519223024436.png" alt="image-20250519223024436"><figcaption aria-hidden="true">image-20250519223024436</figcaption></figure></li><li><p>同等算力下，调整模型大小和数据集的大小</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519223337327.png" alt="image-20250519223337327"><figcaption aria-hidden="true">image-20250519223337327</figcaption></figure></li><li><p>模型在训练集与测试集上表现高度相关</p></li><li><p>训练数据有显示，仍然可以重复使用数据进行训练得到可预测的“尺度定律”</p></li><li><p>其他模型（包括transform)都具有尺度定律</p></li></ol><h4 id="利用尺度定律">1.1.3.2. 利用尺度定律</h4><ol type="1"><li><p>固定模型的大小，更改预训练的数据量</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519224015225.png" alt="image-20250519224015225"><figcaption aria-hidden="true">image-20250519224015225</figcaption></figure></li><li><p>规定算力大小，训练不同大小的模型，（训练到模型收敛较难，可以得到算力的大小）</p></li></ol><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519224308944.png" alt="image-20250519224308944"><figcaption aria-hidden="true">image-20250519224308944</figcaption></figure><h3 id="涌现">1.1.4. 涌现</h3><p>大模型在训练数量的规模时，准确率会发生突变</p><h2 id="后训练">1.2. 后训练</h2><p>对齐人类的要求，回答问题有用、无害</p><h3 id="指令微调">1.2.1. 指令微调</h3><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519225029335.png" alt="image-20250519225029335"><figcaption aria-hidden="true">image-20250519225029335</figcaption></figure><ol type="1"><li><p>上下文学习</p><ol type="1"><li>用户给出例子，模型不更新参数直接学习</li></ol><p>使用例子训练，模型直接输出</p></li><li><p>预训练-微调</p><ol type="1"><li>在目标任务上进行微调</li></ol><p>给出命令前缀，然后训练</p></li><li><p>指令微调</p><ol type="1"><li>在非目标任务上进行泛化，在任务上泛化很好</li></ol></li></ol><p>指令-回答， 对回答的预测计算损失函数</p><h3 id="数据合成">1.2.2. 数据合成</h3><ol type="1"><li>人工构建任务例子</li><li>使用强模型根据种子任务生成指令</li><li>将生成的指令再给另一个强模型，获得指令的回答，得到&lt;指令，回答&gt; 对</li></ol><h3 id="test-scaling">1.2.3. test scaling</h3><p>模型输出多个结果，打分选择结果</p><p>过程奖励模型&gt;结果奖励模型</p><p>选择框架</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250523163748097.png" alt="image-20250523163748097"><figcaption aria-hidden="true">image-20250523163748097</figcaption></figure><h3 id="微调方法">1.2.4. 微调方法</h3><h4 id="lora">1.2.4.1. lora</h4><p>增加低秩矩阵</p><h4 id="前缀调整">1.2.4.2. 前缀调整</h4><p>训练的模型权重不再调整，k,v前分别添加可训练的连续前缀向量</p><p>冻结原权重，增加可训练模块</p><h4 id="提示调整">1.2.4.3. 提示调整</h4><p>训练文本前增加提示命令</p><h4 id="adapter">1.2.4.4. adapter</h4><p>在前馈神经网络前增加低秩矩阵</p><h4 id="loramoe">1.2.4.5. LoRAMoE</h4><p>微调插入专家模型中的LoRA适配器</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250523200928848.png" alt="image-20250523200928848"><figcaption aria-hidden="true">image-20250523200928848</figcaption></figure><h2 id="强化学习">1.3. 强化学习</h2><p>最大化智能体获得的期望累计奖励</p><h3 id="ppo函数">1.3.1. PPO函数</h3><p>策略： 大模型生成句子的过程<span class="math inline"><em>π</em></span></p><p>轨迹： 一系列的动作，大模型生成句子时候，的状态与动作 <span class="math display"><em>τ</em> = <em>s</em><sub>1</sub>, <em>a</em><sub>1</sub>, ..<em>s</em><sub><em>n</em></sub>, <em>a</em><sub><em>n</em></sub></span> 奖励：<span class="math inline"><em>R</em>(<em>τ</em>)</span>，一整条轨迹的奖励</p><p>基于策略的强化学习的目标：找到一种策略，是在这个策略的轨迹上的奖励分数最大 <span class="math display">$$\begin{align}\underset{\pi_\theta}{argmax} j({\pi_\theta}) &amp;= \underset{\pi_\theta}{argmax}E_{\tau~\pi}|R(\tau)|\\&amp; = \sum_\tau R(\tau)P(\tau|\pi_\theta)\end{align}$$</span> LOSS函数的梯度： <span class="math display">$$\begin{align*}\nabla J(\pi_\theta) &amp;= \sum_\tau R(\tau) \nabla P(\tau|\pi_\theta) \\&amp;= \sum_\tau R(\tau) P(\tau|\pi_\theta) \frac{\nabla P(\tau|\pi_\theta)}{P(\tau|\pi_\theta)} \\&amp;= \sum_\tau R(\tau) P(\tau|\pi_\theta) \nabla \log(P(\tau|\pi_\theta)) \\&amp;= \mathbb{E}_{\tau \sim \pi_\theta} [R(\tau) \nabla \log(P(\tau|\pi_\theta))]\end{align*}$$</span> 路径的概率，从<span class="math inline"><em>s</em><sub>0</sub></span>递推，推到T-1,计算出T的概率 <span class="math display">$$P(\tau|\pi_\theta) = \rho_0(s_0) \prod_{t=0}^{T-1} P(s_{t+1}|s_t, a_t)\pi_\theta(a_t|s_t)$$</span></p><p><span class="math display">$$\nabla \log\left(P(\tau|\pi_\theta)\right) = \nabla \left[ \log \rho_0(s_0) + \sum_{t=0}^{T-1} \log P(s_{t+1}|s_t, a_t) + \sum_{t=0}^{T-1} \log \pi_\theta(a_t|s_t) \right] $$</span></p><p>前两项和策略模型的参数 <span class="math inline"><em>θ</em></span> 无关，可舍去。于是 <span class="math display">$$\nabla \log\left(P(\tau|\pi_\theta)\right) = \sum_{t=0}^{T-1} \nabla \log \pi_\theta(a_t|s_t)$$</span> 带入Loss的梯度中，使用每时刻的奖励函数代替总路径<span class="math inline"><em>R</em>(<em>τ</em>)</span> <span class="math display">$$\nabla J(\pi_\theta) = \mathbb{E}_{\tau \sim \pi_\theta}\left[ \sum_{t=0}^{T-1} \Psi_t \nabla \log \pi_\theta(a_t|s_t) \right]$$</span> <span class="math inline"><em>ψ</em><sub><em>t</em></sub></span>的组成形式</p><ol type="1"><li><span class="math inline">$\sum_{t=0}^\infty r_t$</span> 轨迹的累积奖励<br></li><li><span class="math inline">$\sum_{t'=t}^\infty \gamma^{t'-t} r_{t'}$</span> 轨迹的折扣奖励<br></li><li><span class="math inline">$\sum_{t'=t}^\infty \gamma^{t'-t} r_{t'} - b(s_t)$</span> 引入基线<br></li><li><span class="math inline"><em>Q</em><sup><em>π</em></sup>(<em>s</em><sub><em>t</em></sub>, <em>a</em><sub><em>t</em></sub>)</span> 动作价值函数<br></li><li><span class="math inline"><em>A</em><sup><em>π</em></sup>(<em>s</em><sub><em>t</em></sub>, <em>a</em><sub><em>t</em></sub>)</span> 优势函数<br></li><li><span class="math inline"><em>r</em><sub><em>t</em></sub> + <em>V</em><sup><em>π</em></sup>(<em>s</em><sub><em>t</em> + 1</sub>) − <em>V</em><sup><em>π</em></sup>(<em>s</em><sub><em>t</em></sub>)</span> 时序差分残差</li></ol><p>累计折扣奖励 <span class="math display"><em>G</em><sub><em>t</em></sub> = <em>r</em><sub><em>t</em></sub> + <em>γ</em><em>r</em><sub><em>t</em> + 1</sub> + <em>γ</em><sup>2</sup><em>r</em><sub><em>t</em> + 2</sub> + … + <em>γ</em><sup><em>T</em> − <em>t</em> − 1</sup><em>r</em><sub><em>T</em> − 1</sub> = <em>r</em><sub><em>t</em></sub> + <em>γ</em><em>G</em><sub><em>t</em> + 1</sub></span></p><p>动作价值函数：在策略<em>π</em> 下，从状态 <em>s_t</em> 开始并执行动作 <em>a_t</em> 后，未来所有折扣奖励的<strong>期望</strong>。 <span class="math display">$$\begin{align}Q_\pi(s_t, a_t) &amp;= \mathbb{E}_\pi[G_t | s_t, a_t] \\&amp;= \mathbb{E}_\pi\left[\sum_{t=0}^{T-t} \gamma^{t'} r_{t'} | s_t, a_t\right] \\&amp;= \mathbb{E}_\pi[r_t | s_t, a_t] + \mathbb{E}_\pi[\gamma V_\pi(S_{t+1}) | s_t, a_t] \\&amp;= \sum_{s_{t+1} \in \mathcal{S}} P(s_{t+1}|s_t, a_t)R(s_t, a_t, s_{t+1}) + \gamma \sum_{s_{t+1} \in \mathcal{S}} P(s_{t+1}|s_t, a_t)V_\pi(s_{t+1})  \\&amp; 贝尔曼期望方程，将 G_t 拆分为当前奖励和未来价值\\&amp;= \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[r + \gamma V_\pi(s_{t+1})]\end{align}$$</span> 优势函数:在策略 π<em>π</em> 下，在状态 <em>s_t</em> 执行动作 <em>a_t</em> 相对于在该状态下平均（期望）价值的“优势”或“额外价值”。 <span class="math display">$$\begin{align}A_\pi(s_t, a_t) &amp;= Q_\pi(s_t, a_t) - V_\pi(s_t) \\&amp;= \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[r_t + \gamma V_\pi(s_{t+1})] - \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[V_\pi(s_t)] \\&amp;= \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[r_t + \gamma V_\pi(s_{t+1}) - V_\pi(s_t)] \\&amp;= \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[\text{TD\_error}]\end{align}$$</span></p><h3 id="价值损失">1.3.2. 价值损失</h3><p>这里提到的“价值训练过程”通常指的是在强化学习中，<strong>价值函数（Value Function）的估计和更新过程</strong>。这通常通过训练一个神经网络（价值网络/Critic网络）来预测状态的价值 V(s)<em>V</em>(<em>s</em>) 或状态-动作对的价值 Q(s,a)<em>Q</em>(<em>s</em>,<em>a</em>)。最常见的训练方法是使用<strong>均方误差（Mean Squared Error, MSE）损失</strong></p><p>价值函数 V<strong>ϕ<em>(</em>s</strong>t<em>) 的目标是准确估计<strong>未来累积折扣奖励</strong>。因此，训练它的方法就是让它的预测值 </em>V<strong>ϕ<em>(</em>s</strong>t*) 尽可能接近“真实”的累积折扣奖励 R_t。</p><p>价值损失采用的是MSE损失，最小化如下目标函数：</p><p><span class="math display">ℒ<sub>critic</sub>(<em>ϕ</em>) = 𝔼<sub><em>t</em></sub>[(<em>V</em><sub><em>ϕ</em></sub>(<em>s</em><sub><em>t</em></sub>)−<em>R</em><sub><em>t</em></sub>)<sup>2</sup>]</span></p><p>其中<span class="math inline"><em>V</em><sub><em>ϕ</em></sub>(<em>s</em><sub><em>t</em></sub>)</span>为价值模型预测出来的回报，<span class="math inline"><em>R</em><sub><em>t</em></sub></span>为实际得到的回报。</p><p><span class="math inline"><em>R</em><sub><em>t</em></sub></span> 是理论标签值，需要计算出来</p><p>如果使用时序差分目标，则</p><p><span class="math display"><em>R</em><sub><em>t</em></sub> = <em>r</em><sub><em>t</em></sub> + <em>γ</em><em>V</em><sub><em>ϕ</em></sub>(<em>s</em><sub><em>t</em> + 1</sub>)</span></p><p>如果使用GAE目标，则 <span class="math display"><em>R</em><sub><em>t</em></sub> = <em>Â</em><sub><em>t</em></sub><sup>GAE</sup> + <em>V</em>′<sub><em>ϕ</em></sub>(<em>s</em><sub><em>t</em></sub>)</span></p><h3 id="rlhf">1.3.3. RLHF</h3><h4 id="构建奖励模型">1.3.3.1. 构建奖励模型</h4><ol type="1"><li><p>收集偏好数据，对模型回答的多个数据，评估排序，不是打分</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121011621.png" alt="image-20250530121011621"><figcaption aria-hidden="true">image-20250530121011621</figcaption></figure></li><li><p>损失函数，max(做好回答- 最差回答)</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121104796.png" alt="image-20250530121104796"><figcaption aria-hidden="true">image-20250530121104796</figcaption></figure></li><li><p>只获取最后一个token的评估</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121333003.png" alt="image-20250530121333003"><figcaption aria-hidden="true">image-20250530121333003</figcaption></figure></li><li><p>使用KL散度，避免与模型的差距较大</p></li><li><p>使用PPO函数，计算历史和未来的奖励</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121812769.png" alt="image-20250530121812769"><figcaption aria-hidden="true">image-20250530121812769</figcaption></figure></li></ol><h4 id="总体流程">1.3.3.2. 总体流程</h4><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121856320.png" alt="image-20250530121856320"><figcaption aria-hidden="true">image-20250530121856320</figcaption></figure><p><strong>RLHF实开源链接</strong>：</p><ol type="1"><li><code>https://github.com/huggingface/trl</code></li><li><code>https://github.com/OpenRLHF/OpenRLHF</code></li><li><code>https://github.com/hiyouga/LLaMA-Factory</code></li><li><code>https://github.com/WangRongsheng/awesome-LLM-resourses</code></li></ol><h3 id="rlaif">1.3.4. RLAIF</h3><p>模型选择结果，替换人类标记，同时需要使用双重判断</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530170449430.png" alt="image-20250530170449430"><figcaption aria-hidden="true">image-20250530170449430</figcaption></figure><ol type="1"><li>D-RLAIF，模型直接打分，不再训练</li><li>常规RLAIF，先训练奖励模型</li></ol><h3 id="dpo算法direct-perference-option">1.3.5. DPO算法(direct perference option)</h3><p>由偏好学习的数据，直接用于模型的训练</p><p>目标：</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530171548497.png" alt="image-20250530171548497"><figcaption aria-hidden="true">image-20250530171548497</figcaption></figure><p>损失函数：</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530171648715.png" alt="image-20250530171648715"><figcaption aria-hidden="true">image-20250530171648715</figcaption></figure><h3 id="splnself-play">1.3.6. SPLN（self play)</h3><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173051126.png" alt="image-20250530173051126"><figcaption aria-hidden="true">image-20250530173051126</figcaption></figure><h4 id="main-play">1.3.6.1. main play</h4><p>区分某个回答是人类的回答</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173622192.png" alt="最大化人类回答与机器回答的区别"><figcaption aria-hidden="true">最大化人类回答与机器回答的区别</figcaption></figure><h4 id="opponent-play">1.3.6.2. opponent play</h4><p>不需要区分人类回答和LLM回答</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173750170.png" alt="image-20250530173750170"><figcaption aria-hidden="true">image-20250530173750170</figcaption></figure><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173801712.png" alt="image-20250530173801712"><figcaption aria-hidden="true">image-20250530173801712</figcaption></figure><p>得到优化目标</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173906352.png" alt="image-20250530173906352"><figcaption aria-hidden="true">image-20250530173906352</figcaption></figure><p>最大化生成与真实标注的信息与自己生成信息的差距</p><h3 id="self-rewarding">1.3.7. self-rewarding</h3><p>模型给自己提供奖励，在优化回复的功能是，优化模型指令遵循与打分的能力</p><ol type="1"><li>初始模型，具有基础能力</li><li>种子数据集，少量数据集，<ol type="1"><li>指令微调，只有回答</li><li>评估微调，回答排序</li></ol></li></ol><p>模型使用种子数据集，生成新的prompt，模型自己打分，取最高分与最低分，加入数据集，用于DPO训练。</p><p>不断迭代</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530175457392.png" alt="image-20250530175457392"><figcaption aria-hidden="true">image-20250530175457392</figcaption></figure><h2 id="微调">1.4. 微调</h2><ol type="1"><li><p>增加参数微调</p><ol type="1"><li>软提示微调： 在embeding之前怎么增加soft prompt，训练优化增加的soft prompt ，模型的参数固定<ol type="1"><li>且不同的任务可以使用不同的soft prompt</li></ol></li><li>适配器微调： 在模型前后增加一个层</li></ol></li><li><p>选择性微调</p><ol type="1"><li>学习优化哪些参数，优化任务结果，使用正则化，惩罚修改较多的参数<img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530182117984.png" alt="image-20250530182117984"></li><li>指定修改部分参数</li></ol></li><li><p>重参数微调，调整子空间参数</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530182340311.png" alt="image-20250530182340311"><figcaption aria-hidden="true">image-20250530182340311</figcaption></figure><ol type="1"><li><p>Low-Rank Adaption(LoRA)，优化两个低秩矩阵，与原矩阵组合</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530182623192.png" alt="image-20250530182623192"><figcaption aria-hidden="true">image-20250530182623192</figcaption></figure></li><li><p>学习模型的缩放因子</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530183050936.png" alt="image-20250530183050936"><figcaption aria-hidden="true">image-20250530183050936</figcaption></figure></li></ol></li></ol><h2 id="知识蒸馏">1.5. 知识蒸馏</h2><p>教师模型将知识提取出来，学生模型学习其中内容</p><h3 id="基于特征的知识">1.5.1. 基于特征的知识</h3><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250523201806237.png" alt="image-20250523201806237"><figcaption aria-hidden="true">image-20250523201806237</figcaption></figure><h4 id="多个教师教学">1.5.1.1. 多个教师教学</h4><h3 id="基于关系的知识">1.5.2. 基于关系的知识</h3><h2 id="模型剪枝">1.6. 模型剪枝</h2><p>删除权重小于一定阈值的连接或神经元节点，获得更加稀疏的矩阵</p><h3 id="结构化剪枝">1.6.1. 结构化剪枝</h3><p>参数从起点到重点，图中有相连，则保留</p><h1 id="简短">2. 简短</h1><h2 id="预训练-1">2.1. 预训练</h2><h3 id="词表化">2.1.1. 词表化</h3><h4 id="bbpebyte-level-bpe">2.1.1.1. BBPE(byte-level BPE)</h4><p>单词量过大时，每一个单词一个token使用，词表空间较大</p><p>单词使用字节标识，采用unicode 编码作为最小颗粒度，将单词切割为字节token</p><p>例如，对于不存在的字节“待”，使用3个字节标识(中文在unicode编码中使用三个字节表示)</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-4cd433a354233d03bc2aad15745a7285_1440w.jpg" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-66a59222fb083b240eac861eb026c73c_r.jpg" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><h3 id="模型预训练">2.1.2. 模型预训练</h3><p>采用无监督学习，学习输入文本的特征，学习语言语法</p><p>输入一堆文本，让模型做 Next Token Prediction 的任务，学习基础语法，初步学习。</p><p>类似与transfomer论文中的对语言的输入学习输出。</p><h2 id="指令微调-1">2.2. 指令微调</h2><p>GPT-3只能完成续写任务,InstructGPT可以根据指令回答问题</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-a7a8e7aed0750d189f792b19e8272dfe_r.jpg" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><h3 id="监督学习">2.2.1. 监督学习</h3><p>给出指令问题，并给出答案，监督模型学习</p><ol type="1"><li><p>指令: 在面试中如何回答这个问题？</p><ol type="1"><li>输入:当你在车里独处时，你会想些什么？</li><li>输出:如果是在晚上，我通常会考虑我今天所取得的进步，如果是在早上，我会思考如何做到最好。我也会尝试练习感恩和活在当下的状态，以避免分心驾驶。</li></ol></li><li><p>指令: 按人口对这些国家进行排名。</p><ol type="1"><li>输入:巴西，中国，美国，日本，加拿大，澳大利亚</li><li>输出:中国，美国，巴西，日本，加拿大，澳大利亚</li></ol></li></ol><p>模型学习指令回答方式，准确的响应问题</p><h2 id="奖励模型">2.3. 奖励模型</h2><p>之前，模型只是简单学习了语言学习的内容，但是并不知到语言中是否正确，或者错误，这将导致预训练模型中原先「错误」或「有害」的知识没能在 SFT 数据中被纠正。</p><h3 id="利用偏序对训练奖励模型">2.3.1. 利用偏序对训练奖励模型</h3><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-29f8de16d921303fc6ee5c338fc68800_1440w.jpg" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p>偏序对是指：不直接为每一个样本直接打分，而是标注这些样本的好坏顺序，标准A比B好多少，而不是具体的分数。</p><blockquote><p>直接打分：A句子（5分），B句子（3分） 偏序对标注：A &gt; B</p></blockquote><p>模型通过尝试最大化「好句子得分和坏句子得分之间的分差」，从而学会自动给每一个句子判分。</p><h2 id="强化学习reinforcement-learningppo">2.4. 强化学习（Reinforcement Learning，PPO）</h2><p>进行Reward model之后，需要使用RM进化模型</p><ol type="1"><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编码器 - 解码器</title>
      <link href="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/"/>
      <url>/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="编码器---解码器">1. 编码器 - 解码器</h1><h2 id="基本框架">1.1. 基本框架</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">class Encoder(nn.Module):    def __init__(self, **kwargs):        super(Encoder, self).__init__(**kwargs)    def forward(self, X, *args):        raise NotImplementedError  # 占位符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">class Decoder(nn.Module):    def __init__(self, **kwargs):        super(Decoder, self).__init__(**kwargs)        def init_state(self, enc_outputs, *args):        raise NotImplementedError    def forward(self, X, *args):        raise NotImplementedError  # 占位符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">class EncoderDecoder(nn.Module):    &quot;&quot;&quot;编码器-解码器架构的基类&quot;&quot;&quot;    def __init__(self, encoder, decoder, **kwargs):        super(EncoderDecoder, self).__init__(**kwargs)        self.encoder &#x3D; encoder        self.decoder &#x3D; decoder    def forward(self, enc_X, dec_X, *args):        enc_outputs &#x3D; self.encoder(enc_X, *args)        # 编码器的输出最为解码器输入的一部分        dec_state &#x3D; self.decoder.init_state(enc_outputs, *args)        return self.decoder(dec_X, dec_state)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="seq2seq">1.2. seq2seq</h2><figure><img src="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/image-20250424214252355.png" alt="image-20250424214252355"><figcaption aria-hidden="true">image-20250424214252355</figcaption></figure><h3 id="编码器">1.2.1. 编码器</h3><ol type="1"><li>将序列(时间步)的数字转换为张量</li><li>通过rnn输出上下文变量C，隐状态</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class Seq2SeqEncoder(nn.Encoder):def __init__(self, vocab_size, embed_size, num_hiddens, num_layers, dropout &#x3D; 0, **kwargs):        super(Seq2SeqEncoder, self).__init__(**kwargs)       &#39;&#39;&#39;编码层       将数字编码为为向量       输入(batch_size, feature) 输出(batch_size, feature, embed_size)       &#39;&#39;&#39;        self.embeding &#x3D; nn.Embedding(vocab_size, embed_size)        self.rnn &#x3D; nn.gru(embed_size, nn_hiddens, num_layers, dropout &#x3D; dropout)    def forward(self, X, *args):        # 输出&#39;X&#39;的形状：(batch_size,num_steps,embed_size)        X &#x3D; self.embedding(X)        # 在循环神经网络模型中，第一个轴对应于时间步        X &#x3D; X.permute(1, 0, 2)        # 如果未提及状态，则默认为0        output, state &#x3D; self.rnn(X)        # output的形状:(num_steps,batch_size,num_hiddens)        # state的形状:(num_layers,batch_size,num_hiddens)        return output, state<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解码器">1.2.2. 解码器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">class Seq2SeqDecoder(nn.Decoder):    def __init__(self, vocab_size, embed_size, num_hiddens, num_layers,                 dropout&#x3D;0, **kwargs):        super(Seq2SeqDecoder, self).__init__(**kwargs)        self.embedding &#x3D; nn.Embedding(vocab_size, embed_size)        self.rnn &#x3D; nn.GRU(embed_size + num_hiddens, num_hiddens, num_layers,                          dropout&#x3D;dropout)        self.dense &#x3D; nn.Linear(num_hiddens, vocab_size)   def init_state(self, enc_outputs, *args):    # 用隐状态来初始化上下文变量    return enc_outputs[1]        def forward(self, X, state):        X &#x3D; self.embedding(X).permute(1, 0,2 )                # state[-1] 的维度为(layer_num , batch_size, num_hiddens)        context &#x3D; state[-1].repeat(X.shape[0], 1, 1)        # 在feature上增加了元素C        X_and_c &#x3D; torch.cat(X, context, 2)        output, state &#x3D; self.rnn(X_and_context, state)        output &#x3D; self.dense(output).permute(1, 0, 2)        return output , state        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练过程">1.2.3. 训练过程</h3><p>不同点：</p><ol type="1"><li>定义使用MarkedSoftmaxCELoss 损失函数</li><li>塑造解码器输入，原序列前增加bos, 删除eos</li></ol><p>相同点：</p><ol type="1"><li>apply(init(m)), optimizer , loss, net.train()</li><li>分epoch, 分批量，optimizer.zero_gred(), net(x) , l = loss(y_hat, Y), l.backward(), grad_clipping(net, theta), optimizer.step()</li></ol><h3 id="预测过程">1.2.4. 预测过程</h3><ol type="1"><li><p>net.eval()</p></li><li><p>准备序列数据</p></li><li><p>对src编码，得到dec_state=context</p></li><li><p>传入一个<bos>数据</bos></p></li><li><p>dec_X 的维度为(1, 1)</p><p>​ Y 的维度为(1, 1, embed_size)</p><p>​ 每一次更新dec_X, 更新了decodor的隐藏状态</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">def predict_seq2seq(net, src_sentence, src_vocab, tgt_vocab, num_steps,                   device, save_attention_weights&#x3D;False):   &quot;&quot;&quot;序列到序列模型的预测&quot;&quot;&quot;   # 在预测时将net设置为评估模式   net.eval()   &#39;&#39;&#39;   准备序列数据   &#39;&#39;&#39;   src_tokens &#x3D; src_vocab[src_sentence.lower().split(&#39; &#39;)] + [       src_vocab[&#39;&lt;eos&gt;&#39;]]   enc_valid_len &#x3D; torch.tensor([len(src_tokens)], device&#x3D;device)   src_tokens &#x3D; d2l.truncate_pad(src_tokens, num_steps, src_vocab[&#39;&lt;pad&gt;&#39;])   # 添加批量轴   enc_X &#x3D; torch.unsqueeze(       torch.tensor(src_tokens, dtype&#x3D;torch.long, device&#x3D;device), dim&#x3D;0)   &#39;&#39;&#39;   对src编码，得到dec_state&#x3D;context   &#39;&#39;&#39;   enc_outputs &#x3D; net.encoder(enc_X, enc_valid_len)   dec_state &#x3D; net.decoder.init_state(enc_outputs, enc_valid_len)   &#39;&#39;&#39;    传入一个&lt;bos&gt;数据   &#39;&#39;&#39;   dec_X &#x3D; torch.unsqueeze(torch.tensor(       [tgt_vocab[&#39;&lt;bos&gt;&#39;]], dtype&#x3D;torch.long, device&#x3D;device), dim&#x3D;0)   output_seq, attention_weight_seq &#x3D; [], []   for _ in range(num_steps):       &#39;&#39;&#39;        dec_X 的维度为(1, 1), 每一次传入上一个时间步中预测出的值       Y 的维度为(1, 1, embed_size)       每一次更新dec_X, 更新了decodor的隐藏状态       &#39;&#39;&#39;       Y, dec_state &#x3D; net.decoder(dec_X, dec_state)       # 我们使用具有预测最高可能性的词元，作为解码器在下一时间步的输入       dec_X &#x3D; Y.argmax(dim&#x3D;2)       pred &#x3D; dec_X.squeeze(dim&#x3D;0).type(torch.int32).item()       # 保存注意力权重（稍后讨论）       if save_attention_weights:           attention_weight_seq.append(net.decoder.attention_weights)       # 一旦序列结束词元被预测，输出序列的生成就完成了       if pred &#x3D;&#x3D; tgt_vocab[&#39;&lt;eos&gt;&#39;]:           break       output_seq.append(pred)   return &#39; &#39;.join(tgt_vocab.to_tokens(output_seq)), attention_weight_seq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这里可以优化使用束搜索</strong></p><h3 id="损失函数">1.2.5. 损失函数</h3><ol type="1"><li><p>计算pred与label的Loss</p></li><li><p>计算序列的掩码</p></li><li><p>将loss与序列掩码相乘</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">class MaskedSoftmaxCELoss(nn.CrossEntropyLoss):    &quot;&quot;&quot;带遮蔽的softmax交叉熵损失函数&quot;&quot;&quot;    # pred的形状：(batch_size,num_steps,vocab_size)    # label的形状：(batch_size,num_steps)    # valid_len的形状：(batch_size,)    def forward(self, pred, label, valid_len):        weights &#x3D; torch.ones_like(label)        weights &#x3D; sequence_mask(weights, valid_len)  # 掩码        self.reduction&#x3D;&#39;none&#39;        unweighted_loss &#x3D; super(MaskedSoftmaxCELoss, self).forward(            pred.permute(0, 2, 1), label)        weighted_loss &#x3D; (unweighted_loss * weights).mean(dim&#x3D;1)        return weighted_loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="掩码">1.2.5.1. 掩码</h4><ol type="1"><li>生成序列掩码，可以使用arrange&lt; valid_len获取</li><li>将所有掩码位置 置为0</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">def sequence_mask(X, valid_len, value&#x3D;0):    &quot;&quot;&quot;在序列中屏蔽不相关的项&quot;&quot;&quot;    maxlen &#x3D; X.size(1)    # 生成掩码    print(torch.arange((maxlen), dtype&#x3D;torch.float32,                        device&#x3D;X.device)[None, :] )    print(valid_len[:,None])    &#39;&#39;&#39;    (none,:)是在dim &#x3D; 0上创建一个&#x3D;1 的维度    广播机制后mask &#x3D; (batch_size, time_stem)    &#39;&#39;&#39;    mask &#x3D; torch.arange((maxlen), dtype&#x3D;torch.float32,                        device&#x3D;X.device)[None, :] &lt; valid_len[:, None]    print(mask)    X[~mask] &#x3D; value    return X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="预测序列评估">1.2.5.2. 预测序列评估</h4><p>我们将BLEU定义为： <span class="math display">$$\exp\left(\min\left(0, 1 - \frac{\mathrm{len}_{\text{label}}}{\mathrm{len}_{\text{pred}}}\right)\right) \prod_{n=1}^k p_n^{1/2^n},$$</span></p><h1 id="注意力机制">2. 注意力机制</h1><p>查询值query, 键值对（key, value)，每一个key 对应一个query</p><p>注意力权重计算的是query对key的关注程度，attention(query_num , key_num)，每一行是当前查询对所有键的注意力，然后与query计算，得到每一个查询对query的注意力结果 <span class="math display">$$attention_weight = \alpha(query, key)\\f(x) = attention_weight * query$$</span></p><h2 id="常见机制">2.1. 常见机制</h2><h3 id="掩蔽注意力机制操作">2.1.1. 掩蔽注意力机制操作</h3><p>对键值中不需要的部分掩蔽为0，具体操作是</p><ol type="1"><li>将atterntion_weight(batch, query, key) 中的key维度数据通过掩码，转换为较小数</li><li>使用softMax，较小数转换为0，key对应此处的权重就是0了</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">def masked_softmax(X, valid_len):    &#39;&#39;&#39;    X：attention_weigth &#x3D; (batch_size, query , key)    valid_len 不同批次掩蔽的长度，&#x3D;（batch_size) 或 (batch_size, key)    &#39;&#39;&#39;    if valid_lens is None:        return nn.functional.softmax(X, dim&#x3D;-1)    else:        shape &#x3D; X.shape        if valid_lens.dim() &#x3D;&#x3D; 1:            valid_lens &#x3D; torch.repeat_interleave(valid_len, shape[1])        else:            valid_lens &#x3D; valid_lens.reshape(-1)        &#39;&#39;&#39;        sequence_mash: 将param1中的第1维度按照 valid_lens的长度掩蔽，大于的掩蔽为values        &#39;&#39;&#39;        X &#x3D; sequence_mask(X.reshape(-1, shape[-1]), valid_lens,values&#x3D;&#x3D; -1e6)        return nn.functional.softmax(X.shape[shape], dim &#x3D;-1) # 对掩蔽维度归一化      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加性注意力">2.1.2. 加性注意力</h3><p>键，查询有时是矢量<strong>（不同长度）</strong>转换为相同长度的矢量 <span class="math display"><em>a</em>(<strong>q</strong>, <strong>k</strong>) = <strong>w</strong><sub><em>v</em></sub><sup>⊤</sup>tanh(<strong>W</strong><sub><em>q</em></sub><strong>q</strong> + <strong>W</strong><sub><em>k</em></sub><strong>k</strong>) ∈ ℝ</span></p><ol type="1"><li>线性层操作，query=&gt;(batch ,query, hidden_num),key=&gt;(batch ,key hidden_num)</li><li>得到注意力矩阵，query=&gt;(batch ,query,1 hidden_num)，key=&gt;(batch ,1，key hidden_num)， query+key =&gt;query=&gt;(batch ,query,key, hidden_num)</li><li><span class="math inline"><em>W</em><sub><em>t</em></sub></span> 是线性层(hidden_num, 1)， 移除最后一个维度，得到attention_weight =(batch ,query,key,)</li><li>使用掩蔽注意力，对key上无用的权重屏蔽</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class AddictiveAttention(nn.Module):    def __init__(self, key_size, query_size, num_hiddens, dropout, **kwargs):        super(AddictiveAttention, self).__init__(**kwargs)        self.W_k&#x3D; nn.Linear(key_size, num_hiddens)        self.W_q &#x3D; nn.Linear(query_size, num_hiddens)        self.W_v &#x3D; nn.Linear(num_hiddens, 1)        self.dropout&#x3D; nn.Dropout(dropout)            def forward(selk, query, key ,values, valid_lens):        query, key &#x3D; W_q(query), W_k(key)                attention &#x3D; query.unsquence(2) + key.unsquence(1)        attention &#x3D; nn.tanh(attention)        attention &#x3D; W_v(attention)                self.atterntion_weight &#x3D; masked_softmax(attention, valid_lens)        return torch.bmm(self.attention_weight, values)        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="点积注意力">2.1.3. 点积注意力</h3><p>计算效率高，但是要求query, key具有相同的张量长度，权重函数： <span class="math display">$$a(\mathbf q, \mathbf k) = \mathbf{q}^\top \mathbf{k}  /\sqrt{d}$$</span></p><p>方差缩放，防止梯度消失</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">class DotProductAttention(nn.Module):    def __init__(self, dropout, **kwargs):        super(DotProductAttention, self).__init__(**kwargs)        self.dropout &#x3D; nn.Dropout(dropout)           def forward(self, query, key,values, valid_lens):    # attention(batch_size, query_size, key_size)        attention &#x3D; torch.bmm(query, key.transpose(1,2))&#x2F; math.sqrt(d)        self.attention_weight &#x3D; masked_softmax(attention, valid_len)        # 输出(batch_size, query_size, feature_size)        return torch.bmm(self.dropout(self.attention_weight), values)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多头注意力">2.1.4. 多头注意力</h3><p>使用多个结构一样，参数不一样的注意力去学习不同的知识</p><figure><img src="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/image-20250516113430112.png" alt="image-20250516113430112"><figcaption aria-hidden="true">image-20250516113430112</figcaption></figure><p>将键值对分为多个子空间，每个注意力机制学习一个子空间的特征，得到H组的注意力权重，然后将注意力权重通过线性层汇聚</p><figure><img src="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/image-20250425155705305.png" alt="image-20250425155705305"><figcaption aria-hidden="true">image-20250425155705305</figcaption></figure><p>常规思路：</p><ol type="1"><li>将query, key, values映射到子空间，使用不同的Linear映射</li><li>将不同头的注意力结果合并在一起，在feature维度上合并</li><li>再通过一个Linear线性层，连接所有head</li></ol><p>并行思路</p><ol type="1"><li>将query,key, values映射到完整空间，然后将完整空间查分成子空间，head与batch组成一个伪batch</li><li>再将子空间的数据通过点积注意力</li><li>将head从batch中分离出来，与feature合并，效果与非并行情况相同</li><li>最后通过线性层</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class MultiHeadAttention(nn.Module):    def __init__(self, key_size, query_size, value_size, num_hiddens, num_head, dropout, bias &#x3D; false, **kwargs):       self.num_head &#x3D; head        self.attention &#x3D; d2l.DotProductAttention(dropout)        self.W_k &#x3D; nn.Linear(key_size, num_hiddens)        self.W_q &#x3D; nn.Linear(query_size, num_hiddens)        self.W_v &#x3D; nn.Linear(value_size, num_hiddens)        self.W_o &#x3D; nn.Linear(num_hiddens, num_hiddens) # 全连接层            def forward(self, query ,key ,values, valid_lens):               # 转换为(batch_size* head, key&#x2F;query , num_hidden&#x2F;head)        query &#x3D; transpose(self.W_q(query),  self.head_num)        keys &#x3D; transpose_qkv(self.W_k(keys), self.num_heads)        values &#x3D; transpose_qkv(self.W_v(values), self.num_heads)                # 将掩码扩展为batch*head        if valid_len is not None:            valid_lens &#x3D; torch.repeat_interleave(            valid_lens, repeats &#x3D; self.num_heads , dim &#x3D;0)                    output &#x3D; self.attention(query, key ,value, valid_len)                output_concat&#x3D;transpose_output(output, self.num_heads)        return self.W_o(output_concat)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="附录">3. 附录</h1><h2 id="bleu">3.1. BLEU</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">def bleu(pred_seq, label_seq, k):  #@save    &quot;&quot;&quot;计算BLEU&quot;&quot;&quot;    pred_tokens, label_tokens &#x3D; pred_seq.split(&#39; &#39;), label_seq.split(&#39; &#39;)    len_pred, len_label &#x3D; len(pred_tokens), len(label_tokens)    score &#x3D; math.exp(min(0, 1 - len_label &#x2F; len_pred))    for n in range(1, k + 1):        num_matches, label_subs &#x3D; 0, collections.defaultdict(int)        for i in range(len_label - n + 1):            label_subs[&#39; &#39;.join(label_tokens[i: i + n])] +&#x3D; 1        for i in range(len_pred - n + 1):            if label_subs[&#39; &#39;.join(pred_tokens[i: i + n])] &gt; 0:                num_matches +&#x3D; 1                label_subs[&#39; &#39;.join(pred_tokens[i: i + n])] -&#x3D; 1        score *&#x3D; math.pow(num_matches &#x2F; (len_pred - n + 1), math.pow(0.5, n))    return score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研要求</title>
      <link href="/2025/05/24/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E8%A6%81%E6%B1%82/"/>
      <url>/2025/05/24/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E8%A6%81%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="eb8f7c557dc81977160cacb5d86923fe15d14fba1ebb15ba22b95285c9e2bf96"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 保研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 保研 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/05/24/java/web%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="web课程学习内容">1. web课程学习内容</h1><ol type="1"><li>mvc格式<ol type="1"><li>javabean周期</li><li>javabean 与mvc组成</li></ol></li><li>jsp中使用数据库<ol type="1"><li>mysql建立</li><li>JDBC连接，解决乱码</li><li>查询</li><li>用结果集操作数据库表</li><li>预处理语句</li></ol></li><li>jsp的文件操作<ol type="1"><li>FILE类</li><li>文件操作流</li><li>文件上床下载</li></ol></li><li>xml<ol type="1"><li>xml基本结构</li><li>dom 解析器</li><li>sax解析器</li><li>xml与css显示</li></ol></li><li>化妆品销售</li></ol><h1 id="web">2. web</h1><figure><img src="C:/Users/34999/AppData/Roaming/Typora/typora-user-images/image-20250522212412585.png" alt="流程"><figcaption aria-hidden="true">流程</figcaption></figure><figure><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250522212605681.png" alt="学习流程"><figcaption aria-hidden="true">学习流程</figcaption></figure><h2 id="html">2.1. html</h2><h3 id="标题">2.1.1. 标题</h3><p>h1</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>https://www.cctv.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_self<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 央视网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>span : 没有语义的标签</p><p><span style="color: gray;"></span></p><h3 id="css引入">2.1.2. css引入</h3><ol type="1"><li>行内样式，写在标签的style属性中</li><li>内部样式：写在<style>标签中</li><li>外部，<code>&lt;link rel= "stylesheet" href= "style.css"&gt;</code></li></ol><p><span style="color: gray;"> today </span></p><style>     span{        color: red;    }</style><h4 id="颜色">2.1.2.1. 颜色</h4><table><thead><tr class="header"><th>种类</th><th>使用方法</th></tr></thead><tbody><tr class="odd"><td>关键字</td><td>red</td></tr><tr class="even"><td>rgb</td><td>rag(red ,green ,blue)</td></tr><tr class="odd"><td>rgba</td><td>rgba(red, green, blue ,透明度)</td></tr><tr class="even"><td>十六进制</td><td>#</td></tr></tbody></table><h4 id="css选择器">2.1.2.2. css选择器</h4><table><colgroup><col style="width: 11%"><col style="width: 28%"><col style="width: 22%"><col style="width: 38%"></colgroup><thead><tr class="header"><th style="text-align: left;">选择器类型</th><th style="text-align: left;">写法（语法）</th><th style="text-align: left;">示例</th><th style="text-align: left;">示例说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><strong>元素选择器</strong></td><td style="text-align: left;"><code>元素名称 &#123; ... &#125;</code></td><td style="text-align: left;"><code>h1 &#123; ... &#125;</code></td><td style="text-align: left;">选择页面上所有的 <code>&lt;h1&gt;</code> 标签</td></tr><tr class="even"><td style="text-align: left;"><strong>类选择器</strong></td><td style="text-align: left;"><code>.class属性值 &#123; ... &#125;</code></td><td style="text-align: left;"><code>.cls &#123; ... &#125;</code></td><td style="text-align: left;">选择页面上所有 <code>class</code> 属性为 <code>cls</code> 的标签</td></tr><tr class="odd"><td style="text-align: left;"><strong>ID 选择器</strong></td><td style="text-align: left;"><code>#id属性值 &#123; ... &#125;</code></td><td style="text-align: left;"><code>#hid &#123; ... &#125;</code></td><td style="text-align: left;">选择页面上 <code>id</code> 属性为 <code>hid</code> 的标签</td></tr><tr class="even"><td style="text-align: left;"><strong>分组选择器</strong></td><td style="text-align: left;"><code>选择器1, 选择器2 &#123; ... &#125;</code></td><td style="text-align: left;"><code>h1, h2 &#123; ... &#125;</code></td><td style="text-align: left;">选择页面上所有的 <code>&lt;h1&gt;</code> 和 <code>&lt;h2&gt;</code> 标签</td></tr><tr class="odd"><td style="text-align: left;"><strong>属性选择器</strong></td><td style="text-align: left;"><code>元素名称[属性] &#123; ... &#125;</code></td><td style="text-align: left;"><code>input[type] &#123; ... &#125;</code></td><td style="text-align: left;">选择页面上所有有 <code>type</code> 属性的 <code>&lt;input&gt;</code> 标签</td></tr><tr class="even"><td style="text-align: left;"></td><td style="text-align: left;"><code>元素名称[属性名="值"] &#123; ... &#125;</code></td><td style="text-align: left;"><code>input[type="text"] &#123; ... &#125;</code></td><td style="text-align: left;">选择页面上 <code>type</code> 属性为 <code>text</code> 的 <code>&lt;input&gt;</code> 标签</td></tr><tr class="odd"><td style="text-align: left;"><strong>后代选择器</strong></td><td style="text-align: left;"><code>元素1 元素2 &#123; ... &#125;</code> （注意有空格）</td><td style="text-align: left;"><code>form input &#123; ... &#125;</code></td><td style="text-align: left;">选择 <code>&lt;form&gt;</code> 标签内的所有 <code>&lt;input&gt;</code> 标签</td></tr></tbody></table><h3 id="video">2.1.3. video</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">width</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>800px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>width = 80% 长度占父类框架的占比<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>音频</p><pre class="line-numbers language-none"><code class="language-none">&lt;audio src&#x3D;“ ” controls&gt;&lt;&#x2F;audio&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="段落">2.1.3.1. 段落</h4><p>hello</p><p></p><h4 id="加粗">2.1.3.2. 加粗</h4><p><b> hello </b></p><p><strong> hello </strong></p><p><u> / <ins> 下划线</ins></u></p><p><i> / <em> 倾斜</em></i></p><p><s> / <del> 删除线</del></s></p><h4 id="特殊符号">2.1.3.3. 特殊符号</h4><table><thead><tr class="header"><th> </th><th>空格</th></tr></thead><tbody><tr class="odd"><td>&lt;</td><td>&lt;</td></tr><tr class="even"><td>&gt;</td><td>&gt;</td></tr></tbody></table><h3 id="盒子模型">2.1.4. 盒子模型</h3><figure><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250524155210755.png" alt="image-20250524155210755"><figcaption aria-hidden="true">image-20250524155210755</figcaption></figure><table><thead><tr class="header"><th>div</th><th>span</th></tr></thead><tbody><tr class="odd"><td>一行显示一个</td><td>一行显示多个</td></tr><tr class="even"><td>宽度默认为父元素的宽度</td><td></td></tr><tr class="odd"><td>可以设置height, weigth</td><td></td></tr></tbody></table><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span><span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>  <span class="token comment">/* 定义的内容展示区域的宽度 */</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 20px 20px 20px 20px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 20px 20px 20px 20px <span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 20px solid #100000<span class="token punctuation">;</span> <span class="token comment">/*宽度 边框 颜色*/</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>    <span class="token comment">/* content-box 内容盒子； bordor-box 边框盒子        /* 当前的盒子居中显示 */</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 10px auto<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对齐方式">2.1.4.1. 对齐方式</h4><p>弹性布局flex</p><table><colgroup><col style="width: 18%"><col style="width: 75%"><col style="width: 5%"></colgroup><thead><tr class="header"><th>属性</th><th>取值</th><th>含义</th></tr></thead><tbody><tr class="odd"><td>display</td><td>flex</td><td></td></tr><tr class="even"><td>flex-direction</td><td>row x<br><br>column y轴</td><td></td></tr><tr class="odd"><td>justify-content</td><td>1. flex-start 从头开始<br>flex-end<br>center<br>space-around 均分<br> space-between 两边贴边</td><td></td></tr></tbody></table><h3 id="表格">2.1.5. 表格</h3><table><thead><tr class="header"><th>&lt;table</th><th>整个表格</th><th>border: 边框宽度<br>width: 表格的宽度<br><br>cellspacing: 单元之间的空间</th></tr></thead><tbody><tr class="odd"><td>&lt;tr</td><td>表格的行</td><td></td></tr><tr class="even"><td>&lt;td/th</td><td>表格的列</td><td>&lt;th是表头，&lt;td 是普通表格</td></tr></tbody></table><h3 id="表单">2.1.6. 表单</h3><p>提升与表格的交互，并在input前增加标识</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>    用户名:    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol type="1"><li>input<ol type="1"><li>text</li><li>password</li><li>radio 单选按钮，相当与select option</li><li>checkbox</li></ol></li><li>select</li><li>textarea, 更大的文本框输入</li></ol><h2 id="javascript">2.2. javascript</h2><p>js代码最后放置在body的末尾</p><p>结尾的;可有可无</p><ol type="1"><li><p>内部脚本</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>外部脚本</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>/.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>在<body><p>内外，都可以被执行</p><h3 id="定义变量">2.2.1. 定义变量</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//定义变量</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//声明常量</span><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token string">'abc'</span><span class="token punctuation">;</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回a的类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 弹窗</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//控制台</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Body标签中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="拼接字符串">2.2.1.1. 拼接字符串</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">let</span> b<span class="token operator">=</span> <span class="token string">'tom'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello my name is'</span><span class="token operator">+</span>b<span class="token operator">+</span> <span class="token string">'year is'</span><span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用'+字符串拼接</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> yeas is</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token comment">// 使用` $&#123;&#125;模板字符串输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数function">2.2.2. 函数function</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 匿名函数</span><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象">2.2.3. 对象</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span> <span class="token string">'刚满十八岁'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//简化为</span>    <span class="token function">sing</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="json">2.2.3.1. json</h4><p>JavaScript 对象标记法（使用js对象语法书写的文本）</p><p>不同的是，所有的变量名使用<code>“”</code>引起</p><table><thead><tr class="header"><th>JSON.stringify()</th><th>js对象-&gt; json 变量的字符串</th></tr></thead><tbody><tr class="odd"><td>JSON.parse()</td><td>json -&gt; 没有字符串的变量</td></tr></tbody></table><h3 id="dom">2.2.4. DOM</h3><p>文档对象模型： 将标记语言的各个组成部分封装为对应的对象；</p><table><thead><tr class="header"><th>Document</th><th>整个文档</th></tr></thead><tbody><tr class="odd"><td>Element</td><td>元素对象</td></tr><tr class="even"><td>Attribute</td><td>属性对象</td></tr><tr class="odd"><td>Text</td><td>文本内容的对象</td></tr><tr class="even"><td>Comment</td><td>注释形成的对象</td></tr></tbody></table><figure><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250525161235954.png" alt="image-20250525161235954"><figcaption aria-hidden="true">image-20250525161235954</figcaption></figure><h4 id="获取对象">2.2.4.1. 获取对象</h4><p>选择器对应css中的选择器<a href="#css选择器">css选择器</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取匹配到的第一个元素</span>document<span class="token punctuation">.</span><span class="token function">querySelectorALL</span><span class="token punctuation">(</span><span class="token string">'选择器'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取所有匹配到的元素</span><span class="token comment">//得到的是一个节点集合，有长度，有索引</span><span class="token keyword">let</span> hs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>#title<span class="token punctuation">)</span><span class="token punctuation">;</span>hs<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'修改后的内容'</span> <span class="token punctuation">;</span> <span class="token comment">// innerHTML代表文本内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="时间监听">2.2.5. 时间监听</h3><p>语法： 事件源.addEvenListener(‘事件类型’, 事件触发执行的函数);</p><ul><li>事件源：document中对象</li><li>事件类型： 点击click</li><li>事件处理的函数：要做什么事</li></ul><h4 id="事件类型">2.2.5.1. 事件类型</h4><table><thead><tr class="header"><th>鼠标</th><th>click</th></tr></thead><tbody><tr class="odd"><td></td><td>mouseenter</td></tr><tr class="even"><td></td><td>mouseleave</td></tr><tr class="odd"><td>键盘</td><td>keydown 按键触发</td></tr><tr class="even"><td></td><td>keyup 按键抬起</td></tr><tr class="odd"><td>焦点</td><td>focus 进入输入框</td></tr><tr class="even"><td></td><td>blur 离开输入框</td></tr><tr class="odd"><td>表单事件</td><td>input 输入时触发</td></tr><tr class="even"><td></td><td>submit 提交时触发</td></tr></tbody></table><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>func1<span class="token punctuation">,</span> func2<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./utils.js"</span> <span class="token comment">// js导入函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>utils.js中的内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> functtion <span class="token function">printLog</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用export标记</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html导入时候，需表明类型是模块化的js</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./js/1.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="vue">2.3. vue</h2><p>Vue是一款构建用户界面的渐进式的JavaScript框架</p><p>构建用户界面：针对数据构建</p><p>渐进式：可以只使用一部分</p><figure><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250525174822695.png" alt="image-20250525174822695"><figcaption aria-hidden="true">image-20250525174822695</figcaption></figure><ol type="1"><li>准备<ol type="1"><li>引入Vue模块</li><li>创建Vue程序的应用示例，控制视图的元素</li><li>准备元素，被Vue控制</li></ol></li><li>数据驱动<ol type="1"><li>准备数据</li><li>通过差值表达式渲染界面</li></ol></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>        &#123;&#123;message&#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span><span class="token punctuation">&#123;</span> creatApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"https://unpkg.com/vue@3/dist/vue.esm-browser.js"</span><span class="token punctuation">;</span>    <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"hello vue"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用mount接管app</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vue指令">2.3.1. vue指令</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-xxx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="v-for遍历">2.3.1.1. v-for遍历</h4><p>key的值避免复用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in items<span class="token punctuation">"</span></span> <span class="token attr-name">:</span> <span class="token attr-name">key</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> &#123;&#123;item&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>v-bind</strong>：动态为html绑定属性值，src, style,alt</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token attr-name">,</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;item.src&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">:alt</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;item.alt&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- vlind:属性，然后对应v-for中的内容// : 简写形式 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>v-if/v-show</strong>:控制元素的显示/隐藏</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--v-if：根据条件判断结果，判断结果输出/隐藏，不一定创建不频繁使用紧跟v-else-if, v-elsev-show: 根据条件结果，调用css 中display格式，分别用来显示和隐藏，会创建频繁使用“”之间的结果判断--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>e.job==1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 帮助人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>v-model</strong>: 双向绑定元素与vue data，绑定输入的内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchForm.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>v-on</strong>： 为html绑定事件</p><p>引号中绑定的是函数动作，可以简化为@click</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在vue中定义方法</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">const app &#x3D; createApp(&#123;data()&#123;return&#123;        &#125;&#125;,    method:&#123;        handle()&#123;        &#125;    &#125;&#125;).mount(&quot;#app&quot;)&#x2F;&#x2F; 使用时需要将button的类型设置为button<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="致谢">3. 致谢</h1><p><a href="https://www.bilibili.com/video/BV1yGydYEE3H?spm_id_from=333.788.videopod.episodes&amp;vd_source=8f246175d50731783a1ab3dafac1f6ab&amp;p=2">02.Web前端开发初识_哔哩哔哩_bilibili</a></p></body><p></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>transformer</title>
      <link href="/2025/05/24/deeplearn/Transformer/"/>
      <url>/2025/05/24/deeplearn/Transformer/</url>
      
        <content type="html"><![CDATA[<h1 id="transformer">1. Transformer</h1><h2 id="模型基本框架">1.1. 模型基本框架</h2><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250425173522602.png" alt="image-20250425173522602"><figcaption aria-hidden="true">image-20250425173522602</figcaption></figure><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516114212148.png" alt="image-20250516114212148"><figcaption aria-hidden="true">image-20250516114212148</figcaption></figure><h2 id="编码器">1.2. 编码器</h2><ol type="1"><li>通过嵌入层</li><li>对位置进行编码</li><li>经过编码器层<ol type="1"><li>注意力层：<ol type="1"><li>注意力机制</li><li>残差+ 规范化层</li></ol></li><li>前馈网络<ol type="1"><li>前馈网络</li><li>残差+ 规范化层</li></ol></li></ol></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class TransformerEncoder(d2l.Encoder):    def __init__(self, vocab_size, key_size, query_size, value_size,                 num_hiddens, norm_shape, ffn_num_input, ffn_num_hiddens,                 num_heads, num_layers, dropout, use_bias&#x3D;False, **kwargs):        super(TransformerEncoder, self).__init__(**kwargs)        self.num_hiddens &#x3D; num_hiddens                self.embedding &#x3D; nn.Embedding(vocab_size, num_hiddens)        self.pos_encoding &#x3D; d2l.PositionalEncoding(num_hiddens, dropout)        self.blks &#x3D; nn.Sequential()        for i in range(num_layers):            self.blks.add_module(&quot;block&quot;+str(i),                EncoderBlock(key_size, query_size, value_size, num_hiddens,                             norm_shape, ffn_num_input, ffn_num_hiddens,                             num_heads, dropout, use_bias))                def forward(self, X, valid_lens, *args):        # 因为位置编码值在-1和1之间，        # 因此嵌入值乘以嵌入维度的平方根进行缩放，        # 然后再与位置编码相加。        X &#x3D; self.pos_encoding(self.embedding(X) * math.sqrt(self.num_hiddens))        self.attention_weights &#x3D; [None] * len(self.blks)        for i, blk in enumerate(self.blks):            X &#x3D; blk(X, valid_lens)            self.attention_weights[                i] &#x3D; blk.attention.attention.attention_weights        return X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="encoderblock层">1.2.1. EncoderBlock层</h3><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250425175900742.png" alt="image-20250425175900742"><figcaption aria-hidden="true">image-20250425175900742</figcaption></figure><ol type="1"><li>注意力层：<ol type="1"><li>注意力机制</li><li>残差+ 规范化层</li></ol></li><li>前馈网络<ol type="1"><li>前馈网络</li><li>残差+ 规范化层</li></ol></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class EncoderBlock(nn.Module):    &quot;&quot;&quot;Transformer编码器块&quot;&quot;&quot;    def __init__(self, key_size, query_size, value_size, num_hiddens,                     norm_shape, ffn_num_input, ffn_num_hiddens, num_heads,                     dropout, use_bias&#x3D;False, **kwargs):    super(EncoderBlock, self).__init__(**kwargs)        self.attention &#x3D; d2l.MultiHeadAttention(            key_size, query_size, value_size, num_hiddens, num_heads, dropout,            use_bias)        self.addnorm1 &#x3D; AddNorm(norm_shape, dropout)        self.ffn &#x3D; PositionWiseFFN(            ffn_num_input, ffn_num_hiddens, num_hiddens)        self.addnorm2 &#x3D; AddNorm(norm_shape, dropout)    def forward(self, X, valid_lens):        Y &#x3D; self.addnorm1(X, self.attention(X, X, X, valid_lens))        return self.addnorm2(Y, self.ffn(Y))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多头注意力机制">1.2.1.1. 多头注意力机制</h4><p>将键值对分为多个子空间，每个注意力机制学习一个子空间的特征，得到H组的注意力权重，然后将注意力权重通过线性层汇聚</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250425155705305.png" alt="image-20250425155705305"><figcaption aria-hidden="true">image-20250425155705305</figcaption></figure><p>常规思路：</p><ol type="1"><li>将query, key, values映射到子空间，使用不同的Linear映射</li><li>将不同头的注意力结果合并在一起，在feature维度上合并</li><li>再通过一个Linear线性层，连接所有head</li></ol><p>并行思路</p><ol type="1"><li>将query,key, values映射到完整空间，然后将完整空间查分成子空间，head与batch组成一个伪batch</li><li>再将子空间的数据通过点积注意力</li><li>将head从batch中分离出来，与feature合并，效果与非并行情况相同</li><li>最后通过线性层</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class MultiHeadAttention(nn.Module):    def __init__(self, key_size, query_size, value_size, num_hiddens, num_head, dropout, bias &#x3D; false, **kwargs):       self.num_head &#x3D; head        self.attention &#x3D; d2l.DotProductAttention(dropout)        self.W_k &#x3D; nn.Linear(key_size, num_hiddens)        self.W_q &#x3D; nn.Linear(query_size, num_hiddens)        self.W_v &#x3D; nn.Linear(value_size, num_hiddens)        self.W_o &#x3D; nn.Linear(num_hiddens, num_hiddens) # 全连接层            def forward(self, query ,key ,values, valid_lens):               # 转换为(batch_size* head, key&#x2F;query , num_hidden&#x2F;head)        query &#x3D; transpose(self.W_q(query),  self.head_num)        keys &#x3D; transpose_qkv(self.W_k(keys), self.num_heads)        values &#x3D; transpose_qkv(self.W_v(values), self.num_heads)                # 将掩码扩展为batch*head        if valid_len is not None:            valid_lens &#x3D; torch.repeat_interleave(            valid_lens, repeats &#x3D; self.num_heads , dim &#x3D;0)                    output &#x3D; self.attention(query, key ,value, valid_len)                output_concat&#x3D;transpose_output(output, self.num_heads)        # 输出为（batch_size, query_size, hidden_size)        return self.W_o(output_concat)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="残差规范化层">1.2.1.2. 残差+规范化层</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">class AddNorm(nn.Module):    &quot;&quot;&quot;残差连接后进行层规范化&quot;&quot;&quot;    def __init__(self, normalized_shape, dropout, **kwargs):        super(AddNorm, self).__init__(**kwargs)        self.dropout &#x3D; nn.Dropout(dropout)        self.ln &#x3D; nn.LayerNorm(normalized_shape)    def forward(self, X, Y):        # Y+X 残差网络        # Ln 层归一化        return self.ln(self.dropout(Y) + X)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="残差层">1.2.1.2.1. 残差层</h5><p>训练是模型训练出F(X) = f(x)- X</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250423225436209.png" alt="image-20250423225436209"><figcaption aria-hidden="true">image-20250423225436209</figcaption></figure><p>对应模型中 支线 为x ，前馈神经网络中预测是f(X), 相加后得到准确预测的F(X)</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250425181440459.png" alt="image-20250425181440459"><figcaption aria-hidden="true">image-20250425181440459</figcaption></figure><h5 id="批量归一化层batchnorm">1.2.1.2.2. 批量归一化层BatchNorm</h5><p><span class="math display">$$\mathrm{BN}(\mathbf{x}) = \boldsymbol{\gamma} \odot \frac{\mathbf{x} - \hat{\boldsymbol{\mu}}_\mathcal{B}}{\hat{\boldsymbol{\sigma}}_\mathcal{B}} + \boldsymbol{\beta}.$$</span></p><p>对特征维度进行归一化,<span class="math inline"><em>γ</em>、<em>β</em></span> 是拉伸和偏移参数</p><ol type="1"><li><p>对特征维度进行归一化</p><pre class="line-numbers language-none"><code class="language-none">mean &#x3D; X.mean(dim &#x3D; 0, keepdim &#x3D; True)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>卷积层</p><ol type="1"><li>对通道维度进行归一化</li></ol></li><li><p>训练状态下使用小批次的样本均值与方差，测试状态使用的移动平均估算的均值与方差</p></li></ol><h3 id="前馈网络层">1.2.2. 前馈网络层</h3><p>这里的线性层可以使用1*1cnn网络代替，代替结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">class PositionWiseFFN(nn.Module):    &quot;&quot;&quot;基于位置的前馈网络&quot;&quot;&quot;    def __init__(self, ffn_num_input, ffn_num_hiddens, ffn_num_outputs,                 **kwargs):        super(PositionWiseFFN, self).__init__(**kwargs)        self.dense1 &#x3D; nn.Linear(ffn_num_input, ffn_num_hiddens)        self.relu &#x3D; nn.ReLU()        self.dense2 &#x3D; nn.Linear(ffn_num_hiddens, ffn_num_outputs)    def forward(self, X):        return self.dense2(self.relu(self.dense1(X)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解码器">1.3. 解码器</h2><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250425181429443.png" alt="image-20250425181429443"><figcaption aria-hidden="true">image-20250425181429443</figcaption></figure><ol type="1"><li>通过嵌入层</li><li>对位置进行编码</li><li>经过解码器层<ol type="1"><li>第一个注意力层 ， query ,key, value,都是解码器输入</li><li>第二个注意力层， query 来自解码器输入 ， key, values来自编码器输入<ol type="1"><li>交叉注意力机制中，<strong>key,value</strong>来源使用一致，这里key,values来自编码器输入</li></ol></li><li>前馈神经网络</li></ol></li><li>全连接层</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class TransformerDecoder(d2l.AttentionDecoder):    def __init__(self, vocab_size, key_size, query_size, value_size,                 num_hiddens, norm_shape, ffn_num_input, ffn_num_hiddens,                 num_heads, num_layers, dropout, **kwargs):        super(TransformerDecoder, self).__init__(**kwargs)        self.num_hiddens &#x3D; num_hiddens        self.num_layers &#x3D; num_layers        self.embedding &#x3D; nn.Embedding(vocab_size, num_hiddens)        self.pos_encoding &#x3D; d2l.PositionalEncoding(num_hiddens, dropout)        self.blks &#x3D; nn.Sequential()        for i in range(num_layers):            self.blks.add_module(&quot;block&quot;+str(i),                DecoderBlock(key_size, query_size, value_size, num_hiddens,                             norm_shape, ffn_num_input, ffn_num_hiddens,                             num_heads, dropout, i))        self.dense &#x3D; nn.Linear(num_hiddens, vocab_size)            def init_state(self, enc_outputs, enc_valid_lens, *args):        return [enc_outputs, enc_valid_lens, [None] * self.num_layers]    X &#x3D; self.pos_encoding(self.embedding(X) * math.sqrt(self.num_hiddens))        self._attention_weights &#x3D; [[None] * len(self.blks) for _ in range (2)]        for i, blk in enumerate(self.blks):            X, state &#x3D; blk(X, state)            # 解码器自注意力权重            self._attention_weights[0][                i] &#x3D; blk.attention1.attention.attention_weights            # “编码器－解码器”自注意力权重            self._attention_weights[1][                i] &#x3D; blk.attention2.attention.attention_weights        return self.dense(X), state            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解码器层">1.3.1. 解码器层</h3><p>经过解码器层</p><ol type="1"><li>第一个注意力层 ， query ,key, value,都是解码器输入</li><li>第二个注意力层， query 来自解码器输入 ， key, values来自编码器输入</li><li>前馈神经网络</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">class DecoderBlock(nn.Module):    &quot;&quot;&quot;解码器中第i个块&quot;&quot;&quot;    def __init__(self, key_size, query_size, value_size, num_hiddens,                 norm_shape, ffn_num_input, ffn_num_hiddens, num_heads,                 dropout, i, **kwargs):        super(DecoderBlock, self).__init__(**kwargs)        self.i &#x3D; i        self.attention1 &#x3D; d2l.MultiHeadAttention(            key_size, query_size, value_size, num_hiddens, num_heads, dropout)        self.addnorm1 &#x3D; AddNorm(norm_shape, dropout)        self.attention2 &#x3D; d2l.MultiHeadAttention(            key_size, query_size, value_size, num_hiddens, num_heads, dropout)        self.addnorm2 &#x3D; AddNorm(norm_shape, dropout)        self.ffn &#x3D; PositionWiseFFN(ffn_num_input, ffn_num_hiddens,                                   num_hiddens)        self.addnorm3 &#x3D; AddNorm(norm_shape, dropout)def forward(self, X, state):        enc_outputs, enc_valid_lens &#x3D; state[0], state[1]        # 训练阶段，输出序列的所有词元都在同一时间处理，        # 因此state[2][self.i]初始化为None。        # 预测阶段，输出序列是通过词元一个接着一个解码的，        # 因此state[2][self.i]包含着直到当前时间步第i个块解码的输出表示        if state[2][self.i] is None:            # 使用当前输入的数据进行预测            key_values &#x3D; X        else:            &#39;&#39;&#39;            state[2] 中存放者上一个时间步，留下的已经每个块之前计算好的key_value            # 加上y_t之前的数据一起预测            &#39;&#39;&#39;            key_values &#x3D; torch.cat((state[2][self.i], X), axis&#x3D;1)        state[2][self.i] &#x3D; key_values        if self.training:            batch_size, num_steps, _ &#x3D; X.shape            # dec_valid_lens的开头:(batch_size,num_steps),            # 其中每一行是[1,2,...,num_steps]            dec_valid_lens &#x3D; torch.arange(                1, num_steps + 1, device&#x3D;X.device).repeat(batch_size, 1)        else:            dec_valid_lens &#x3D; None        # 自注意力        X2 &#x3D; self.attention1(X, key_values, key_values, dec_valid_lens)        Y &#x3D; self.addnorm1(X, X2)        # 编码器－解码器注意力。        # enc_outputs的开头:(batch_size,num_steps,num_hiddens)        Y2 &#x3D; self.attention2(Y, enc_outputs, enc_outputs, enc_valid_lens)        Z &#x3D; self.addnorm2(Y, Y2)        return self.addnorm3(Z, self.ffn(Z)), state        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在transformer结构中，query与key权重对values值进行查询，values值是编码器的输入，为什么就可以查询到解码器想要的结果呢？比如，编码器编码我是李华，解码器对I 查询 我，ji</p><h2 id="优化">1.4. 优化</h2><p>Adam， 自动调整学习率</p><p>warm up 和逆平方根衰减</p><h2 id="bert">1.5. BERT</h2><h3 id="预训练无监督自监督">1.5.1. 预训练（无监督/自监督）</h3><p>自监督</p><ol type="1"><li>完形填空</li><li>预测下一句</li></ol><h3 id="微调有监督">1.5.2. 微调（有监督）</h3><p>需要根据下游任务添加输出层，添加的层需要重新训练</p><ol type="1"><li>两个句子分类</li><li>单个句子的分类</li><li>问答任务<ol type="1"><li>找到答案正确的文本位置</li></ol></li><li>命名实体位置标记<ol type="1"><li>标记实体位置（begin ,inside ,O（非实体））</li></ol></li></ol><h2 id="decoder_only">1.6. Decoder_only</h2><p><strong>优点</strong>：</p><ol type="1"><li>Decoder-only的注意力矩阵始终是满秩，表达能力更强</li><li>不会浪费Encoder的参数，输入可以直接作用与decoder</li></ol><h3 id="预训练">1.6.1. 预训练</h3><p>test prediction 预测文本</p><h3 id="微调">1.6.2. 微调</h3><p>test prediction + task classfication 的损失相加</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516123238590.png" alt="task"><figcaption aria-hidden="true">task</figcaption></figure><h2 id="gpt-2">1.7. GPT-2</h2><p><strong>无需微调，预训练的模型就可以解决下游任务</strong></p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516123552285.png" alt="image-20250516123552285"><figcaption aria-hidden="true">image-20250516123552285</figcaption></figure><p>Zero-shot, One-shot, Few-shot</p><p>使用任务提示（prompt）和少量示例直接输入</p><h3 id="lay-n放在模块前">1.7.1. lay N放在模块前</h3><ol type="1"><li>尺度定律： 模型的大小与Loss线性拟合</li><li>涌现能力： 大模型效果迅速提升</li></ol><h2 id="gpt">1.8. GPT</h2><p>参数数量增多，需要减少计算量。</p><h3 id="sparse-attention">1.8.1. sparse attention</h3><p>减少attention的计算量，只关注临近部分和前面的部分权重</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516124911687.png" alt="image-20250516124911687"><figcaption aria-hidden="true">image-20250516124911687</figcaption></figure><h3 id="chatgpt">1.8.2. chatgpt</h3><p>增加人类反馈强化学习（RLHF) ,与人互动</p><h2 id="llama">1.9. LLAMA</h2><h3 id="swiglu">1.9.1. swiGLU</h3><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516155254082.png" alt="image-20250516155254082"><figcaption aria-hidden="true">image-20250516155254082</figcaption></figure><p>使用swi激活函数，同时使用门控机制（GLU)，选择性激活函数</p><p>优点： swish激活函数更平滑，GLU实现选择性激活</p><h3 id="gqa-grouped-query-attention">1.9.2. GQA-grouped-query attention</h3><p>减少k,v的head 数量，query共享重复的k,v，减少参数</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516155516226.png" alt="image-20250516155516226"><figcaption aria-hidden="true">image-20250516155516226</figcaption></figure><h3 id="layer-norm-变体">1.9.3. layer norm 变体</h3><p>RMSNorm:均方根归一化</p><p><strong>取出平移，只保留缩放</strong></p><p>优点：计算简单</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516160128424.png" alt="image-20250516160128424"><figcaption aria-hidden="true">image-20250516160128424</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp+servlet</title>
      <link href="/2025/05/24/java/jsp/"/>
      <url>/2025/05/24/java/jsp/</url>
      
        <content type="html"><![CDATA[<h1 id="java基础">1. java基础</h1><h2 id="修饰符">1.1. 修饰符</h2><h3 id="final">1.1.1. final</h3><h1 id="servlet">2. servlet</h1><h2 id="http协议">2.1. http协议</h2><pre class="line-numbers language-http" data-language="http"><code class="language-http">http:&#x2F;&#x2F;ip:端口&#x2F;资源路径?name&#x3D; eg : http:&#x2F;&#x2F;127.0.0.1&#x2F;myweb&#x2F;servlet?name &#x3D; zhangsan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol type="1"><li>支持客户/服务端</li><li>支持get ,post请求</li><li>传输内容，类型可以有Content-Type</li><li>http无连接，http1.1之后支持可持续连接</li><li>http无状态信息</li></ol><h3 id="请求和responce">2.1.1. 请求和responce</h3><h4 id="请求request">2.1.1.1. 请求request</h4><ol type="1"><li><p>请求行</p><blockquote><p>get的请求放在请求行中</p></blockquote><p>method Request_url http_version 换行</p></li><li><p>请求头</p><ol type="1"><li>键值对</li></ol></li><li><p>请求体</p><ol type="1"><li>get没有请求行</li></ol></li></ol><h4 id="response">2.1.1.2. response</h4><ol type="1"><li>状态行</li><li>响应头</li><li>响应正文</li></ol><h3 id="消息头">2.1.2. 消息头</h3><ul><li><em>referer</em>: 请求前来位置</li><li><em>Location</em>: 请求达到位置</li><li><em>refresh</em>: 自动跳转时间</li></ul><h2 id="服务器">2.2. 服务器</h2><p>接受客户端的请求,调用程序处理,返回程序数据</p><h3 id="tomcat目录">2.2.1. tomcat目录</h3><ul><li>bin: 启动或关闭的配置文件</li><li>conf: 配置servel端口号等信息文件</li><li>lib: 运行时使用的java包</li><li>logs :日志文件</li><li>webapps: web应用</li><li>works: 工作目录</li></ul><h3 id="使用idea-集成tomcat">2.2.2. 使用idea 集成tomcat</h3><h2 id="servlet实现">2.3. servlet实现</h2><ol type="1"><li>创建java类</li><li>实现servlet规范, 继承HttpServlet类</li><li>重写service 方法,用于处理请求</li><li>设置注释,指定访问方法的路径</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Webservlet(name &#x3D; , value &#x3D;&#123; , &#125;) value可以指定多个名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="servlet执行流程">2.3.1. servlet执行流程</h3><ol type="1"><li>从请求头中找到主机</li><li>访问请求头中的资源,第一次访问创建一个对象</li><li>将参数交给req, 通过resp响应参数</li></ol><h3 id="三种访问方式">2.3.2. 三种访问方式</h3><p>继承方式</p><p>HttpServlet -&gt; GenericServlet &gt; Servlet</p><h3 id="service-dopost-doget">2.3.3. service ,doPost, doGet</h3><p>调用service 实际上调用doPost, doGet</p><blockquote><p>不知道post 或 get ,写service</p></blockquote><h3 id="servlet生命周期">2.3.4. servlet生命周期</h3><p>请求访问servlet容器时候,检查容器中是否存在该资源对象,没有调用init方法,第二次访问时,调用service.程序停止售,调用destory方法</p><figure><img src="/2025/05/24/java/jsp/image-20250503221820723.png" alt="image-20250503221820723"><figcaption aria-hidden="true">image-20250503221820723</figcaption></figure><h3 id="httpservletrequest-获取请求">2.3.5. HttpServletRequest 获取请求</h3><p>HTTp的请求都封装在Req对象中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">String value &#x3D; Req.getParameter(&quot;&quot;) 获取名称对应的值String[] values &#x3D; Req.getParameterValues(&quot;&quot;) 同一个name存在多个值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="请求乱码问题">2.3.5.1. 请求乱码问题</h4><p>乱码原因: request 封装时候,使用的ISO ,不支持中文编码</p><p>get 不会乱码，post有乱码</p><p>解决办法: 设置请求的编码方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">req.sertCharacterEncoding(&quot;utf-8&quot;) &#x2F;&#x2F; 只值对post代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">String name &#x3D; new String(req.getParameter(name)).getBytes(&#39;ISO-8859-1&#39;, charameter &#x3D; &#39;utf-8&#39;) &#x2F;&#x2F;适用于所有get 与post<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="请求转发">2.3.5.2. 请求转发</h4><ol type="1"><li>服务器行为</li><li>前台地址栏不发生改变,只产生输出</li><li>只有一个请求</li><li>req, resp对象共享</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">req.getRequestDispatcher(&quot;跳转网址&quot;).forward(req, resp);req.setAttribute(String name , Object value);&#x2F;&#x2F;设置新的对象值req.getAttribute(String name);req.removeAttribute(String name);&#x2F;&#x2F;删除对象值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="httpservletresponse-响应请求">2.3.6. HttpServletResponse 响应请求</h3><p>使用流输出方法响应</p><ol type="1"><li>getWritter() 字符输出流(输出字符串)</li><li>getOutputStream(), 字节输出流(输出任意数据)</li></ol><p><strong>两种流不能同时使用</strong></p><h4 id="响应乱码">2.3.6.1. 响应乱码</h4><p><strong>原因</strong>： 服务端和客户端的编码格式一致</p><p>解决办法：同时设置服务端和客户端的编码，保证编码格式一致</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 设置服务端的编码格式response.setCharacterEncoding(&quot;UTF-8&quot;);&#x2F;&#x2F; 设置客户端代码response.setHeader(&quot;content_type&quot;, &quot;text&#x2F;html; charset&#x3D; UTF-8&quot;);&#x2F;&#x2F; 同时设置编码格式response.setContentType(&quot;text&#x2F;html; charset&#x3D; UTF-8&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="客户端重定向">2.3.6.2. 客户端重定向</h4><p>服务端指导客户端的行为</p><blockquote><p>地址栏发生改变，写入location</p><p>服务器接受location</p></blockquote><p>有两次请求</p><blockquote><p>请求对象不共享</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">response.sendRedirect(&quot;s05&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="请求转发与重定向的区别">2.3.6.3. 请求转发与重定向的区别</h4><table><thead><tr class="header"><th>请求转发</th><th>重定向</th></tr></thead><tbody><tr class="odd"><td>一次请求，request数据共享</td><td>两次请求</td></tr><tr class="even"><td>服务端跳转</td><td>客户端跳转</td></tr><tr class="odd"><td>绝对地址到当前项目中，不能向外跳转</td><td>可以向域外跳转</td></tr></tbody></table><h2 id="cookie对象">2.4. Cookie对象</h2><p>浏览器中将数据存放在客户端中，在客户端中处理数据，减少网络传输与数据库查询</p><p>由服务器写入客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 服务器写入Cookie 到客户端中，客户端保存CookieCookie cookie &#x3D; new Cookie(name &#x3D; &quot;a&quot;, value &#x3D; &#39;b&#39;);response.addCookie(cookie)&#x2F;&#x2F; 获取CookieCookie[] conkie &#x3D; request.getCookies(); &#x2F;&#x2F; 获取客户端路径下所有的Cookie对象&#x2F;&#x2F;将Cookie 的name 与需要查找的Cookie作比较<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置对象存在时间">2.4.1. 设置对象存在时间</h3><p>设置maxAge存活时间 ，从创建Cookie对象开始</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">cookie.setMaxAge(time);&#x2F;*1. 负整数，只在浏览器内存中存在2. 正整数，保存磁盘对应的时间，关闭后依旧计数，时间为s3. 0 ： 删除这个Cookie*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意点">2.4.2. 注意点</h3><ol type="1"><li>Cookie 只在当前浏览器中有效，不跨浏览器和及其</li><li>Cookie不支持存放中文，使用时候需要编码/解码</li><li>新的同名name Cookie 将覆盖之前的Cookie</li><li>Cookie的存储数量有上限，Cookie的大小有限，4KB左右</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">String name &#x3D; &quot;陈龙&quot;;&#x2F;&#x2F; 中文通过URLEncoder.encode()编码name &#x3D; URLEncoder.encoder(name);&#x2F;&#x2F; 使用时，需URLDecoder.decoder()解码name &#x3D; URLDecoder.decoder(name);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cookie的访问路径">2.4.3. Cookie的访问路径</h3><ol type="1"><li>当前浏览器下如何项目任何资源都可以获取Cookie</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">cookie.setPath(&quot;&#x2F;&quot;);&#x2F;&#x2F; 默认本项目cookie.setPaht(&quot;&#x2F;s02&quot;);&#x2F;&#x2F; 设置指定站点名cookie.setPath(&quot;&#x2F;sc03&quot;);&#x2F;&#x2F; 指定项目的指定资源访问cookiecookie.setPaht(&quot;s03&#x2F;co1&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有访问的路径包括 <em>cookie的路径</em> 时， 能够获取这个cookie</p><h2 id="httpsession-对象">2.5. HttpSession 对象</h2><p>属于服务器对象， 标识一次对话，确定是否为一个用户的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">HttpSession session &#x3D; request.getSession(); &#x2F;&#x2F; 如session 对象存在，则获取 ；否则第一次创建对象<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一次请求到了服务器，标识启动了会话，客户端向服务器传递JSESSIONID的cookie，用于标识服务器中对应的session， 如果有，则共享数据，没有创建sesion,同时给客户端创建JSESSIONID的cookie.</p><h3 id="设置域对象">2.5.1. 设置域对象</h3><p>HttpSession 与 request 的区别</p><p>重定向： 只要session会话不是小，session一直共享数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">HttpSession session &#x3D; request.getSession();session.setAttribute(&quot;name&quot;, &quot;hello&quot;);session.getAttribute(&quot;name&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="session-对象的销毁">2.5.2. session 对象的销毁</h3><p>默认是30min， 一旦有操作，session 重新计时</p><blockquote><p>在conf/web.xml中修改session_config中timeout,单位为1min</p></blockquote><h4 id="设置到期时间">2.5.2.1. 设置到期时间</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">session.setMaxInactiveInterval(15); &#x2F;&#x2F;单位为s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="立即销毁">2.5.2.2. 立即销毁</h4><p>退出登录，立马销毁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">session.invalidate(); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="关闭浏览器cookie对象销毁">2.5.2.3. 关闭浏览器，Cookie对象销毁</h4><p>session 需要JSESSIONID ，JSESSIONID默认在浏览器内存中有效，Cookie消失后，session 结束</p><h4 id="关闭服务器失效">2.5.2.4. 关闭服务器失效</h4><h2 id="servletcontext对象">2.6. ServletContext对象</h2><h3 id="获取对象">2.6.1. 获取对象</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">ServletContext servletContext1 &#x3D; request.getServletContext();&#x2F;&#x2F; session对象获取ServletContext servletContext2 &#x3D; request.getSession().getServletContext();&#x2F;&#x2F; ServletConfig对象中获取getServletConfig().getServletContext();&#x2F;&#x2F; servlet中直接获取ServletContext servletContext4 &#x3D; getServletContext();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取服务器信息String serverInfo &#x3D; request.getServletContext().getServerInfo();&#x2F;&#x2F; 获取项目路径String realPath &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;&quot;);&#x2F;&#x2F; 从根目录下获取<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="servlet-域对象">2.6.2. Servlet 域对象</h3><ol type="1"><li><p>request 域对象</p><p>再一次请求中有效，请求转发有效，重定向无效</p></li><li><p>session 对象</p><p>一次会话中有效，session销毁后无效</p></li><li><p>servletContext 对象</p><p>服务器中始终有效</p></li></ol><h2 id="文件上传下载">2.7. 文件上传下载</h2><h3 id="上传">2.7.1. 上传</h3><h4 id="前端实现">2.7.1.1. 前端实现</h4><ol type="1"><li>准备表单form</li><li>设置表单的请求类型 ‘method =“post”</li><li>设置表达类型为文件上传类型 enctype = “multipart/form-data”</li><li>设置文件提交的地址 active = “提交路径”</li><li>准备表单元素<ol type="1"><li>普通的表单项 type = “text”</li><li>文件项 type = “file”</li><li>设置表单元素的name值</li></ol></li></ol><h4 id="后端实现">2.7.1.2. 后端实现</h4><p>添加注解<code>MultipartConfig</code>, servlet将 multipart/form-data 的post封装在part对象中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@MultipartConfigPart part &#x3D; request.getPart(&quot;name&quot;);String fileName &#x3D; part.getSubmittedFileName(); &#x2F;&#x2F; 获取提交文件名称；String realPath &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;&quot;);&#x2F;&#x2F; 需要自行指定保存路径String saveName&#x3D; fileName+&#39;&#x2F;&#39;+ realPath;part.write(saveName);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件下载">2.7.2. 文件下载</h3><h4 id="超链接下载">2.7.2.1. 超链接下载</h4><ol type="1"><li>没有download属性<ol type="1"><li>浏览器识别文件，跳转显示，否则下载</li></ol></li><li>有download属性<ol type="1"><li>指定属性值，为下载名</li></ol></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>download/text.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 图片文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>download/text.png<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token punctuation">></span></span>图片文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="后端下载">2.7.2.2. 后端下载</h4><ol type="1"><li><p>设置request和response的编码类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">request.setCharacterEncoding(&quot;UTF-8&quot;);response.setContentType(&quot;text&#x2F;html; charset &#x3D; UTF-8&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取文件名称</p></li></ol><p><pre class="line-numbers language-java" data-language="java"><code class="language-java">String fileName &#x3D; request.getParameter(&quot;name&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><ol start="3" type="1"><li><p>判断文件名称是否为空</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 文件名&#x3D; null 或者全是空格if(fileName &#x3D;&#x3D; null || &quot;&quot;.equals(fileName.trim()))&#123;    response.getWritter().write(&quot;输出提示信息&quot;);    response.getWritter().close();&#x2F;&#x2F; 关闭信息&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将路径转换为file 对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">String path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;download&#x2F;&quot;);File file &#x3D; new File(path+ fileName);&#x2F;&#x2F; 检查文件存在&#x2F;&#x2F;是否为文件夹if(file.exist()&amp;&amp; file.isFile())&#123;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出</p><ol type="1"><li><p>设置响应类型， 浏览器无法解析的MINE类型 “application/x-msdoanload”, “application/octet-stream”</p><ol type="1"><li>response.setContentType(“application/x-msdoanload”)</li></ol></li><li><p>设置响应头，下载文件筐和文件名</p><ol type="1"><li>response.setHeader(“Content_Dispostion”, ”attachment;filename="+ fileName);</li></ol></li><li><p>输出流和输入流</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">InputStream in &#x3D;  new FileInputSream(file);ServletOutputSream out &#x3D; response.getOutputStream();byte[] bytes &#x3D; new byte[1024];int len &#x3D; 0;while((len &#x3D; in.read(byte))!&#x3D; -1)&#123;    out.write(bytes,0 , len);&#125;&#x2F;&#x2F; 关闭资源out.close();in.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简便实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response.setContentType(&quot;application&#x2F;octet-stream&quot;); &#x2F;&#x2F; 设置为通用的二进制流类型response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;\&quot;&quot; + fileName + &quot;\&quot;&quot;); &#x2F;&#x2F; 提示浏览器下载文件&#x2F;&#x2F; 使用 try-with-resources 确保流被正确关闭try (InputStream in &#x3D; new FileInputStream(file);    ServletOutputStream out &#x3D; response.getOutputStream()) &#123;    &#x2F;&#x2F; 使用 transferTo 方法进行拷贝 (Java 9+)    in.transferTo(out);    &#x2F;&#x2F; 注意：在 try-with-resources 块结束时，in 和 out 会自动关闭&#125; catch (IOException e) &#123;    &#x2F;&#x2F; 处理可能的 IO 异常    e.printStackTrace(); &#x2F;&#x2F; 在实际应用中应该记录日志或返回更友好的错误信息    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, &quot;文件读取或传输失败&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> servlet </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/24/%E6%9D%82%E9%A1%B9/done_url/"/>
      <url>/2025/05/24/%E6%9D%82%E9%A1%B9/done_url/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="fc798b15a0119aca5906a2eec04ef863cd8fe4933da5c841c74918eb8b6520a4">4fbb2435fd3b6574fd4f7bd145822884a098a0719a519100aebfe4c2fde4f5a0b742ef9261977b6e3a9b4c3e50829a47cc67386c45a0c7e7e3c01126948a03d934abc36be863f6b68bbe3cf1fff8c1a2b09cee484bf0bd10e8f98fc8039ff2ca77a1f763da9095e7fc22a0ec3d916c0f4d1c7f6d0008203643e153d8d9d88348d6448ef29275f34b9c80ee90dd12b8fc8aac9bd14fe3eaa52c57e5301b9b29a7204604661e28906aadfc0e0a83dbc3498d24a2ab9a9563ff0a75681c08a9971c03b328b67c94be664b595140eedc4e7a33b176c98a9b8c0d10b9745824ab21ef89c2d5cb77ace3384b45d3bf818ce27ecda6dd080366fc545105e12d3b53ded4e5064001b2509a3ea89073f0fed07b1b06d1d1d95e6daf1ebc687e73a28676f74d5e13cdceffc852fc6648b9cb5da4c67010edac0083689146d57f0502053683b97206a5d9aa90ad18b2ed54057885b57e1dd9dc42d8cb8826a74d6815e3978f5ccf516421146dbdd57ab1e0c030f67a4f2e1938eb7e49f15887e4db523e65c9426543c05b486faf66efba1d5726f46b9c17c025a5c8e7a2f40ab02ef165243537ee48aec821480be64389d3d5772f43d8b15d99063d151a1161cefcef19feb3688fb85655b38b6349b426771638b2469ed9a856f9d2c56a16b69bac886f194b3440b922f6803d01278bfbaed2be0f61d75a0a9f1a89d310a358f7d01924116008dcda04c4a7fc481873452c95b546a993f1486e628ba4bb2f674bb3097ba446f8e2168c2312875144fcf05e24d716b6a6d3d164a4f45d18e71a01732089e575b51738572bb0487363fc846d6c7f79596f46c600d544cfab71d291ff67d1270599732424b81dfd04f34db42375cef8826359d0e8c7cdb33883ce1f31e3e3dce7544ec67cabdb5eaa0fadd9ecab6b9880ae3e70a38fe2ae8271ec6af364a1487fdf8ab51e8be1a8bc688a125d96f951a8a2a82b8032590d4ccd0365c7e916169606a9d7655ee10d43c0517fd5b3d19e09f6b1192ec7070358d941f7b61da90b2551c017777effb79811ea2dd3212022483d46707ec17f55b9c8183f08931d1b07ec8cd9db83d5717f2ea2ed8ae93d0207</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.3. 线性回归的简洁实现 — 动手学深度学习 2.0.0 documentation</title>
      <link href="/2025/05/24/deeplearn/250224~3.3.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250224~3.3.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="3b95acb019ba16907d4dbbfbf646b6180a1cba2b75f5cfdbf5e930d78583f8b7">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a022b76f6020d300d02ff64b331b68ed4f3fb71a12a1b18c82393c4331ef67e083c16eb0579ffcd934c57b21dd6aa3d0de6d2f1564cb15beecb1083b49c6cb57702a4792ab680efe1d05a746301c8b8688ed3ae6839259f9fb773c752497763e2b758fe2dbd7925134fbfe48213cf64bc42f969b6b94a558153d9fad7b46ef9afc4f6e52ba0212f3847d09c850659b74123e61952481d48ab20b3d1c2b11a9cc70861ea44d70101fda18083affb1fed0cddd19d7203895fb9eb263c4ec1c3a07813ec7fee3365ea7a583a4f85087384e013f3f9d94eee53a1e89852c18c5a95d15f73484d093ad2381a90824268bf05a8566cc40d6eacfd04b9a944cf47907b227cd9934c26c31bbc0e801dd9582073147ef66c3ac691c6ee5d0c98b7af7c6990dcc97b4f617c134a2b281d809f6ea880aef574de48c22b72537390f4d007804118e749f607cec33b86a9a878d0ab0bd89026d5945bfa1cdfc449c3ee54f56299c817e35d88500257bef26d652ddac8d8a0f405f9a075061120e1c47992ca37d96d2c8bd5e1d8f1a7c4f9e9445c3af317f2630e0969cd84ff99347920c8efcca582f4140e18e76ff50332e35378d3ac658cb2a80c7759b00c82f70418140a7af0070fa9a52c4cd637c8556b30d3e32913412f0bacc888d7b6d921314d978365f7c336c6249a2aa9285a51f3cd5b608b30b73512841f1d3af748ed950db87329ec8d6d31e87b70b4e3d1c9eb63862127626a45115ba84bfd86aa8baa46fc1c97d2da601432c9add971dda36a9f65c533ff37f99fe0d730ab8007d7be9e89f240a05d64f82a3db10bffcc355ebbf1ab7999047e7f50b3a6408e9f18904631222615632fc1dbd3c08e779674c8a4dc81238e89e4a9ca26ff1d5e3ff5acdb0a003840ac5bdd52313046a3760afc9362ac61c7ca907e3178b7db7a8e3e8a3cd3149ff933aae5811d1d57f634983c63d77fc55fda778d6dc6c87b7788391e70d5864260d2962fdfa7c395ef1ffb252df78954bc3e780a442b063e84d9e4f805170ff705f70b188c1915da9095f21c063105695a783a22ecc084ef8af437bb2cab83f4a31cc87e39bce4a890e98fcedbb2fa4642f4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.1. 线性回归 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250224~3.1.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250224~3.1.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="d6dfecb8b684de849a21217a866dc1f5196ad10decd533ab9a0af4e0dc5fa0c3">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a022ef0312d3cd74fe377f249957281d01acf24d16e0a1051c00518f1e1f1704cd317eea175f02adff3b352fc4af8c9e21fd73e6d728c80b5019f06cffee91fe6e2f44cc0b5a6f3972613562806447b4a6285120adf6b245f4003f22d68a913563bce8660a0643a2a46684c20f8aa67070cffbcad14f93b79f95b27dfbad35c7b8d78db29017c3039041480fd0516dda0274a9819a5df5e9dc5736f59e2469ed9365ffebf43631c313b9c7b1b88daf181d824299b92d3cb01840901874a2880f679a3a727416ef3117d5f970ebf08de6251d0dd179b543a85b5da61492290e2700c64eed46c8c5f6218c3bec8f2fdcbef7bf4e139c2f66cb1fbb58fe356fb11a01c99a53dc69842d53120638a4c6f550af11589e6071d90dd7d64095872cbc252acba65c852f5e3f03bef27a51d469eb5a7be22ba0448f2f8c1099fb789a4753f27ee62c4dfc517315d53f91a39056a6e98842d8445f8a75ed643e5bb0765666195c0afe7a8a67a1c05eec0732eddd5646260734c4cf356ff6aa44349f68f08b556e8c42077b62bb167593d29773c9cba409be06a8e2a4679aa3aeb3916e6076e2b89f81e5cd03a28da320fed79e414005df3fd23c26ba7e9f78bf0c67ddde129ce51c1e2e0d355ed2363e182b3abe4a904d21d3499ce7d1b9d41c49394bafe73b415262d2e95e911fc080df7fe784a318edd889b8e718ae57a778aec7eb2b72d9964b54a167402957c3e14bee40fd50bfef17d10c4414a7d55eac4f065f71df9a7b1c66c647457f847f2dd3041169a397354b8aa2b49064014932f3947cb09b45e37751d184eb006aad3c05caf9f8d05a1191ed91b4325d1c55606d14a98985e3c7ea1500a0d7013c6734ad23580412904efdbca6d754a2d7761d7aa1ff761250cb8b1cca0c6edf6613c20ba954248db967c673a4a7f9af9de897535733faf0940af81385d6a32237d46edc1366e34976aa26c4738464fc43fe3602ea7891c941e7683cb87f6c01757a3c1aff2d776286562cd265d83872fd18dbd37479147d5b4263baac052305368b3c0a13dc9e802f2c2c4314ae2c05b0be31d5442c444f5d399d31bf2e81143ec68571e477b707c948f5cd8cdb89e65f4b68bd0efea14502ec3e488e2f1f2cc378c5960c207ed66e8f41d420abf35280693ab6db763c86649dd58deaeda57b3150795423da5138c71b5323b4286aae08a44a588595ce74daf1b2ddb8ce8a3e818b4a219438ba2c4f9f1569ff26fab538aa93f708183786663f42a20a87bbf312c1d0a7dc93161a62b7669f9e06af8b632f2cfcc87b694dd64605f7571b9452f0f47aa6699149e61273aa6e3da7812e1fc4c1d390236027fbab9b67b5db4726d8dac375dfe31454954efe86eb878e2cd6befa43b6476a9deb298ae909eee055daddacc28fa35d19c4efc8f91b6f885b5120d1fd67c2db9de9302a31c508e67df76ed9d6d8d274e805e81f39fef06d17607322e9fb08bbf176636eda1bbf26af1392e3bc1ff186fac7dbc07449eda6c1fc90513cc43a17d3c23b7afa869ff4465a48d41181f47b3c7b970b6ff6ec81bb409bda82cf460644ba0c248bc79c399b2de5b14703396abe8af508226393afb138187cde35cc229fb524456a16c6c81472acc6d3d3c69c0e24c06249beb73cc6d892c664493a04e1c7d3cfad469cda7356bcbe820cb4fde4385ff3e2d08ab137d9a5fc10bffb285de941565c120433e1eda47c1b34ccc93c9e4b3ec738e363a9f3b194017ef07d98e8c9597b23c858259b691c4c7efae0d11cdfb5ac44eab084a96e20cb378dd610bae164d103f9295911c3459ee88dfbb36facb8df29929bfbe89326bc1495cf51f7f6aeb195c12341c04451cac739c52b14b1cbd0355c18515f074ce6102dc9c894ba994c4297138819b1ba920238e59b34d012b65423e504ca147f2a9f88f7c5f86d1049269426568c97aff490c01f12d946740ba9df055ffcb898cd5216832475a089be8fe1bae29c1357e08fb0af00be801bb3e85c341731c6aa671e23cca1ccb632004492a27cb26cb43bcd78c79e536599729d6dc0d52e17776a96c54fe6f2103752e6f87f9d5af6f155b22d5656ef39c057716935d40a0f1a3512efe7d21306f85db339a382b9248a2497c95912325bf990807756cab83befae51a4f5fa3ffa4493a1a83f3d0bcef6e59a6a6c0b726a32bc867adc85e9d7fbe49599fc55fb056235caef80eeb68bc82d19d9aae9e4aba7aa36aa8f586889a7d397d8e410ba81871df75fe7b11174c06cf9843d7a12dc2556eb908d1ac1734d1e7b9f5d022291627ea351c31b059ddbba280d4771148cfc1706c483614f928fba306f2d89f60cf4849860fb37caa41ba8ced03fe15dbc14a7fcb6fbb5254e817c552fa2c9a20ef12d1e5044d43bce82979d2a4743ff8355b6797faac22d7718d4fe0467fba1f6eb87015f31960e18d840484f979e13c19458a6cb92a0f5435c4a69b930892eebe1eeb43b5caa439a8141386dd11d24147cc80bc0e95744319b743ab8bf39771dfecc9a056e42fb4da4b748271932b96c451dcc0dbc066dfa136ff5d08217761d324533950eab5e9a2c70dc8cea5d9a674081a672d70f09c34823a8e344e029bff670d2e8bea3bb2764e49cffb748294f8100b2b9ccce57643ceb99b29ecaf17e61a927d39dc18f6eae18ad47208102f545299d109d92c2e35aaf95e80cf788a2ac18de78d5b7279b4288c264c03e55bfc2c6e5ede31cc7fd1735fd886212e9c085d077ed4973e4c8006d2a13039eadcc77d0f2113989bb228b47129742f2ca06b6b9f0b353d6dd05c2337cbc4e0b12b430692fc44e4c630ff2651819d95c0670f4e8571bc77dd407b3fd34d6a26fe9808ceac67afc3f7a6f1793f10ea5b3d81c87fd8228fae007b3547373886b3b064843dc6af653cb3c091c8562f28f240e0cc6a2d19a1c32cfeda70d55a4685940dc95a0a6d09d9a99881dee34f1f8f9f3838d9777ced9814cbfb072fa1f4b50e1532e2fc674990329d5047efb7a7c77fa715cfe752d4298c14619d442db4b4db1d4f500a45cdd2eb1180465a7c10ba062b0d3ed05cfc2cb93a8d595b3aa0c61a833c63512efb68b06c6f9e34c71243348dec837bee745ae05f8d028d1b47ce979b96eab6090ea42164ad8816efaf4d76a4c794b00b9fe2981b7d03ce65d2bdfd61e0d5c2d6ff215ad400240a5763614746</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3. 线性代数 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250223~2.3.%20%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250223~2.3.%20%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="d4eac8e7c0bdb5605df9dfc7798938f929ab5a30bbd6c9a9f33e9e77df355cbb">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a0206790f03fafe7d1627e502250b4b4bf7c8e4bc69c8007e92a9cbd4982df68ae7e538e43ef7ff05cfe9f2b854a1fad508fdc5a2c3e2691eb34dd378fe81d661e058670dc2a0443891ff5afafb1b9eba415f70203cd31e7be3ee548edd5c8f25f0cfad68683c280e4ba9e49b3921264b179da03c935738908c9363aebce165c5fb89df3c402f61a457ce67113453ffff2dab2a3d7915b5ec5966d94179d13e367ac4f687e6c4ef09557fd5d61ecb3a725ade186b66eb11c56cf54f0eec9bcbeef815d0c53d2bf2efed169a108d25495394f227a45536d0877834650fbb9cc1c90aa5127e59d3ec60d8056e7c4e2cd32ce342d6d2da4c67b6b68cf75f069a1183b8116cdfd819a0fabd4238d11d00d774fb0ab7682ecd706d90e69b50f497556528ace8667a39eb6c16802d809e6d42bfffc91fabb8a4996f7020f6e1e4def08d71ec055834737d0f5e9f253a1a6a50f79b8a39853b4edb3fcb4babbdcc356e492e77efe1212016c83602c6f9f564b7afc35a614656f02f49108cfee927642c348f329ba8ade1f5062b61801a5ddd0db9d8ba8fe09feb45c41557516afcc5fce2df67ffd6f050c9021f5547ff70cd3bea5b51acd26a4f3b560490246620bc0a8ca4a516c4161b32fb34d31f5034b0da6d8acc97351b21b1dd4686fe1501c6425088819dfb0638343e8a390acbd95521a0da4be997920fb32a593de5a08d497dbbcf6dd0285c3b5ad87b3e6dd2bb5f9d273b70bafbe883eddeb2ff0887d75b5bfe6d97eee976dfbf334d957d3e01f10085b83332afa166e5fb4e5e2a91c65c7a526a2c07a4e701e7298859149b04aa9bcb947039e27b84cd7e1bf42f8b6fcc33f5295656664b48700bf68f0956854763485f028ad9b51e58f83fe4c54921eb9ce043844995f390c9f52226d1b4960dbf32415ac834d6ebf50afc7325c74de27b2cb5703575453c54f6550a16bc1688adf09e8856aced45abb16c4d23f4bc9b9b5113cd0cb501ba226c5bca6894134a40c041f7cd27370e3b815714180761d26836ed6197c6ec2be5ecc578410ad0e193740ddc928d2e3fe369f35b6cfccdf7bc9d96511141876f1b0ed39670bdf2b9b8f1bd4296a12afe0faab90ba4b9b8e4a525acf6621787c4a3276f5eb1f1fdef65949d974ff9b0ee7d73bcd6e695293e041dc947229e768de716ad872a29e50c17d944bdd61e43024ad2b8ec28b36e613a52001908843a7411f6f6812f16dc5923c9e977adf5740eb45ac724eafa07a93d0dd7673886b4c78e405130cc89468cf10403fba620f20ceefc253dfa0395ea507f165402d50b1ccf88c7faf95ac88a0eee2bf6240c6b085b43f5b59c53a69b772e0096caebbcd1bf212742944fccd84537ad49c387bfbef5255fab2f9d1666adad9a799fcdf03c515f4119b15c8dccc19d9f48f8b9da78af7e55fa44a17db2a2fd1dd6699083e1c60875395a9e0af39ce27d1948b26bbe0c603aed40d5e04eeb267579674f66c59ff328d9aae24fe569ab5221e25e80debf5f5d10939677b94dd4ec73bae3f2d7c166fab103b55c9446fee1044e780c569d35fdedc499df74a6eedd39693889b402ab1e26ca5faa1a0e40e61ec72e3655ecf77991e95be2b10228b73c79fac96e362fca1981d995c008b2d75c2058b03b5ff1856000e55e95f2a05dde834defc60d506bb2cf44ff5d74e139b8b4d8be041a6478bc2a711718c0efaff404e505e9bb43709692b96afc15b6645468533f24b56da72ee261b77502a93f797f143ec9d02ba0a8bf36c62671a3d5e330475cbe9ac27e32c2bfa2090391c8013df3f6f02c6b1580a99cfecdd257fb5907b3fdb6ff53c33c22cbb473fb6d86df4aed999430687aa018efe5a6c467846b9f45541442a7867ecb32ca47cd241e98195d562df6acb9cc990ed96dcbdc1f351bd9a45959b149a7ccc56cc0b4465bafc4ba8c14c50328062ff293978906c102daaaed7af9a8281112f7aca68990f4f763d4d4e6a4a0e258f3e3e4078c4f305892e3c643aa925e195409e39cc5d15c110bbe4ab1c55870eab55a4495e76546add02388122834f926b2db35b85f90f796d4565ceb2aab2b2cef9d89590ef0baa6e4fe7c2fad9d951c101fee1ca3a03074bc36837c7a4ce5a76a8cf7f21be4b4b95a702f638f0727c5d421c1d54bdc7c9d2dc2dcc920e497515d3b874f6641dc01d89e7c42d2c9b2fe364c3e7054db0ac0e214b991489770741c4086b53f00cb57cfc8df1a4b68f5c2525ef36717465d10489d3f70e6f3c6dfb68ecda9f553b29a771b1737d5d963f7610b7d306f9ba43473e0a11b864b18ec6dad37e3eed5e537b6dc369440403760f6ea085c2c22e13615577efcaa3b3b36656199f4484be11ef144fe50d0553e91448d2594db4686211a38a79665d51a0035a84309419b578a17e3fd2fbaf09977d8385aad360e650a5b1e20575d5b5dd672811d77407d253da8cce17cdc12a291692c9013829b1a03d766802b4b74f434374c160ca03ed17ba195364f3aefe48e80a6c791d38d5c0335f31a9a2a27a81ce6079b77edb0766cfee419f74593d0dbf1c75cc4b73de16fb7c7533be1b8b17b3f858bc549f6adf5343f7f195188b5f6d4ee33fdec8b71d861244db4fece4adf80903f3d953bc82045401e304850d8dfe9fdc964fd18aa5fbd6fb6e51250be21b8248ac04c7b707ef943930eceb008a27b9b5b13b8f17c7d25639c556f6bce1746b0748f10b2018d0fd8305830eba210f72faebfe41189de87ca0160cc3d50aa388f8e270b451e31d6bdc4c37712adcefe8fe2bc606e786e8540c13f3db24b5ba3cab0644715cc723afe6fefc35ab0122f038655cc0c9fee283fb286871036119097281c86b065f9211fc02527dce79a67c9c8390e52ab8ad6798181687807da7b561e259611328e95a280c941e4789e31621e3da3cd28139085d47d6c1bf28165b16cf066366b14e3a91c7ad17dd359e1bee1deaa670de57309307f60c571c3c2eff2ffe73aac433e4deb35c7895dd024e09230d75c0a1315a43039c1f8f59dc862f23eedb630a7e003174948115dfa848c348d66ad8ab06fae56d072335d0bfc1e1e60db4deff0ca2d4e23695a9dec9ef10e8a0738438bdd338c36ed5fc3c65d6c2fa822b6e3319a582455c886d9b26040b7cacff209b134e9c74b3cbabb8d3d936990d9cd6f9d2714867c98d29ef80eb9f211ec72f24dab68c6d8c3b0ef1c64f50c55e2f8df9bb417b807ee57239c738520c6e517559d639f89ca15ea0365c9e507d4aba4745333eeb60c3d6006efb45f2e8594e09bfef50d93ad2d49df23993641a214d686d24edd33f93f23dfec2ec9e9a265665382e23365f210bc657a592bb82c8cdab147844460a28d494bc5a674f76bd68ace53f99958a7afdaa702a7d43340597df5d14d98d290b79d30278342d959ba61d2aecf11469bf7b782cb57312799210acea7eb1ac49de235ac7aeb55939794112ef631b7a0456e95a95f747946e5b847ba5a974c7994c7c91ed9b8a9b9e38421eb32e7c0df0ead16ec6283dfcc673503a96b137adbbb7ceb42c8ba68a0f88e5428f4a7497d0f7537a525a233251611f1649995e46b9b3e10d09343e364a2332d151e8b803f904fecad3d7b36e5403fbceaf0dac506c373c674a088aa3e61351ea41cd3a21e6a5f198760ff20d52f74cb2eecf95d617d731599d19456e061a90f954a43bd0452319856ec3a8be9ef9e798cec1eceed116dbfc2cf802f49b75d6ce1aa7976a4d634c0f937e14c5725243cc2e80202c0132a62a5cce416104812ecf0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2. 数据预处理 — 动手学深度学习 2.0.0 documentation</title>
      <link href="/2025/05/24/deeplearn/250223~2.2.%20%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250223~2.2.%20%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="f1495d08d4b0186616339ea3a8f0656cd0fe720210a10ce4d4abb1aeb42f255f">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a02d5e8996b062b1f00a96d1997a67c075088639bd2bb1fe30b14fed9cd9fc894ba414efe8d2b3cdaf2ab4225ebe9ffbecadfd52ce25acc12ab0bbc0baceff2e14f936a10524e0a2aa020a2f18473f3c232b1719cea1c8cce519f0910625350411bcbae87bc9b25cbcc91f8416a3afa8968fa237547f459e069dc90e398dc0286399c15647a8ddab7e986985c56a6d41eeeee8d8dd709e79867d1daf7f91c841f80a37606eadd413cb3e01ddabc07bd2d6af598194feed87a693d28906c2365a7253b5fefc5184aa01aa814e304de500c7795f7c47ff3bf0018cfd2407395ca9d14488acc3ce3f7055d3484d5bfe64fc68eb0ab9b119eb98f1a88a0c4fb3c0181eea2619fa32f6eea279b27f1b6f7ab85fd2823c0b26edfe80cfeecaa13b20d89ed21e589919ba5b0f5eba5d8ce1bc5534fec2db624a32459241c40c82f22648503</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1. 数据操作 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250223~2.1.%20%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250223~2.1.%20%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="aedf325fe4b248d7a3bf8f0aa95da56dc2c9ab5269e8b3a347efddde7a314d18">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a029043bbe5f75b36d036ba29581003bde79f9012aec39b3689b1f1cc5a99b5dd433e7a637369fd6b091b17be8295485f0ac3d327a6ed6397ddd4deedb70ecfac3dc5d6d61a5d8354e03c375dfeaed3fc29a8b2e63557af73696516b06eb8bf62d932f0d70a86124b5e1aff51a08f46be6d849e813cb0ae4138653f0c919bf3a8d6cbbf008a33262286cac2a4cbc141afdbc4b5a7c7ee8b521b68085949aaf7cf77b22841597f27df2b25747c8a4d6a7300bd8644dfc5c5aad6f32fba526dd3308f00f55d70fcf06984f6d341ff5e75d3a4876d8ae6ef3dcbd4497473ed6fd8dafbd2a758e1db8cacabc31ad0d6691d751cf9e7c878676d51ce67437508f1922873bf17ffd5adc010ecd39b40e9bfddf470e2e5d6d466ca16c1bb2ce6de6bf857c64bb7d172ab55134c5a894c245020059bbdc8d82687f097049b53aeff29ece305e03ecbe0f2aea01321a3d396fdc67226e775c6aed527d0964528cfc8b9cdb8521ab2d0c8c8d7bfc21136b3bc76a14e6b68ac174374d590c6ad7c9fdad52c15b8bee81340787ae874d5601ba96341320d3358bc839c1d149367c7241f196e5e222214100821823bb28f2824921d6732362ecadfeaa332a6cb4cebc1d3bd1a698435a651e6b2339cd1fc206506048f83b759b69afef8320e9b7b919c69398d1857387fcbb68fda1ec709a7eb4c7a5ceeaccaf8b288c82b6be79f77bf6b3a800fccfe9948f0f1f86cf8ff82f347754e826bd8e70e6530daaacacf97da04579955b3cc3536eca9d6a5554acf638b1825892b20199ad082e544d4f603f4a301f318fb8eada0cd29c064dd14c607cd9fd7e0f1a655cd37ed72c2aac3f3a3e2a02c5f56c57fff51df99d3f823430015a6da02a9a0fb1ca09b97333731bbf2cf1b730a4507bde1f80929d291cddf087f5e6890f891008818a19db6274b4f73a8b0b76312d9c07bc866ca0bf3276821379f50d42fdd59d278a1d23187df1151003ce2940ec23ad312c77646967083f6c73da3bc5855f1173e9c1d432ce62171b62cb8a7ece20a8536aa2b534a57ec1af4af28d7af9c7b8508ebb1904970a639087348372545fe2ec8ae1871e929f07713afecc07edd71e25005a97f4056e0d246d546762bda929a43f5c7d8b8183e60baa266cf0228d3f994ca11f3e5fb16ed7c5662f0cf1e909dacfe0ab40ce2211e3c6e9aac8b842dee1ee975a0402a073e1dad34c3823b7bec4e8e536a65eb776d4c28c9699355067d25fc9659f79539bf85af03bb075a2dbe93179946984f9a3514a9e49fb752052021e31fb2256e8a298a9e415e34ee3177472fcdae237bba7c6f756455f4022bdc1838cae948bc9908679da0a9fd2f93ef4e7e42ad5bf0e51236f034931b93c7fd513c5aa8feb1844f50f6485431c9df2326b5179277b384cd418b6ec13aa0f86df703ec622e808375c5c7f06782a878a4928dbc42a73fd9c1d53cd66a4252875f4686effe4a5ce4a8ca79e406acb2d65a77fb39f4f39a0d9e71cfe92b67f4d1f496dab186b818f29629718314eb5aa2d6d4bd5eb203752114bdb875c084afcefab70055906b06e298eef8beb878ef935aacadf1705d29b56d4d79f3d1c740445e79cbd6f36fe40d9c91f64b23d25b10b45cb071f5e05e97f26cf37d57a7cd023a668229256218a9c7081859be7520f59fac04feb1878b4f2e28ca92b704ee29699b3bc24aed207ec5ecf8eb0958362075c02f695127fce0d10c055f35efdf1ca70d7604dcdf3ea64ac87fd336a2e2835412032b9f6c5187d269abdb39db93798664714479d2da255b9596dc127277fa99c781f3d6f5323aba388312108f4364cc53ac3a4343b44388b3d564bc65ad6dc6e5abf81b734efdbf4fd3d43bbe4f24b075009871d9db0627321caf81dec9c8a31257bc19b0febed2ba18db0cbebbfc2fe2d124e7885905bba63cf60c0a6f4bc09276375369b8552d867201dadfdcedddad279f8bf7ec26e0ac3ffee511e131eb6b057ec4960135c48c003ff5d0432a1dac2127dc551db826ba929778c8542b6e92b2e141670c3dcd816facaf38972f1793af675c67b739688a74147ce687bc966a55aabdd2d759b77a337314be45904aa5162edaa0c83d858c2a9158d4ab7bcc34e453769b7340d3914c53a32a425aad627a0cedcb528606911e9812b9de5d6a607b4d7bbbc66871760022bbccbe5129d71b66717f759dd73e6d82521f3812cd4c6d29cb09e90a9e680bda83897faf954459c8afe2a62b7c23c0f189aef07e3b26390f59b95d2f9fc90a18c715cd71041889cb2b673d6e6bb87d276e66bc744ed2cc353e14527f5822bdfc48fc069693ca2ba3a6357758878d9f09a05fa2ca7538b93ae14b644aed9d29c9b59d965eecb7b6cf55aca67b68bb2459e02b5b59734922b1bb96c83b01764dae5bb87bcf515fe1825fbafb9fbc32de4ee4d1e86df166a9e40d12864a289e2a14f5f12ade727e47772d5d73931e75c9e7e91f40f0ff9771ab4153932691048c8ad72067b29a86dad5799894399752b37d8ece5a10701f704a384841d5f271d46e2e60dfbae63f5dd90bcc0805e7a4c42e1f73046679ed69397a9b8fe2062681352406ef16d706811f526e8e48b01f9cbf82b8b7403386c1c6ec2a12818836664d89d5f0bc42d79346aaf8cd9ee70d9d2c1035e73ae9221156e3ab454ed0b81c3bee747b0c0e083de72888836938cb6a98c5d789eadabacd53521e83feccbf78f3559f082665a07549398eebb395a3f6e75a9654faaae5ee96879b3c991f5fbb3ac893ef8979328826631420c01a2df8d0c638b39ed05716133fbabdd91386ecf5541f5fe08764ee2be769cbf4b12d879d7158be32eccafb106a4a1dae1204825196a586a607b75277e525960b99cf63a4b83520488b9b31ed331dd446fb4baf37c4ffa45e8cd9ea10c7c2bf30b0d8a43213f833a64b37a2696fe63bdafe9c5086919f3d2a6333b9b2c26fb830edd0264a8acf0ea0860d9efeb8a88ff66967b80127850f5f057ee48dc09a24220ad4b3489d21ab263cbc6c2f54c68e76d1cb5df0a7216abe4552e88273c39cdc1c768451c855e8cd5c557127c41baa5ef745788f5c2b4791b3ff1984a058149699ef7a72844dbd1600402412fcc5191cd311c7db895d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于本地git通过ssh链接github时 time out问题的解决方法_github timeout-CSDN博客</title>
      <link href="/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250218~%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0git%E9%80%9A%E8%BF%87ssh%E9%93%BE%E6%8E%A5github%E6%97%B6%20time%20out%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95_github%20timeout-CSDN%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250218~%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0git%E9%80%9A%E8%BF%87ssh%E9%93%BE%E6%8E%A5github%E6%97%B6%20time%20out%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95_github%20timeout-CSDN%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="53eb5bafa1154f8fdcbc5db977804b05029b75e46ed8373fafa82bac70cfe9a1">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a02505659b02274a8cdc56b3150a93447066588af71e1bb7238c8efb38b4d6d293cc2a05890a062e0b1e29bb1015b4a89f84aed762cfea360bc7263a2f6034d1c4c6096d537b31a98de7929b1b57cb8164dc4de2d0fd697f44ada30a4d8fa96aa454108805c290de124980734fa2a100a6f6f2e7c6e9bb7d9b1cf9c3b3cdcb22ae193bbed8014d0c2b9e7af110c29760dd34dc2a4325972524e162d1e086eb2400fe9078d3535de0cee5bb5e449ce424399e53358cff6a7cf8dd3fb7ea3980fd48b59a23984f6a2bd31429501afcabe8bdb3801499071ff773d755ec9ce57f69fc5a00438eba161a120a64e3bc7b5bc5fa80ce12b82ddee705baea7f6d02761273d2fa6f4ae8b0846a0270a39ae40fe89aee130561a2e85e976fafcbb45c8dc03d4989d3990e625bf7c91804ee7a14c9203e88d16c1392e1cde21655845c08c539c47c628c78451d9fc681d7aa9fddf797161aeaf522c571fc0bf176b99b4e0a3319f71182cdda0691d99c2db5c13584ab54f184946ad56480cdaa760ebb8066a5037ff08e27792739cbfb144e12cdf7309d94a4bbed774efa3f0f7a2cb5b2a93e134e6e33906eb04fc7e3b747f5c66be36ce33ecc9bff483fe4cf3a670bbe9743bf6376b36d6fe706288b07eba8b78fda1610687d637a2b559e47c5ff46d819a413474aab20f6711f3c337ee9509c05b4ee357945f2a0d470ef0fa38e1e32511a7e5a2897c49fa5a7f7a4fe1b9db5ccd19414f28be39af08bd68394455c46cddaf2be2fc728b135cce867bbb0a00a32256ffda1c6c941839f4a67f671e683c3c071a423c89e10228996712626549bdea169f5bfcac1b15c39a7a95cd60ef4544e4e0c755c39b59dfd0f52e88de1c5f8fba68434ed965b985163e5664c35e91f4eda482070e7895a35e8886a6ceb6e3152ca26c64283ce9db300089b5da11e5b7049b9d7d278188a32ca72a1b9288e1c6acdc67dd7f973b18cd22f23e162849b1757352ec7408033fc0bdb5f3c64080b3742f5b08cc593326f4906af786a177271b124eadaf2ad489047a66e637dc56327b0388f98907e8334a8c3ac25510838ac5040f6d4f1f71638bb58eb86d4ab3780d0b6c030ae6a0076ac62bf60103a83b5ea613d021c7f8b2302469a8d77e16cdbaae36b22b049de49b7ffe89b31bd6cc4bbad79802d22e42b28f18ec61470b77a9d5c7ba8b75619fe7faee9285740f3857c9ea911bf1e55c1bb807f22615308b1d0034f0d4ce7b419b6d4da35ebae7496415b0b388a32d6c2d6063fe1db36203027c89d9a675374e40d081f46e6c624964a554766d876f29f08636997bb9b4ed0bb2643fa0699110ae4f73cc0263ebc9812610538faa1103afa8a536a6725b8590847d7a9125b1a6bd18ab95f2996c4ae6cb247e66eb7ee588e51608a697eea3713aa2923b3b53ce0b422f26c1ae065113c744cc7a0185c114e745e8307ec75e22211cd71b0802ffda91792cf35b6252e0edbee63fe40571e09501b02a597c969f85be17a176c995b7a9e3d2a9c35450e1fb71b8e52c3ccd8a968d3313bb3a15aa09cc4d594e31ded06484f55dd92062d45cd16a91e5a966470503244844a2a22f05ee9e561db296127dc2ee38acf3d024dbfec2f8d7f99af17085353e07fcaccb3aa262dc63aa528f6ce61c312e857f2eca6af87023204b24339f02e296903b978d026725490ee9a48821f348c317cab7bc55d9aa37ecf23bdad2f58dad816147d9186f88794a7807f83365a98fe942e7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL Ubuntu22.04默认用户（default用户）更改_wsl ubuntu切换用户-CSDN博客</title>
      <link href="/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250215~WSL%20Ubuntu22.04%E9%BB%98%E8%AE%A4%E7%94%A8%E6%88%B7%EF%BC%88default%E7%94%A8%E6%88%B7%EF%BC%89%E6%9B%B4%E6%94%B9_wsl%20ubuntu%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7-CSDN%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250215~WSL%20Ubuntu22.04%E9%BB%98%E8%AE%A4%E7%94%A8%E6%88%B7%EF%BC%88default%E7%94%A8%E6%88%B7%EF%BC%89%E6%9B%B4%E6%94%B9_wsl%20ubuntu%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7-CSDN%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="45cb7ca81946f2532677dd738f1338e0cd28f45c17a6c254bc89e236ddaad96c">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a02d7a6f773f3d02a22bf49335195ebc30c3ac34427f15a9d475c8cff442fc8b4c3df2f65e86469fd84a1150985d30f852e34122576522b675bc72206cc8048edebd9f300d1b6a4ccfbdab98dedc28f96f979cea56d4ec22183ac1a1b3e20d0b3e9d447093d2bb3b975b3cc11c85381835fa2429afc60dda5d05ed2313eb62939443b81be4dcde5d55d2db1a1e0bd87415bf912b51356291f70a8828afa3e9cc4729e2ccb82054982095683d1195b36c87b4978aa2aeb7f09eecf5f457f498da174bf3ce4619a3d9e08a016ac98290964bd0cb063704fadd9a7fea6ac438bee384c7038f9677a1f525cacce5bb797656a0a854b2ed2afd6dd40e4b99aedacce10df07ef71c25cd622b2e8728011051c9305b73e95adb9320e10e921c606367fcb4251ba00dd9c4b6b4e1d68e62116f004a818d5c7d67e99a62c941475489cb517dd2a3d8f5f956b53a596457ca4532e7410562fe97034e485fab5676feeb062a8a5bd70c079aa38ece40bb303c28fd9ac1bc89bf3e64f30d3950b42f368109e6891562864a0a25d9b01731963ab6085c9a59d51383fbd5e728d60e34d5e8eb66a38768cebc6bbb09258a3e2f047146dca5207efedbb1ce4a5c1df7724dd64e918ebfbbc438d966b21e1d6c05bc09b6801d89e778040a67b91d20896ad3e61e5d8bb821a3ca8cc075378de657e51ed150028b472fdc9ace8896d4e4be9004eea7653283fc05f821b373c476212d61c41f165c1e3b56f437c7d925a0d208d44b43b0bd4e5598bf117dfe37884442f1c61aa9defe8cdbdf5fddc91f4a1ffa75ba14670afa90017a899f3bcc0a9cce45ac6642a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. 前言 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250211~1.%20%E5%89%8D%E8%A8%80%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250211~1.%20%E5%89%8D%E8%A8%80%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="1764317c9be6b63e8420c3d1e2dc5e137b2a259864fccae50bcc79947e979676"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研交流</title>
      <link href="/2025/03/15/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E4%BA%A4%E6%B5%81/"/>
      <url>/2025/03/15/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E4%BA%A4%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="dbdfc1704488945d0e75b25ac8bed3edcc9b5e3f2ca5fdb1646895704fd525da"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苍穹外卖</title>
      <link href="/2025/03/11/java/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
      <url>/2025/03/11/java/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="dcccd75e2b43f54c616918521e5aea1538c01a4b0b9309d1f74a9850c9694615"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器常用命令</title>
      <link href="/2025/03/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2025/03/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="一程序测试的常用命令">1. 一、程序测试的常用命令</h1><p>其中<code>top</code>内存监控输出的文件里面，每行对应的数字分别与如下对应。</p><h1 id="二运行的shell脚本">2. 二、运行的Shell脚本</h1><ol type="1"><li><p>首先在Linux系统中新建一个文件。</p></li><li><p>之后在<code>mlcs.sh</code>文件中输入要运行的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kill -9 进程id  # 提前杀死进程，只限于咱们自己用户下的进程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&gt;</code> 将内容输出到文件里面，如果原文件存在，则直接覆盖。</p><p><code>&gt;&gt;</code> 将内容输出到文件里，如果原文件存在则直接追加到原文件中。</p></li></ol><h2 id="内存监控命令">2.1. 内存监控命令</h2><p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top -b -c -d 2 | grep &quot;你想监控程序的那个名字，能唯一识别就行&quot; &gt; &quot;输出到的文件名字&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>例如，我要监控名字里面包括<code>mlcs.exe</code>的这个进程，将信息输出到同级目录下的<code>memory.txt</code>这个文件里面：</p><p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">top -b -c -d 2 | grep &quot;mlcs.exe&quot; &gt; &quot;memory.txt&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>其中<code>-d</code>参数代表几秒监控一下内存，这里设置每2秒监控一次。</p><p>删除所有包名称包括mlsc.exe的进程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkill -f me_test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>断开终端也可运行某程序的命令：</p><p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nohup 要执行的命令 &gt; output.log 2&gt;&amp;1 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>比如我要执行程序的命令是<code>mlcs.exe</code>：</p><p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nohup .&#x2F;mlcs.exe &gt; output.log 2&gt;&amp;1 &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>其中<code>output.log</code>就是日志输出，随便什么名字都行，默认存储到当前路径下。</p><p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">touch mlcs.sh  # 其中mlcs是文件名，随便起<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>比如我要循环执行某一个程序：</p><p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">for ((i &#x3D; 1; i &lt;&#x3D; 12; i++))do    for ((j &#x3D; 1; j &lt;&#x3D; 20; j++))    do        # 要循环执行的命令        # 其中可以通过$&#123;i&#125;或者$&#123;j&#125;获得i和j的变量值，进行命令拼接        # 比如其中$&#123;i&#125;就是获得变量，将最后运行的结果输出到result.txt中，        # 其中结果指的是在命令行输出的结果        .&#x2F;w_mlcs.exe $&#123;i&#125; &gt;&gt; result.txt    donedone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>一定要在Linux系统中手动输入，不要从在Windows系统下输入，然后将文件传到Linux中，他们两个系统的编码方式不同，否则会运行失败。</p><p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chmod 777 mlcs.sh.&#x2F;mlcs.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mit6.S191</title>
      <link href="/2025/03/02/deeplearn/mit6-S191/"/>
      <url>/2025/03/02/deeplearn/mit6-S191/</url>
      
        <content type="html"><![CDATA[<h1 id="概述">1. 概述</h1><h2 id="感知器">1.1. 感知器</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302173357938.png" alt="image-20250302173357938"><figcaption aria-hidden="true">image-20250302173357938</figcaption></figure><h2 id="激活函数">1.2. 激活函数</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302173418796.png" alt="image-20250302173418796"><figcaption aria-hidden="true">image-20250302173418796</figcaption></figure><h2 id="损失函数">1.3. 损失函数</h2><h3 id="分类">1.3.1. 分类</h3><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302180326931.png" alt="image-20250302180326931"><figcaption aria-hidden="true">image-20250302180326931</figcaption></figure><h3 id="定量">1.3.2. 定量</h3><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302180340787.png" alt="image-20250302180340787"><figcaption aria-hidden="true">image-20250302180340787</figcaption></figure><h2 id="梯度下降">1.4. 梯度下降</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302181222102.png" alt="image-20250302181222102"><figcaption aria-hidden="true">image-20250302181222102</figcaption></figure><h2 id="反向传播">1.5. 反向传播</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302201710606.png" alt="image-20250302201710606"><figcaption aria-hidden="true">image-20250302201710606</figcaption></figure><ol type="1"><li><strong>反向传播（Backpropagation）</strong>：<ul><li>反向传播是通过计算损失函数关于每个权重的梯度，来更新网络的权重。</li><li>从输出层开始，逐步向后（即从神经网络的最后一层到第一层）计算每个神经元对总损失的贡献。这被称为“反向传播”，因为它是沿着网络反向传播误差信号。</li></ul></li></ol><h3 id="反向传播的步骤">1.5.1. 反向传播的步骤</h3><ol type="1"><li><strong>计算输出层的误差</strong>：<ul><li>比较预测值和真实值，计算输出层的误差。</li></ul></li><li><strong>计算梯度</strong>：<ul><li>使用链式法则（Chain Rule）计算每一层的梯度，这样就可以知道每个权重对于损失的影响。</li></ul></li><li><strong>更新权重</strong>：<ul><li>知道了梯度后，就可以使用一定的学习率（learning rate）来调整权重，使得损失下降。具体来说，如果权重导致了更高的损失，就往反方向调整它。</li></ul></li></ol><h2 id="学习率">1.6. 学习率</h2><p>学习率自动调整算法</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302202502602.png" alt="image-20250302202502602"><figcaption aria-hidden="true">image-20250302202502602</figcaption></figure><h2 id="分批梯度下降">1.7. 分批梯度下降</h2><p>？</p><h2 id="正则化和早停机制">1.8. 正则化和早停机制</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302203604219.png" alt="image-20250302203604219"><figcaption aria-hidden="true">image-20250302203604219</figcaption></figure><p>随机丢失部分神经元</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302203650285.png" alt="image-20250302203650285"><figcaption aria-hidden="true">image-20250302203650285</figcaption></figure><h1 id="rnn">2. RNN</h1><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302210306088.png" alt="image-20250302210306088"><figcaption aria-hidden="true">image-20250302210306088</figcaption></figure><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302210728169.png" alt="image-20250302210728169"><figcaption aria-hidden="true">image-20250302210728169</figcaption></figure><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302210739335.png" alt="image-20250302210739335"><figcaption aria-hidden="true">image-20250302210739335</figcaption></figure><h2 id="顺序建模的设计标准">2.1. 顺序建模的设计标准</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302211357941.png" alt="image-20250302211357941"><figcaption aria-hidden="true">image-20250302211357941</figcaption></figure><p>Word prediction example <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=1910s">31:50</a> - Backpropagation through time <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2020s">33:40</a> - Gradient issues <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2235s">37:15</a> - Long short term memory (LSTM) <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2400s">40:00</a> - RNN applications <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2640s">44:00</a>- Attention fundamentals <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2806s">46:46</a> - Intuition of attention <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2953s">49:13</a> - Attention and search relationship <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=3082s">51:22</a> - Learning attention with neural networks <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=3465s">57:45</a> - Scaling attention and applications <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=3608s">1:00:08</a> - Summary</p><h2 id="随着时间反向传播-梯度消失学习能力下降">2.2. 随着时间反向传播-梯度消失，学习能力下降</h2><h2 id="lstm">2.3. lstm</h2><p>通过忘记一部分</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250303154530054.png" alt="image-20250303154530054"><figcaption aria-hidden="true">image-20250303154530054</figcaption></figure><h1 id="卷积神经网络">3. 卷积神经网络</h1><p>获取不同框中的物体，两个神经网络共同使用。</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304202546754.png" alt="image-20250304202546754"><figcaption aria-hidden="true">image-20250304202546754</figcaption></figure><h1 id="强化学习">4. 强化学习</h1><h2 id="自动编码器">4.1. 自动编码器</h2><p>将数据编码，降维</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304220654243.png" alt="image-20250304220654243"><figcaption aria-hidden="true">image-20250304220654243</figcaption></figure><p>解码器</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304220912390.png" alt="image-20250304220912390"><figcaption aria-hidden="true">image-20250304220912390</figcaption></figure><p>增加概率扭曲</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304222137386.png" alt="image-20250304222137386"><figcaption aria-hidden="true">image-20250304222137386</figcaption></figure><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304224849011.png" alt="image-20250304224849011"><figcaption aria-hidden="true">image-20250304224849011</figcaption></figure><h2 id="生成式对抗网络">4.2. 生成式对抗网络</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304225133095.png" alt="image-20250304225133095"><figcaption aria-hidden="true">image-20250304225133095</figcaption></figure><h2 id="强化学习-1">4.3. 强化学习</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250322173651016.png" alt="强化学习与无监督学习的区别"><figcaption aria-hidden="true">强化学习与无监督学习的区别</figcaption></figure><h1 id="致谢">5. 致谢</h1><ol type="1"><li><a href="https://introtodeeplearning.com/2021/index.html">MIT Deep Learning 6.S191</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cate深度学习 </tag>
            
            <tag> 麻省理工网课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy_pandas</title>
      <link href="/2025/02/23/deeplearn/numpy-pandas/"/>
      <url>/2025/02/23/deeplearn/numpy-pandas/</url>
      
        <content type="html"><![CDATA[<h1 id="numpy-与-pandas-用法总结">1. NumPy 与 Pandas 用法总结</h1><h2 id="numpy-用法">1.1. NumPy 用法</h2><h3 id="安装-numpy">1.1.1. 安装 NumPy</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip install numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导入-numpy">1.1.2. 导入 NumPy</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">import numpy as np<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建数组">1.1.3. 创建数组</h3><ul><li>从列表或元组创建数组 <pre class="line-numbers language-python" data-language="python"><code class="language-python">arr &#x3D; np.array([1, 2, 3])matrix &#x3D; np.array([[1, 2], [3, 4]])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>使用内置函数创建数组 <pre class="line-numbers language-python" data-language="python"><code class="language-python">zeros &#x3D; np.zeros((2, 3))       # 全零数组ones &#x3D; np.ones((3, 4))         # 全一数组arange &#x3D; np.arange(0, 10, 2)   # 创建一个范围数组linspace &#x3D; np.linspace(0, 1, 5)  # 等间距数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="数组属性">1.1.4. 数组属性</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">shape &#x3D; arr.shape               # 数组形状dtype &#x3D; arr.dtype               # 数据类型size &#x3D; arr.size                 # 数组元素总数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组切片与索引">1.1.5. 数组切片与索引</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">slice_arr &#x3D; arr[1:3]                  # 切片element &#x3D; arr[1]                       # 单个元素row_slice &#x3D; matrix[0, :]               # 第一行col_slice &#x3D; matrix[:, 1]               # 第二列sub_matrix &#x3D; matrix[0:2, 0:2]          # 子矩阵<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组操作">1.1.6. 数组操作</h3><ul><li>统计操作 <pre class="line-numbers language-python" data-language="python"><code class="language-python">sum_arr &#x3D; np.sum(arr)                  # 求和mean_arr &#x3D; np.mean(arr)                # 均值max_arr &#x3D; np.max(arr)                  # 最大值min_arr &#x3D; np.min(arr)                  # 最小值std_arr &#x3D; np.std(arr)                  # 标准差<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>数学操作 <pre class="line-numbers language-python" data-language="python"><code class="language-python">add_arr &#x3D; arr + 10                     # 加法mul_arr &#x3D; arr * 2                      # 乘法exp_arr &#x3D; np.exp(arr)                  # 指数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>矩阵运算 <pre class="line-numbers language-python" data-language="python"><code class="language-python">dot_product &#x3D; np.dot(matrix, matrix)   # 矩阵乘法transpose &#x3D; matrix.T                    # 转置inverse &#x3D; np.linalg.inv(matrix)         # 矩阵求逆（需方阵）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="广播">1.1.7. 广播</h3><p>NumPy 支持广播，使得不同形状的数组可以进行运算。 <pre class="line-numbers language-python" data-language="python"><code class="language-python">result &#x3D; arr + np.array([1, 2, 3])     # 广播机制<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><h2 id="pandas-用法">1.2. Pandas 用法</h2><h3 id="安装-pandas">1.2.1. 安装 Pandas</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip install pandas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导入-pandas">1.2.2. 导入 Pandas</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">import pandas as pd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建-dataframe-和-series">1.2.3. 创建 DataFrame 和 Series</h3><ul><li>从字典创建 DataFrame <pre class="line-numbers language-python" data-language="python"><code class="language-python">data &#x3D; &#123;&#39;A&#39;: [1, 2], &#39;B&#39;: [3, 4]&#125;df &#x3D; pd.DataFrame(data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>从列表创建 Series <pre class="line-numbers language-python" data-language="python"><code class="language-python">s &#x3D; pd.Series([1, 2, 3, 4])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="常用属性">1.2.4. 常用属性</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">columns &#x3D; df.columns              # 列名index &#x3D; df.index                  # 索引shape &#x3D; df.shape                  # 形状dtypes &#x3D; df.dtypes                # 数据类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问数据">1.2.5. 访问数据</h3><ul><li>行选择 <pre class="line-numbers language-python" data-language="python"><code class="language-python">row &#x3D; df.iloc[0]                 # 按位置选择第一行row_label &#x3D; df.loc[0]            # 按标签选择第一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>列选择 <pre class="line-numbers language-python" data-language="python"><code class="language-python">column_A &#x3D; df[&#39;A&#39;]                # 选择列 Acolumn_B &#x3D; df[[&#39;B&#39;]]              # 选择列 B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>切片选择 <pre class="line-numbers language-python" data-language="python"><code class="language-python">subset &#x3D; df.iloc[0:2, 0:2]       # 选择子集<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="数据操作">1.2.6. 数据操作</h3><ul><li>增加/删除列 <pre class="line-numbers language-python" data-language="python"><code class="language-python">df[&#39;C&#39;] &#x3D; [5, 6]                   # 添加新列 Cdf.drop(&#39;C&#39;, axis&#x3D;1, inplace&#x3D;True) # 删除列 C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>数据过滤 <pre class="line-numbers language-python" data-language="python"><code class="language-python">filtered_df &#x3D; df[df[&#39;A&#39;] &gt; 1]      # 过滤条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="统计分析">1.2.7. 统计分析</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">mean_A &#x3D; df[&#39;A&#39;].mean()             # 计算均值sum_A &#x3D; df[&#39;A&#39;].sum()               # 计算求和describe &#x3D; df.describe()             # 描述性统计<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数据处理">1.2.8. 数据处理</h3><ul><li>排序 <pre class="line-numbers language-python" data-language="python"><code class="language-python">sorted_df &#x3D; df.sort_values(by&#x3D;&#39;A&#39;)  # 根据列 A 排序<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>缺失值处理 <pre class="line-numbers language-python" data-language="python"><code class="language-python">df.fillna(0, inplace&#x3D;True)          # 填充缺失值df.dropna(inplace&#x3D;True)             # 删除包含缺失值的行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="数据导入与导出">1.2.9. 数据导入与导出</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">df.to_csv(&#39;file.csv&#39;, index&#x3D;False)  # 导出为 CSV 文件df &#x3D; pd.read_csv(&#39;file.csv&#39;)         # 从 CSV 文件导入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="读热码转换">1.2.10. 读热码转换</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd.get_dummies(data, columns&#x3D;None, drop_first&#x3D;False, dummy_na&#x3D;False, ...)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>主要参数：</p><ul><li>data: 要编码的数据，可以是 DataFrame 或 Series。</li><li>columns: 指定要进行编码的列名。如果不提供，所有类型的对象列都会被处理。</li><li>drop_first: 布尔值，默认为 False。如果为 True，则删除第一个类别的列，以避免虚拟变量陷阱（dummy variable trap），即多重共线性问题。</li><li>dummy_na: 布尔值，默认为 False。如果为 True，那么将生成一个额外的列，用于指示缺失值（NaN）的存在。这一列会在原始数据中出现 NaN（缺失值）的地方标记为 1，其余为 0。</li></ul><h2 id="使用-numpy-数组作为-dataframe-的数据">1.3. 使用 NumPy 数组作为 DataFrame 的数据</h2><p>您还可以使用 NumPy 数组作为 DataFrame 的数据并指定索引和列名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python复制代码# 创建 NumPy 数组data &#x3D; np.array([[1, 2], [3, 4]])# 将 NumPy 数组转换为 DataFrame，并指定索引和列名df &#x3D; pd.DataFrame(data, index&#x3D;[&#39;row1&#39;, &#39;row2&#39;], columns&#x3D;[&#39;A&#39;, &#39;B&#39;])print(df)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tensorflow">1.4. tensorflow</h2><ol type="1"><li>转换为tensors，不能改变</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">tf.constant([[2, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2" type="1"><li>转换为variable</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown_基础语法</title>
      <link href="/2025/02/19/%E6%9D%82%E9%A1%B9/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/02/19/%E6%9D%82%E9%A1%B9/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法">1. markdown语法</h1><h2 id="插入引用">1.1. 插入引用</h2><h3 id="单行注释">1.1.1. 单行注释</h3><ul><li><p>示例</p><figure><img src="/2025/02/19/%E6%9D%82%E9%A1%B9/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20250219113809368.png" alt="image-20250219113809368"><figcaption aria-hidden="true">image-20250219113809368</figcaption></figure></li></ul><blockquote><p>单行引用</p></blockquote><h3 id="多行引用">1.1.2. 多行引用</h3><blockquote><p>多行引用 引用文字</p></blockquote><h3 id="引用省略">1.1.3. 引用省略</h3><blockquote><p>引用 引用</p></blockquote><h3 id="引用中使用其他语法">1.1.4. 引用中使用其他语法</h3><blockquote><ol type="1"><li>表项</li><li>第二列表</li></ol></blockquote><h2 id="代码引用">1.2. 代码引用</h2><h3 id="段间代码">1.2.1. 段间代码</h3><p>这是一段段内代码</p><h3 id="段中代码">1.2.2. 段中代码</h3><p>这是段中<code>return 0</code>代码</p><h2 id="插入链接">1.3. 插入链接</h2><p>Markdown 支持两种形式的链接语法： 内联式和引用式两种形式。</p><h3 id="内联式">1.3.1. 内联式</h3><p>中括号内为显示文本，后面紧接一对圆括号. 圆括号里面放所需的 URL 链接,</p><ul><li><strong>示例：</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">[01.Markdown语法说明](https:&#x2F;&#x2F;github.com&#x2F;appinncom&#x2F;Markdown-Syntax-CN&#x2F;blob&#x2F;master&#x2F;syntax.md)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>显示效果</strong></li></ul><p><a href="https://github.com/appinncom/Markdown-Syntax-CN/blob/master/syntax.md">markdown语法说明</a></p><h3 id="引用式">1.3.2. 引用式</h3><ul><li><p>第一行： 引用式链接使用连续两个中括号，第一个中括号放显示文本，第二个中括号里面要填入用以辨识链接的标记。 标记可以有字母、数字、空白和标点符号</p></li><li><p>第二行：定义链接</p><ul><li>需要单独占一行。格式是： （1）中括号中包含标记文本 可以用三个以上的空白符来添加缩进可以用三个以上的空白符来添加缩进; （2）接着是冒号; （3）接着是链接的 URL; （4）接着是可选的标题, 可以用单引号, 双引号, 或者圆括号包围。</li></ul></li><li><p>链接的定义可以放在文件中的任何一个地方，比较常见的做法就是直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样</p></li><li><p><strong>示例</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">我们可以在 [02.Markdown中文文档][link1]这个网站查看MD语法样式。[link1]:https:&#x2F;&#x2F;markdown-zh.readthedocs.io&#x2F;en&#x2F;latest&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>展示效果</strong></p><p>我们可以再<a href="https://markdown-zh.readthedocs.io/en/latest/">02.markdown中文文档</a>这个网站查看MD语法样式</p><h2 id="致谢">1.4. 致谢</h2></li></ul><p><a href="https://pamarus.github.io/2020/05/03/markdown-1-ji-chu-yu-fa-xue-xi-ji-kuai-su-ru-men/">Markdown（1）：基础语法学习及快速入门 | Pamarus</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmware+mobax</title>
      <link href="/2024/11/29/%E6%9C%8D%E5%8A%A1%E5%99%A8/vmware-mobax/"/>
      <url>/2024/11/29/%E6%9C%8D%E5%8A%A1%E5%99%A8/vmware-mobax/</url>
      
        <content type="html"><![CDATA[<h1 id="vmware-网络连接失败">1. VMware 网络连接失败</h1><p>转自</p><p><a href="https://blog.csdn.net/m0_37259197/article/details/78221016">VMware 虚拟机无法连接网络解决办法_vmware 没网络-CSDN博客</a></p><h1 id="mobaxterm-重新连接">2. Mobaxterm 重新连接</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组-链表</title>
      <link href="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>感谢<a href="https://programmercarl.com/">代码随想录</a></strong></p><h1 id="数组">1. 数组</h1><h2 id="滑动窗口">1.1. 滑动窗口</h2><p>不断调整起始位置和终止位置，处理一块区间内的数据。</p><p>在本题中实现滑动窗口，主要确定如下三点：</p><ul><li><strong>窗口内是什么？</strong></li><li><strong>如何移动窗口的起始位置？</strong></li><li><strong>如何移动窗口的结束位置？</strong></li></ul><p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p><p>窗口的起始位置如何移动：<strong>如果当前窗口的值大于等于s了，窗口就要向前移动了（也就是该缩小了）。</strong>确定好移动的情况，并处理需要优先移动窗口还是先处理窗口中的数据。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210312160441942.png" alt="滑动窗口" style="zoom:67%;"></p><p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</p><h2 id="螺旋数组">1.2. 螺旋数组</h2><p><strong>确定边界处理的不变量，确保每个子问题的结构都是相同的</strong></p><p>然后按照不变量写出每次循环的次数</p><p><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/20220922102236.png" alt="循环数组" style="zoom:50%;"></p><h2 id="删除链表">1.3. 删除链表</h2><p><a href="https://programmercarl.com/0019.删除链表的倒数第N个节点.html#算法公开课">删除倒数第n值</a></p><p>删除列表时，最好增加dummy_head节点，删掉头节点更方便</p><figure><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.png" alt="增加dummy-head"><figcaption aria-hidden="true">增加dummy-head</figcaption></figure><h2 id="链表相交">1.4. 链表相交</h2><p><a href="https://programmercarl.com/面试题02.07.链表相交.html#思路">返回相交链表节点</a></p><figure><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/20211219221723.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><ol type="1"><li>求A，B的长度<span class="math inline"><em>l</em><sub><em>A</em></sub>, <em>l</em><sub><em>B</em></sub></span></li><li>为方便起见，将A始终未较长链表，否则将A，B交换</li><li>根据<span class="math inline"><em>l</em><sub><em>A</em></sub>, <em>l</em><sub><em>B</em></sub></span> 的差值，将长端链表对齐</li><li>依次比较</li></ol><h2 id="环形链表">1.5. 环形链表</h2><figure><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/20220925103433.png" alt="20220925103433"><figcaption aria-hidden="true">20220925103433</figcaption></figure><p><span class="math display">$$slow = x+y \\fast = x+y+n(y+z) \\fast = 2*slow$$</span> 计算得到 <span class="math display"><em>x</em> = (<em>n</em> − 1)(<em>y</em> + <em>z</em>) + <em>z</em></span> 代表，<strong>从头节点走向环形入口 = 从相遇点出发走n个节点</strong></p><p>// 先向前走再进行验证，否则第一个就相等了</p><h2 id="前缀和">1.6. 前缀和</h2><p>将之间计算的结果累加保存在数据中，之后使用时使用结算完成的数组</p><p><strong>需要更具题目要求，选择计算什么样的前缀数组</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">while (~scanf(&quot;%d%d&quot;, &amp;a, &amp;b))&#x2F;&#x2F;按位取反，如果结果是eof&#x3D;-1,取反之后结果为0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="哈希表">1.7. 哈希表</h2><h3 id="数组作为哈希表">1.7.1. 数组作为哈希表</h3><h3 id="stl中的哈希表">1.7.2. stl中的哈希表</h3><p>此时就要使用另一种结构体了，set ，关于set，C++ 给提供了如下三种可用的数据结构：</p><ul><li>std::set</li><li>std::multiset</li><li>std::unordered_set</li></ul><p>std::set和std::multiset底层实现都是红黑树，std::unordered_set的底层实现是哈希表， 使用unordered_set 读写效率是最高的，并不需要对数据进行排序，而且还不要让数据重复，所以选择unordered_set。</p><h2 id="回溯算法">1.8. 回溯算法</h2><p>算法的模板</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">void backtracking(参数)&#123;    if(终止条件）&#123;        存放结果;       return;    &#125;    for(选择:本层集合中的元素)&#123;        处理节点;        backtracking(路径， 选择列表); &#x2F;&#x2F;递归        回溯，撤销处理结果;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>vector<int> a</int></p><p>a.push_back(int b) 压入数据， a.pop_back(), 弹出数据</p><p>还可以采用insert， + ，压入数据，使用erase(begin()+ i ,end())弹出数据</p></blockquote><p>使用切割时候，需要注意下一次开始为本次切割后的下一次位置，此处回溯时候不需要还原，其余元素均需要还原。还原时候注意还原的位置。</p><p><a href="https://programmercarl.com/0131.分割回文串.html#算法公开课">回溯问题</a></p><h3 id="分割字符串方法">1.8.1. 分割字符串方法</h3><ol type="1"><li>函数传递，参数<code>s + start + end</code></li><li>使用string 切割，<code>string s = s.substr(start, end)</code></li></ol><h3 id="两阶vector初始化方法">1.8.2. 两阶vector初始化方法</h3><p><code>is_palind_rome.resize(s.size(), vector&lt;bool&gt;(s.size(), false));</code></p><h1 id="感谢">2. 感谢</h1><p><a href="https://programmercarl.com/">代码随想录</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++进程管理（-）-thread</title>
      <link href="/2024/09/21/c/c-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2024/09/21/c/c-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="3cd6b38951a661ef91ba94d7a0f78eccf145484f34b64b05b542e13e04766700"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
