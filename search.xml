<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2025/09/11/test/"/>
      <url>/2025/09/11/test/</url>
      
        <content type="html"><![CDATA[<p><span class="math display">$$隐藏输出\\mathbf{H}*t = \phi(\mathbf{X}\*t \mathbf{W}\*{xh} + \mathbf{H}*{t-1} \mathbf{W}_{hh} + \mathbf{b}_h).\输出\\mathbf{O}_t = \mathbf{H}*t \mathbf{W}*{hq} + \mathbf{b}_q.$$</span></p><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>25美赛</title>
      <link href="/2025/09/09/%E6%9D%82%E9%A1%B9/25%E7%BE%8E%E8%B5%9B%E5%9B%9E%E9%A1%BE/"/>
      <url>/2025/09/09/%E6%9D%82%E9%A1%B9/25%E7%BE%8E%E8%B5%9B%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="review_25">1. review_25</h1><h2 id="两阶段预测">1.1. 两阶段预测</h2><h3 id="lightgbm">1.1.1. LightGBM</h3><p>预测是否有概率获奖，二分类，不能获奖置为0</p><p>原理：基于决策树，采用梯度提升框架，迭代训练一系列的决策树，组合形成一个强学习器。每次迭代前，新的弱学习其会你和前一个模型预测的残差（梯度），从而逐步减少模型的误差。</p><p>主要使用：</p><ol type="1"><li>梯度采样，采样梯度较大的样本，较少训练数据量</li><li>基于EFB 特征捆绑，将少数几个特征捆绑，减少训练特征</li><li>提高训练并行策略</li></ol><p>因此成为Light，更轻量化的梯度提升机器学习框架</p><h3 id="random-effects-tobit-model">1.1.2. random effects Tobit model</h3><p><span class="math display"><em>y</em>*<sub><em>i</em></sub> = <em>β</em>′<em>x</em><sub><em>i</em></sub> + <em>ϵ</em><sub><em>i</em></sub></span></p><p>截断等式中，等式左边预测的并不是获得奖牌数量，因为对于真实获得0奖牌的国家，其因变量对应的<span class="math inline"><em>y</em></span>可能是负值，因此不能直接使用最小二乘法。</p><p>使用<span class="math inline">$y_i = \begin{cases} y_i^* &amp; \text{if } y_i^* &gt; 0 \\ 0 &amp; \text{if } y_i^* \le 0 \end{cases}$</span> 进行最大似然估计y，求出系数</p><p>因为模型对不同国家的不同时间进行观测， 不同国家具有潜在的异质性，需要对不同的国家增加变量<span class="math inline"><em>u</em><sub><em>i</em></sub></span>，同一国家不同时间段，个体随机效应系数是相同的</p><p>预测奖牌数量，预测过程中没有小于0的值， 因为对第一阶段中能获奖的国家进行预测，本阶段预测的国家奖牌数量均大于1</p><h2 id="量化国家---项目关系">1.2. 量化国家 - 项目关系</h2><h3 id="hhi">1.2.1. HHI</h3><p>Herfindahl-Hirschman Index 起初用于衡量企业的垄断关系，这里用来量化国家在某个项目中的领先地位</p><h3 id="imp">1.2.2. IMP</h3><p>Monopoly Power Index ,量化某个项目对于国家的重要程度，</p><p><span class="math inline"><em>I</em><em>M</em><em>P</em> = <em>i</em><em>国</em><em>占</em><em>据</em><em>的</em><em>H</em><em>H</em><em>I</em><em>系</em><em>数</em>/<em>该</em><em>国</em><em>家</em><em>总</em><em>的</em><em>H</em><em>H</em><em>I</em><em>系</em><em>数</em></span></p><h2 id="great-coach-作用">1.3. great coach 作用</h2><h3 id="hhi-1">1.3.1. HHI</h3><p>判断某个国家在该项目的领先地位变化</p><h3 id="welchs-t-检验">1.3.2. Welch’s t 检验</h3><p><span class="math display">$$t = \frac{两部分均值之差}{两部分均值的方差}$$</span></p><p>t 值反映两者之间是否存在显著差异， 当波动性超过拒绝值时，可以判断两部分的方差具有波动，标识此处发生断点</p><p>针对教练任教时间，检测领先地位是否有断点出现，检测P值</p><h3 id="投资项目">1.3.3. 投资项目</h3><p>优先选择金牌数量少、这个项目该国家具有一定的基础并且对国家总体项目重要程度，而且这个项目开放，不要有垄断国家的出现。</p><h2 id="结果分析">1.4. 结果分析</h2><ol type="1"><li>好的教练对项目的长期提升具有极大的帮助</li><li>限制单个国家的参赛人数，可以降低项目的垄断系数，例如：足球本是资本投入项目，应有某个大国垄断，但是因为一次只有一对参赛，垄断系数较低；相反，田径比赛的垄断系数</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复习 </tag>
            
            <tag> 数模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deepseek 调用方法</title>
      <link href="/2025/09/02/%E6%9D%82%E9%A1%B9/deepseek-%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2025/09/02/%E6%9D%82%E9%A1%B9/deepseek-%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>c</p><h1 id="deepseek-调用方法">1. deepseek 调用方法</h1><h2 id="api_key设置">1.1. API_KEY设置</h2><ol type="1"><li><p>设置<code>URL = "https://deepseek.com/chat/completions/"</code></p></li><li><p>导入系统变量，借助<code>os</code></p><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>os.getenv(<span class="st">&quot;变量名称&quot;</span>, default <span class="op">=</span> 默认值)</span></code></pre></div></li></ol><h2 id="请求头">1.2. 请求头</h2><ol type="1"><li><code>authorization</code> : Bearer API_KEY， 认证信息</li><li><code>Content-Type: application/json</code>, 请求内容格式，post 仅能使用Json</li></ol><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>header <span class="op">=</span> &#123;</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;authorization&quot;</span>: <span class="ss">f&quot;Bearer </span><span class="sc">&#123;</span>API_KEY<span class="sc">&#125;</span><span class="ss">&quot;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;Content-Type&quot;</span>: <span class="st">&quot;application/json&quot;</span>,</span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>&#125;</span></code></pre></div><h2 id="请求内容payload">1.3. 请求内容payload</h2><ol type="1"><li><code>model</code>: 选择模型</li><li><code>messages</code>: 发送的内容数组<ol type="1"><li><code>role</code>：角色</li><li><code>content</code>: 内容</li></ol></li><li><code>temperature</code>: 设置为 0 ，模型输出更加稳定， 1，模型输出更发散</li></ol><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>payload <span class="op">=</span> &#123;</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;model&quot;</span>: deepseek<span class="op">-</span>chat,</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;messages&quot;</span>:[</span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        &#123;<span class="st">&quot;role&quot;</span>: <span class="st">&quot;system&quot;</span>, <span class="st">&quot;content&quot;</span>:<span class="st">&quot;命令要求&quot;</span> &#125;，</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        &#123;<span class="st">&quot;role&quot;</span>: <span class="st">&quot;User&quot;</span>, <span class="st">&quot;content&quot;</span>: <span class="st">&quot;用户输入&quot;</span>&#125;,</span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        &#123;<span class="st">&quot;role&quot;</span>: <span class="st">&quot;&quot;</span>&#125;</span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    ]</span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>&#125;</span></code></pre></div><h2 id="发送请求">1.4. 发送请求</h2><p>发送内容，使用<code>post</code>请求</p><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>resp <span class="op">=</span> requests.post(url, header <span class="op">=</span> header, payload <span class="op">=</span> payload, timeout <span class="op">=</span>timeout)</span></code></pre></div><h2 id="response-返回内容">1.5. response 返回内容</h2><p>返回内容在<code>resp.json()['choices'][0]['message']['content']</code>, 提取出结果并返回</p><figure><img src="/2025/09/02/%E6%9D%82%E9%A1%B9/deepseek-%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95/image-20250902102742498.png" alt="image-20250902102742498"><figcaption aria-hidden="true">image-20250902102742498</figcaption></figure><h1 id="翻译">2. 翻译</h1><ol type="1"><li><p>将文本块切分成小段，指定分块大小，存放在数组中</p></li><li><p>对分段后每一段进行翻译</p><blockquote><h2 id="for-遍历">2.1. for 遍历</h2><ol type="1"><li><p><code>for i in 迭代器</code></p><p>迭代器: 列表等</p></li><li><p>for idx, ck in enumerate(n):</p></li><li><p>for i in range(1, n) :</p><p>范围是[1,n）</p></li></ol></blockquote></li></ol><h1 id="day3">3. day3</h1><ol type="1"><li><p>输入错误： <code>EOFerror</code></p></li><li><p><code>requests.post</code> 发送请求时，需要包裹在<code>try</code>中</p></li><li><p><code>requests</code>发送数据，解析数据检查</p><ol type="1"><li><p>检查requests是否接收</p><p><code>except requests.exception.RequestException as e</code></p></li><li><p>检查网络是否</p><p><code>resp.ok</code></p></li><li><p>数据转换是否成<code>json</code></p><p><code>except ValueError</code></p></li><li><p>是否可以从数据中提取出值</p><p>`except {KeyError, IndexError, TypeError}</p></li></ol></li></ol><h2 id="使用超时重传发送">3.1. 使用超时重传发送</h2><p>如果遇到<code>rest</code>请求错误，或者返回的<code>resq</code>状态码有问题，使用退避算法，进行规避<code>n</code>次，超过则返回</p><ol type="1"><li>重复遍历<code>n</code>次</li><li>如果遇到<code>请求错误</code>,查看是否超过重复次数，没有，<code>time.sleep</code>一段时间后，再次运行重传</li><li>超过重复请求后，返回错误</li></ol><h1 id="day4">4. day4</h1><h2 id="markdown-渲染">4.1. markdown 渲染</h2><p>使用<code>rich</code>库</p><div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> rich.console <span class="im">import</span> Console</span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> rich.markdown <span class="im">import</span> Markdown</span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>console <span class="op">=</span> Console()</span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>markdown_string <span class="op">=</span> <span class="st">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>markdown <span class="op">=</span> Markdown(markdown_string)</span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>console</span></code></pre></div><h2 id="输出markdown-到word-文件中">4.2. 输出markdown 到word 文件中</h2><ol type="1"><li>首先检查文件目录存在</li></ol><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>  <span class="im">import</span> os</span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  output_dir <span class="op">=</span> os.path.dirname(output_file)</span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> output_dir <span class="kw">and</span> <span class="kw">not</span> os.path.exist(output_dir):</span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>       os.makedirs(output_dir)</span></code></pre></div><ol start="2" type="1"><li>使用<code>pypandoc</code>输出</li></ol><div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pypandoc</span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="co"> to: &quot;目标格式&quot;</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="co"> format：&quot;当前格式&quot;</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="co"> outputfile: &quot;输出文件&quot;</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="co">&quot;&quot;&quot;</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>pypandoc.convert_text(makedown_string, to<span class="op">=</span> <span class="st">&#39;docx&#39;</span>, <span class="bu">format</span> <span class="op">=</span> <span class="st">&#39;markdown&#39;</span>, outputfile <span class="op">=</span> output_filepath)</span></code></pre></div><ol start="3" type="1"><li>同时可以尝试检查<code>ImportError , Exception</code>等错误</li></ol><h3 id="直接调用pandoc-命令行工具">4.2.1. 直接调用pandoc 命令行工具</h3><ol type="1"><li><p>创建临时文件.md存储markdown内容</p><div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>temp_md_file <span class="op">=</span> <span class="st">&quot;temp.md&quot;</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(temp_md_file, <span class="st">&#39;w&#39;</span>, encoding<span class="op">=</span> <span class="st">&#39;utf-8&#39;</span>) <span class="im">as</span> f:</span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    f.write(m_str)</span></code></pre></div></li><li><p>使用<code>subprocess.run</code>执行命令</p><div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> subprocess</span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>command <span class="op">=</span> [<span class="st">&#39;pandoc&#39;</span>, <span class="st">&#39;-f&#39;</span>, <span class="st">&#39;markdown&#39;</span>, <span class="st">&#39;t&#39;</span>,<span class="st">&#39;doc&#39;</span>, <span class="st">&#39;o&#39;</span>, output_filename, temp_md_file]</span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> subprocess.run(command, capture_output <span class="op">=</span> <span class="va">True</span>, text <span class="op">=</span> <span class="va">True</span>, encoding <span class="op">=</span> <span class="st">&#39;utf-8&#39;</span>)</span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> result.returncode <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="st">&quot;转换正确&quot;</span></span></code></pre></div></li><li><p>最后删除临时文件</p><div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> os.path.exist(temp_md_file):</span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    os.remove(temp_md_file)</span></code></pre></div></li></ol><h1 id="section">5. 9.8</h1><p>win11 主要文件夹路径</p><p>任务栏：<code>C:\Users\用户名\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar</code></p><p>开始菜单：<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs</code></p><p>IE开始菜单<code>C:\Users\用户名\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\StartMenu</code></p><h1 id="section-1">6. 9.10</h1><h2 id="path类">6.1. path类</h2><div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> pathlib <span class="im">import</span> Path</span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>p_path <span class="op">=</span> Path(路径)</span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co"># 组合路径</span></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>config_path <span class="op">=</span> p_path <span class="op">/</span> <span class="st">&quot;config.txt&quot;</span> </span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>.name <span class="co"># 文件名</span></span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>.suffix <span class="co"># 文件后缀</span></span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>.stem <span class="co"># 无后缀的文件名</span></span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>.parent <span class="co"># 父目录</span></span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>.is_absolute <span class="co"># 是否为祖先路径</span></span><span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>.revolve() <span class="co"># 转换为相对路径</span></span><span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a><span class="co"># 创建文件</span></span><span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="co"># parents=True 会创建所有不存在的父目录</span></span><span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a><span class="co"># exist_ok=True 避免目录已存在时报错</span></span><span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>Path(路径).mkdir(exist_ok <span class="op">=</span> <span class="va">True</span>, parents <span class="op">=</span> <span class="va">True</span>)</span><span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>Path(路径).touch()  <span class="co"># 创建空文件</span></span><span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>p_path.write_text(<span class="bu">str</span>) <span class="co"># 写入文件</span></span><span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>content <span class="op">=</span> <span class="bu">file</span>.read_text() <span class="co"># 读取文件内容</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> GPT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> GPT </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件读取方法</title>
      <link href="/2025/09/01/%E6%9D%82%E9%A1%B9/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95/"/>
      <url>/2025/09/01/%E6%9D%82%E9%A1%B9/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="文件读取">1. 文件读取</h1><h2 id="open函数">1.1. open()函数</h2><ol type="1"><li><p><code>open</code>函数配合<code>read() / readline() / readlines()</code></p><p><code>open(file, mode ='r' , encoding = None)</code></p></li><li><p><code>with</code>语句确保文件在使用完毕后自动关闭</p></li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(<span class="st">&#39;example.txt&#39;</span>,<span class="st">&#39;r&#39;</span>, encoding <span class="op">=</span> <span class="st">&#39;utf-8&#39;</span>) <span class="im">as</span> f:</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    content <span class="op">=</span> f.read()  <span class="co"># 读取整个文件</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    line1 <span class="op">=</span> f.readline() <span class="co"># 读取第一行</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    lines <span class="op">=</span> f.readlines() <span class="co"># 读取所有，作为一个列表</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i, line <span class="kw">in</span> <span class="bu">enumerate</span>(f):</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(i, line)</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    </span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 文件读取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http请求消息</title>
      <link href="/2025/09/01/%E6%9D%82%E9%A1%B9/http%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF/"/>
      <url>/2025/09/01/%E6%9D%82%E9%A1%B9/http%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="http-请求格式">1. http 请求格式</h1><h2 id="section">1.1. </h2>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论</title>
      <link href="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/"/>
      <url>/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/</url>
      
        <content type="html"><![CDATA[<h1 id="图论-搜索">1. 图论 搜索</h1><p><strong>感谢<a href="https://programmercarl.com/0101.对称二叉树.html#思路">代码随想录</a></strong></p><h2 id="图论基础">1.1. 图论基础</h2><h3 id="邻接矩阵">1.1.1. 邻接矩阵</h3><p>邻接矩阵使用二维数组保存信息，矩阵中每个节点代表一个元素</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> Node<span class="op">&#123;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> data<span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span>Node<span class="op">;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> vector<span class="op">&lt;</span>vector<span class="op">&lt;</span>Node<span class="op">&gt;&gt;</span> Graph<span class="op">;</span></span></code></pre></div><h3 id="邻接表">1.1.2. 邻接表</h3><p>邻接表—— 一个节点连接中存在弧 节点的首指针</p><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 弧节点信息</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> arc<span class="op">&#123;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> info<span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> arc<span class="op">*</span> next<span class="op">;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span>arc<span class="op">,</span> <span class="op">*</span>acrlink<span class="op">;</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">// 节点信息，包含弧节点首指针</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> Node<span class="op">&#123;</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> info<span class="op">;</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    arclink<span class="op">*</span> firstArc<span class="op">;</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span>Node<span class="op">,</span>Nodelink<span class="op">;</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="co">// 使用数组存放</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> vector<span class="op">&lt;</span>Node<span class="op">&gt;</span> Graph<span class="op">;</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="co">// 使用链表存放</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> link<span class="op">&lt;</span>Node<span class="op">&gt;</span> Graph<span class="op">;</span></span></code></pre></div><h3 id="有向图">1.1.3. 有向图</h3><p>有向图的边<span class="math inline">(<em>a</em>, <em>b</em>)</span>， 其中只存放 a-&gt;b的边</p><h3 id="无向图">1.1.4. 无向图</h3><p>无向图的边(a, b), a 节点中存放一条a-&gt;b的边， b节点存放一条 b-&gt;a的边</p><h3 id="连通分量">1.1.5. 连通分量</h3><p>无向图中 能够从一个节点到所有的节点的 <strong>最大子图</strong></p><figure><img src="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/20240511102449.png" alt="123 是连通分量， 12不是连通分量"><figcaption aria-hidden="true">123 是连通分量， 12不是连通分量</figcaption></figure><h3 id="强连通分量">1.1.6. 强连通分量</h3><p>有向图中， 增加了方向，依旧是连通分量成为强连通分量</p><h3 id="弱连通分量">1.1.7. 弱连通分量</h3><p>有向图中，增加了方向，不是连通分量 ； 减少方向，是连通分量，是弱~；</p><figure><img src="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/20240511115235.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><h2 id="岛屿数量">1.2. 岛屿数量</h2><ol type="1"><li>每次遍历可以得到一个连通分量， 遍历总次数 = 所有连通分量= 岛屿数量</li><li>使用visited 数组标识 已访问节点</li></ol><h3 id="深度搜索dfs">1.2.1. 深度搜索dfs</h3><ol type="1"><li><p>中止条件：</p><ol type="1"><li>节点访问过 ，<code>visited[i][j]  = true</code></li><li>节点没有相连，<code>g[i][j] = 0</code></li></ol></li><li><p>处理逻辑：</p><ol type="1"><li><p>开始对其节点遍历，将其标识为<code>true</code></p></li><li><p>对所有相邻节点遍历</p><blockquote><p>图中相邻节点是其上、下、左、右坐标</p></blockquote></li><li><p>对节点遍历之前需要对节点坐标进行检查</p></li></ol></li><li><p>返回值，没有返回值</p></li></ol><h3 id="广度搜索bfs">1.2.2. 广度搜索BFS</h3><ol type="1"><li><p>取出队列首元素，将其所有相邻节点加入队列中，依次遍历，直到队列中元素为空</p></li><li><p>使用<code>visited</code> 数组标识遍历过的节点</p><ol type="1"><li><p>在加入队列时，标记已访问</p><blockquote><p>加入队列时没有标记， 出队列时标记，下一个访问当前节点会再次放入队列中，多次遍历</p><figure><img src="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/20250124094043.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure></blockquote></li></ol></li></ol><h2 id="岛屿的最大面积">1.3. 岛屿的最大面积</h2><p>一次遍历 = 一个连通分量= 一个岛屿， 统计每次遍历过程中的最大遍历节点数量</p><blockquote><p>写<code>if-else</code>时， 尽可能把结果都包含在内，没有操作时再不写</p><ol type="1"><li>有节点遍历时，节点数量 +1</li><li>没有节点遍历时，节点数量初始为0</li></ol></blockquote><ol type="1"><li><code>dfs</code><ol type="1"><li>优先处理节点，进入函数后，首先操作本节点， <code>count</code>初始为0</li><li>优先处理相邻节点，须在进入下一节点时，就将下一个节点处理，count 初始为1</li></ol></li><li><code>bfs</code>，只有在加入队列时处理，处理的是当前节点，初始化为0</li></ol><h2 id="孤岛的最大面积">1.4. 孤岛的最大面积</h2><p>孤岛 = 四周没有与图的边沿相连</p><ol type="1"><li>将所有与陆地相连的岛都置为海洋</li><li>计算剩下岛的面积</li></ol><p>两个边沿， 从四个边沿开始遍历，遍历的节点置为0，使用grid作为标识，此时可不用visited</p><ol type="1"><li><code>[0][i]</code>, <code>[n-1][i]</code></li><li><code>[i][0]</code>, <code>[i][m-1]</code></li></ol><h2 id="水流问题">1.5. 水流问题</h2><p><a href="https://programmercarl.com/kamacoder/0103.水流问题.html#思路">求出能流向低处的节点</a></p><ol type="1"><li>暴力求解，求当前节点能否到达 边界</li><li>逆推， 从边界向上推，看左边界能到的哪些节点<code>firstBoard</code>，以及有边界<code>secondBoard</code></li><li>左右边界都能到达，为逆推结果</li></ol><h2 id="建造最大岛屿">1.6. 建造最大岛屿</h2><p><a href="https://programmercarl.com/kamacoder/0104.建造最大岛屿.html#思路">海洋中造出一块岛， 连接其他岛屿，组成最大面积</a></p><ol type="1"><li><p>首先统计每个岛屿的面积，并为每个岛屿附上标识，并建立标识对应的面积</p><blockquote><p>建立标识后，可以标识当前节点已被访问，可以用这个标识代替<code>visited</code></p></blockquote></li><li><p>统计 0 值附近所有岛屿面积的和，不同的岛屿需要去重</p></li><li><p>比较出最大值</p></li></ol><h2 id="岛屿的周长">1.7. 岛屿的周长</h2><p><a href="https://programmercarl.com/kamacoder/0106.岛屿的周长.html#思路">岛屿与海相邻的周长</a></p><p>岛的陆地是一个正方形，每一条边，与海洋相连都是陆地周长，因此可以<strong>使用图论的方法</strong>，而不是总时搜索</p><ol type="1"><li><p>陆地地界的边沿是有一块海洋，边长加1</p><blockquote><p>矩阵边沿也是海洋，也要统计</p></blockquote></li><li><p>每两块相邻的陆地都需要减去2个边沿，= 每相邻一块陆地，需要减去一个边沿</p><p>统计所有陆地<code>sum</code>,总边数<code>4*sum</code> ，统计相邻陆地数<code>cover</code>,减去边沿<code>cover</code></p><p>陆地边沿 = <code>sum*4 - cover</code></p></li></ol><h2 id="字符串接龙">1.8. 字符串接龙</h2><p><a href="https://kamacoder.com/problempage.php?pid=1183">字符串作为路径，广度搜索</a></p><figure><img src="/2025/08/30/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA1/20250317105155.png" alt="字符串接龙是无向图"><figcaption aria-hidden="true">字符串接龙是无向图</figcaption></figure><ol type="1"><li>无向图中可以使用<code>广度搜索</code>，找打目标节点，即为<code>最短路径</code></li><li>遍历时需要使用<code>visited</code>标识节点，避免循环，此时<code>visited</code>可以使用<code>set</code>标识，也可以使用<code>map</code>，同时标识走到这里的最短路径</li><li>对字符串的替换是对图可行路径的查找，找到了在集合中，标识找到了一条可行路径</li></ol><h2 id="邻接表遍历">1.9. 邻接表遍历</h2><p>邻接表中是以，节点作为数组元素，同时还有节点后指向 一个链表，指向与节点相连的节点</p><p><code>vector&lt;list&lt;int&gt;&gt; g(n+1)</code>，以数组序号作为节点元素，数组的<code>list</code>作为相邻链表</p><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 深搜和广搜中都需要对相邻节点的列表进行遍历</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">// list的遍历方法</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">//1. 指针</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span><span class="op">(</span><span class="kw">auto</span> it <span class="op">=</span> list<span class="op">.</span>begin<span class="op">()</span> <span class="op">;</span> it <span class="op">!=</span>  list<span class="op">.</span>end<span class="op">()</span> <span class="op">;</span> i<span class="op">++)&#123;&#125;</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="co">// 使用遍历</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span><span class="op">(</span><span class="kw">auto</span> i <span class="op">:</span> list<span class="op">)&#123;&#125;</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="co">// 不能使用类似vector 的for(int i = 0 ; i &lt; vector.size() ;i++)&#123;&#125;，list不能使用下标去访问</span></span></code></pre></div><h1 id="算法">2. 算法</h1><h2 id="并查集">2.1. 并查集</h2><p>含义： 一个集合中的元素指向同一个根节点， 根节点指向自身</p><ol type="1"><li>初始化，所有节点指向自身</li><li>插入时，将节点 -&gt; 该集合的<code>根节点</code><ol type="1"><li>如果是集合 插入 集合， 需要将集合 的<code>根节点</code> 指向 另一个集合的 <code>根节点</code></li></ol></li><li>比较时，比较两个元素的根节点是否相同</li><li>查找， 迭代查找根节点(指向自身的 节点)<ol type="1"><li>并查集的缩小： 在查找到根节点时， 将当前元素的<code>父节点</code>指向<code>根节点</code>，减少深度，加快查询</li></ol></li></ol><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> <span class="dv">1000</span><span class="op">;</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> father <span class="op">=</span> vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;(</span><span class="dv">1000</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> init<span class="op">(</span>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;&amp;</span> father<span class="op">)&#123;</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span> <span class="op">;</span> i<span class="op">&lt;</span> father<span class="op">.</span>size<span class="op">()</span> <span class="op">;</span> i<span class="op">++)&#123;</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        father<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> i <span class="op">;</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> find<span class="op">(</span>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> father<span class="op">,</span> <span class="dt">int</span> u  <span class="op">)&#123;</span></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span> u <span class="op">==</span> father<span class="op">[</span>u<span class="op">])</span> <span class="cf">return</span> u<span class="op">;</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span><span class="op">&#123;</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> u_father <span class="op">=</span> find<span class="op">(</span>father<span class="op">[</span>u<span class="op">]);</span></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>        father<span class="op">[</span>u<span class="op">]</span> <span class="op">=</span> u_father<span class="op">;</span></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 简化为 father[u] = find[u]</span></span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> u_father<span class="op">;</span></span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> isSame<span class="op">(</span>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> father<span class="op">,</span> <span class="dt">int</span> u<span class="op">,</span>  <span class="dt">int</span> v<span class="op">)&#123;</span></span><span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> u_father <span class="op">=</span> find<span class="op">(</span>u<span class="op">);</span></span><span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> v_father <span class="op">=</span> find<span class="op">(</span>v<span class="op">);</span></span><span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> u_father <span class="op">==</span> v_father<span class="op">;</span></span><span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> join<span class="op">(</span>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> father<span class="op">,</span> <span class="dt">int</span> u <span class="op">,</span> <span class="dt">int</span> v<span class="op">)&#123;</span></span><span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> u_father <span class="op">=</span> find<span class="op">(</span>u<span class="op">);</span></span><span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> v_father <span class="op">=</span> find<span class="op">(</span>v<span class="op">);</span></span><span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span>u_father <span class="op">==</span> v_father<span class="op">)</span> <span class="cf">return</span> <span class="op">;</span></span><span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 注意这里插入时，插入的是根节点，不是将u,v 插入</span></span><span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span> father<span class="op">[</span>v_father<span class="op">]</span> <span class="op">=</span> u_father<span class="op">;</span></span><span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><h2 id="无向图中是否有路径">2.2. 无向图中是否有路径</h2><ol type="1"><li>将所有的节点加入并查集中</li><li>查看节点<code>i, j</code> 是否重复出现在并查集中，如果是，那就有路径</li></ol><h2 id="无向图中冗余连接">2.3. 无向图中冗余连接</h2><ol type="1"><li>如果边<code>i, j</code> 冗余，=》 顶点<code>i,j</code>之前就插入在并查集中，具有相同的根</li><li>删除最后一个并查集相同根 的 两个节点组成的边</li></ol><h2 id="有向图中的冗余连接">2.4. 有向图中的冗余连接</h2><p>与<a href="#无向图中冗余连接">无向图</a> 不同，有向图冗余边有以下情况：</p><ol type="1"><li>入度为2 的节点， 一定会有两个边，删除其中1条</li><li>如果删除只有还是一个树 ， 这条边可以删除， = 所有节点可以组成并查集</li><li>如果不能构成树，那一定是一个环， 这个边就不是应该删除的边，应是零一条边</li><li>如果没有入度为1的节点，一定是有环图<ol type="1"><li>将节点依次加入并查集中，删除最后一个形成环的节点</li></ol></li></ol><blockquote><p>删除冗余的最后一条边</p><ol type="1"><li>成环的最后一条边 -&gt; 最后使得并查集冗余的边</li><li>节点度为2的边，二选一，选择最后一个插入列表的进行判断</li></ol></blockquote><h2 id="最小生成树">2.5. 最小生成树</h2><h3 id="prim">2.5.1. prim</h3><p>算法步骤：</p><p>初始化： <code>minDist</code>中<code>默认权重</code>不要超过 <code>最大值</code>，否则无法选择节点</p><ol type="1"><li>选择距离最小生成树最小的节点</li><li>将节点加入树中</li><li>更新其他节点到最小生成的距离</li></ol><p>使用数据结构<code>minDist</code> 保存节点到当前生成树的最短路径，</p><blockquote><ul><li>最终， <code>minDist</code>中保存着最小生成树的权值</li><li>isTree 记录当前节点是否在树中</li><li>parent 记录与其相连的节点， 记录生成树边</li></ul></blockquote><h3 id="kruscal">2.5.2. kruscal</h3><p>对所有边操作，之前邻接表，邻接矩阵都是对顶点的描述，这里需要定义关于边的数据结构</p><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> edge<span class="op">&#123;</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> e1<span class="op">;</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> e2<span class="op">;</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> w<span class="op">;</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span>Edge <span class="op">;</span> </span></code></pre></div><ol type="1"><li>将所有边保存</li><li>按照权重对边，从小到大<strong>排序</strong></li><li>对所有边遍历<ol type="1"><li>在同一个并查集中，跳过</li><li>在不同集合中，加入结果，并加入在同一个并查集中</li></ol></li></ol><h2 id="拓扑排序">2.6. 拓扑排序</h2><p><a href="https://programmercarl.com/kamacoder/0047.参会dijkstra朴素.html#思路">topology_sort</a></p><p>对于一个给定的有向图，转换为线性的排序； 图中有环时，不能做线性排序</p><p>=&gt; 节点入度为<code>0</code> 的时候，没有依赖，选择作为结果</p><blockquote><ul><li><code>拓扑排序</code>可以用于<code>有向图</code> 无环判断</li><li><code>无向图</code>的环判断可以使用<code>并查集</code>判断</li></ul></blockquote><ol type="1"><li><p>统计所有边入度， a-&gt;b， 统计<code>b</code>节点的度</p></li><li><p>选择度为0 的节点，加入待处理集中，可以使用<code>queue</code>作为待处理</p></li><li><p>删除节点<code>i</code>，并将其加入结果集中</p><blockquote><p>删除节点<code>i</code>，是删除与其相邻的节点，此时入度为0 ，只有<code>i-&gt;j</code>的边，将节点<code>j</code>入度 -1 即可</p></blockquote></li></ol><h1 id="最短路径">3. 最短路径</h1><h2 id="单源最短路径dijkstra">3.1. 单源最短路径Dijkstra</h2><p>选择 节点<code>i</code> 到<strong>原点</strong>的最近距离</p><blockquote><p>prim 寻找节点<code>i</code>到<strong>生成树</strong>的最近距离，原理相同，不过<code>minDist</code>存放值不同1</p></blockquote><ol type="1"><li><p>选择距离源点最近的节点</p><blockquote><p>dijkstra 的源点到 源点的距离为<code>0</code>，初始化源点为0</p><p>prim 初始树没有生成，初始节点均为<code>INT_MAIX-1</code>(方便选择第一个节点)</p></blockquote></li><li><p>将节点插入结果集中，标志为已访问</p></li><li><p>更新节点相邻节点 的 <code>minDist</code></p></li></ol><p>借助三个数组：</p><ol type="1"><li><code>minDist[j]</code>: <code>j</code>到源点的最小值</li><li><code>visited[j]</code>： <code>j</code>是否已找到最小值</li><li><code>parent[j]</code>: 与<code>j</code>相连的父节点，每次更新最小值时，更新</li></ol><h3 id="使用边进行dijkstra">3.1.1. 使用边进行Dijkstra</h3><p>其中有两处修改</p><ol type="1"><li><p>使用邻接表代替邻接矩阵</p></li><li><p>使用堆排序选择 距离源点最近的节点</p><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>cur <span class="op">=</span> q<span class="op">.</span>top<span class="op">()</span> <span class="op">;</span><span class="co">// 最小的距离节点</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>q<span class="op">.</span>pop<span class="op">();</span></span></code></pre></div><p>替换掉使用<code>for</code>对<code>minDist</code>的遍历，查找最小距离节点</p></li><li><p>遍历中，使用对边遍历，代替对节点遍历，</p><div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">(!</span>q<span class="op">.</span>empty<span class="op">())</span> <span class="co">// 所有的边都保存在q中</span></span></code></pre></div></li></ol><p>修改之后使用的数据结构：</p><ol type="1"><li><code>priority_queue&lt;Arc, vector&lt;Arc&gt; , greater&lt;Arc&gt;&gt;</code> 对边权重的小顶堆</li></ol><blockquote><p>小顶堆中a &lt; b，需要使用 &gt;</p><ol type="1"><li><p>重定义Arc中的<code>&gt;</code> ，使其能够 <code>&gt;</code>比较运算</p></li><li><p>使用greater<arc> ，使用<code>&gt;</code></arc></p><p>也可以重定义一个比较类，替换2</p></li></ol><p>比较类写法：</p><div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Arc<span class="op">&#123;</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span><span class="op">:</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> node<span class="op">;</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> w<span class="op">;</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// &gt; 紧跟在operator之后</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 参数使用 const + &amp;</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 函数需要使用const </span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">bool</span> <span class="kw">operator</span><span class="op">&gt;(</span><span class="at">const</span> Arc<span class="op">&amp;</span> other<span class="op">)</span> <span class="at">const</span><span class="op">&#123;</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="kw">this</span><span class="op">-&gt;</span>w <span class="op">&gt;</span> other<span class="op">.</span>w<span class="op">;</span></span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;;</span> </span></code></pre></div></blockquote><h2 id="bellman-ford算法">3.2. Bellman-ford算法</h2><p>可以用于解决具有负权边的结果 ， 对边进行缩放，此时可以只存储边</p><blockquote><p>dijskra不能处理具有负权边的结果， 使用的是贪心算法，选择当前最近的边，对 负权边忽视最优结果</p></blockquote><p>Bellman-ford算法类似于动态规划的算法， <code>minDist[i] = min(minDist[i] ,  minDist[j-1] + value)</code>,</p><p>通过<code>n-1</code> 次迭代， 一定能找到最小边</p><ol type="1"><li><p>遍历<code>n-1</code>次</p></li><li><p>对所有边进行一次修改，每次修改更新最小边</p><p>如果<code>from</code> 节点 = <code>INT_MAX</code> ，没有到达<code>from</code> 节点，此时不修改<code>MinDist</code>结果</p></li></ol><h3 id="动态规划思想">3.2.1. 动态规划思想</h3><p><code>dp[k][j]</code> 是最多 <code>k</code>条边经过的最短路径，有两种计算结果</p><ol type="1"><li>刚好<code>k</code>次到达最短路径，<code>dp[k-1][v] +  weight</code>， <code>v</code>是能到达 <code>j</code>的节点</li><li>前<code>k-1</code>次已经到达最短路径， <code>dp[k-1][j]</code></li></ol><blockquote><p><code>dp[k][j] = min(dp[k-1][j] , min(dp[k-1][v]))</code></p></blockquote><h3 id="bellman-ford-队列优化算法">3.2.2. Bellman-ford 队列优化算法</h3><p>边<code>i-j</code> 中，只有<code>minDist[i]</code> 的权重发生改变，相邻的<code>minDist[j]</code>才需要发生改变， 与<code>i</code>相邻的所有节点都需要更新，此时使用<code>邻接表</code>存储图效果最好</p><p>此时，使用队列<code>queue</code>存放节点<code>i</code>， 作为待处理节点</p><p>同一节点可能未处理之前，可能被修改对此，因此使用<code>visited</code>数组，标识节点是否在队列中，在队列中不需要重复加入</p><blockquote><p>注意： 优化算法只对较少边的情况进行优化， 如果边的数量较多时，优化算法因为<code>queue</code>操作不适合优化</p></blockquote><h3 id="bellman-ford-判断负权回路">3.2.3. Bellman-ford 判断负权回路</h3><p><a href="https://programmercarl.com/kamacoder/0095.城市间货物运输II.html#思路">判断是否有回路，且值为负数权重</a></p><ol type="1"><li>由<a href="#Bellman-ford算法"><code>Bellman_ford</code>算法原理</a> 中， 松弛<code>n-1</code>次后， <code>minDist</code>结果不再发生改变</li><li>所有再多遍历一次，如果在第<code>n</code>后，还发生改变，那么一定出现了<code>负权回路</code></li></ol><h3 id="有限制的最短路径">3.2.4. 有限制的最短路径</h3><p><a href="https://programmercarl.com/kamacoder/0096.城市间货物运输III.html#思路">从<code>i- j</code> 限制经过<code>k</code>个节点</a> = 可以经过<code>k+1</code>条边</p><p><code>minDist</code>经过<code>k</code>轮松弛，得到最大长度为<code>k</code>的最短路径， 因此原题 = 经过<code>k+1</code>次最短路径得到的结果</p><p>但是由于算法采用了滚动数组， 导致第<code>i</code>条边应在第<code>i</code>轮更改，却在之前轮数中，修改，因此需要保留上一轮的数据，下一轮必须使用上一轮进行修改，保证结果正确性。</p><ol type="1"><li>使用缓存数组 存放 上一组中的最短路径</li><li>下一组计算时，需使用上一组的数据进行修改</li></ol><h4 id="dp-求解">3.2.4.1. DP 求解</h4><ol type="1"><li><p><code>dp[i][j]</code> 标识经历<code>i</code>条边，到达第<code>j</code>点的最短路径</p></li><li><p><code>dp[i][j]</code>的计算方式</p><ol type="1"><li>不经历 第<code>i</code>条边，可以到达<code>j</code>点， <code>dp[i-1][j]</code></li><li>经历第<code>i</code>条边，遍历所有<code>from-&gt;j</code>的边, 因<code>from</code>是到达的第<code>i-1</code>条边， 结果为<code>dp[i-1][from] + w</code></li></ol><p>两者最选择，取最小值</p></li><li><p>初始化，起始节点第<code>0</code>轮一定为0，其余初始化为<code>INT_MAX</code>,便于遍历</p></li><li><p>遍历顺序： 第一轮迭代次数 = 经历<code>k</code>条边，第二轮遍历所有节点即可</p></li></ol><h4 id="使用queue优化">3.2.4.2. 使用queue优化</h4><p>最主要问题： 统计迭代次数，并且使用上一次的计算结果算本次的更新结果</p><ol type="1"><li>使用<code>old_minDist</code>, <code>q_size</code>在每次迭代之前，统计上一次的迭代结果</li><li>结束上一次迭代中待更新的所有节点后，停止本次迭代， 迭代数量-1， 统计下一个迭代</li></ol><h2 id="多源最短路径算法floyd">3.3. 多源最短路径算法Floyd</h2><p>算法可以同时计算出<code>多个起源</code>到<code>各个终点</code>的距离，使用动态规划的思想</p><ol type="1"><li><p><code>dp[i][j][k]</code> 节点<code>i</code> -&gt; <code>j</code>经过经过<code>[0,k]</code>中节点的最短路径</p></li><li><p><code>dp[i][j][k]</code> 中<code>i-&gt;j</code>最短路径有两种计算方法：</p></li><li><p>经过<code>k</code>节点， 即分为两段<code>i-&gt;k-&gt;j</code>， 计算公式为<code>dp[i][k][k-1] + dp[k][j][k-1]</code></p></li><li><p>不经过<code>k</code>节点，从<code>k-1</code>节点经过，计算公式为<code>dp[i][j][k-1]</code></p><p>从中选择最优方案，<code>min(1, 2)</code></p></li><li><p>初始化：</p><ol type="1"><li>dp 有<code>k=0</code>时计算，初始<code>dp[i][j][0]</code>，经过0个节点，即为初始图路径值</li><li><code>dp[i][j][0]</code>其余边初始为最大值，便于比较出最小值</li></ol></li><li><p>遍历顺序：</p><ol type="1"><li><code>k</code>层计算依赖于<code>k-1</code>，所有优先计算出<code>k-1</code>层，<code>k</code>在第一层，从小向大遍历</li></ol></li></ol><h1 id="搜索算法">4. 搜索算法</h1><h2 id="a算法">4.1. A*算法</h2><ol type="1"><li>设计启发函数，由启发函数计算值为节点的选取增加权重</li><li>每次选择节点时，依照权重选择节点</li></ol><p>使用A*算法优化广度搜索算法(还可以优化Dijkstra算法)，</p><blockquote><p>广度搜索算法，每次出队相当于取出节点，在这里为出队的节点增加权重，每次出队按照权重低的出队</p></blockquote><ol type="1"><li>建立优先队列，从小到大排序，每次取出权重最小的节点</li><li>每次加入队列时，计算启发函数作为权重值</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础知识</title>
      <link href="/2025/08/28/c/base_study/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2025/08/28/c/base_study/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识">1. 基础知识</h1><h2 id="union联合体">1.1. Union联合体</h2><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">union</span><span class="op">&#123;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    linkNode link<span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    NetNode net<span class="op">;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span>LinkOrNet</span></code></pre></div><p>结构体中有两个变量，但是只能有一个变量占据内存</p><p>c++17 中替代方案variant</p><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;variant&gt;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>varient<span class="op">&lt;</span>linkNode<span class="op">,</span> NetNode<span class="op">&gt;</span> a<span class="op">;</span> </span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>LinkNode b<span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>a<span class="op">=</span> b<span class="op">;</span> <span class="co">// 自动追踪</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划">1. 动态规划</h1><p><strong>感谢<a href="https://programmercarl.com/">代码随想录</a></strong></p><p>解题思路</p><ol type="1"><li>确定<code>dp</code>数组及其下标的含义</li><li>确定<code>dp</code>数组</li><li>确定如何初始化 ，和<code>dp</code>数组的遍历顺序</li><li>举例推导<code>dp</code>数组</li></ol><p>验证dp数组的Bug时</p><ol type="1"><li>打印程序日志</li><li>自行推导<code>dp</code>数组</li><li>检查<code>dp</code>数组与程序中哪里出现错误，对错误地方重点检查</li></ol><h2 id="斐波拉契数列">1.1. 斐波拉契数列</h2><ol type="1"><li><code>dp</code>是数列的值</li><li><code>dp[i] = dp[i-1]+ dp[i-2]</code>;</li><li>初始化<code>0，1</code>即可</li><li><strong>注意</strong>：题目中要求计算<code>n</code>的值，对应<code>f(n)</code>的值，不是<code>n-1</code></li></ol><h2 id="跳台阶最省力方法">1.2. 跳台阶最省力方法</h2><ol type="1"><li><code>dp[i]</code>是第i层台阶使用的力气，dp需要从<code>dp[i-1]</code> 与 <code>dp[i-2]</code>之间选择体力最小的值</li><li>题目中，从第0，1阶开始跳，初始值可以为0；</li><li>从前向后遍历</li></ol><h2 id="路径问题">1.3. 路径问题</h2><h3 id="深度搜索">1.3.1. 深度搜索</h3><h3 id="dp算法">1.3.2. dp算法</h3><ol type="1"><li><p><code>dp[i][j]</code>是到达i,j 的所有方法</p></li><li><p>因为只能i, j只能左边<code>dp[i-1][j]</code>和上面<code>dp[i][j-1]</code>共同决定，所以dp由两数之和决定</p></li><li><p>第一行和第一列只能由一种方法到达，初始化为1；</p></li><li><p>从前向后遍历</p></li><li><blockquote><p>因为dp是由上方和左边+1组成，可以使用一维累加数组完成dp数组的效果</p></blockquote></li></ol><h3 id="使用图论">1.3.3. 使用图论</h3><p>移动需要走M+n-2中方法，且其中需要走m-1中向下的步数，结果为<span class="math inline"><em>C</em><sub><em>m</em> + <em>n</em> − 2</sub><sup><em>m</em> − 1</sup></span></p><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20201209113602700-20230310120944078.png" alt="62.不同路径"><figcaption aria-hidden="true">62.不同路径</figcaption></figure><p>由于阶乘数字较大，先求分子分母阶乘会超过long long 类型，所以边计算分子边计算分母</p><ol type="1"><li>如果能够整除分母，且分母没有除完，选择除以分母</li><li>并且分子分母相加相减方向相同，尽快除以分母</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> high <span class="op">=</span> m<span class="op">-</span><span class="dv">1</span><span class="op">;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> low <span class="op">=</span> m<span class="op">+</span>n<span class="op">-</span><span class="dv">2</span><span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> denominator <span class="op">=</span> high<span class="op">;</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="dt">long</span> <span class="dt">long</span> numerator <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">// 求分母</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">1</span> <span class="op">;</span> i<span class="op">&lt;=</span> high <span class="op">;</span>i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    numerator<span class="op">*=</span> low<span class="op">;</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span><span class="op">(</span>denominator<span class="op">&gt;</span><span class="dv">0</span> <span class="op">&amp;&amp;</span> numerator<span class="op">%</span>denominator<span class="op">==</span><span class="dv">0</span><span class="op">)&#123;</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        numerator<span class="op">/=</span> denominator<span class="op">;</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        denominator<span class="op">--;</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    low<span class="op">--;</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="cf">return</span> numerator<span class="op">;</span></span></code></pre></div><h2 id="有障碍的路径规划">1.4. 有障碍的路径规划</h2><ol type="1"><li><code>dp[i][j]</code>表示i, j 位置的路径选择方法， 所以当有障碍物时，无法到达这里，此时<code>dp[i][j]=0</code>,其余位置照常计算</li></ol><blockquote><p>牢牢记住dp的定义，如有异常情况，将dp值写出</p></blockquote><h2 id="整数拆分">1.5. 整数拆分</h2><p>整数从i 拆分后分为i, n-i;</p><p>最大值取值有两个选择：</p><ol type="1"><li><span class="math inline"><em>i</em> * (<em>n</em> − <em>i</em>)</span>，不进行下一轮的划分</li><li>$ i* 对(n-i)划分后的最大乘积$，因为i会从0-i 都会分割一次，所以只用对(n-i）进行划分，因为在遍历过程中都会遍历到</li><li>其中2中的第二部分为问题1的子集，使用dp求解</li></ol><p><code>dp[i] = max(dp[i],max(i*j,  j*dp(i-j)))</code></p><p>因为dp[i] 被计算多次，最后需选择最大值，所以对dp[i]求最大值</p><h2 id="二叉搜索树数量">1.6. 二叉搜索树数量</h2><ol type="1"><li><p>n个数组成二叉搜索树，以j为中间节点<code>1....j ....n</code></p><p>j左边有<code>j-1-1+1= j -1</code>个数字，构成二叉搜索树，数量为<code>dp[j-1]</code> j右边有<code>n - j-1+1 =n-j</code>个数字,构成二叉搜索树，数量为<code>dp[n-j]</code></p></li><li><p>左右子树为树的子问题, <code>dp[i] += dp[j-1]*dp[i-j]</code></p></li><li><p>初始化dp[0] =1;</p></li><li><p>遍历顺序为从前向后，遍历</p></li></ol><h1 id="背包问题">2. 背包问题</h1><h2 id="背包">2.1. 0-1背包</h2><ol type="1"><li>每种物品只能选择一个</li></ol><p><code>dp[物品i][重量w]</code> 表示当前 <code>物品i</code> 与<code>前面的物品[0-(i-1)]</code> 在<code>重量为w</code>情况下的最大价值</p><p>dp，当<code>重量j</code>足够放下<code>物品i</code>计算途径有两种</p><ol type="1"><li>放入，总重量为<code>j - w[i]</code> 时的最大价值，加上 <code>物品i</code> 的<code>价值v</code></li><li>不放入，总重量为上一个<code>物品i-1</code>在<code>重量j</code>情况下选择结果的最大值</li></ol><p><code>dp[i][j]</code>从以上选择最大结果，<code>dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]])+value[i]</code></p><ol start="2" type="1"><li>初始化，对于第一个放入物品情况初始化</li><li>遍历，从前向后遍历，重量可以等于总重量</li></ol><h2 id="数组分为两个相同的数组">2.2. 数组分为两个相同的数组</h2><ol type="1"><li>数组分的数组和界限为<code>sum/2</code>，等价为背包所能装的<code>总的质量</code><ol type="1"><li><code>每一个数字</code> =<code>放入的物品</code>，放入进去相当于有了重量</li><li>放入进去后，物品的总价值累加，等于sum/2 时，背包正好被放满</li></ol></li></ol><h2 id="压石机">2.3. 压石机</h2><p><a href="https://programmercarl.com/1049.最后一块石头的重量II.html#思路">使最后一块石头重量最小</a></p><p>两两组合使得质量最小 = 将石头分为两堆， 第一堆减去第二堆尽可能小 = 两石堆的质量差距相同</p><p>回到<a href="#数组分为两个相同的数组">问题2</a>中</p><p>现在将二维dp数组使用一维滚动数组代替</p><ol type="1"><li>先遍历物品，再遍历质量，因为dp[0-i]之前的数据是上一轮迭代结果，dp[i]需使用之前的数据，所有从后先前迭代</li><li>先遍历质量，再遍历物品，遍历得到当前质量j 下放下物品的最大价值，需计算出之前的数据，才能计算下一个质量下的最优值，所以必须从后向前迭代</li></ol><p>第二种遍历方式错误，会造成物品选择两次</p><h2 id="目标和">2.4. 目标和</h2><p><a href="https://programmercarl.com/0494.目标和.html#算法公开课">目标和</a></p><ol type="1"><li>将目标和转换为 <strong>数据求和等于某个值</strong>n</li><li>相当于将数值放入其中，可以得到值n</li></ol><p>和为<code>x</code>, 差的和为<code>sum -x</code> ,所以 <code>x- sum+x = target</code>，求出<code>x = (target+sum)/ 2</code>， 所以目标和为<code>(target+sum)/ 2</code></p><ol type="1"><li><p><code>dp[i][j]</code>是目标和为j 时选择i ，有多少组合方法</p></li><li><p>dp的组合方式</p><ol type="1"><li>选择i ， 则方法总数为上一个数字总和为j - num[i], 即<code>·dp[i-1][j-nums[i]]</code></li><li>不选择i，则方法总数为上一数字总和为<code>j</code> ,即<code>dp[i-1][j]</code></li></ol><p>总方法=<code>1+2</code></p></li><li><p>初始化：</p><ol type="1"><li>对于第一个数字，只有一种j 有一种方法，其余方法数为0；</li><li>对于剩余数字，当j = 0时，总数为0数字的2*n;</li></ol></li></ol><h2 id="字串">2.5. 0-1字串</h2><p><a href="https://programmercarl.com/0474.一和零.html#思路">0-1</a></p><p>一个字符串<code>strs= ["10", "0001", "111001", "1", "0"]</code>,求出有m个0， n个1的最大子集元素个数</p><p>此时题目相当于m,n相当于背包的重量，总重量小于m、n两个维度，字符串相当于物品，字符串0、1个数相当于每个物品的质量。</p><p>此时可以使用0-1背包</p><p>推荐使用滚动数组解决0-1背包问题</p><ol type="1"><li>初始化时将初始值置为0</li><li>优先物品遍历，质量遍历时使用倒序遍历</li></ol><h1 id="完全背包问题">3. 完全背包问题</h1><ol type="1"><li><p>背包物品数量有无穷多个，可以重复选择</p></li><li><p><code>dp[i][j]</code>公式含义： 第<code>i</code>个物品，在重量<code>j</code>条件下物品的最大价值</p></li><li><p><code>dp[i][j]</code>计算方式</p><ol type="1"><li>选择<code>i</code>, 预留重量<code>j- weight[i]</code>， 且背包中仍有<code>i</code>（区别0-1背包）， <code>dp[i][j- weight[i]]</code></li><li>不选择<code>i</code>, 不预留质量，不选择<code>i</code>,背包中只有<code>i-1</code>物品的最大值， <code>dp[i-1][j]</code></li></ol><p><code>dp[i][j] = max(dp[i][j- weight[i]], dp[i-1][j])</code></p></li><li><p>初始化</p><ol type="1"><li>对<code>i = 0</code>初始化</li><li>对<code>j = 0</code> 初始化</li></ol></li></ol><h2 id="零钱兑换">3.1. 零钱兑换</h2><p>此时求得是总的组合数，不是最大价值，<code>dp[i][j]</code> 是由<code>i</code> 是否选择两种情况组合的和</p><ol type="1"><li><code>dp[i][j] = dp[i][j- weight[i]] + dp[i-1][j]</code></li><li>初始化<ol type="1"><li>第一行初始化，如果可以整除，则有组合方式，初始化为1</li><li>第一列初始化，重量&gt;1 ,则重量=0时，只有一种组合方式，初始为1</li></ol></li></ol><blockquote><p>&lt; int &lt; unsigned int &lt; long long &lt; unsigned long long</p><table><colgroup><col style="width: 10%"><col style="width: 15%"><col style="width: 15%"><col style="width: 29%"><col style="width: 30%"></colgroup><thead><tr class="header"><th></th><th>int</th><th>unsigned int</th><th>long long</th><th>unsigned long long</th></tr></thead><tbody><tr class="odd"><td><cstdint></cstdint></td><td>int32_t</td><td>uint32_t</td><td>int64_t</td><td>uint64_t</td></tr><tr class="even"><td>范围</td><td>2,147,483,647</td><td>4,294,967,295</td><td>9,223,372,036,854,775,807</td><td>18,446,744,073,709,551,615</td></tr><tr class="odd"><td>十进制</td><td>2e9</td><td>4e10</td><td>9.2e18</td><td>1.8e19</td></tr></tbody></table></blockquote><h3 id="使用一维dp数组">3.1.1. 使用一维dp数组</h3><ol type="1"><li>使用滚动数组 <code>dp[j] = dp[j] + dp[j- weight[i]]</code><ol type="1"><li>不选择时<code>nochoose = dp[j]</code></li><li>选择时 <code>choose = dp[j-weight[i]]</code></li></ol></li><li>初始化<ol type="1"><li>dp[0] 只有一种组合方式，初始化为1</li></ol></li><li>遍历顺序<ol type="1"><li>先遍历物品，在遍历质量，是组合<ol type="1"><li>且遍历质量时，需<strong>顺序遍历</strong>，此时可以放置多个同一物品，需使用到之前的数据，</li></ol></li><li>先遍历质量，再遍历物品，是排列数量</li></ol></li></ol><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr class="header"><th>先遍历物品，再遍历质量</th><th>先遍历质量，再遍历物品</th></tr></thead><tbody><tr class="odd"><td>先放物品<code>i</code> ，再放入物品<code>i+1</code>，有放入顺序，排除顺序不同的情况，计算的是组合数</td><td>先计算出当前质量下所有物品的最大值，表示质量<code>j</code>所有组合情况，没有顺序问题，是排列数</td></tr></tbody></table><h2 id="求出排列数量">3.2. 求出排列数量</h2><p><a href="https://programmercarl.com/0377.组合总和Ⅳ.html#算法公开课">求出排列数量</a>有两种思路</p><ol type="1"><li><p>完全背包的排列问题：</p><ol type="1"><li><p>先遍历质量，再遍历物品， 可以得到排列数量</p></li><li><p>爬楼梯</p></li><li><p>爬到第<code>i</code> 层的值，等于之前能够爬到<code>i</code>的所有选择之和</p><p>$ dp[i] = {dp[i- 能到i的跳跃次数]} 总和$</p></li><li><p>题目中用于跳跃到n的次数= 数组中用于相加等于n 的所有元素</p></li></ol></li></ol><h2 id="爬楼梯-完全背包排列问题">3.3. 爬楼梯 = 完全背包排列问题</h2><p>爬n阶台阶，每次能爬m 阶，两种思路解决</p><ol type="1"><li><p>n阶台阶 = 背包总容量，m阶台阶是每次选择的物品质量，<code>价值 = 重量 = j</code>。dp[j]是装满<code>j</code>层的方法总数</p><p><code>dp[i] += dp[i-j]</code></p><p>完全背包问题，优先遍历质量，再遍历物品</p></li><li><p>爬到<code>i</code> 层是之前<code>i-m</code> 层所有爬楼方法的总和,</p><p><code>dp[i]  += dp[i-j]</code></p></li></ol><h2 id="零钱兑换的最小方法数">3.4. 零钱兑换的最小方法数</h2><p><a href="https://programmercarl.com/0518.零钱兑换II.html">零钱兑换</a></p><ol type="1"><li><code>dp[j]</code> 兑换<code>j</code>所需的金币数量</li><li><code>dp[j]</code> 由其 <code>dp[i- coins[i]]</code>兑换到当前值 的最小方法决定<ol type="1"><li><code>dp[j] = min(dp[j], dp[j- coins[i]])</code></li></ol></li><li>初始化，需比较最小值，需将<code>dp[j]</code> 初始化为<code>UINT64_MAX</code><ol type="1"><li><code>dp[0]</code> 方法数为0，初始化为0</li></ol></li><li>此时不是求总的组合数 / 排列数，任意顺序遍历均可</li></ol><h2 id="完全平方数">3.5. 完全平方数</h2><p><a href="https://programmercarl.com/0279.完全平方数.html#算法公开课">完全平方数</a></p><ol type="1"><li>dp与上一相同</li></ol><h2 id="字串拆分">3.6. 字串拆分</h2><p><code>i</code> 是需要达到的楼梯，</p><p><code>0-(i-1)</code>是能够到达<code>i</code>之前所有的楼梯，对这些元素遍历，并检查 <code>j - i</code> 之间能否跳到<code>i</code></p><p><code>dp[i] = dp[j] &amp;&amp; (i-j)能否到达</code></p><blockquote><p>切分<code>(i-j)</code> ，切记<code>i.j</code>均是加1 后的结果， 那么<code>j = j'+1</code>，起始位置为<code>j'+1</code> ,即为<code>j</code>, 总长度为<code>i' - j+1</code>= <code>i -1-j+1</code> = <code>i-j</code></p><p>切分范围为(j, i-j)</p></blockquote><h3 id="回溯遍历使用数组保存状态">3.6.1. 回溯遍历，使用数组保存状态</h3><p>使用memory保存状态，之后可以直接使用</p><h1 id="多重背包问题">4. 多重背包问题</h1><p>多重背包问题 = 物品展开的0-1背包问题</p><table><thead><tr class="header"><th>重量</th><th>价值</th><th>数量</th><th></th></tr></thead><tbody><tr class="odd"><td>物品0</td><td>1</td><td>15</td><td>2</td></tr><tr class="even"><td>物品1</td><td>3</td><td>20</td><td>3</td></tr><tr class="odd"><td>物品2</td><td>4</td><td>30</td><td>2</td></tr></tbody></table><table><thead><tr class="header"><th>重量</th><th>价值</th><th>数量</th><th></th></tr></thead><tbody><tr class="odd"><td>物品0</td><td>1</td><td>15</td><td>1</td></tr><tr class="even"><td>物品0</td><td>1</td><td>15</td><td>1</td></tr><tr class="odd"><td>物品1</td><td>3</td><td>20</td><td>1</td></tr><tr class="even"><td>物品1</td><td>3</td><td>20</td><td>1</td></tr><tr class="odd"><td>物品1</td><td>3</td><td>20</td><td>1</td></tr><tr class="even"><td>物品2</td><td>4</td><td>30</td><td>1</td></tr><tr class="odd"><td>物品2</td><td>4</td><td>30</td><td>1</td></tr></tbody></table><p>相当于先遍历物品，再遍历物品的个数，再遍历背包(遍历物品个数在内部也一样)</p><blockquote><p>物品<code>i</code> ， 质量为<code>j</code>, 最大数量为<code>k</code></p><p><code>dp[i][j]</code> 对于总重量<code>j</code>有两种计算方式</p><ol type="1"><li>不装： <code>dp[i-1][j]</code></li><li>装k个：<code>dp[i-1][j-k*weight[i]] +  k*value[i]</code></li><li>初始化：<ol type="1"><li><code>j = 0</code> 一列全部为0</li><li><code>i =</code></li></ol></li></ol><p>初始化，与取值都是错误的，二维数组很复杂</p></blockquote><p>建议使用滚动数组</p><p>物品<code>i</code> ， 质量为<code>j</code>, 最大数量为<code>k</code></p><p><code>dp[j]</code> 是物品<code>i</code>对于总重量<code>j</code>有两种计算方式</p><ol type="1"><li>不装： <code>dp[j]</code></li><li>装k个：<code>dp[j-k*weight[i]] +  k*value[i]</code></li></ol><p>如果先遍历物品再遍历质量时，此时每次放入一个，<strong>不再需要乘上系数<code>k</code></strong></p><h1 id="打家劫舍问题">5. 打家劫舍问题</h1><ol type="1"><li><p><code>dp[i]</code> 是第<code>i</code> 家可以打劫到的最大金额</p></li><li><p><code>dp[i]</code>可以选择偷 / 不偷</p></li><li><p>偷的话，需要偷<code>i-2</code>之前房屋的金额，加上第<code>i</code>家的前</p><p><code>dp[i-2]+ nums[i]</code></p></li><li><p>不偷的话，第<code>i-1</code>家可以被偷，所以第<code>i</code>的情况 = 第<code>i-1</code>家是否被偷的情况</p><p><code>dp[i] = dp[i-1]</code></p></li></ol><p><code>dp[i] = max(d[i-2]+ nums[i],  dp[i-1])</code></p><ol start="3" type="1"><li><p>初始化，需要初始化第0，1 家</p><ol type="1"><li>dp[0] = nums[0], dp[1] = max(dp[0] , dp[1]);</li></ol></li><li><p>遍历顺序，从前向后</p></li></ol><h2 id="成环的打家劫舍">5.1. 成环的打家劫舍</h2><p><a href="https://programmercarl.com/0213.打家劫舍II.html#思路">成环</a></p><p>成环后，将首尾分开讨论</p><ol type="1"><li><p>不偷头，那么最后一间可以被偷</p><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20210129160842491-20230310134008133.jpg" alt="不偷第一家"><figcaption aria-hidden="true">不偷第一家</figcaption></figure></li><li><p>不偷尾，那么第一间房间可以被偷</p><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20210129160821374-20230310134003961.jpg" alt="不偷最后一家"><figcaption aria-hidden="true">不偷最后一家</figcaption></figure></li></ol><p>求两次的能偷的最大价值，比较，返回最大值</p><h2 id="二叉树的打家劫舍">5.2. 二叉树的打家劫舍</h2><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20210223173849619.png" alt="二叉树"><figcaption aria-hidden="true">二叉树</figcaption></figure><p>树的后序遍历，统计孩子们偷钱，再由中间节点统计</p><ol type="1"><li>截至条件：<ol type="1"><li>到NULL节点，偷的最大值为0</li><li>到叶子节点，偷的最大值是当前值</li></ol></li><li>处理逻辑<ol type="1"><li>根节点偷<ol type="1"><li>跳过左右孩子，计算从左右孙子偷到的金额</li></ol></li><li>根节点不偷<ol type="1"><li>计算左右孩子偷盗的金额</li></ol></li><li>选择哪一个值更大，选择偷拿个</li><li>使用记忆化存储，使用<code>map&lt;root, val&gt;</code>,保存已访问节点的最大值，后续访问节点时，直接返回保存值</li></ol></li></ol><h3 id="树形的dp">5.2.1. 树形的dp</h3><p><code>dp[i]  取决于 i 的左右节点的dp[i-&gt;left], dp[i-&gt;right]</code></p><ol type="1"><li>截至条件，所以函数需要返回孩子节点的选择状态&lt;不偷，偷&gt;<ol type="1"><li>到NULL节点，返回&lt;0,0&gt;</li></ol></li><li>处理逻辑：<ol type="1"><li>当前节点偷，choose = val + 左右孩子不偷</li><li>当前节点不偷，可以考虑左右节点是否偷，nochoose = max(左孩子选择)+max(右孩子选择)</li></ol></li></ol><h1 id="股票问题">6. 股票问题</h1><blockquote><p>同一个<code>i</code>有两种状态， 状态之间互相推导</p></blockquote><ol type="1"><li><p>第<code>i</code>天有两种状态， 持有股票 / 不持有股票， 分别设置为 <code>dp[i][0]/ dp[i][1]</code></p></li><li><p>第<code>i</code>天持有股票，可由两种方式推导</p><ol type="1"><li><p>第<code>i-1</code> 持有股票</p></li><li><p>第<code>i-1</code>不持有股票，第<code>i</code>天购购入(因为之前没有购入股票，一切为0)</p></li><li><blockquote><p><code>dp[i][0] = max(dp[i-1][0],  - price[i])</code></p><p>如果之前卖出了股票，就成了由不持有股票状态<code>dp[i-1][1]-price[i]</code></p></blockquote></li></ol><p>第<code>i</code>天不持有股票，由两种方式推导</p><ol type="1"><li><p>第<code>i-1</code>不持有股票</p></li><li><p>第<code>i-1</code>天持有股票， 第<code>i</code>购入股票</p></li><li><blockquote><p><code>dp[i][1] = max(dp[i-1][1], dp[i-1][0] - price[i])</code></p></blockquote></li></ol></li><li><p>dp公式初始化，所有由第一天的状态组成，初始化</p><ol type="1"><li>第一天持有股票<code>dp[0][0] = -price[0]</code></li><li>第一天不持有股票 <code>dp[0][1] = 0</code></li></ol></li><li><p>遍历顺序，从前向后遍历</p></li></ol><h2 id="有限次购买股票">6.1. 有限次购买股票</h2><p><strong>问题：</strong><code>dp</code>数组由多种不同的状态，且不同状态之间互相推导</p><p><strong>解决方法：</strong> 找出所有可能的状态，并推导不同状态之间的公式</p><p>最多有<code>n</code>次购买股票，可以设置五种状态</p><table><thead><tr class="header"><th>0</th><th>没有操作</th><th><code>dp[i][0]</code></th></tr></thead><tbody><tr class="odd"><td>1</td><td>第一次持有股票</td><td><code>dp[i][1]</code></td></tr><tr class="even"><td>2</td><td>第一次不持有股票</td><td><code>dp[i][2]</code></td></tr><tr class="odd"><td>3</td><td>第二次持有股票</td><td><code>dp[i][3]</code></td></tr><tr class="even"><td>4</td><td>第二次不持有股票</td><td><code>dp[i][4]</code></td></tr></tbody></table><ol type="1"><li><p>第一次持有股票</p><ol type="1"><li><p>第<code>i-1</code>第一次持有股票</p></li><li><p>第<code>i</code>天没有操作状态购入股票</p></li></ol></li><li><p>第一次不持有股票</p><ol type="1"><li>第<code>i-1</code>天不持有股票</li><li>第<code>i-1</code>天 持有股票后，第<code>i</code>天卖出股票</li></ol></li><li><p>第二次持有股票</p><ol type="1"><li>第二次持有股票</li><li>第<code>i-1</code>天第一次不持有股票，第<code>i</code>天购入股票</li></ol></li><li><p>第二次不持有股票</p><ol type="1"><li>第二次不持有股票</li><li>第<code>i-1</code>天持有股票， 第<code>i</code>天卖出股票</li></ol></li></ol><p>初始化：在第0天</p><ol type="1"><li>第一次购入股票， 为<code>-price[0]</code></li><li>第一次不持有股票，相当于第一天买了又卖了， 0</li><li>第二次购入股票，相当于第一天买入又卖出，再买入， 为<code>-price[0]</code></li><li>略</li></ol><p>dp结果： 只买一次股票包含在买两次股票结果中，所以第二次卖出股票为最终结果</p><h2 id="限制k次购买股票">6.2. 限制k次购买股票</h2><p><a href="https://programmercarl.com/0188.买卖股票的最佳时机IV.html#算法公开课">k次购买</a></p><p><code>k</code>次购买有<code>2k</code>中持有与不持有状态，+1中首次误操作状态</p><ol type="1"><li><code>dp[i][j+1]</code>次状态有 <code>dp[i-1][j]</code> ， 上一种状态<code>dp[i-1][j]</code>转换组成<ol type="1"><li>由于奇数次状态为持有股票状态，需要购入股票，由上一状态 <code>- price[i]</code>得到</li><li>偶数次状态为不持有股票状态，卖出股票， 总的价格增加，由上一状态<code>+ price[i]</code>得到</li></ol></li><li><code>dp[i][j]</code>公式<ol type="1"><li><span class="math inline"><em>d</em><em>p</em>[<em>i</em>]][<em>j</em>] = <em>m</em><em>a</em><em>x</em>(<em>d</em><em>p</em>[<em>i</em> − 1][<em>j</em>], <em>d</em><em>p</em>[<em>i</em> − 1][<em>j</em> − 1] + ( − 1)<sup><em>j</em></sup> * <em>p</em><em>r</em><em>i</em><em>c</em><em>e</em><em>s</em>[<em>i</em>])</span></li><li>方便计算，可以将奇偶公式分开枚举</li></ol></li></ol><h2 id="含有冷冻期的股票购买">6.3. 含有冷冻期的股票购买</h2><p><a href="https://programmercarl.com/0309.最佳买卖股票时机含冷冻期.html#思路">卖出股票后一天时冷冻期，冷冻期后时不持有股票状态</a></p><p>尝试描述购买股票过程中有多少种状态，画出其状态转化图， 有四种状态，</p><ol type="1"><li>持有股票状态 ， <code>dp[i][1]</code></li><li>不持有股票状态, <code>dp[i][2]</code></li><li>冷冻期, <code>dp[i][3]</code></li><li>当天卖出股票状态(此时状态与2不同) <code>dp[i][4]</code></li></ol><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20250829214353940.png" alt="image-20250829214353940"><figcaption aria-hidden="true">image-20250829214353940</figcaption></figure><ol type="1"><li>当前持有股票，<ol type="1"><li>可由前一天持有股票<code>dp[i-1][1]</code>得到，</li><li><code>i-1</code> 天不持有股票，买入股票得到， <code>dp[i-1][2] -  price[i]</code></li><li><code>i-1</code>冷冻期中后一天，买入股票， <code>dp[i-1][3] - price[i]</code></li></ol></li><li>当前不持有股票</li><li><code>i-1</code>是冷冻期， <code>dp[i][3]</code></li><li>当前是冷冻期<ol type="1"><li><code>i-1</code>当天售出股票， <code>dp[i-1][4]</code></li></ol></li><li>当天售出股票<ol type="1"><li><code>i</code>持有股票，卖出， <code>dp[i-1][1] + price[i]</code></li></ol></li></ol><p>初始化：</p><ol type="1"><li>持有股票时， 因买入股票， 初始为<code>-price[0]</code></li><li>其余状态不持有股票，初始不买不入，初始为0</li></ol><p>遍历顺序：从前向后遍历</p><h2 id="含手续费的股票售出">6.4. 含手续费的股票售出</h2><p><a href="https://programmercarl.com/0714.买卖股票的最佳时机含手续费（动态规划）.html#算法公开课">卖出时缴纳手续费</a></p><ol type="1"><li>还是两种状态， 持有股票，不持有股票， 由持有股票售出股票-&gt; 不持有股票，需缴纳手续费</li><li>dp转换公式<ol type="1"><li><code>dp[i][0] = max(dp[i-1][0] , dp[i-1][1] - price[i])</code></li><li><code>dp[i][1] = max(dp[i-1][1], dp[i-1][0] + price[i] -fee)</code> ，售出时缴纳手续费</li></ol></li><li>初始化： 略</li><li>选择结果： 可以卖出，也可以不卖出，选择最大值情况</li></ol><h1 id="子序列问题">7. 子序列问题</h1><blockquote><p>字串问题操作数 = 不同结果的操作选择</p><ol type="1"><li>找到所有可能的操作</li><li>当前情况可以由哪些操作得到，上一操作状态又是什么</li><li>使用<code>max, min</code> 选择最合适的操作</li></ol></blockquote><p>可以近似于 爬楼梯问题， 能爬到 <code>num[i]</code> 位置的最大长度</p><ol type="1"><li><p><code>dp[i]</code>表示为 <code>i之前包括i内以nums[i]</code>为结尾的序列， 单调增序列的最大长度,</p></li><li><p><code>for 0: j</code> 中，能够爬到 <code>if(nums[j] &lt; nums[i])</code>中， 长度最大值</p></li></ol><p><code>if(nums[j]  &lt;  nums[i] )  dp[i] = max(dp[i], dp[j] +1)</code></p><ol start="3" type="1"><li>初始化，所有序列初始为1</li></ol><h2 id="最长连续子序列">7.1. 最长连续子序列</h2><p><a href="https://programmercarl.com/0674.最长连续递增序列.html#思路">子序列连续-递增</a></p><p>要求连续，所以只能从<code>j-1</code>跳到<code>j</code>的位置，所以只需要比较<code>nums[j-1] &lt; nums[j]</code>， 不需要从<code>[0,j-1]</code>全部与<code>nums[j]</code>比较</p><h2 id="最长重复子序列">7.2. 最长重复子序列</h2><ol type="1"><li><p><code>dp[i][j]</code> 表示 以<code>i-1</code> 结尾的A数组 与 以<code>j-1</code>结尾的B 数组 最长公共子序列</p><blockquote><p>因为<code>dp[i][j]</code> 时比较了了<code>i-1</code> 与<code>j-1</code>的序列结果， 所以表示以<code>i-1</code>为结尾的子序列</p></blockquote></li><li><p><code>if(A[i-1] == B[j-1])  dp[i][j] = max(dp[i-1][j-1]+1)</code> , 比较的当前位置，因为<code>i, j</code>比实际<code>i,j</code>大1， 所以<code>if</code>中减去了1</p></li><li><p>初始化 <code>i=0 , j=0</code> 各种情况都是错误，初始化为0</p></li></ol><p>遍历顺序： <code>dp[i][j]</code>需要从1 开始遍历</p><h3 id="一维dp数组">7.2.1. 一维dp数组</h3><ol type="1"><li><p><code>dp[j]</code>表示与<code>j-1</code>结尾的相同的最大长度</p><blockquote><p>因为是从上一个<code>i-1</code>复制下来得到，遍历过程中不能修改<code>j-1</code>的<code>dp</code>，否则影响后续计算</p></blockquote></li><li><p>·<code>if(A[i-1] == B[j-1])  dp[j] = max(dp[j-1]+1)</code></p></li><li><p>遍历顺序： <code>i</code>从头开始， <code>j</code>必须从后开始</p></li></ol><h2 id="最长公共子序列">7.3. 最长公共子序列</h2><ol type="1"><li><code>dp[i][j]</code> 表示以<code>i-1</code> 结尾的序列与 以<code>j-1</code>为结尾的序列，最长的公共子序列</li><li><code>dp[i][j]</code> 有两种计算方式<ol type="1"><li><code>A[i-1] == B[j-1]</code> ，长度+1, <code>dp[i-1][j-1]+1</code></li><li><code>A[i-1] ！= B[j-1]</code> ,需要看<code>i-1</code>和<code>j</code> / <code>i</code> 与<code>j-1</code> 是否有最长的公共子序列，从两者中选择最大值</li></ol></li><li>初始化：<ol type="1"><li><code>i=0, j=0</code>情况，因为序号为<code>0</code>为空串， 与另一条序列的公共序列一定为0</li></ol></li><li>遍历顺序： 从前向后</li></ol><h2 id="最大连续子序和">7.4. 最大连续子序和</h2><p><a href="https://programmercarl.com/0053.最大子序和（动态规划）.html#算法公开课">最大子序和</a></p><p>连续子序和，可以由上一个序列延续获得， 也可以上一序列中断， 由当前序列继续计算</p><ol type="1"><li><p><code>dp[i]</code> ，以<code>i</code>为结尾的最长子序和</p></li><li><p><code>dp[i] = max(dp[i-1]+ nums[i], nums[i])</code></p></li><li><p>初始化，<code>dp[0]</code> 可以选择自身开始，或者从0开始</p></li></ol><blockquote><p>题目要求子序长度 &gt;0 ，所以必须从自身开始</p></blockquote><ol start="4" type="1"><li>遍历顺序： 从前向后遍历</li></ol><h2 id="判断子序列">7.5. 判断子序列</h2><p>子序列a 对应 序列b 的子序列长度</p><p><code>dp[i][j]</code>是子序列a与序列b相同子序列长度</p><ol type="1"><li><p>相同时 ， <code>dp[i][j] = dp[i-1][j-1] + 1</code>;</p></li><li><p>不相同时，删除<code>j</code>节点，观察 <code>dp[i][j-1]</code>能到达的最大长度</p><blockquote><p>此时，只能删除<code>j</code>节点，删除<code>i</code>节点后，就不是原来的序列了</p></blockquote></li></ol><h2 id="不同的子序列">7.6. 不同的子序列</h2><p><a href="https://programmercarl.com/0115.不同的子序列.html#算法公开课">完整的序列<code>t</code></a>在<code>s</code>的子序列中出现的次数</p><ol type="1"><li><p><code>dp[i][j]</code>, 以<code>i-1</code>结尾的序列t ，在以<code>j-1</code>为结尾的序列<code>s</code>中子序列出现次数</p></li><li><p>有两种计算情况</p><ol type="1"><li><p><code>s[i-1] == t[j-1]</code> ，看<code>i-1, j-1</code> 时匹配的结果， 同时还可以删除<code>i-1</code>看匹配结果(<code>i-1</code>可能由重复情况)</p><blockquote><p>相同情况时，选择用<code>s[i]</code> 与 <code>t[j]</code>比较，因为<code>s[i]</code>前一位可能等于后一位，所有也需要向前移动一位比较</p></blockquote></li><li><p>不相同时，删除<code>i-1</code>看匹配结果，<code>dp[i-1][j]</code></p></li></ol></li><li><p>初始化，<code>i = 0 , j=0</code>都是异常情况</p><ol type="1"><li><code>i =0</code> , s为空串， <code>j</code>与<code>s</code>相同结果为0</li><li><code>j=0</code>时，<code>j</code>是空串，<code>s</code>中删除到最后，一定有一串与<code>j</code>相同，初始化为1</li></ol></li><li><p>遍历顺序： 从前向后遍历</p></li></ol><h2 id="删除操作">7.7. 删除操作</h2><p><a href="https://programmercarl.com/0583.两个字符串的删除操作.html#算法公开课">两个字串删除n次后，序列相同</a></p><h3 id="最长相同子序列长度">7.7.1. 最长相同子序列长度</h3><ol type="1"><li>求出两字串最长公共子序列，长度n；</li><li>字串a,b删除除了公共子序列外的其他元素，删除后结果相同，删除长度 = 删除操作此处</li></ol><h3 id="删除操作dp">7.7.2. 删除操作DP</h3><ol type="1"><li><p><code>dp[i][j]</code>是以<code>i-1</code>为结尾的串a，以<code>j-1</code>为结尾的字串b需要删除的最小次数</p></li><li><p><code>dp[i][j]</code>有两种情况，相同结尾，不同结尾</p><ol type="1"><li><p><code>a[i-1] == b[j-1]</code>， 不需要删除操作，操作次数 = <code>dp[i-1][j-1]</code></p></li><li><p><code>a[i-1] ！= b[j-1]</code>，需要删除 a,b的最后一个，或者两个都删除</p></li><li><p>删除<code>i-1</code> , <code>dp[i-1][j]+1</code></p></li><li><p>删除<code>j-1</code>, <code>dp[i][j-1]+1</code></p></li><li><p>两个都删除， <code>dp[i-1][j-1]</code>+2</p></li></ol><p>使用<code>max</code>对三种方案进行选择， 3 包含在1， 2中，可以省略3</p></li><li><p>初始化，<code>i=0, j=0</code>异常情况，需初始化</p><ol type="1"><li><code>i=0</code>， 字串<code>a = NULL</code>, 字串<code>b[j]</code> 需删除 <code>j</code>次</li><li>j = 0 ，同上</li></ol></li><li><p>遍历顺序： 从前向后</p></li></ol><h2 id="编辑距离">7.8. 编辑距离</h2><p>字串编辑有三种操作，字串<code>a[i]</code>, <code>b[j]</code>, 最后一位不同</p><ol type="1"><li><p>删除，删除a 的最后一位<code>a[i]</code>，<code>b</code>没有改变</p></li><li><p>增加，在<code>b[j-1]</code>后增加一位<code>a[i]</code>与a相同， 增加一位<code>a[i]</code>与删除一位<code>a[i]</code>的操作力度相同</p></li><li><p>替换，</p></li><li><p><code>dp[i][j]</code> 表示以<code>i-1</code>为结尾的串a，以<code>j-1</code>为结尾的字串b需要操作的最小次数</p></li><li><p><code>dp[i][j]</code>有两种情况，相同结尾，不同结尾</p><ol type="1"><li><p><code>a[i-1] == b[j-1]</code>， 不操作，记录之前的操作次数= <code>dp[i-1][j-1]</code></p></li><li><p><code>a[i-1] ！= b[j-1]</code>， 进行以上三种操作</p><ol type="1"><li>删除， <code>dp[i-1][j]+1, dp[i][j-1]+1</code></li><li>增加， <code>dp[i-1][j]+1, dp[i][j-1]+1</code></li><li>替换， <code>dp[i-1][j-1]+1</code></li></ol><p>使用<code>max</code>对操作进行选择</p></li></ol></li><li><p>初始化，<code>i= 0, j =0</code>的情况，处理同上</p></li><li><p>遍历顺序，从后向前遍历</p></li></ol><h1 id="回文">8. 回文</h1><h2 id="回文子串">8.1. 回文子串</h2><h3 id="dp算法-1">8.1.1. DP算法</h3><p><a href="https://programmercarl.com/0647.回文子串.html#算法公开课">求回文字串的数量</a></p><ol type="1"><li><p><code>dp[i][j]</code>表示 <code>[i,j]</code>之间的字符是否为回文字串， 然后统计数组dp中有多少个 <code>true</code>,, = 有多个回文字串</p></li><li><p>两种情况</p><ol type="1"><li><code>a[i] =  a[j]</code>,<ol type="1"><li><code>[i, j]</code>之间相同 / 相邻，一定是回文子串</li><li><code>[i,j]</code>之间不相邻，<code>dp[i+1][j-1]</code>是回文串，则<code>true</code></li></ol></li><li>不相同，不是回文串，跳过</li></ol></li><li><p>初始化</p><ol type="1"><li><code>dp[i][j]</code>全初始化为<code>false</code></li></ol></li><li><p>遍历顺序</p><p>从左下角开始遍历， 即 下-&gt; 上，左-&gt; 右遍历</p><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20210121171032473-20230310132134822.jpg" alt="647.回文子串"><figcaption aria-hidden="true">647.回文子串</figcaption></figure></li></ol><h3 id="双指针-中心扩散">8.1.2. 双指针 中心扩散</h3><p>回文串 由 中间1个 / 2个向左右扩散，统计扩散数量，不能扩散时，返回得到扩散的最大数量</p><ol type="1"><li>中间 1 个向左右 扩散</li><li>中间 2 个向左右扩散</li><li>相加得到结果</li></ol><h2 id="最长回文子串">8.2. 最长回文子串</h2><p><a href="https://programmercarl.com/0005.最长回文子串.html#思路">最长回文字串</a></p><p>字串要求 是连续的</p><h2 id="最长回文子序列">8.3. 最长回文子序列</h2><p><a href="https://programmercarl.com/0516.最长回文子序列.html#思路">最长回文序列</a></p><p>回文序列可以不连续</p><ol type="1"><li><p><code>dp[i][j]</code>，表示<code>[i,j]</code> 之间最大的回文序列长度</p></li><li><p><code>dp[i][j]</code>两种情况</p></li><li><p><code>a[i] == a[j]</code>，子序列长度加2 ， <code>dp[i+1][j-1]+2</code></p></li><li><p><code>a[i] != a[j]</code>，那就是前一个区间的最大长度，可以缩短<code>i/ j</code>，<code>max(dp[i-1][j], dp[i][j-1])</code></p></li><li><p>初始化</p><ol type="1"><li><p>由性质 <code>i == j</code>时候， <code>dp[i+1][j-1]+2</code></p><p>因为<code>i+1 &gt; j-1</code>无意义，所以<code>i==j</code>需要单独初始化</p></li><li><p>其余初始化为0</p></li></ol></li><li><p>遍历顺序： 下- &gt; 上， 左-&gt; 右</p><blockquote><p>遍历时， <code>i == j</code>时，已经初始化，且公式计算不到，所以<code>j</code>只需要从<code>i+1</code>开始遍历</p><p><code>dp[i+1][j-1]+2</code>,所以 `i &lt;= s.size()-2, i &gt;=0</p></blockquote><figure><img src="/2025/08/27/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/20230102172155.png" alt="遍历顺序"><figcaption aria-hidden="true">遍历顺序</figcaption></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法</title>
      <link href="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
      <url>/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心算法">1. 贪心算法</h1><p><strong>感谢<a href="https://programmercarl.com/0101.对称二叉树.html#思路">代码随想录</a></strong></p><p>贪心算法——由局部最优推导出全局最优</p><h2 id="饼干分配">1.1. 饼干分配</h2><p>按照常识推导，但所用知识需要逻辑正确</p><p>大胃口 吃 大饼干，如果胃口大了，可以换小胃口 大饼干不能喂小胃口，如果饼干小了， 不能喂更小的饼干</p><p>小饼干去喂小胃口，如果饼干小了，换大饼干 小胃口不能吃小饼干，胃口大了，不能换大胃口</p><h2 id="贪心">1.2. 贪心</h2><p><a href="https://programmercarl.com/0376.摆动序列.html#思路">贪每一个波峰或波谷</a></p><ol type="1"><li>有变化： pre&lt; 0 &amp; cur &gt; 0 或 pre&gt; 0 &amp; cur&lt; 0</li></ol><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20201124174327597.png" alt="376.摆动序列"><figcaption aria-hidden="true">376.摆动序列</figcaption></figure><ol start="2" type="1"><li>平台,只记录最右边，pre&lt;=0 &amp; cur&gt;0</li></ol><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20230106170449.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><ol start="3" type="1"><li><p>平台上升， 平台期仍保持原有状态</p><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/20230108171505.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure></li></ol><h2 id="最大连续和">1.3. 最大连续和</h2><p>当连续和 &lt; 0 时，后续增加会减小数值，应从当前位置继续开始</p><blockquote><p>注意： count计算后便与result比较，而不是先归零</p></blockquote><h2 id="买卖股票的最佳时机">1.4. 买卖股票的最佳时机</h2><p>总利润 = 每一条的利润</p><p>贪心：每次贪正利润</p><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/2020112917480858-20230310134659477.png" alt="122.买卖股票的最佳时机II"><figcaption aria-hidden="true">122.买卖股票的最佳时机II</figcaption></figure><h2 id="跳跃游戏">1.5. 跳跃游戏</h2><p><a href="https://programmercarl.com/0055.跳跃游戏.html#思路">跳跃游戏</a></p><p>从i 能够到达x = 从i的跳跃范围能够到达x，且i只能在跳跃范围内移动</p><h2 id="跳跃游戏2">1.6. 跳跃游戏2</h2><p><a href="https://programmercarl.com/0045.跳跃游戏II.html#思路">最短跳跃游戏</a></p><p>x 是第i-1次跳跃位置， cover(i-1)</p><p>如果i大于了cover(i-1)，则需要选择cover(i-1)中能跳跃的最大位置作为新一跳的界限，并增加一步</p><h2 id="k次取反最大数组和">1.7. k次取反最大数组和</h2><ol type="1"><li>选择将负数反转</li><li>选择最小的绝对值进行反转</li></ol><blockquote><p>或者每次选择最小值，反转，但是更复杂</p></blockquote><h2 id="加油站">1.8. 加油站</h2><p><a href="https://programmercarl.com/0134.加油站.html#算法公开课">加油，能够循环的起点</a></p><ol type="1"><li>首先排除不能循环的情况；</li><li>一定能够循环<ol type="1"><li>从0开始的区间为负值情况，则起点错误，从下一个起点开始，直到找到能够值不为负的区间</li></ol></li></ol><p>同时，从后向前相加，如果能加从0开始的最小和，相加为正数时，则为开始起点</p><h2 id="糖果分发">1.9. 糖果分发</h2><p><a href="https://programmercarl.com/0135.分发糖果.html#算法公开课">分发糖果</a>：要求分高的同学的糖果一定比两边分低的同学糖果数量多</p><blockquote><p>注意贪心比较的方向， 所有的结果都能比较得到</p></blockquote><ol type="1"><li>依次比较左右孩子，<ol type="1"><li>依次比较左孩子，<strong>从左向右遍历</strong>， 可以使用到上一次比较的结果</li><li>依次比较右孩子，<strong>从右向左遍历</strong>， 遍历时，选择max(本轮比右孩子多的糖果，从左边得到的糖果)</li></ol></li></ol><h2 id="柠檬水找零">1.10. 柠檬水找零</h2><p><a href="https://programmercarl.com/0860.柠檬水找零.html#算法公开课">柠檬水</a></p><p>优先将面额较大的零钱找出，因为小零钱更加万能</p><h2 id="根据身高重建序列">1.11. 根据身高重建序列</h2><p>讨论两个维度 ，首先固定一个维度，再讨论下一个维度</p><ol type="1"><li>按照身高从大到小排序，以此作为插入顺序，同时需要规定k值小的排在前面</li><li>高身高的优先插入后，后面小身高的插入不会影响k值</li></ol><p><code>vector</code> 与 <code>list</code>插入的区别， <code>vector</code>插入时涉及底层扩容，比list插入效率低</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> v<span class="op">;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>list<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> l<span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>v<span class="op">.</span>insert<span class="op">(</span>v<span class="op">.</span>begin<span class="op">()+</span>pos<span class="op">,</span> val<span class="op">);</span>  <span class="co">// 可以直接使用pos插入</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> it <span class="op">=</span> l<span class="op">.</span>begin<span class="op">();</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>it <span class="op">=</span> next<span class="op">(</span>it<span class="op">,</span> pos<span class="op">);</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>l<span class="op">.</span>insert<span class="op">(</span>it<span class="op">,</span> val<span class="op">);</span> <span class="co">// 必须使用迭代器指定位置</span></span></code></pre></div><h2 id="射击气球">1.12. 射击气球</h2><p><a href="https://programmercarl.com/0452.用最少数量的箭引爆气球.html#思路">射击气球</a></p><p>贪心算法，一定要举出贪心的例子，来验证算法，</p><p>首先需要排序，根据排序顺序选择判断结果</p><ol type="1"><li>将右边界排序，记录最左边右端节点，但有其他值超过节点时，需射出一箭</li></ol><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20250827111033620.png" alt="image-20250827111033620"><figcaption aria-hidden="true">image-20250827111033620</figcaption></figure><ol start="2" type="1"><li><p>将左边界排序，记录最右端节点，如果其他值查过节点时，需要射出一箭</p><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20250827111332960.png" alt="image-20250827111332960"><figcaption aria-hidden="true">image-20250827111332960</figcaption></figure></li></ol><h2 id="无重叠区间">1.13. 无重叠区间</h2><p><a href="https://programmercarl.com/0435.无重叠区间.html">无重叠区间</a></p><ol type="1"><li><p>使用右边界，每一个不相交的区间是保留下的区间，其余都需删除</p><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20250827112819769.png" alt="image-20250827112819769"><figcaption aria-hidden="true">image-20250827112819769</figcaption></figure></li><li><p>左排序时，统计有重复区域的区间，然后删除</p><figure><img src="/2025/08/26/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/image-20250827113408417.png" alt="image-20250827113408417"><figcaption aria-hidden="true">image-20250827113408417</figcaption></figure></li></ol><h2 id="划分字母区间">1.14. 划分字母区间</h2><p><a href="https://programmercarl.com/0763.划分字母区间.html#思路">区间</a></p><p>当区间[a,b]之间字符的最大值以达到时，这个区间为字母区间，并将a置为新的区间开始b+1</p><h2 id="合并区间">1.15. 合并区间</h2><p><a href="https://programmercarl.com/0056.合并区间.html#其他语言版本">合并区间</a></p><p>合并区间，从左向右比较，只能使用左排序</p><h2 id="最小单调递增数字">1.16. 最小单调递增数字</h2><p>如果有<code>n1 n2 n3</code>情况， 如果<code>n2 &gt; n3</code>， 则其最大的递增序列为<code>(n2-1) 9</code> 如果<code>n1 &gt; n2</code>， 最大为<code>(n1-1) 9 9</code></p><p>如果序列比较n-1与n，则for循环最小值为1</p><h2 id="监控二叉树">1.17. 监控二叉树</h2><ol type="1"><li><p><strong>优先从叶子节点开始监控</strong>，因为叶子节点监控数量为指数级</p><p>有三种节点状态</p><blockquote><ol type="1"><li>无监控</li><li>有监控</li><li>有摄像头</li></ol></blockquote><p>对叶子节点进行监控，则空节点需设置为有监控状态</p></li><li><p>状态返回</p><ol type="1"><li>left 与right 都是监控状态，则mid需返回无监控1</li><li>left，right有一个是无监控1， 则mid需设置有摄像头3，并增加一个摄像头</li><li>left, right有一个有摄像头，则mid返回有监控2</li></ol></li></ol><h2 id="友军数量">1.18. 友军数量</h2><p><a href="https://programmercarl.com/0649.Dota2参议院.html#思路">杀死后面的参议员</a></p><p>贪心思想： 前面杀死后面的所有参议员</p><blockquote><p>使用flag 标识，前方时候有敌军</p></blockquote><ol type="1"><li>前方有敌军，自身被杀死<ol type="1"><li>但是多了一个友军,flag+1</li></ol></li><li>前方没有敌军，自身还活着，友军数量+1</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/2025/08/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2025/08/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="回溯算法">1. 回溯算法</h1><p><strong>感谢<a href="https://programmercarl.com/0077.组合优化.html#算法公开课">代码随想录</a></strong></p><h2 id="组合问题">1.1. 组合问题</h2><ol type="1"><li><p>终止条件，满足题目条件</p></li><li><p>处理逻辑</p><ol type="1"><li>对当前所有可能结果遍历</li><li>调用函数</li><li>结果回溯，弹出函数修改的结果</li><li>在处理中，不合理的情况暂停，减枝</li></ol></li><li><p>函数参数选择</p></li></ol><h2 id="组合问题2">1.2. 组合问题2</h2><p><a href="https://programmercarl.com/0216.组合总和III.html#其他语言版本">组合问题</a></p><p>回溯算法： 宽度是for循环的数量，深度是满足条件回溯算法的深度</p><ol type="1"><li>终止条件：深度为K, 总和为n</li><li>处理逻辑：<ol type="1"><li>对于总和数&lt; 1，没有结果，剪枝</li></ol></li><li>参数，可以函数调用时导入K-1, n-i，进行递归和回溯</li></ol><h2 id="电话号码排列">1.3. 电话号码排列</h2><p><a href="https://programmercarl.com/0017.电话号码的字母组合.html">排列问题</a></p><p>使用index 标识树的深度，或者其他方式也行</p><ol type="1"><li>终止条件：达到指定深度</li><li>处理逻辑：<ol type="1"><li>对字串中的所有char 进行遍历</li></ol></li></ol><h2 id="组合问题-1">1.4. 组合问题</h2><p>组合中不同排序结果相同，使用startIndex标识开始位置，不同排序结果只记录一次</p><h2 id="组合总数">1.5. 组合总数</h2><p><a href="https://programmercarl.com/0040.组合总和II.html">组合去重</a></p><p>数据中有重复数据，题目要求每个数据在每次只能用一遍，重复数据可以在同一结果集中出现，但是由于元素重复，需要对重复数据去重</p><p>去重条件<code>candidates[i] == candidates[i-1] &amp;&amp; used[i-1]==false</code>，这一部分不是剪枝，必须去除这一部分</p><p><img src="/2025/08/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/20221021163812.png" alt="img" style="zoom:50%;"></p><h2 id="切分回文子串">1.6. 切分回文子串</h2><p><a href="https://programmercarl.com/0131.分割回文串.html#优化">切分回文子串</a></p><ol type="1"><li>终止条件： 切分线到达最后，切分结束</li><li>处理逻辑：<ol type="1"><li>切分出来的是回文子串则继续切分，否则返回，不再切割</li><li>判断方法：<ol type="1"><li>字串直接判断</li><li>DP首先计算出DP数组，<code>DP[i,j]</code> 数组标识<code>[i,j]</code>这范围内是否为回文子串， 回文子串<code>dp[i][j] = s[i] == s[j] &amp;&amp; dp[i+1][j-1]</code></li></ol></li></ol></li></ol><h2 id="复原ip地址">1.7. 复原IP地址</h2><p><a href="https://programmercarl.com/0093.复原IP地址.html#总结">复原Ip地址</a></p><ol type="1"><li>终止条件： 分割点数 == 3， 并且最后一个分割字串符合条件</li><li>处理逻辑：<ol type="1"><li>如果切分出来的是符合逻辑的IP, 继续切割</li><li>剪枝：<ol type="1"><li>当剩余字符数<code>s.size() - 1-(i+1)+1 = s.size()-i-1</code> 超过所需字符数 <code>3*(3- PointNum)</code> ，剪枝</li><li>少于所需字符数（3-point) ,剪枝</li></ol></li></ol></li><li>传递参数： 切割位置，切割的点数</li></ol><h2 id="分割子集">1.8. 分割子集</h2><p>搜集子集是将所有<strong>搜索路径上所有结果</strong> 组合和分割将<strong>叶子节点中符合条件的结果</strong>加入其中</p><p>如果题目要求集合中元素顺序，则下一个节点从i+1开始，如果当前节点可以重复使用从i开始；</p><p>节点中有重复元素，需要对重复元素去重，同一层中不能以当前节点继续，但是同一树仍可以继续使用</p><h2 id="子集去重">1.9. 子集去重</h2><p>有重复元素，去重</p><ol type="1"><li>对数据集排序</li><li>使用<code>num[i]!=num[i-1]</code> 对同层数据去重</li><li>对于需要使用已加入栈中的数据时，需要使用used对数据去重</li></ol><p><a href="https://programmercarl.com/0090.子集II.html#思路">子集去重</a></p><p><a href="https://programmercarl.com/0040.组合总和II.html">组合去重</a></p><h2 id="递增子集去重">1.10. 递增子集去重</h2><p><a href="https://programmercarl.com/0491.递增子序列.html#思路">递增序列去重</a></p><p>递增序列中去重，当前序列中有重复元素，不能使用sort对数组排序。</p><p>使用set对当前层数组去重，每一个函数中创建一个set, 对函数中的当前层有效。同一树枝上因为从i+1开始，不用去重，且set已更新，不影响下一层数据</p><ol type="1"><li>处理逻辑：<ol type="1"><li>符合条件的加入到path中</li></ol></li></ol><h2 id="排列问题">1.11. 排列问题</h2><p><a href="https://programmercarl.com/0046.全排列.html#算法公开课">排列</a></p><ol type="1"><li>终止条件： 到达满足条件</li><li>处理逻辑：<ol type="1"><li>遍历对整个数组遍历，因为不同顺序集合不同，此时不需要<code>startIndex</code>;</li><li>使用<code>used</code>标识这条链路上哪个元素被使用， 将<code>used</code>作为参数；</li></ol></li><li>参数： 数组，标识数组<code>used</code></li></ol><h2 id="排列问题去重">1.12. 排列问题去重</h2><p>因为排列问题需要从0开始，下一层中可能会使用到上一层的数据，需要使用used对检查是否在树枝，或同一层上；</p><p>判断条件：</p><ol type="1"><li><p><code>nums[i] == nums[i-1]</code>并且 <code>used[i-1] = false</code>表示同一层中上一个被使用</p><p>​ 下一层中上一个被使用，<code>used[i-1] =true</code>, 可以被接着使用。</p></li><li><p>同时，还需要使用used[i] 检查当前元素是否在树枝上使用过，使用过则跳过</p></li><li><p>或者使用set代替第一条对数据去重</p></li></ol><h2 id="重新安排路径">1.13. 重新安排路径</h2><p><a href="https://leetcode.cn/problems/reconstruct-itinerary/">搜索机票</a></p><p>将票数据转换为图<code>map&lt;string, map&lt;string, int&gt;&gt;</code></p><ol type="1"><li>终止条件： 节点数 = 机票数量+1</li><li>处理逻辑：<ol type="1"><li>对result最后一个节点的所有相连进行搜索</li><li>每搜索一次，删除一条机票，删除方式将第二个map数量-1，当= 0 时，不能从当前机票起飞</li></ol></li></ol><p>此题是欧拉路径，最好使用<code>Hierholzer</code> 算法，搜索算法可能进入贪心死循环</p><h2 id="n皇后">1.14. N皇后</h2><p><a href="https://programmercarl.com/0051.N皇后.html#思路">N皇后</a></p><ol type="1"><li>终止条件： 加在最后一行棋盘</li><li>处理逻辑：<ol type="1"><li>对棋盘上每一行进行遍历</li><li>符合条件的加入棋盘</li><li>进入下一轮</li><li>回溯，退出上一轮的修改</li></ol></li></ol><h2 id="数独">1.15. 数独</h2><p><a href="https://leetcode.cn/problems/sudoku-solver">37. 解数独 - 力扣（LeetCode）</a></p><ol type="1"><li>终止条件： 所有节点遍历结束，返回true;</li><li>处理逻辑：<ol type="1"><li>遍历宽度为1-9</li><li>遍历深度为所有节点遍历结束，因为是二维，不确定向那个方向移动，使用<code>!='.'</code>条件对已完成的跳过，实现对下一个移动方向的选择</li></ol></li></ol><p>详细代码注释如<a href="D:\code\leetcode\37.解数独.cpp">代码及注释</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="/2025/08/23/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%91/"/>
      <url>/2025/08/23/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="树">1. 树</h1><p><strong>感谢<a href="https://programmercarl.com/0101.对称二叉树.html#思路">代码随想录</a></strong></p><h2 id="深度遍历">1.1. 深度遍历</h2><h3 id="递归">1.1.1. 递归</h3><pre><code>1. 递归结束条件2. 当前递归操作3. 对那些节点进行递归4. 确定参数和返回值</code></pre><h3 id="栈实现">1.1.2. 栈实现</h3><p>深度遍历中存在先进后出，所以此处使用栈</p><ol type="1"><li>先序遍历，栈中先进后出，出栈顺序为3，2<ol type="1"><li>中间节点</li><li>右节点</li><li>左节点</li></ol></li><li>中序遍历，当左节点与栈同时为空时，遍历结束<ol type="1"><li>将所有左节点压入栈中</li><li>左节点为空时，将栈中节点弹出，处理中间节点</li><li><code>cur= cur-&gt;right</code>， 处理右节点</li></ol></li><li>后序遍历，参照1， 然后reverse</li></ol><h3 id="null-bool表示">1.1.3. NULL/ bool表示</h3><p>先序遍历，中左右，</p><ol type="1"><li>加入栈中顺序为右左中，标识当前节点需处理时在栈后加入一个NULL</li><li>如果访问到NULL节点，需将下一节点弹出</li></ol><h2 id="反转二叉树">1.2. 反转二叉树</h2><p><a href="https://programmercarl.com/0226.翻转二叉树.html">反转二叉树</a></p><p>中序遍历不能反转二叉树，较为困难</p><h2 id="对称二叉树">1.3. 对称二叉树</h2><p><a href="https://programmercarl.com/0101.对称二叉树.html#思路">对称二叉树</a></p><ol type="1"><li>确定返回条件</li><li>当前节点比较左右字树是否相同</li><li>比较的是节点的内侧(left的右， right的左)，节点的外侧</li></ol><h2 id="树的最大深度">1.4. 树的最大深度</h2><p><a href="https://programmercarl.com/0104.二叉树的最大深度.html">树的最大深度</a></p><ol type="1"><li>后序遍历： 回溯，从后面的节点结算，得到当前节点的结果</li><li>前序遍历： 迭代，先计算当前节点，再依次计算后续节点，计算下一个节点时需要回溯</li></ol><h2 id="树的最小深度">1.5. 树的最小深度</h2><p><a href="https://programmercarl.com/0111.二叉树的最小深度.html">二叉树的最小深度</a></p><p>当节点的左右节点为都为NULL时，节点为叶子节点</p><ol type="1"><li><p>终止条件：节点为叶子节点时</p></li><li><p>后序遍历，</p><blockquote><p>注意：此时depth != 左右子树最小的节点，有可能左右子树有空子树</p><p>解决方法： 空子树设置深度初始值为最大值</p></blockquote></li></ol><h2 id="返回树的所有路径">1.6. 返回树的所有路径</h2><p><a href="https://programmercarl.com/0257.二叉树的所有路径.html#思路">树的所有路径</a></p><ol type="1"><li>路径的终止条件为达到叶子节点： 左右节点均为NULL;</li><li>此时对left与right递归时需要对left, right做检查，同时中间节点的初始需要放在if判断之前；</li></ol><p>两种方法回溯：</p><ol type="1"><li>使用vector存放路径，回溯时弹出最后一个元素；</li><li>使用参数对路径修改，回溯时参数不变，等于回溯；</li></ol><h2 id="左叶子之和">1.7. 左叶子之和</h2><p><a href="https://programmercarl.com/0404.左叶子之和.html#思路">左叶子之和</a></p><ol type="1"><li>终止条件：<ol type="1"><li>当前节点为空</li><li>是叶子节点</li></ol></li><li>当前逻辑：<ol type="1"><li>获取左子树的做叶子之和</li><li>当左子树为左叶子时，单独计算</li><li>获取右子树的左叶子之和</li></ol></li><li>求和相加，返回</li></ol><h2 id="路径之和">1.8. 路径之和</h2><p>递归函数是否有返回值，分为三种情况</p><ol type="1"><li>需要对树的所有路径遍历且不用处理递归返回值， 递归函数没有返回值void</li><li>需要对树的所有路径遍历且需要对递归返回值进行处理，递归函数有返回值int</li><li>之搜索一条符合条件的路径，则需要返回返回值，返回值通常为bool</li></ol><h3 id="找到路径即可">1.8.1. 找到路径即可</h3><p><a href="https://programmercarl.com/0112.路径总和.html#思路">找到路径即可</a></p><ol type="1"><li>终止条件为找到叶节点<ol type="1"><li>如果符合条件，返回true</li><li>不符合条件，返回false;</li></ol></li><li>如果左子树已经满足条件，返回true，不再搜索</li><li>对右子树进行搜索</li></ol><h3 id="找到所有可能的路径">1.8.2. 找到所有可能的路径</h3><p><a href="https://programmercarl.com/0112.路径总和.html#思路">找到所有可能的路径</a></p><ol type="1"><li>终止条件为找到叶节点<ol type="1"><li>符合条件，加入结果集中</li></ol></li><li>找完左子树，再找右子树</li></ol><h2 id="前序中序创建二叉树">1.9. 前序/中序创建二叉树</h2><ol type="1"><li><p>终止条件：</p><ol type="1"><li>数组为空时，返回NULL</li><li>数组为1个时，返回节点r</li></ol></li><li><p>处理逻辑：</p><ol type="1"><li>pre的第一个节点作为root节点</li><li>从中序in中找到与root相同的节点，以此为分割点，找到left ,right数组的长度</li><li>前序left, right与中序长度相同，所有区间为左开右闭</li></ol><table><colgroup><col style="width: 4%"><col style="width: 48%"><col style="width: 47%"></colgroup><thead><tr class="header"><th></th><th>left</th><th>right</th></tr></thead><tbody><tr class="odd"><td>pre</td><td>[leftPreorder+1, leftPreorder+1+left_size]</td><td>[ leftPreorder+1+left_size,rightPreorder]</td></tr><tr class="even"><td>In</td><td>[ leftInorder, break_point]</td><td>[break_point+1, rightInorder]</td></tr></tbody></table></li><li><p>参数中包含数组分割节点</p></li></ol><h2 id="创建最大树">1.10. 创建最大树</h2><ol type="1"><li>终止条件：可为叶子节点，也可以是NULL</li><li>处理逻辑：<ol type="1"><li>找到最大值索引，</li><li>使用索引分割两区间</li></ol></li></ol><h2 id="二叉搜索树">1.11. 二叉搜索树</h2><p><a href="https://programmercarl.com/0700.二叉搜索树中的搜索.html">二叉搜索树</a></p><p>左子树 &lt; 中间 &lt; 右子树</p><p>由中间值比较，确定对左子树/ 右子树一棵树进行搜索</p><h2 id="验证二叉搜索树">1.12. 验证二叉搜索树</h2><p>左子树的所有值 &lt; 中间 &lt; 右子树的所有值， 所以不能单独比较 左节点 &lt; 中间 &lt; 右节点</p><p>使用中序遍历，左中右，比较结果</p><ol type="1"><li>中序遍历，得到数组，检查数组是否是从小到大</li><li>中序遍历，保存遍历过程的做大值，保证遍历中的最大值&lt; 当前值</li></ol><h2 id="二叉树的最小差">1.13. 二叉树的最小差</h2><p>二叉树所有数的最小值是相邻两个遍历节点的差值最小</p><ol type="1"><li><p>中序遍历，得到数组后，求数组相邻数据的差值</p></li><li><p>中序遍历，保存上一个节点pre， 每次使用cur与pre做差值</p><blockquote><p>在中序结束后，将pre = cur， 将cur保存为下一变量的前一个节点</p></blockquote></li></ol><h2 id="找到最近公共祖先">1.14. 找到最近公共祖先</h2><p><a href="https://programmercarl.com/0236.二叉树的最近公共祖先.html#思路">最近公共祖先</a>从下向上查询路径，后序遍历</p><ol type="1"><li>终止条件：<ol type="1"><li>节点为NULL， 返回NULL</li><li>找到确定节点，返回true ,将result修改为当前路径；</li></ol></li><li>处理逻辑：<ol type="1"><li>如果p，q是不同树，那么更新result结果；</li><li>如果只有q，在路径上，不更新result;(因为可能出现q是p的父节点，由终止条件2修正)</li></ol></li></ol><h2 id="二叉搜索树的最近公共祖先">1.15. 二叉搜索树的最近公共祖先</h2><p><a href="https://programmercarl.com/0235.二叉搜索树的最近公共祖先.html#思路">二叉搜索树</a></p><p>二叉树有序，所以p,q的祖先节点位于[p,q]之间，且最近公共祖先是其遍历中的第一个，也只有这一个满足[p,q]条件</p><h2 id="二叉搜索树的插入">1.16. 二叉搜索树的插入</h2><p><a href="https://programmercarl.com/0701.二叉搜索树中的插入操作.html#思路">插入</a></p><ol type="1"><li>终止条件： 遇到空节点，新建一个节点，并加入在parent节点左/右</li><li>操作逻辑：<ol type="1"><li>val大于节点，进入右子树</li><li>val小于节点，进入左子树</li></ol></li></ol><blockquote><p>也可以不使用parent节点，终止条件中返回创建的节点，在操作时将返回的节点插入</p></blockquote><h2 id="二叉搜索树的删除">1.17. 二叉搜索树的删除</h2><p><a href="https://programmercarl.com/0450.删除二叉搜索树中的节点.html#算法公开课">删除</a></p><p>终止条件：删除时如果左右子树都在，需要将左子树放在右子树的最左节点的最左侧</p><h2 id="二叉树的修剪">1.18. 二叉树的修剪</h2><p><a href="https://programmercarl.com/0669.修剪二叉搜索树.html#思路">二叉树的修剪</a></p><ol type="1"><li>终止条件： 如果root==NULL时，返回NULL;</li><li>处理逻辑：<ol type="1"><li>中： 如果root &lt; left ,修建左子树，将左子树合适节点代替root返回，反之亦然</li><li>左： 对左子树修剪，返回结果赋值给root的左子树</li><li>右：同上</li></ol></li></ol><h2 id="有序数组-二叉搜索树">1.19. 有序数组-&gt;二叉搜索树</h2><p><a href="https://programmercarl.com/0108.将有序数组转换为二叉搜索树.html#算法公开课">有序数组构建二叉搜索树</a></p><ol type="1"><li>终止条件： 节点为空</li><li>处理逻辑：<ol type="1"><li>有序数组的中间位置为根节点</li><li>左子树，调用区间构建左子树</li><li>右同上</li></ol></li></ol><h2 id="二叉搜索树求和">1.20. 二叉搜索树求和</h2><p><a href="https://programmercarl.com/0538.把二叉搜索树转换为累加树.html#算法公开课">二叉搜索树转换为累加树</a></p><ol type="1"><li>终止条件： ~</li><li>处理逻辑：<ol type="1"><li>二叉树有序，选择右中左遍历</li><li>每次遍历时，需使用pre保存前一节点的累加和</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈-队列</title>
      <link href="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/"/>
      <url>/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="栈">1. 栈</h1><p><strong>感谢<a href="https://programmercarl.com/0101.对称二叉树.html#思路">代码随想录</a></strong></p><h2 id="栈模拟队列">1.1. 栈模拟队列</h2><p><a href="https://programmercarl.com/0232.用栈实现队列.html#算法公开课">模拟队列</a></p><figure><img src="https://file1.kamacoder.com/i/algo/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E7%89%88%E6%9C%AC2.gif" alt="232.用栈实现队列版本2"><figcaption aria-hidden="true">232.用栈实现队列版本2</figcaption></figure><p>使用两个栈模拟队列</p><ol type="1"><li>入队时， 直接入队</li><li>出队时， 将输入栈的数据放入输出栈中，将顺序倒置为先入先出</li><li>判空时，需要判断两个栈是否为空</li></ol><h2 id="队列模拟栈">1.2. 队列模拟栈</h2><figure><img src="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.gif" alt="225.用队列实现栈"><figcaption aria-hidden="true">225.用队列实现栈</figcaption></figure><p>可以使用一个队列实现栈的模拟</p><ol type="1"><li>入栈时，直接入队</li><li>出栈时，需要将前置数据依次排出，并放置在队首，<strong>出队时需要保留最后一个元素出队</strong></li></ol><h2 id="滑动窗口最大值">1.3. 滑动窗口最大值</h2><p><a href="https://programmercarl.com/0347.前K个高频元素.html#思路">滑动窗口最大值</a></p><p><code>deque</code> 用法</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;deque&gt;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>deque<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> d<span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>d<span class="op">.</span>front<span class="op">(),</span> d<span class="op">.</span>back<span class="op">();</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>d<span class="op">.</span>push_back<span class="op">(),</span> d<span class="op">.</span>pop_back<span class="op">();</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>d<span class="op">.</span>push_front<span class="op">(),</span> d<span class="op">.</span>pop_front<span class="op">();</span></span></code></pre></div><p>构建排序队列，将可能的最大值放入队列中，定义新的队列弹出方法</p><ol type="1"><li>入队，入队值如果大于栈顶值，将栈顶出栈，直到入队值小于栈顶值</li><li>出队，队首值如果等于移除的数据，将输出出栈</li><li>保持第一个值是最大值a，且比a小的值是在a之后入栈的，所以出队时a之前的数据已经弹出完毕</li></ol><h2 id="优先队列">1.4. 优先队列</h2><p><a href="https://programmercarl.com/0347.前K个高频元素.html#思路">前k个高频词汇</a></p><p><code>priority_queue</code>需要自定义排序类型</p><ol type="1"><li>使用` bool operator()(const int&amp; a, const int&amp; b)自定义比较类型</li><li>快排中left&gt; right，从大到小，优先队列反过来</li></ol><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> mycomparison<span class="op">&#123;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span><span class="op">:</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">bool</span> <span class="kw">operator</span><span class="op">()(</span><span class="at">const</span> pair<span class="op">&lt;</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">&gt;&amp;</span> a<span class="op">,</span> <span class="at">const</span> pair<span class="op">&lt;</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">&gt;&amp;</span> b<span class="op">)&#123;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> a<span class="op">.</span>second <span class="op">&gt;</span> b<span class="op">.</span>second<span class="op">;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;;</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    priority_queue<span class="op">&lt;</span> pair<span class="op">&lt;</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">&gt;,</span> vector<span class="op">&lt;</span>pair<span class="op">&lt;</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">&gt;&gt;</span> <span class="op">,</span> mycomparison<span class="op">&gt;</span> q<span class="op">;</span></span></code></pre></div><p>使用小顶堆，优先排除较小元素，将较大元素保留在优先队列中。</p><h1 id="单调栈">2. 单调栈</h1><h2 id="右侧最高气温">2.1. 右侧最高气温</h2><p><a href="https://programmercarl.com/0739.每日温度.html">最高气温</a></p><p>查找右边 比 当前元素更小的元素</p><ol type="1"><li>右边比自身大，找到了，当前元素出栈</li><li>右边比自身小，没找到，入栈</li></ol><p>栈中元素为待查找的元素，找到了就出栈</p><h2 id="nums1元素在nums2中下一个最大元素">2.2. nums1元素在nums2中下一个最大元素</h2><p><a href="https://programmercarl.com/0496.下一个更大元素I.html">nums1元素在nums2中下一个最大元素</a></p><ol type="1"><li>先计算<code>num2</code>中下一个更大元素的结果，保存在<code>map</code>中</li><li><code>num1</code>从<code>map</code>中取得结果</li></ol><h2 id="循环数组的下一最大元素">2.3. 循环数组的下一最大元素</h2><p><a href="https://programmercarl.com/0503.下一个更大元素II.html#算法公开课">循环数组的下一最大元素</a></p><p><code>nums</code>是一个循环数组，最后一个元素接在第一个元素</p><blockquote><ol type="1"><li>对数组循环时， 使用 <strong><code>% nums.size()</code></strong> 对数组循环遍历</li><li>遍历次数增加一倍，从<code>1</code>遍历到 <code>2*n</code></li></ol></blockquote><h2 id="接雨水">2.4. 接雨水</h2><p><a href="https://programmercarl.com/0042.接雨水.html#思路">接雨水</a></p><p>左边和右边高度高于中间时，中间出现凹槽， 可以接到雨水</p><h3 id="暴力求解">2.4.1. 暴力求解</h3><p>当前节点<code>j</code></p><ol type="1"><li><p>左边<code>[0,j-1]</code>最大高度<code>lheight</code>,右边<code>[j+1 , end]</code>最大高度<code>rheight</code>，每次暴力求解这两个指针</p></li><li><p>计算高度差，使用列方向计算求和</p><p><img src="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/20210402091208445.png" alt="列方向求和" style="zoom:75%;"></p></li></ol><h3 id="动态规划">2.4.2. 动态规划</h3><ol type="1"><li><code>j</code>左边最大高度 = <code>j-1</code>左边最高高度，或者<code>height[j-1]</code></li><li>右边计算公式为 <code>rheight[j] =  max(rheight[j+1] , height[j+1])</code></li></ol><p>先计算出<code>dp</code>， 代替<a href="#暴力求解">暴力求解</a> 中的双指针</p><h3 id="单调栈-1">2.4.3. 单调栈</h3><p>单调递增栈中，栈底 &gt; 栈头</p><p>如果出栈<code>j</code>， 栈头元素&gt; <code>j</code>, 即将入栈元素 &gt; <code>j</code>， 出现凹槽，计算这个凹槽</p><p>宽 = <code>入栈元素 - 栈顶元素</code>， 高度 = <code>min(入栈， 栈顶) - 出栈元素(凹槽)</code></p><figure><img src="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88-%E9%98%9F%E5%88%97/20210223092629946.png" alt="行计算"><figcaption aria-hidden="true">行计算</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表-字符串</title>
      <link href="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="哈希表-字符串">1. 哈希表-字符串</h1><p><strong>感谢<a href="https://programmercarl.com/">代码随想录</a></strong></p><h2 id="快乐数">1.1. 快乐数</h2><p><a href="https://programmercarl.com/0202.快乐数.html#思路">快乐数</a></p><p>查找数字是否重复出现，使用哈希表存储</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;set&gt;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>set<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> s<span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>s<span class="op">.</span>insert<span class="op">(</span>a<span class="op">);</span> <span class="co">// 插入数据</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span><span class="op">(</span>s<span class="op">.</span>find<span class="op">(</span>a<span class="op">)!=</span> s<span class="op">.</span>end<span class="op">())&#123;</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 查找数据是否在s中</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">//如果出现 != s.end(), 没出现 == s.end()</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><h2 id="两数之和">1.2. 两数之和</h2><p><a href="https://programmercarl.com/0001.两数之和.html#算法公开课">两数之和</a></p><ol type="1"><li>map存放在之前的数据，也是当前查询中匹配的数据</li><li>map中key对应数值，value对应索引</li><li>unordered_map中使用Hash存储， map中使用红黑树存储</li></ol><h2 id="三数之和">1.3. 三数之和</h2><p><a href="https://programmercarl.com/0015.三数之和.html#思路">三数之和</a></p><ol type="1"><li><p>使用三个指针，查找指针对应的数据之和是否为0</p></li><li><p>指针去重，结果中不能包含统一的数据，所以在取得结果后再去重，而不是先去重再计算结果</p></li></ol><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span><span class="op">(</span>i<span class="op">&gt;</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> nums<span class="op">[</span>i<span class="op">]==</span> nums<span class="op">[</span>i<span class="op">-</span><span class="dv">1</span><span class="op">])&#123;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>   <span class="cf">continue</span><span class="op">;</span><span class="co">//对已有结果去重</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">&#125;</span></span></code></pre></div><ol start="3" type="1"><li>vector<int><strong>{</strong>1， 2，3<strong>}</strong>，使用{}作为临时vector</int></li><li><code>for( ; ; )</code> 中第一个式子只对第一次循环有效，循环中赋初值需放在循环内</li></ol><h1 id="字符串">2. 字符串</h1><h2 id="反转字符串">2.1. 反转字符串</h2><p><a href="https://programmercarl.com/0541.反转字符串II.html#思路">反转字符串2</a></p><ol type="1"><li>对于有规律的计数时，使用i = i+ num，</li><li>reverse(begin()+i， begin+k)，反转范围为[i,k）</li></ol><h2 id="花式反转">2.2. 花式反转</h2><p><a href="https://programmercarl.com/0151.翻转字符串里的单词.html#思路">先反转整体，再反转局部</a></p><ol type="1"><li>去除空格时，sum值代表字符串的长度</li><li>当s 遍历到结尾时，也是一个反转条件</li></ol><h2 id="kmp算法">2.3. KMP算法</h2><p>获得next数组</p><ol type="1"><li>初始化为0</li><li>如果s[i] 与s[j] 相同，最长的 j +1；</li><li>否则与next[j-1]的字串进行比较；</li></ol><p>比较</p><ol type="1"><li>如果s[i] 与t[j] 相同， j++ ，比较下一位</li><li>否则返回到最长的公共子串的下一位， 即next[j-1]比较</li></ol><blockquote><p>next初值赋值为1 时，相当于next 向右移动了一位，此时不相同时，取next[j]即可</p></blockquote><h2 id="重复子串">2.4. 重复子串</h2><p><a href="https://programmercarl.com/0459.重复的子字符串.html">重复子串</a></p><figure><img src="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8-%E5%AD%97%E7%AC%A6%E4%B8%B2/20220728104931.png" alt="图二"><figcaption aria-hidden="true">图二</figcaption></figure><p><strong>结论： 如果s是由重复序列组成，那么s+s中一定具有s</strong></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论0</title>
      <link href="/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA0/"/>
      <url>/2025/08/22/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA0/</url>
      
        <content type="html"><![CDATA[<h2 id="岛屿">0.1. 岛屿</h2><h2 id="图查找算法">0.2. 图查找算法</h2><h3 id="并查集的实现-并查集理论基础-代码随想录">0.2.1. 并查集的实现 并查集理论基础 | 代码随想录</h3><ol type="1"><li>并查集，是将一个集合内所有数据放入一个连通图中，即为father[u]= v；</li><li>查询一个并查集，是查询根节点是否相同，find(u)== find(v)</li><li>初始化，所有的并查集都指向自身</li><li>路径压缩，节点在find过程中都执行根节点</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 使用数据存放并查集</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> father<span class="op">(</span>n<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> init<span class="op">()&#123;</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span>i<span class="op">&lt;</span> father<span class="op">.</span>size<span class="op">();</span>i<span class="op">++)&#123;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        father<span class="op">[</span>i<span class="op">]=</span> i<span class="op">;</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> find<span class="op">(</span><span class="dt">int</span> u<span class="op">)&#123;</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span>father<span class="op">[</span>u<span class="op">]==</span>u<span class="op">)</span> <span class="cf">return</span> u<span class="op">;</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span> <span class="op">&#123;</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        father<span class="op">[</span>u<span class="op">]=</span>find<span class="op">(</span>father<span class="op">[</span>u<span class="op">]);</span><span class="co">// 路径压缩，指向根节点</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> father<span class="op">[</span>u<span class="op">];</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> is_same<span class="op">(</span><span class="dt">int</span> u<span class="op">,</span> <span class="dt">int</span> v<span class="op">)&#123;</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> a <span class="op">=</span> find<span class="op">(</span>u<span class="op">);</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> b <span class="op">=</span> find<span class="op">(</span>v<span class="op">);</span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span>a <span class="op">==</span> b<span class="op">)</span> <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> join<span class="op">(</span><span class="dt">int</span> u<span class="op">,</span> <span class="dt">int</span> v<span class="op">)&#123;</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> a <span class="op">=</span> find<span class="op">(</span>u<span class="op">);</span></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> b <span class="op">=</span> find<span class="op">(</span>v<span class="op">);</span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span>a <span class="op">==</span> b<span class="op">)</span> <span class="cf">return</span> <span class="op">;</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>    father<span class="op">[</span>u<span class="op">]=</span> v<span class="op">;</span></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="op">;</span></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><h3 id="prim算法">0.2.2. prim算法</h3><ol type="1"><li>选择最小边e,v（e是树中，v是树外的数据）</li><li>将节点v加入树中</li><li>更新与v的节点的权重<ol type="1"><li>此处记录树的连接关系，记录当前节点的父亲</li></ol></li></ol><h3 id="kruskal-算法">0.2.3. kruskal 算法</h3><ol type="1"><li>完成并查集</li><li>对边的权重排序</li><li>选择最小边<ol type="1"><li>如果在并查集中，跳过</li><li>不在并查集中，加入节点树种</li></ol></li></ol><h3 id="拓扑排序">0.2.4. 拓扑排序</h3><ol type="1"><li>计算节点入度</li><li>选择入度为0 的节点，加入处理队列q, 并将入度替换为-1</li><li>处理队列q<ol type="1"><li>cur指向的所有节点，入度减1</li><li>如果入度等于1，加入处理队列q, 并将入度替换为-1</li><li>记录出队元素cur.</li></ol></li></ol><blockquote><p>出队元素不等于总元素数量时， <strong>判断有向图中 存在环</strong></p></blockquote><h3 id="dijkstra算法">0.2.5. dijkstra算法</h3><p><strong><u>权值不能为负数，prim算法权值可以是负数，负数情况使用ford算法</u></strong></p><ol type="1"><li>选择最小边并且该节点没有被访问过</li><li>标记该节点，已经被访问过</li><li>更新非访问节点到源点的最小距离，同时当前节点的父亲</li></ol><h3 id="使用边权重的dijkstra算法">0.2.6. 使用边权重的dijkstra算法</h3><p>使用边的权值进行计算</p><ol type="1"><li>建立小顶堆</li><li>从小顶堆中选择最小的边</li><li>标记边连线的点已经被访问过了</li><li>更新edge相连的顶点的权重</li></ol><h2 id="附录">0.3. 附录</h2><h3 id="建立小顶堆">0.3.1. 建立小顶堆</h3><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> mycomparison<span class="op">&#123;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">bool</span> <span class="kw">operator</span><span class="op">(</span><span class="at">const</span> pair<span class="op">&lt;</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">&gt;&amp;</span> a<span class="op">,</span> <span class="at">const</span> pair<span class="op">&lt;</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">&gt;&amp;</span> b<span class="op">)&#123;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> a<span class="op">.</span>second<span class="op">&gt;</span> b<span class="op">.</span>second<span class="op">;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>priority_queue<span class="op">&lt;</span>pair<span class="op">&lt;</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">&gt;,</span> vector<span class="op">&lt;</span>pair<span class="op">&lt;</span><span class="dt">int</span><span class="op">,</span><span class="dt">int</span><span class="op">&gt;&gt;</span> <span class="op">,</span> mycomparison<span class="op">&gt;</span> p<span class="op">;</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="co">    a&gt; b时 ，是小顶堆；</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="co">    a&lt; b时， 是大顶堆；</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="co">*/</span></span></code></pre></div><h3 id="对vector数组进行排序">0.3.2. 对vector数组进行排序</h3><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> edges<span class="op">;</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>sort<span class="op">(</span>edges<span class="op">.</span>begin<span class="op">()</span> <span class="op">,</span> edges<span class="op">.</span>end<span class="op">(),</span> <span class="op">[](</span><span class="at">const</span> edge<span class="op">&amp;</span> a<span class="op">,</span> <span class="at">const</span> edge<span class="op">&amp;</span> b<span class="op">)&#123;</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a<span class="op">&lt;</span> b<span class="op">;</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;);</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="co">    a&lt; b， 升序排序；</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="co">    a&gt; b， 降序排序；</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="co">    默认情况是升序排序；</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="co">*/</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/07/10/c/STL/"/>
      <url>/2025/07/10/c/STL/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构">1. 数据结构</h1><h2 id="list">1.1. list</h2><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;list&gt;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>List<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> mylist<span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>list<span class="op">&lt;</span>string<span class="op">&gt;</span> names<span class="op">=</span> <span class="op">&#123;</span><span class="st">&quot;a&quot;</span><span class="op">,</span><span class="st">&quot;b&quot;</span><span class="op">,</span><span class="st">&quot;c&quot;</span><span class="op">&#125;;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>list<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> list<span class="op">(</span>my_list<span class="op">.</span>begin<span class="op">(),</span> mylist<span class="op">.</span>end<span class="op">());</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>list<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> tenZeros<span class="op">(</span><span class="dv">10</span><span class="op">);</span><span class="co">// 初始化十个数，默认为0</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>list<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> tenSeverns<span class="op">(</span><span class="dv">10</span><span class="op">,</span><span class="dv">7</span><span class="op">);</span> <span class="co">// 初始化十个7</span></span></code></pre></div><h3 id="添加元素">1.1.1. 添加元素</h3><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>push_back<span class="op">(</span><span class="dv">10</span><span class="op">);</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>push_front<span class="op">(</span><span class="dv">10</span><span class="op">);</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co">// 在这个迭代器之前插入元素</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> it <span class="op">=</span> mylist<span class="op">.</span>begin<span class="op">();</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>insert<span class="op">(</span>it<span class="op">+</span><span class="dv">1</span><span class="op">,</span> <span class="dv">15</span><span class="op">);</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="co">// 在这个迭代器后插入一串元素</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>insert<span class="op">(</span>it<span class="op">,</span> vec<span class="op">.</span>begin<span class="op">()</span> <span class="op">,</span>vec<span class="op">.</span>end<span class="op">());</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span></code></pre></div><h3 id="访问">1.1.2. 访问</h3><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>enpty<span class="op">()</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>front<span class="op">()</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>back<span class="op">()</span></span></code></pre></div><h3 id="删除元素">1.1.3. 删除元素</h3><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>pop_front<span class="op">();</span> <span class="co">//有返回吗</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>pop_back<span class="op">();</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> it <span class="op">=</span> mylist<span class="op">.</span>begin<span class="op">();</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>it <span class="op">=</span> mylist<span class="op">.</span>erase<span class="op">(</span>it<span class="op">);</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>erase<span class="op">(</span>mylist<span class="op">.</span>begin<span class="op">()+</span><span class="dv">1</span><span class="op">,</span> mylist<span class="op">.</span>end<span class="op">());</span></span></code></pre></div><h3 id="遍历">1.1.4. 遍历</h3><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span><span class="op">(</span><span class="kw">auto</span> it <span class="op">=</span> mylist<span class="op">.</span>begin<span class="op">();</span> it <span class="op">!=</span> mylist<span class="op">.</span>end<span class="op">()</span> <span class="op">;</span>it<span class="op">++)&#123;</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">(*</span>it<span class="op">)</span> <span class="op">++;</span> </span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span><span class="op">(</span><span class="kw">auto</span> num <span class="op">:</span> mylist<span class="op">)&#123;</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    num<span class="op">++;</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span><span class="op">(</span><span class="kw">auto</span><span class="op">&amp;</span> num <span class="op">:</span>mylist<span class="op">)&#123;</span></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    num <span class="op">++;</span> <span class="co">//修改值时使用引用   </span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><h3 id="合并">1.1.5. 合并</h3><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>sort<span class="op">();</span> <span class="co">// 默认从小到大排序</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>sort<span class="op">([](</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)&#123;</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a<span class="op">&gt;</span>b<span class="op">;</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;);</span><span class="co">//a&gt;b 从大到小排序</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co">// 合并 ,要求list1, list2都需要排序</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>list1<span class="op">.</span>merge<span class="op">(</span>list2<span class="op">)</span></span></code></pre></div><h3 id="唯一化">1.1.6. 唯一化</h3><div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>unique<span class="op">();</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="co">// 自定义相等</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>mylist<span class="op">.</span>unique<span class="op">([](</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)&#123;</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> abs<span class="op">(</span>a<span class="op">-</span>b<span class="op">)&lt;</span><span class="dv">2</span><span class="op">;</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;);</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="co">// 反转 </span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>revList<span class="op">.</span>reverse<span class="op">();</span></span></code></pre></div><h3 id="拼接">1.1.7. 拼接</h3><div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="bu">std::</span>list<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> listA <span class="op">=</span> <span class="op">&#123;</span><span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">&#125;;</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="bu">std::</span>list<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> listB <span class="op">=</span> <span class="op">&#123;</span><span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span><span class="op">&#125;;</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>listA<span class="op">.</span>splice<span class="op">(</span>listA<span class="op">.</span>end<span class="op">(),</span> listB<span class="op">);</span> <span class="co">// listA: &#123;1, 2, 3, 4, 5&#125;, listB: &#123;&#125;</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>listX<span class="op">.</span>splice<span class="op">(</span>listX<span class="op">.</span>end<span class="op">(),</span> listY<span class="op">,</span> it_y<span class="op">);</span> <span class="co">// listX: &#123;10, 20, 30&#125;, listY: &#123;40, 50&#125;</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>listP<span class="op">.</span>splice<span class="op">(</span>listP<span class="op">.</span>end<span class="op">(),</span> listQ<span class="op">,</span> first_q<span class="op">,</span> last_q<span class="op">);</span></span></code></pre></div><h2 id="vector">1.2. vector</h2><div class="sourceCode" id="cb9"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> myv<span class="op">;</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="co">// 从数组中创建vector</span></span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>arr <span class="op">=</span> <span class="op">&#123;</span><span class="dv">1</span><span class="op">,</span><span class="dv">2</span><span class="op">,</span><span class="dv">3</span><span class="op">,</span><span class="dv">4</span><span class="op">&#125;;</span></span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>myv <span class="op">=</span> vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> <span class="op">(</span>arr<span class="op">,</span> arr<span class="op">+</span> <span class="kw">sizeof</span><span class="op">(</span>arr<span class="op">)/</span> <span class="kw">sizeof</span><span class="op">(</span>arr<span class="op">[</span><span class="dv">0</span><span class="op">]));</span></span></code></pre></div><h3 id="插入数据">1.2.1. 插入数据</h3><div class="sourceCode" id="cb10"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>myv<span class="op">.</span>push_back<span class="op">(</span>value<span class="op">);</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>myv<span class="op">.</span>emplace_back<span class="op">(</span>value1<span class="op">,</span> value2<span class="op">);</span><span class="co">// value1 ,value2 可以组成结构体数据</span></span></code></pre></div><h3 id="访问元素">1.2.2. 访问元素</h3><div class="sourceCode" id="cb11"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>myv<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">;</span></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="cf">try</span><span class="op">&#123;</span></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    myv<span class="op">.</span>at<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 对数据边界检测，返回Out_of_range 异常</span></span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span><span class="cf">catch</span> <span class="op">&#123;</span><span class="at">const</span> out_of_range<span class="op">&amp;</span> e<span class="op">&#125;&#123;</span></span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    cerr<span class="op">&lt;&lt;</span> e<span class="op">.</span>what<span class="op">()&lt;&lt;</span>endl<span class="op">;</span></span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> it <span class="op">=</span> myv<span class="op">.</span>front<span class="op">();</span> <span class="co">// 返回引用，指针？值引用？</span></span><span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> it <span class="op">=</span> myv<span class="op">.</span>back<span class="op">();</span></span><span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span><span class="op">*</span> data<span class="op">=</span> myv<span class="op">.</span>data<span class="op">();</span><span class="co">// 返回数据数组指针</span></span></code></pre></div><h3 id="排序">1.2.3. 排序</h3><div class="sourceCode" id="cb12"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>sort<span class="op">(</span>my<span class="op">.</span>begin<span class="op">()</span> <span class="op">,</span> my<span class="op">.</span>end<span class="op">());</span><span class="co">// 从小到大排序</span></span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>sort<span class="op">(</span>my<span class="op">.</span>begin<span class="op">(),</span> my<span class="op">.</span>end<span class="op">(),</span> <span class="op">[](</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)&#123;</span></span><span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a<span class="op">&gt;</span>b<span class="op">;</span>  </span><span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;);</span></span><span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>sort<span class="op">(</span>my<span class="op">.</span>begin<span class="op">(),</span> my<span class="op">.</span>end<span class="op">(),</span> greater<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;());</span><span class="co">// 从大到小排序</span></span></code></pre></div><h3 id="合并-1">1.2.4. 合并</h3><div class="sourceCode" id="cb13"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> merge<span class="op">(</span>v1<span class="op">.</span>size<span class="op">()</span> <span class="op">+</span> v2<span class="op">.</span>size<span class="op">());</span></span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="co">// v1，v2完成排序，合并结果在merge中</span></span><span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>merger<span class="op">(</span>v1<span class="op">.</span>begin<span class="op">,</span> v1<span class="op">.</span>end<span class="op">()</span> <span class="op">,</span>v2<span class="op">.</span>begin<span class="op">(),</span> v2<span class="op">.</span>end<span class="op">(),</span> merge<span class="op">.</span>begin<span class="op">());</span></span></code></pre></div><h2 id="stack-and-queue">1.3. stack and queue</h2><div class="sourceCode" id="cb14"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stack&gt;</span></span><span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>stack<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> mys <span class="op">=</span> stack<span class="op">&lt;</span><span class="dt">int</span><span class="op">,</span> vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;&gt;</span> <span class="op">(</span>vec<span class="op">);</span> <span class="co">// 指定底层容器有什么效果</span></span><span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>mys<span class="op">.</span>push<span class="op">();</span></span><span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>mys<span class="op">.</span>top<span class="op">();</span></span><span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>mys<span class="op">.</span>pop<span class="op">();</span></span><span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>mys<span class="op">.</span>size<span class="op">();</span></span><span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>mys<span class="op">.</span>empty<span class="op">();</span></span></code></pre></div><div class="sourceCode" id="cb15"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;queue&gt;</span></span><span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>queue<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> myq <span class="op">;</span></span><span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>queue<span class="op">&lt;</span><span class="dt">int</span><span class="op">,</span> list<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;&gt;</span> myq<span class="op">(</span>vec<span class="op">);</span></span><span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>myq<span class="op">.</span>push<span class="op">();</span></span><span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>myq<span class="op">.</span>front<span class="op">();</span> <span class="co">// 对头使用front, 栈顶使用top</span></span><span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>myq<span class="op">.</span>back<span class="op">();</span> </span></code></pre></div><h2 id="deque">1.4. deque</h2><p>使用方法与vector类似，存储使用块与链表链接，比vector的性能好</p><h2 id="map">1.5. map</h2><p>数据有序排列</p><div class="sourceCode" id="cb16"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;map&gt;</span></span><span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>map<span class="op">&lt;</span>string<span class="op">,</span> age<span class="op">&gt;</span> mymap <span class="op">=&lt;!--</span>swig￼<span class="dv">0</span><span class="op">--&gt;;</span></span><span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>mymap<span class="op">[</span><span class="st">&quot;b&quot;</span><span class="op">]=</span><span class="dv">20</span><span class="op">;</span></span><span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> <span class="op">[</span>it<span class="op">,</span> inserted<span class="op">]</span> <span class="op">=</span> mymap<span class="op">.</span>insert<span class="op">&lt;!--</span>swig￼<span class="dv">1</span><span class="op">--&gt;;</span></span><span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>mymap<span class="op">.</span>emplace<span class="op">(</span><span class="st">&quot;c&quot;</span><span class="op">,</span><span class="dv">10</span><span class="op">);</span></span><span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="co">// 如果插入已存在，inserted值为false</span></span></code></pre></div><h3 id="访问-1">1.5.1. 访问</h3><div class="sourceCode" id="cb17"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>mymap<span class="op">[</span><span class="st">&quot;a&quot;</span><span class="op">];</span> <span class="co">// 没有自动创建元素</span></span><span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>mymap<span class="op">.</span>at<span class="op">[</span><span class="st">&quot;b&quot;</span><span class="op">];</span><span class="co">// 没有抛出异常out_of_range</span></span><span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> it <span class="op">=</span> mymap<span class="op">.</span>find<span class="op">(</span>key<span class="op">);</span></span><span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span><span class="op">(</span>it <span class="op">!=</span> mymap<span class="op">.</span>end<span class="op">())&#123;</span></span><span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a><span class="co">// 对键进行计数，map默认最多有1个键值</span></span><span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span><span class="op">(</span>mymap<span class="op">.</span>count<span class="op">(</span>key<span class="op">))&#123;</span></span><span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span><span class="op">(</span><span class="kw">auto</span><span class="op">&amp;</span> pair<span class="op">:</span> mymap<span class="op">)&#123;</span></span><span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a>    pair<span class="op">.</span>first<span class="op">;</span> <span class="co">// key是第一个元素</span></span><span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a>    pair<span class="op">.</span>second<span class="op">;</span> <span class="co">//value是第二个元素</span></span><span id="cb17-17"><a href="#cb17-17" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb17-18"><a href="#cb17-18" aria-hidden="true" tabindex="-1"></a></span></code></pre></div><h3 id="unordered_map">1.5.2. unordered_map</h3><div class="sourceCode" id="cb18"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;unordered_map&gt;</span></span></code></pre></div><p>使用Hash表映射</p><h3 id="multimap">1.5.3. multimap</h3><div class="sourceCode" id="cb19"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>multimap<span class="op">&lt;</span>string<span class="op">,</span> <span class="dt">int</span><span class="op">&gt;</span> mymap<span class="op">;</span></span><span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="co">// 不可以使用[], at()</span></span><span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="co">//find()， 返回一个迭代器</span></span><span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="co">//equal_range(key), 返回一个pair, 包含两个迭代器，表示所有具有该键的元素的范围（[first, last)）</span></span></code></pre></div><h3 id="unordered_multimap">1.5.4. unordered_multimap</h3><p>使用方法与multimap相同</p><h2 id="pair">1.6. pair</h2><div class="sourceCode" id="cb20"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;utility&gt;</span></span></code></pre></div><h2 id="set">1.7. set</h2><div class="sourceCode" id="cb21"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;set&gt;</span></span><span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>set<span class="op">&lt;</span><span class="dt">int</span><span class="op">,</span> <span class="op">[](</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)&#123;</span></span><span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a<span class="op">&gt;</span>b<span class="op">&#125;&gt;</span> set1 <span class="op">=</span> <span class="op">&#123;</span><span class="dv">1</span><span class="op">,</span><span class="dv">2</span><span class="op">,</span><span class="dv">3</span><span class="op">,</span><span class="dv">4</span><span class="op">&#125;;</span></span></code></pre></div><h2 id="使用红黑树自定义操作符">1.8. 使用红黑树，自定义操作符</h2><div class="sourceCode" id="cb22"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> person<span class="op">&#123;</span></span><span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> age<span class="op">;</span></span><span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">bool</span> <span class="kw">operator</span><span class="op">&lt;(</span><span class="at">const</span> Person<span class="op">&amp;</span> other<span class="op">)</span> <span class="at">const</span><span class="op">&#123;</span></span><span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>age <span class="op">!=</span> other<span class="op">.</span>age<span class="op">)&#123;</span></span><span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> age<span class="op">&lt;</span> other<span class="op">.</span>age<span class="op">;</span></span><span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">friend</span> ostream<span class="op">&amp;</span> <span class="kw">operator</span><span class="op">&lt;&lt;(</span>ostream<span class="op">&amp;&amp;</span> os<span class="op">,</span> <span class="at">const</span> person<span class="op">&amp;</span> p<span class="op">)&#123;</span></span><span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a>        os<span class="op">&lt;&lt;</span>p<span class="op">.</span>age<span class="op">&lt;&lt;</span>endl<span class="op">;</span></span><span id="cb22-12"><a href="#cb22-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> os<span class="op">;</span></span><span id="cb22-13"><a href="#cb22-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb22-14"><a href="#cb22-14" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb22-15"><a href="#cb22-15" aria-hidden="true" tabindex="-1"></a>map<span class="op">&lt;</span>person<span class="op">,</span> <span class="dt">int</span><span class="op">&gt;</span> mymap<span class="op">;</span></span><span id="cb22-16"><a href="#cb22-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb22-17"><a href="#cb22-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb22-18"><a href="#cb22-18" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> PointCompare <span class="op">&#123;</span></span><span id="cb22-19"><a href="#cb22-19" aria-hidden="true" tabindex="-1"></a>    <span class="dt">bool</span> <span class="kw">operator</span><span class="op">()(</span><span class="at">const</span> Point<span class="op">&amp;</span> p1<span class="op">,</span> <span class="at">const</span> Point<span class="op">&amp;</span> p2<span class="op">)</span> <span class="at">const</span> <span class="op">&#123;</span></span><span id="cb22-20"><a href="#cb22-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>p1<span class="op">.</span>x <span class="op">!=</span> p2<span class="op">.</span>x<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb22-21"><a href="#cb22-21" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> p1<span class="op">.</span>x <span class="op">&lt;</span> p2<span class="op">.</span>x<span class="op">;</span></span><span id="cb22-22"><a href="#cb22-22" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb22-23"><a href="#cb22-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> p1<span class="op">.</span>y <span class="op">&lt;</span> p2<span class="op">.</span>y<span class="op">;</span></span><span id="cb22-24"><a href="#cb22-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb22-25"><a href="#cb22-25" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;;</span></span><span id="cb22-26"><a href="#cb22-26" aria-hidden="true" tabindex="-1"></a><span class="bu">std::</span>map<span class="op">&lt;</span>Point<span class="op">,</span> <span class="bu">std::</span>string<span class="op">,</span> PointCompare<span class="op">&gt;</span> pointMap<span class="op">;</span></span><span id="cb22-27"><a href="#cb22-27" aria-hidden="true" tabindex="-1"></a><span class="co">// 这里不能使用out</span></span></code></pre></div><h2 id="priority_queue">1.9. priority_queue</h2><div class="sourceCode" id="cb23"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 只能使用仿函数类型</span></span><span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> mycomparison<span class="op">&#123;</span></span><span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span><span class="op">:</span></span><span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">bool</span> <span class="kw">operator</span><span class="op">()(</span><span class="at">const</span> <span class="dt">int</span><span class="op">&amp;</span> a<span class="op">,</span><span class="at">const</span> <span class="dt">int</span><span class="op">&amp;</span> b<span class="op">)</span><span class="at">const</span><span class="op">&#123;</span></span><span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>a<span class="op">&gt;</span>b<span class="op">)&#123;</span></span><span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span><span class="cf">else</span><span class="op">&#123;</span></span><span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;;</span></span><span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a>priority_queue<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> q<span class="op">;</span><span class="co">// 大顶堆，数据大的在顶端</span></span><span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a>priority_queue<span class="op">&lt;</span><span class="dt">int</span><span class="op">,</span> vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;,</span> mycomparison<span class="op">&gt;</span> min_pq<span class="op">;</span> <span class="co">//小顶堆，小数据在顶端</span></span></code></pre></div><h2 id="numeric">1.10. numeric</h2><div class="sourceCode" id="cb24"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;numeric&gt;</span></span><span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> sum <span class="op">=</span> <span class="bu">std::</span>accumulate<span class="op">(</span>numbers<span class="op">.</span>begin<span class="op">(),</span> numbers<span class="op">.</span>end<span class="op">(),</span> <span class="dv">0</span><span class="op">);</span><span class="co">// 默认求和</span></span><span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> product <span class="op">=</span> <span class="bu">std::</span>accumulate<span class="op">(</span>numbers<span class="op">.</span>begin<span class="op">(),</span> numbers<span class="op">.</span>end<span class="op">(),</span> <span class="dv">1</span><span class="op">,</span> <span class="bu">std::</span>multiplies<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;());</span></span><span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="co">// 默认求积</span></span><span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;algorithm&gt;</span></span><span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> min_it <span class="op">=</span> min_element<span class="op">(</span>number<span class="op">.</span>begin<span class="op">(),</span> number<span class="op">.</span>end<span class="op">(),</span> mycomparison<span class="op">);</span></span><span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> max_it <span class="op">=</span> max_element<span class="op">(</span>number<span class="op">.</span>begin<span class="op">(),</span> number<span class="op">.</span>end<span class="op">(),</span> mycomparison<span class="op">);</span></span><span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> minmax <span class="op">=</span> minmax_element<span class="op">(</span>number<span class="op">.</span>begin<span class="op">(),</span> number<span class="op">.</span>end<span class="op">(),</span>mycomparison<span class="op">);</span></span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习</title>
      <link href="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习">1. 深度学习</h1><h2 id="数据读取">1.1. 数据读取</h2><h3 id="标签转换为数据迭代器">1.1.1. 标签转换为数据迭代器</h3><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch.utils <span class="im">import</span> data</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co"># 传入多个数据，类似数据压缩 data_arrays，对数据进行解压缩</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>dataset <span class="op">=</span> data.TensorDataset(data_arrays)</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 创建迭代器，batch_size</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>data.DataLoader(dataset, batch_size, shuffle<span class="op">=</span>is_train)</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co"># iter返回一个迭代器对象， next读取迭代器的下一个数据</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="bu">next</span>(<span class="bu">iter</span>(data))</span></code></pre></div><h3 id="从torchvision.datasets读取">1.1.2. 从torchvision.datasets读取</h3><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torchvision <span class="im">import</span> transforms</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch.utils <span class="im">import</span> data</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> torchvision</span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> load_data(batch_size, resize <span class="op">=</span> <span class="va">None</span>):</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a> <span class="co"># 定义数据处理方式   </span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    trans <span class="op">=</span> [transforms.ToTensors()]</span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> resize:</span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        trans.insert(<span class="dv">0</span>, transforms.Resize(resize))</span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    trans <span class="op">=</span> transforms.Compose(trans)<span class="co"># 使用Compose转换</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 选择数据导出模式</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">&#39;&#39;&#39;</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="co">    root - 数据保存地址</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="co">    train - 训练数据</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="co">    transforms 转换模式</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="co">    download 是否选择下载</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="co">    &#39;&#39;&#39;</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    mnist_train <span class="op">=</span> torchvision.datasets.FashionMNIST(</span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        root <span class="op">=</span> <span class="st">&quot;../data&quot;</span>, train <span class="op">=</span> <span class="va">True</span>, transforms <span class="op">=</span> trans, download <span class="op">=</span> <span class="va">True</span>)</span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>    <span class="co">&#39;&#39;&#39;</span></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="co">    batch_size: 每个批次包含多少个样本。</span></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="co">    shuffle: 是否在每个 epoch 开始时打乱数据（训练集通常为 True，测试集通常为 False）。</span></span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a><span class="co">    num_workers (可选): 用于数据加载的子进程数量，可以加快数据读取速度。</span></span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a><span class="co">    &#39;&#39;&#39;</span></span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>    data <span class="op">=</span> data.DataLoader(mnist_train, batch_size, shuffle <span class="op">=</span> <span class="va">True</span>,</span><span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>                          num_workers <span class="op">=</span> <span class="dv">3</span>)</span><span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>       </span></code></pre></div><h3 id="序列数据">1.1.3. 序列数据</h3><p>对于总长度T， 时间<span class="math inline"><em>τ</em></span> ,将数据分为 <span class="math display">$$y_t = X_t \\x_t = [x_[t-\tau]... x_{t-1}] \\但是x_t 相对Y_t少了\tau个，可以舍弃，也可以填充0$$</span></p><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>tau <span class="op">=</span> <span class="dv">4</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>features <span class="op">=</span> torch.zeros((T <span class="op">-</span> tau, tau))</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(tau):</span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    features[:, i] <span class="op">=</span> x[i: T <span class="op">-</span> tau <span class="op">+</span> i]</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>labels <span class="op">=</span> x[tau:].reshape((<span class="op">-</span><span class="dv">1</span>, <span class="dv">1</span>))</span></code></pre></div><ol type="1"><li>读取数据</li><li>词元化（转换为单词或字符）</li><li>转换为词元与数字的映射</li><li>将映射作用在序列数据上，转换为向量表示</li><li><a href="#squence">数据预处理代码</a></li></ol><h3 id="文本序列数据">1.1.4. 文本序列数据</h3><ol type="1"><li>读取数据到string中</li><li>使用split( 分割为英法双语，然后使用.split(’ ’)将单词分割</li><li>然后将单词词元，建立词表</li><li>使用词表，转换为向量，对向量进行阶段或填充，然后在向量末尾增加<eos>，再统计序列中有效的单元数量valid_len</eos></li><li>指定批量大小，转换为小批量迭代器</li></ol><p><a href="#读取文本序列数据">读取文本序列代码</a></p><h2 id="模型">1.2. 模型</h2><h3 id="线性模型linear">1.2.1. 线性模型linear</h3><p>第一个指定输入特征形状，即2，第二个指定输出特征形状</p><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch <span class="im">import</span> nn</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>net <span class="op">=</span> nn.Sequential(nn.Linear(<span class="dv">2</span>, <span class="dv">1</span>))</span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>loss <span class="op">=</span> nn.MSELoss()</span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>trainer <span class="op">=</span> torch.optim.SGD(net.parameters(), lr<span class="op">=</span><span class="fl">0.03</span>)</span></code></pre></div><h3 id="展平层">1.2.2. 展平层</h3><p>将(batch_size, channel, height, weight) 转换为(batch_size, channel* height*weight)</p><div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>nn.Flatten(start_dim <span class="op">=</span> <span class="dv">1</span>, end_dim <span class="op">=-</span><span class="dv">1</span>) <span class="co"># 默认保留第一维batch_size</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>nn.LogSoftmax(dim<span class="op">=</span><span class="dv">1</span>) <span class="co"># 作用于最后一个维度，进行归一化</span></span></code></pre></div><h3 id="mlp">1.2.3. MLP</h3><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch <span class="im">import</span> nn</span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>net <span class="op">=</span> nn.Sequential(nn.Flatten(),</span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>                    nn.Linear(<span class="dv">784</span>, <span class="dv">256</span>),</span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>                    nn.ReLU(),</span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>                    nn.Linear(<span class="dv">256</span>, <span class="dv">10</span>))</span></code></pre></div><h3 id="cnn">1.2.4. CNN</h3><p>不变性：无论使用什么方法找到这个物体，都与物体的位置无关</p><p>原因：与像素点计算的卷积核都是相同的，不随着位置的改变而改变</p><div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;&#39;&#39;</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="co">param1: 输入通道</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="co">param2: 输出通道</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="co">parma3: 卷积核大小</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="co">param4: 参数</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;&#39;&#39;</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>conv2d <span class="op">=</span> nn.Conv2d(<span class="dv">1</span>,<span class="dv">1</span>, kernel_size<span class="op">=</span>(<span class="dv">1</span>, <span class="dv">2</span>), bias<span class="op">=</span><span class="va">False</span>)</span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;&#39;&#39;</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="co">卷积核大小 = input_channels* kernel_size, </span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="co">每一个卷积核计算的出来都是一个二维图形</span></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="co">卷积核数量 = output_channels</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;&#39;&#39;</span></span></code></pre></div><h4 id="填充padding">1.2.4.1. 填充padding</h4><p>卷积核最好选择奇数</p><p>填充高度与宽度满足<span class="math inline"><em>p</em><sub><em>h</em></sub> = <em>k</em><sub><em>h</em></sub> − 1, <em>p</em><sub><em>w</em></sub> = <em>k</em><sub><em>w</em></sub> − 1</span>, 在上下填充的高度与宽度分别为 <span class="math inline"><em>p</em><sub><em>h</em></sub>/2, <em>p</em><sub><em>w</em></sub>/2</span></p><div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>conv2d <span class="op">=</span> nn.Conv2d(<span class="dv">1</span>,<span class="dv">1</span>, kernel_size<span class="op">=</span>(<span class="dv">3</span>, <span class="dv">3</span>),padding <span class="op">=</span> <span class="dv">1</span>, bias<span class="op">=</span><span class="va">False</span>)</span></code></pre></div><h4 id="步幅">1.2.4.2. 步幅</h4><p>输出形状公式为 <span class="math display">$$\lfloor（n_h-k_h-+p_h+s_h)/s_h\rfloor \\p_h = k_h-1 \\所以结果为（n_h+s_h-1)/s_h, \\可以整除情况下，=（n_h+s_h)/s_h$$</span></p><div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>conv2d <span class="op">=</span> nn.Conv2d(<span class="dv">1</span>, <span class="dv">1</span>, kernel_size<span class="op">=</span>(<span class="dv">3</span>, <span class="dv">5</span>), padding<span class="op">=</span>(<span class="dv">1</span>, <span class="dv">2</span>), stride<span class="op">=</span>(<span class="dv">3</span>, <span class="dv">4</span>))</span></code></pre></div><ul><li>当以每像素为基础应用时，<span class="math inline">1 × 1</span>卷积层相当于全连接层。</li></ul><h3 id="批量归一化层batchnorm">1.2.5. 批量归一化层BatchNorm</h3><p><span class="math display">$$\mathrm{BN}(\mathbf{x}) = \boldsymbol{\gamma} \odot \frac{\mathbf{x} - \hat{\boldsymbol{\mu}}_\mathcal{B}}{\hat{\boldsymbol{\sigma}}_\mathcal{B}} + \boldsymbol{\beta}.$$</span></p><p>对特征维度进行归一化,<span class="math inline"><em>γ</em>、<em>β</em></span> 是拉伸和偏移参数</p><ol type="1"><li><p>对特征维度进行归一化</p><pre><code>mean = X.mean(dim = 0, keepdim = True)</code></pre></li><li><p>卷积层</p><ol type="1"><li>对通道维度进行归一化</li></ol></li><li><p>训练状态下使用小批次的样本均值与方差，测试状态使用的移动平均估算的均值与方差</p></li></ol><div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;&#39;&#39;</span></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="co">param: 输入通道数</span></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;&#39;&#39;</span></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>nn.BatchNorm2d(<span class="dv">6</span>)  </span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>nn.BatchNorm1d(<span class="dv">128</span>)</span></code></pre></div><h3 id="残差块">1.2.6. 残差块</h3><p>训练是模型训练出F(X) = H(x)- X</p><figure><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250423225436209.png" alt="image-20250423225436209"><figcaption aria-hidden="true">image-20250423225436209</figcaption></figure><div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> torch </span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch <span class="im">import</span> nn</span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch.nn <span class="im">import</span> functional <span class="im">as</span> F</span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Residual(nn.Module):</span><span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span> , input_channels, num_channels, use_1x1conv<span class="op">=</span> <span class="va">False</span>, strides <span class="op">=</span><span class="dv">1</span>):</span><span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>().<span class="fu">__init__</span>()</span><span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.conv1 <span class="op">=</span> nn.Conv2d(input_channels, num_channels, kernel_size <span class="op">=</span> <span class="dv">3</span>, paddding <span class="op">=</span> <span class="dv">1</span>, stride <span class="op">=</span> strides)</span><span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.conv2 <span class="op">=</span> nn.Conv2d(num_channels, num_channels, kernel_size <span class="op">=</span> <span class="dv">3</span>, paddding <span class="op">=</span> <span class="dv">1</span>, stride <span class="op">=</span> strides)</span><span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 修改X的通道数量，与f(x) - x匹配</span></span><span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> use_1x1conv :</span><span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>            <span class="va">self</span>.conv3 <span class="op">=</span> nn.Conv2d(input_channels, num_channels, kernel_size <span class="op">=</span><span class="dv">1</span> ,padding <span class="op">=</span> <span class="dv">0</span>, stride <span class="op">=</span> strides)</span><span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> :</span><span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>            <span class="va">self</span>.conv3 <span class="op">=</span> none</span><span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.bn1 <span class="op">=</span> nn.BatchNorm2d(num_channels)</span><span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.bn2 <span class="op">=</span> nn.BatchNorm2d(num_channels)</span><span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>,X):</span><span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>        Y <span class="op">=</span> F.relu(<span class="va">self</span>.bn1(<span class="va">self</span>.conv1(X)))</span><span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>        Y <span class="op">=</span> <span class="va">self</span>.bn2(<span class="va">self</span>.conv2(Y))</span><span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 修改X输出通道数量</span></span><span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> conv3 :</span><span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a>            X <span class="op">=</span> <span class="va">self</span>.conv3(X)</span><span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 实现Y = f(x) +X</span></span><span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a>        Y <span class="op">=</span> Y<span class="op">+</span> X</span><span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a>        Y <span class="op">=</span> F.relu(Y)</span><span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a> </span><span id="cb12-26"><a href="#cb12-26" aria-hidden="true" tabindex="-1"></a><span class="cf">return</span> Y</span><span id="cb12-27"><a href="#cb12-27" aria-hidden="true" tabindex="-1"></a>        </span></code></pre></div><h3 id="池化层pooling">1.2.7. 池化层pooling</h3><p>汇聚卷积层计算出的信息，降低卷积层对位置的敏感性，同时降低对空间降采样表示的敏感性</p><div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch <span class="im">import</span> nn</span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>nn.MaxPool2d((<span class="dv">3</span>,<span class="dv">3</span>), padding <span class="op">=</span>(<span class="dv">0</span>,<span class="dv">1</span>), stride <span class="op">=</span> (<span class="dv">0</span>,<span class="dv">1</span>))  <span class="co"># 最大池化层</span></span><span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>nn.AvgPool2d((<span class="dv">2</span>, <span class="dv">3</span>), stride<span class="op">=</span>(<span class="dv">2</span>, <span class="dv">3</span>), padding<span class="op">=</span>(<span class="dv">0</span>, <span class="dv">1</span>))  <span class="co"># 平均池化层</span></span><span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;&#39;&#39;</span></span><span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="co">param1 : 输出层形状(1,1), 网络自动计算padding, stride ,k ,转化为(1,1)的输出维度</span></span><span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;&#39;&#39;</span></span><span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>nn.AdaptiveAvgPool2d((<span class="dv">1</span>,<span class="dv">1</span>))</span></code></pre></div><p>池化层不需要指出Input_channels, output_channels， <strong>input_channels =output_channels</strong></p><p>例如，Lenet网络</p><figure><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250423211333286.png" alt="image-20250423211333286"><figcaption aria-hidden="true">image-20250423211333286</figcaption></figure><div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>net <span class="op">=</span> nn.Sequential(</span><span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    nn.Conv2d(<span class="dv">1</span>, <span class="dv">6</span>, kernel_size<span class="op">=</span><span class="dv">5</span>, padding<span class="op">=</span><span class="dv">2</span>), nn.Sigmoid(),</span><span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    nn.AvgPool2d(kernel_size<span class="op">=</span><span class="dv">2</span>, stride<span class="op">=</span><span class="dv">2</span>),</span><span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    nn.Conv2d(<span class="dv">6</span>, <span class="dv">16</span>, kernel_size<span class="op">=</span><span class="dv">5</span>), nn.Sigmoid(),</span><span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    nn.AvgPool2d(kernel_size<span class="op">=</span><span class="dv">2</span>, stride<span class="op">=</span><span class="dv">2</span>),</span><span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    nn.Flatten(),</span><span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    nn.Linear(<span class="dv">16</span> <span class="op">*</span> <span class="dv">5</span> <span class="op">*</span> <span class="dv">5</span>, <span class="dv">120</span>), nn.Sigmoid(),</span><span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>    nn.Linear(<span class="dv">120</span>, <span class="dv">84</span>), nn.Sigmoid(),</span><span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>    nn.Linear(<span class="dv">84</span>, <span class="dv">10</span>))</span></code></pre></div><h3 id="循环神经网络rnn">1.2.8. 循环神经网络RNN</h3><p><span class="math display">$$隐藏输出\\\mathbf{H}_t = \phi(\mathbf{X}_t \mathbf{W}_{xh} + \mathbf{H}_{t-1} \mathbf{W}_{hh}  + \mathbf{b}_h).\\输出\\\mathbf{O}_t = \mathbf{H}_t \mathbf{W}_{hq} + \mathbf{b}_q.$$</span></p><h4 id="深度循环deep_rnn">1.2.8.1. 深度循环deep_rnn</h4><p>RNN相当于Drnn中，<span class="math inline"><em>H</em><sub><em>t</em></sub><sup>0</sup> = <em>X</em><sub><em>t</em></sub></span> <span class="math display">$$\mathbf{H}_t^{(l)} = \phi_l(\mathbf{H}_t^{(l-1)} \mathbf{W}_{xh}^{(l)} + \mathbf{H}_{t-1}^{(l)} \mathbf{W}_{hh}^{(l)}  + \mathbf{b}_h^{(l)})\\\mathbf{O}_t = \mathbf{H}_t^{(L)} \mathbf{W}_{hq} + \mathbf{b}_q$$</span></p><h4 id="双向循环rnn">1.2.8.2. 双向循环rnn</h4><figure><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250424175214314.png" alt="image-20250424175214314"><figcaption aria-hidden="true">image-20250424175214314</figcaption></figure><p><strong>多用于对文本的编码，而不是预测文本</strong></p><h4 id="代码介绍">1.2.8.3. 代码介绍</h4><p>输入X = （time_step ,batch_size, feature), output = (time_step ,batch_size, num_hidden*(1/2)), state = (time_step ,batch_size, num_hidden)</p><div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch <span class="im">import</span> nn</span><span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>rnn <span class="op">=</span> nn.RNN(num_input, num_hiddens)</span><span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>gru_layer <span class="op">=</span> nn.GRU(num_inputs, num_hiddens)</span><span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>lstm_layer<span class="op">=</span>nn.LSTM(num_inputs, num_hiddens)</span><span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a><span class="co"># drnn</span></span><span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;&#39;&#39;</span></span><span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="co">X_&#123;batch* num_input&#125;* W_&#123;num_input * num_hidder&#125; </span></span><span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a><span class="co">num_inputs: 输入的特征数量</span></span><span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a><span class="co">num_hidden：隐神经元数量 = 隐状态的特征数量</span></span><span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a><span class="co">bidirectional: 双向循环网络</span></span><span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a><span class="co">&#39;&#39;&#39;</span></span><span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>lstm_layer <span class="op">=</span> nn.LSTM(num_inputs, num_hidden, num_layers, bidirectional<span class="op">=</span><span class="va">True</span>)</span></code></pre></div><p>RNN 利用<strong>时间维度</strong>的参数共享实现了对**时间位置*，每一个时间步使用的一套参数</p><div class="sourceCode" id="cb16"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> rnn(inputs, state, params):</span><span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    <span class="co"># inputs的形状：(时间步数量，批量大小，词表大小)</span></span><span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>    W_xh, W_hh, b_h, W_hq, b_q <span class="op">=</span> params</span><span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>    H, <span class="op">=</span> state</span><span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>    outputs <span class="op">=</span> []</span><span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># X的形状：(批量大小，词表大小)</span></span><span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> X <span class="kw">in</span> inputs:</span><span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>        H <span class="op">=</span> torch.tanh(torch.mm(X, W_xh) <span class="op">+</span> torch.mm(H, W_hh) <span class="op">+</span> b_h)</span><span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>        Y <span class="op">=</span> torch.mm(H, W_hq) <span class="op">+</span> b_q</span><span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>        outputs.append(Y)</span><span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> torch.cat(outputs, dim<span class="op">=</span><span class="dv">0</span>), (H,)</span></code></pre></div><figure><img src="/2025/05/24/deeplearn/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/image-20250424173608710.png" alt="image-20250424173608710"><figcaption aria-hidden="true">image-20250424173608710</figcaption></figure><h4 id="梯度衰减">1.2.8.4. 梯度衰减</h4><p>减小梯度，避免梯度爆炸，使得梯度始终保持在<span class="math inline"><em>θ</em></span> 以下 <span class="math display">$$\mathbf{g} \leftarrow \min\left(1, \frac{\theta}{\|\mathbf{g}\|}\right) \mathbf{g}.$$</span> <a href="#grad_clipping">梯度裁剪代码</a></p><h2 id="激活函数">1.3. 激活函数</h2><p>将模型从线性变为非线性</p><h3 id="relu">1.3.1. relu</h3><p><span class="math display">ReLU (<em>x</em>) = max (<em>x</em>, 0).</span></p><div class="sourceCode" id="cb17"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>torch.relu(X)</span></code></pre></div><h3 id="sigmod">1.3.2. sigmod</h3><p>特征图像，曲线在（0，1）中，关于0.5对称 <span class="math display"></span>(x) = .<span class="math display"></span></p><div class="sourceCode" id="cb18"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> torch.sigmod(X)</span></code></pre></div><h3 id="tanh">1.3.3. tanh</h3><p>特征图像，曲线在（-1，1）中，关于0对称 <span class="math display"></span>(x) =  $$</p><div class="sourceCode" id="cb19"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> torch.tanh(x)</span></code></pre></div><h2 id="损失函数">1.4. 损失函数</h2><h3 id="均方误差">1.4.1. 均方误差</h3><div class="sourceCode" id="cb20"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>loss <span class="op">=</span> nn.MSELoss()</span></code></pre></div><h3 id="交叉熵损失">1.4.2. 交叉熵损失</h3><div class="sourceCode" id="cb21"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>loss <span class="op">=</span> nn.CrossEntropyLoss(reduction<span class="op">=</span><span class="st">&#39;none&#39;</span>) </span><span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="co"># 返回的是一个张量，反向传播需要计算为标量</span></span><span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="co"># 相当于 NLLLoss(LogSoftmax(logits), target)</span></span></code></pre></div><h3 id="nllloss">1.4.3. NLLLoss</h3><div class="sourceCode" id="cb22"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>loss <span class="op">=</span> nn.NLLLoss()  </span></code></pre></div><h2 id="训练过程">1.5. 训练过程</h2><div class="sourceCode" id="cb23"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a>num_epoch <span class="op">=</span> <span class="dv">2</span></span><span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> epoch <span class="kw">in</span> <span class="bu">range</span>(num_epoch):</span><span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> X, y <span class="kw">in</span> data_iter :</span><span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>        l <span class="op">=</span> loss(net(X), y)</span><span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>        train.zero_grad()</span><span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 清除训练模型的梯度, 返回的是一个标量</span></span><span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>        l.backward()  </span><span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 反向计算梯度</span></span><span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a>        trainer.step()</span><span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a>    l <span class="op">=</span> loss(net(features), labels)  <span class="co"># 计算总体梯度</span></span><span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f&#39;epoch</span><span class="sc">&#123;</span>epoch<span class="sc">&#125;</span><span class="ss">, loss</span><span class="sc">&#123;</span><span class="dv">1</span><span class="sc">:0.2f&#125;</span><span class="ss">&#39;</span>)</span><span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a>        </span></code></pre></div><h2 id="模型问题">1.6. 模型问题</h2><h3 id="复杂性因素">1.6.1. 复杂性因素</h3><ol type="1"><li>可调整参数的数量。当可调整参数的数量（有时称为<strong>自由度</strong>）很大时，模型往往更容易过拟合。</li><li>参数采用的值。当权重的取值范围较大时，模型可能更容易过拟合。</li><li>训练样本的数量。即使模型很简单，也很容易过拟合只包含一两个样本的数据集。而过拟合一个有数百万个样本的数据集则需要一个极其灵活的模型。</li></ol><h3 id="k折交叉验证">1.6.2. K折交叉验证</h3><p>一个epoch中，将训练数据分为K份，在k-1份上进行训练，在第K份上进行验证</p><h3 id="l2正则化">1.6.3. L2正则化</h3>$$<p>$$</p><p>每次都减小一定的权重，岭回归相对于线性回归增加了L2正则化，LASSO回归相当于增加了L1回归，相当于参数选择</p><ol type="1"><li>选择权重参数，然后正则化</li></ol><div class="sourceCode" id="cb24"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 选择参数组</span></span><span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> name, param <span class="kw">in</span> net.named_parameters():</span><span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>    <span class="co"># param.requires_grad 确保只包含需要梯度的参数</span></span><span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> param.requires_grad:</span><span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 根据参数名称判断是否是偏置项</span></span><span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="st">&#39;bias&#39;</span> <span class="kw">in</span> name: <span class="co"># 简单的判断，更严格的判断可以是 name.endswith(&#39;.bias&#39;)</span></span><span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>            params_without_wd.append(param)</span><span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span><span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a>            params_with_wd.append(param)</span><span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a><span class="co"># 初始化优化器，使用参数组</span></span><span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a>trainer <span class="op">=</span> torch.optim.SGD([</span><span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a>    &#123;<span class="st">&#39;params&#39;</span>: params_with_wd, <span class="st">&#39;weight_decay&#39;</span>: wd&#125;,</span><span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a>    &#123;<span class="st">&#39;params&#39;</span>: params_without_wd, <span class="st">&#39;weight_decay&#39;</span>: <span class="dv">0</span>&#125; <span class="co"># 对偏置项设置 weight_decay 为 0</span></span><span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a>], lr<span class="op">=</span>lr)</span></code></pre></div><ol start="2" type="1"><li><p>对所有参数进行正则化</p><div class="sourceCode" id="cb25"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a>trainer <span class="op">=</span> torch.optim.SGD([</span><span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a> net.parameters(), lr <span class="op">=</span> lr, weigth_decay <span class="op">=</span> wd</span><span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>])</span></code></pre></div></li></ol><h3 id="暂退法dropout">1.6.4. 暂退法（Dropout)</h3><p>随即丢弃部分神经元</p><div class="sourceCode" id="cb26"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a>nn.Dropout(ratio)</span></code></pre></div><h3 id="随机初始化">1.6.5. 随机初始化</h3><p>暂退法和随机初始化，都可以减小神经元的对称性</p><div class="sourceCode" id="cb27"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> torch.nn.init <span class="im">as</span> init</span><span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> SimpleMLP(nn.Module):</span><span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>):</span><span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(SimpleMLP, <span class="va">self</span>).<span class="fu">__init__</span>()</span><span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.fc1 <span class="op">=</span> nn.Linear(<span class="dv">784</span>, <span class="dv">128</span>) <span class="co"># 例如处理 28x28 图像展平后的输入</span></span><span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.relu <span class="op">=</span> nn.ReLU()</span><span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.fc2 <span class="op">=</span> nn.Linear(<span class="dv">128</span>, <span class="dv">64</span>)</span><span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.relu2 <span class="op">=</span> nn.ReLU()</span><span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.fc3 <span class="op">=</span> nn.Linear(<span class="dv">64</span>, <span class="dv">10</span>) <span class="co"># 例如输出 10 个类别的概率</span></span><span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 在这里调用自定义初始化函数</span></span><span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>._initialize_weights()</span><span id="cb27-13"><a href="#cb27-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb27-14"><a href="#cb27-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> _initialize_weights(<span class="va">self</span>):</span><span id="cb27-15"><a href="#cb27-15" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&quot;正在进行自定义初始化...&quot;</span>)</span><span id="cb27-16"><a href="#cb27-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> m <span class="kw">in</span> <span class="va">self</span>.modules(): <span class="co"># 遍历模型的所有模块 (包括子模块自身)</span></span><span id="cb27-17"><a href="#cb27-17" aria-hidden="true" tabindex="-1"></a>            <span class="co"># print(f&quot;处理模块: &#123;m&#125;&quot;) # 可以打印查看正在处理的模块类型</span></span><span id="cb27-18"><a href="#cb27-18" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="bu">isinstance</span>(m, nn.Linear):</span><span id="cb27-19"><a href="#cb27-19" aria-hidden="true" tabindex="-1"></a>                <span class="co"># 对线性层的权重使用 He/Kaiming 初始化</span></span><span id="cb27-20"><a href="#cb27-20" aria-hidden="true" tabindex="-1"></a>                init.kaiming_normal_(m.weight, mode<span class="op">=</span><span class="st">&#39;fan_in&#39;</span>, nonlinearity<span class="op">=</span><span class="st">&#39;relu&#39;</span>)</span><span id="cb27-21"><a href="#cb27-21" aria-hidden="true" tabindex="-1"></a>                <span class="co"># 对线性层的偏置初始化为常数 0</span></span><span id="cb27-22"><a href="#cb27-22" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> m.bias <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>: <span class="co"># 检查偏置是否存在</span></span><span id="cb27-23"><a href="#cb27-23" aria-hidden="true" tabindex="-1"></a>                    init.constant_(m.bias, <span class="dv">0</span>)</span></code></pre></div><h2 id="附录">1.7. 附录</h2><p><b id="squence"> squence 序列数据预处理 </b></p><div class="sourceCode" id="cb28"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="co"># 读取序列数据</span></span><span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>d2l.DATA_HUB[<span class="st">&#39;time_machine&#39;</span>] <span class="op">=</span> (d2l.DATA_URL <span class="op">+</span> <span class="st">&#39;timemachine.txt&#39;</span>,</span><span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>                                <span class="st">&#39;090b5e7e70c295757f55df93cb0a180b9691891a&#39;</span>)</span><span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> read_time_machine():  <span class="co">#@save</span></span><span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;将时间机器数据集加载到文本行的列表中&quot;&quot;&quot;</span></span><span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">with</span> <span class="bu">open</span>(d2l.download(<span class="st">&#39;time_machine&#39;</span>), <span class="st">&#39;r&#39;</span>) <span class="im">as</span> f:</span><span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>        lines <span class="op">=</span> f.readlines()</span><span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> [re.sub(<span class="st">&#39;[^A-Za-z]+&#39;</span>, <span class="st">&#39; &#39;</span>, line).strip().lower() <span class="cf">for</span> line <span class="kw">in</span> lines]</span><span id="cb28-10"><a href="#cb28-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-11"><a href="#cb28-11" aria-hidden="true" tabindex="-1"></a>lines <span class="op">=</span> read_time_machine()</span><span id="cb28-12"><a href="#cb28-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-13"><a href="#cb28-13" aria-hidden="true" tabindex="-1"></a><span class="co"># 词元化</span></span><span id="cb28-14"><a href="#cb28-14" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> tokenize(lines, token<span class="op">=</span><span class="st">&#39;word&#39;</span>):  <span class="co">#@save</span></span><span id="cb28-15"><a href="#cb28-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;将文本行拆分为单词或字符词元&quot;&quot;&quot;</span></span><span id="cb28-16"><a href="#cb28-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> token <span class="op">==</span> <span class="st">&#39;word&#39;</span>:</span><span id="cb28-17"><a href="#cb28-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> [line.split() <span class="cf">for</span> line <span class="kw">in</span> lines]</span><span id="cb28-18"><a href="#cb28-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> token <span class="op">==</span> <span class="st">&#39;char&#39;</span>:</span><span id="cb28-19"><a href="#cb28-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> [<span class="bu">list</span>(line) <span class="cf">for</span> line <span class="kw">in</span> lines]</span><span id="cb28-20"><a href="#cb28-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb28-21"><a href="#cb28-21" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">&#39;错误：未知词元类型：&#39;</span> <span class="op">+</span> token)</span><span id="cb28-22"><a href="#cb28-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-23"><a href="#cb28-23" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">type</span>(lines[<span class="dv">0</span>]))</span><span id="cb28-24"><a href="#cb28-24" aria-hidden="true" tabindex="-1"></a>tokens <span class="op">=</span> tokenize(lines)</span><span id="cb28-25"><a href="#cb28-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-26"><a href="#cb28-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-27"><a href="#cb28-27" aria-hidden="true" tabindex="-1"></a><span class="co"># 词元与数值的映射</span></span><span id="cb28-28"><a href="#cb28-28" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Vocab:  <span class="co">#@save</span></span><span id="cb28-29"><a href="#cb28-29" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;文本词表&quot;&quot;&quot;</span></span><span id="cb28-30"><a href="#cb28-30" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, tokens<span class="op">=</span><span class="va">None</span>, min_freq<span class="op">=</span><span class="dv">0</span>, reserved_tokens<span class="op">=</span><span class="va">None</span>):</span><span id="cb28-31"><a href="#cb28-31" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> tokens <span class="kw">is</span> <span class="va">None</span>:</span><span id="cb28-32"><a href="#cb28-32" aria-hidden="true" tabindex="-1"></a>            tokens <span class="op">=</span> []</span><span id="cb28-33"><a href="#cb28-33" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> reserved_tokens <span class="kw">is</span> <span class="va">None</span>:</span><span id="cb28-34"><a href="#cb28-34" aria-hidden="true" tabindex="-1"></a>            reserved_tokens <span class="op">=</span> []</span><span id="cb28-35"><a href="#cb28-35" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 按出现频率排序</span></span><span id="cb28-36"><a href="#cb28-36" aria-hidden="true" tabindex="-1"></a>        counter <span class="op">=</span> count_corpus(tokens)</span><span id="cb28-37"><a href="#cb28-37" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>._token_freqs <span class="op">=</span> <span class="bu">sorted</span>(counter.items(), key<span class="op">=</span><span class="kw">lambda</span> x: x[<span class="dv">1</span>],</span><span id="cb28-38"><a href="#cb28-38" aria-hidden="true" tabindex="-1"></a>                                   reverse<span class="op">=</span><span class="va">True</span>)</span><span id="cb28-39"><a href="#cb28-39" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 未知词元的索引为0</span></span><span id="cb28-40"><a href="#cb28-40" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.idx_to_token <span class="op">=</span> [<span class="st">&#39;&lt;unk&gt;&#39;</span>] <span class="op">+</span> reserved_tokens</span><span id="cb28-41"><a href="#cb28-41" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-42"><a href="#cb28-42" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 单词到索引梭顺序</span></span><span id="cb28-43"><a href="#cb28-43" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.token_to_idx <span class="op">=</span> &#123;token: idx</span><span id="cb28-44"><a href="#cb28-44" aria-hidden="true" tabindex="-1"></a>                             <span class="cf">for</span> idx, token <span class="kw">in</span> <span class="bu">enumerate</span>(<span class="va">self</span>.idx_to_token)&#125;</span><span id="cb28-45"><a href="#cb28-45" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb28-46"><a href="#cb28-46" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> token, freq <span class="kw">in</span> <span class="va">self</span>._token_freqs:</span><span id="cb28-47"><a href="#cb28-47" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> freq <span class="op">&lt;</span> min_freq:</span><span id="cb28-48"><a href="#cb28-48" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span></span><span id="cb28-49"><a href="#cb28-49" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> token <span class="kw">not</span> <span class="kw">in</span> <span class="va">self</span>.token_to_idx:</span><span id="cb28-50"><a href="#cb28-50" aria-hidden="true" tabindex="-1"></a>                <span class="co"># 顺序到单词</span></span><span id="cb28-51"><a href="#cb28-51" aria-hidden="true" tabindex="-1"></a>                <span class="va">self</span>.idx_to_token.append(token)</span><span id="cb28-52"><a href="#cb28-52" aria-hidden="true" tabindex="-1"></a>                <span class="va">self</span>.token_to_idx[token] <span class="op">=</span> <span class="bu">len</span>(<span class="va">self</span>.idx_to_token) <span class="op">-</span> <span class="dv">1</span></span><span id="cb28-53"><a href="#cb28-53" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-54"><a href="#cb28-54" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__len__</span>(<span class="va">self</span>):</span><span id="cb28-55"><a href="#cb28-55" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="bu">len</span>(<span class="va">self</span>.idx_to_token)</span><span id="cb28-56"><a href="#cb28-56" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-57"><a href="#cb28-57" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__getitem__</span>(<span class="va">self</span>, tokens):</span><span id="cb28-58"><a href="#cb28-58" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">not</span> <span class="bu">isinstance</span>(tokens, (<span class="bu">list</span>, <span class="bu">tuple</span>)):</span><span id="cb28-59"><a href="#cb28-59" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="va">self</span>.token_to_idx.get(tokens, <span class="va">self</span>.unk)</span><span id="cb28-60"><a href="#cb28-60" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> [<span class="va">self</span>.<span class="fu">__getitem__</span>(token) <span class="cf">for</span> token <span class="kw">in</span> tokens]</span><span id="cb28-61"><a href="#cb28-61" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-62"><a href="#cb28-62" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> to_tokens(<span class="va">self</span>, indices):</span><span id="cb28-63"><a href="#cb28-63" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">not</span> <span class="bu">isinstance</span>(indices, (<span class="bu">list</span>, <span class="bu">tuple</span>)):</span><span id="cb28-64"><a href="#cb28-64" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="va">self</span>.idx_to_token[indices]</span><span id="cb28-65"><a href="#cb28-65" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> [<span class="va">self</span>.idx_to_token[index] <span class="cf">for</span> index <span class="kw">in</span> indices]</span><span id="cb28-66"><a href="#cb28-66" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-67"><a href="#cb28-67" aria-hidden="true" tabindex="-1"></a>    <span class="at">@property</span></span><span id="cb28-68"><a href="#cb28-68" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> unk(<span class="va">self</span>):  <span class="co"># 未知词元的索引为0</span></span><span id="cb28-69"><a href="#cb28-69" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span></span><span id="cb28-70"><a href="#cb28-70" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-71"><a href="#cb28-71" aria-hidden="true" tabindex="-1"></a>    <span class="at">@property</span></span><span id="cb28-72"><a href="#cb28-72" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> token_freqs(<span class="va">self</span>):</span><span id="cb28-73"><a href="#cb28-73" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">self</span>._token_freqs</span><span id="cb28-74"><a href="#cb28-74" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-75"><a href="#cb28-75" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> count_corpus(tokens):  <span class="co">#@save</span></span><span id="cb28-76"><a href="#cb28-76" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;统计词元的频率&quot;&quot;&quot;</span></span><span id="cb28-77"><a href="#cb28-77" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 这里的tokens是1D列表或2D列表</span></span><span id="cb28-78"><a href="#cb28-78" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(tokens) <span class="op">==</span> <span class="dv">0</span> <span class="kw">or</span> <span class="bu">isinstance</span>(tokens[<span class="dv">0</span>], <span class="bu">list</span>):</span><span id="cb28-79"><a href="#cb28-79" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 将词元列表展平成一个列表</span></span><span id="cb28-80"><a href="#cb28-80" aria-hidden="true" tabindex="-1"></a>        tokens <span class="op">=</span> [token <span class="cf">for</span> line <span class="kw">in</span> tokens <span class="cf">for</span> token <span class="kw">in</span> line]</span><span id="cb28-81"><a href="#cb28-81" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> collections.Counter(tokens)</span><span id="cb28-82"><a href="#cb28-82" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-83"><a href="#cb28-83" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> load_corpus_time_machine(max_tokens<span class="op">=-</span><span class="dv">1</span>):  <span class="co">#@save</span></span><span id="cb28-84"><a href="#cb28-84" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;返回时光机器数据集的词元索引列表和词表&quot;&quot;&quot;</span></span><span id="cb28-85"><a href="#cb28-85" aria-hidden="true" tabindex="-1"></a>    lines <span class="op">=</span> read_time_machine()</span><span id="cb28-86"><a href="#cb28-86" aria-hidden="true" tabindex="-1"></a>    tokens <span class="op">=</span> tokenize(lines, <span class="st">&#39;char&#39;</span>)</span><span id="cb28-87"><a href="#cb28-87" aria-hidden="true" tabindex="-1"></a>    vocab <span class="op">=</span> Vocab(tokens)</span><span id="cb28-88"><a href="#cb28-88" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 因为时光机器数据集中的每个文本行不一定是一个句子或一个段落，</span></span><span id="cb28-89"><a href="#cb28-89" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 所以将所有文本行展平到一个列表中</span></span><span id="cb28-90"><a href="#cb28-90" aria-hidden="true" tabindex="-1"></a>    corpus <span class="op">=</span> [vocab[token] <span class="cf">for</span> line <span class="kw">in</span> tokens <span class="cf">for</span> token <span class="kw">in</span> line]</span><span id="cb28-91"><a href="#cb28-91" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> max_tokens <span class="op">&gt;</span> <span class="dv">0</span>:</span><span id="cb28-92"><a href="#cb28-92" aria-hidden="true" tabindex="-1"></a>        corpus <span class="op">=</span> corpus[:max_tokens]</span><span id="cb28-93"><a href="#cb28-93" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> corpus, vocab</span></code></pre></div><p><b id="grad_clipping"> 梯度衰减</b></p><div class="sourceCode" id="cb29"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> grad_clipping(net, theta):  <span class="co">#@save</span></span><span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;裁剪梯度&quot;&quot;&quot;</span></span><span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">isinstance</span>(net, nn.Module):</span><span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>        params <span class="op">=</span> [p <span class="cf">for</span> p <span class="kw">in</span> net.parameters() <span class="cf">if</span> p.requires_grad]</span><span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>        params <span class="op">=</span> net.params</span><span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>    norm <span class="op">=</span> torch.sqrt(<span class="bu">sum</span>(torch.<span class="bu">sum</span>((p.grad <span class="op">**</span> <span class="dv">2</span>)) <span class="cf">for</span> p <span class="kw">in</span> params))</span><span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> norm <span class="op">&gt;</span> theta:</span><span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> param <span class="kw">in</span> params:</span><span id="cb29-10"><a href="#cb29-10" aria-hidden="true" tabindex="-1"></a>            param.grad[:] <span class="op">*=</span> theta <span class="op">/</span> norm</span></code></pre></div><h3 id="读取文本序列数据">1.7.1. 读取文本序列数据</h3><div class="sourceCode" id="cb30"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span><span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> torch</span><span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> d2l <span class="im">import</span> torch <span class="im">as</span> d2l</span><span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a><span class="co"># 下载并读出序列</span></span><span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a>d2l.DATA_HUB[<span class="st">&#39;fra-eng&#39;</span>] <span class="op">=</span> (d2l.DATA_URL <span class="op">+</span> <span class="st">&#39;fra-eng.zip&#39;</span>,</span><span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a>                           <span class="st">&#39;94646ad1522d915e7b0f9296181140edcf86a4f5&#39;</span>)</span><span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a><span class="co">#@save</span></span><span id="cb30-10"><a href="#cb30-10" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> read_data_nmt():</span><span id="cb30-11"><a href="#cb30-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;载入“英语－法语”数据集&quot;&quot;&quot;</span></span><span id="cb30-12"><a href="#cb30-12" aria-hidden="true" tabindex="-1"></a>    data_dir <span class="op">=</span> d2l.download_extract(<span class="st">&#39;fra-eng&#39;</span>)</span><span id="cb30-13"><a href="#cb30-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">with</span> <span class="bu">open</span>(os.path.join(data_dir, <span class="st">&#39;fra.txt&#39;</span>), <span class="st">&#39;r&#39;</span>,</span><span id="cb30-14"><a href="#cb30-14" aria-hidden="true" tabindex="-1"></a>             encoding<span class="op">=</span><span class="st">&#39;utf-8&#39;</span>) <span class="im">as</span> f:</span><span id="cb30-15"><a href="#cb30-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> f.read()</span><span id="cb30-16"><a href="#cb30-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-17"><a href="#cb30-17" aria-hidden="true" tabindex="-1"></a>raw_text <span class="op">=</span> read_data_nmt()</span><span id="cb30-18"><a href="#cb30-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(raw_text[:<span class="dv">75</span>])</span><span id="cb30-19"><a href="#cb30-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-20"><a href="#cb30-20" aria-hidden="true" tabindex="-1"></a><span class="co"># 处理序列</span></span><span id="cb30-21"><a href="#cb30-21" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> preprocess_nmt(text):</span><span id="cb30-22"><a href="#cb30-22" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;预处理“英语－法语”数据集&quot;&quot;&quot;</span></span><span id="cb30-23"><a href="#cb30-23" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> no_space(char, prev_char):</span><span id="cb30-24"><a href="#cb30-24" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> char <span class="kw">in</span> <span class="bu">set</span>(<span class="st">&#39;,.!?&#39;</span>) <span class="kw">and</span> prev_char <span class="op">!=</span> <span class="st">&#39; &#39;</span></span><span id="cb30-25"><a href="#cb30-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-26"><a href="#cb30-26" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 使用空格替换不间断空格</span></span><span id="cb30-27"><a href="#cb30-27" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 使用小写字母替换大写字母</span></span><span id="cb30-28"><a href="#cb30-28" aria-hidden="true" tabindex="-1"></a>    text <span class="op">=</span> text.replace(<span class="st">&#39;</span><span class="ch">\u202f</span><span class="st">&#39;</span>, <span class="st">&#39; &#39;</span>).replace(<span class="st">&#39;</span><span class="ch">\xa0</span><span class="st">&#39;</span>, <span class="st">&#39; &#39;</span>).lower()</span><span id="cb30-29"><a href="#cb30-29" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 在单词和标点符号之间插入空格</span></span><span id="cb30-30"><a href="#cb30-30" aria-hidden="true" tabindex="-1"></a>    out <span class="op">=</span> [<span class="st">&#39; &#39;</span> <span class="op">+</span> char <span class="cf">if</span> i <span class="op">&gt;</span> <span class="dv">0</span> <span class="kw">and</span> no_space(char, text[i <span class="op">-</span> <span class="dv">1</span>]) <span class="cf">else</span> char</span><span id="cb30-31"><a href="#cb30-31" aria-hidden="true" tabindex="-1"></a>           <span class="cf">for</span> i, char <span class="kw">in</span> <span class="bu">enumerate</span>(text)]</span><span id="cb30-32"><a href="#cb30-32" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="st">&#39;&#39;</span>.join(out)</span><span id="cb30-33"><a href="#cb30-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-34"><a href="#cb30-34" aria-hidden="true" tabindex="-1"></a><span class="co"># 词元化，并区分出feature与label</span></span><span id="cb30-35"><a href="#cb30-35" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> tokenize_nmt(text, num_examples<span class="op">=</span><span class="va">None</span>):</span><span id="cb30-36"><a href="#cb30-36" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;词元化“英语－法语”数据数据集&quot;&quot;&quot;</span></span><span id="cb30-37"><a href="#cb30-37" aria-hidden="true" tabindex="-1"></a>    source, target <span class="op">=</span> [], []</span><span id="cb30-38"><a href="#cb30-38" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i, line <span class="kw">in</span> <span class="bu">enumerate</span>(text.split(<span class="st">&#39;</span><span class="ch">\n</span><span class="st">&#39;</span>)):</span><span id="cb30-39"><a href="#cb30-39" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> num_examples <span class="kw">and</span> i <span class="op">&gt;</span> num_examples:</span><span id="cb30-40"><a href="#cb30-40" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span><span id="cb30-41"><a href="#cb30-41" aria-hidden="true" tabindex="-1"></a>        parts <span class="op">=</span> line.split(<span class="st">&#39;</span><span class="ch">\t</span><span class="st">&#39;</span>)</span><span id="cb30-42"><a href="#cb30-42" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="bu">len</span>(parts) <span class="op">==</span> <span class="dv">2</span>:</span><span id="cb30-43"><a href="#cb30-43" aria-hidden="true" tabindex="-1"></a>            <span class="co"># 之前标点符号之间增加了空格，使用空格分割</span></span><span id="cb30-44"><a href="#cb30-44" aria-hidden="true" tabindex="-1"></a>            source.append(parts[<span class="dv">0</span>].split(<span class="st">&#39; &#39;</span>))</span><span id="cb30-45"><a href="#cb30-45" aria-hidden="true" tabindex="-1"></a>            target.append(parts[<span class="dv">1</span>].split(<span class="st">&#39; &#39;</span>))</span><span id="cb30-46"><a href="#cb30-46" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> source, target</span><span id="cb30-47"><a href="#cb30-47" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-48"><a href="#cb30-48" aria-hidden="true" tabindex="-1"></a>source, target <span class="op">=</span> tokenize_nmt(text)</span><span id="cb30-49"><a href="#cb30-49" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-50"><a href="#cb30-50" aria-hidden="true" tabindex="-1"></a><span class="co"># 阶段或填充词元</span></span><span id="cb30-51"><a href="#cb30-51" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> truncate_pad(line, num_steps, padding_token):</span><span id="cb30-52"><a href="#cb30-52" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;截断或填充文本序列&quot;&quot;&quot;</span></span><span id="cb30-53"><a href="#cb30-53" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(line) <span class="op">&gt;</span> num_steps:</span><span id="cb30-54"><a href="#cb30-54" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> line[:num_steps]  <span class="co"># 截断</span></span><span id="cb30-55"><a href="#cb30-55" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> line <span class="op">+</span> [padding_token] <span class="op">*</span> (num_steps <span class="op">-</span> <span class="bu">len</span>(line))  <span class="co"># 填充</span></span><span id="cb30-56"><a href="#cb30-56" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-57"><a href="#cb30-57" aria-hidden="true" tabindex="-1"></a>truncate_pad(src_vocab[source[<span class="dv">0</span>]], <span class="dv">10</span>, src_vocab[<span class="st">&#39;&lt;pad&gt;&#39;</span>])</span><span id="cb30-58"><a href="#cb30-58" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-59"><a href="#cb30-59" aria-hidden="true" tabindex="-1"></a><span class="co"># 统计序列数据valid_len</span></span><span id="cb30-60"><a href="#cb30-60" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> build_array_nmt(lines, vocab, num_steps):</span><span id="cb30-61"><a href="#cb30-61" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;将机器翻译的文本序列转换成小批量&quot;&quot;&quot;</span></span><span id="cb30-62"><a href="#cb30-62" aria-hidden="true" tabindex="-1"></a>    lines <span class="op">=</span> [vocab[l] <span class="cf">for</span> l <span class="kw">in</span> lines]</span><span id="cb30-63"><a href="#cb30-63" aria-hidden="true" tabindex="-1"></a>    lines <span class="op">=</span> [l <span class="op">+</span> [vocab[<span class="st">&#39;&lt;eos&gt;&#39;</span>]] <span class="cf">for</span> l <span class="kw">in</span> lines]</span><span id="cb30-64"><a href="#cb30-64" aria-hidden="true" tabindex="-1"></a>    array <span class="op">=</span> torch.tensor([truncate_pad(</span><span id="cb30-65"><a href="#cb30-65" aria-hidden="true" tabindex="-1"></a>        l, num_steps, vocab[<span class="st">&#39;&lt;pad&gt;&#39;</span>]) <span class="cf">for</span> l <span class="kw">in</span> lines])</span><span id="cb30-66"><a href="#cb30-66" aria-hidden="true" tabindex="-1"></a>    valid_len <span class="op">=</span> (array <span class="op">!=</span> vocab[<span class="st">&#39;&lt;pad&gt;&#39;</span>]).<span class="bu">type</span>(torch.int32).<span class="bu">sum</span>(<span class="dv">1</span>)</span><span id="cb30-67"><a href="#cb30-67" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> array, valid_len</span><span id="cb30-68"><a href="#cb30-68" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-69"><a href="#cb30-69" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-70"><a href="#cb30-70" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> load_data_nmt(batch_size, num_steps, num_examples<span class="op">=</span><span class="dv">600</span>):</span><span id="cb30-71"><a href="#cb30-71" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;返回翻译数据集的迭代器和词表&quot;&quot;&quot;</span></span><span id="cb30-72"><a href="#cb30-72" aria-hidden="true" tabindex="-1"></a>    text <span class="op">=</span> preprocess_nmt(read_data_nmt()) <span class="co"># 读取序列</span></span><span id="cb30-73"><a href="#cb30-73" aria-hidden="true" tabindex="-1"></a>    source, target <span class="op">=</span> tokenize_nmt(text, num_examples)  <span class="co"># 词元化序列</span></span><span id="cb30-74"><a href="#cb30-74" aria-hidden="true" tabindex="-1"></a>    src_vocab <span class="op">=</span> d2l.Vocab(source, min_freq<span class="op">=</span><span class="dv">2</span>, <span class="co"># 建立词表</span></span><span id="cb30-75"><a href="#cb30-75" aria-hidden="true" tabindex="-1"></a>                          reserved_tokens<span class="op">=</span>[<span class="st">&#39;&lt;pad&gt;&#39;</span>, <span class="st">&#39;&lt;bos&gt;&#39;</span>, <span class="st">&#39;&lt;eos&gt;&#39;</span>])</span><span id="cb30-76"><a href="#cb30-76" aria-hidden="true" tabindex="-1"></a>    tgt_vocab <span class="op">=</span> d2l.Vocab(target, min_freq<span class="op">=</span><span class="dv">2</span>,</span><span id="cb30-77"><a href="#cb30-77" aria-hidden="true" tabindex="-1"></a>                          reserved_tokens<span class="op">=</span>[<span class="st">&#39;&lt;pad&gt;&#39;</span>, <span class="st">&#39;&lt;bos&gt;&#39;</span>, <span class="st">&#39;&lt;eos&gt;&#39;</span>])</span><span id="cb30-78"><a href="#cb30-78" aria-hidden="true" tabindex="-1"></a>    src_array, src_valid_len <span class="op">=</span> build_array_nmt(source, src_vocab, num_steps)  <span class="co"># 填充或阶段</span></span><span id="cb30-79"><a href="#cb30-79" aria-hidden="true" tabindex="-1"></a>    tgt_array, tgt_valid_len <span class="op">=</span> build_array_nmt(target, tgt_vocab, num_steps)</span><span id="cb30-80"><a href="#cb30-80" aria-hidden="true" tabindex="-1"></a>    data_arrays <span class="op">=</span> (src_array, src_valid_len, tgt_array, tgt_valid_len)</span><span id="cb30-81"><a href="#cb30-81" aria-hidden="true" tabindex="-1"></a>    data_iter <span class="op">=</span> d2l.load_array(data_arrays, batch_size)   <span class="co"># 创建小批量迭代器</span></span><span id="cb30-82"><a href="#cb30-82" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> data_iter, src_vocab, tgt_vocab</span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端代码的联合使用</title>
      <link href="/2025/05/24/java/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/05/24/java/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="html-css-javascript">1. html+ css+ javascript</h1><h2 id="html">1.1. html</h2><h3 id="常用插件">1.1.1. 常用插件</h3><ol type="1"><li>HTML CSS Support</li><li>Live Server</li><li>Auto Rename Tag</li><li>open in browser</li></ol><h3 id="常用示例">1.1.2. 常用示例</h3><div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;!DOCTYPE </span>html<span class="dt">&gt;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;html&gt;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;head&gt;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">&lt;!-- 这里放置文档的元信息 --&gt;</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;title&gt;</span>文档标题<span class="kw">&lt;/title&gt;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;meta</span><span class="ot"> charset=</span><span class="st">&quot;UTF-8&quot;</span><span class="kw">&gt;</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">&lt;!-- 连接外部样式表或脚本文件等 --&gt;</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;link</span><span class="ot"> rel=</span><span class="st">&quot;stylesheet&quot;</span><span class="ot"> type=</span><span class="st">&quot;text/css&quot;</span><span class="ot"> href=</span><span class="st">&quot;styles.css&quot;</span><span class="kw">&gt;</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;script.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/head&gt;</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;body&gt;</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- 这里放置页面内容 --&gt;</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;h1&gt;</span>这是一个标题<span class="kw">&lt;/h1&gt;</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;p&gt;</span>这是一个段落。<span class="kw">&lt;/p&gt;</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;https://www.example.com&quot;</span><span class="kw">&gt;</span>这是一个链接<span class="kw">&lt;/a&gt;</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- 其他内容 --&gt;</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/body&gt;</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/html&gt;</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="dt">&lt;!DOCTYPE </span>html<span class="dt">&gt;</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;html&gt;</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;head&gt;</span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    <span class="co">&lt;!-- 这里放置文档的元信息 --&gt;</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;title&gt;</span>文档标题<span class="kw">&lt;/title&gt;</span></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;meta</span><span class="ot"> charset=</span><span class="st">&quot;UTF-8&quot;</span><span class="kw">&gt;</span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>    <span class="co">&lt;!-- 连接外部样式表或脚本文件等 --&gt;</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;link</span><span class="ot"> rel=</span><span class="st">&quot;stylesheet&quot;</span><span class="ot"> type=</span><span class="st">&quot;text/css&quot;</span><span class="ot"> href=</span><span class="st">&quot;styles.css&quot;</span><span class="kw">&gt;</span></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;script.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/head&gt;</span></span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;body&gt;</span></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- 这里放置页面内容 --&gt;</span></span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;h1&gt;</span>这是一个标题<span class="kw">&lt;/h1&gt;</span></span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;p&gt;</span>这是一个段落。<span class="kw">&lt;/p&gt;</span></span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;https://www.example.com&quot;</span><span class="kw">&gt;</span>这是一个链接<span class="kw">&lt;/a&gt;</span></span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- 其他内容 --&gt;</span></span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/body&gt;</span></span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/html&gt;</span></span></code></pre></div><h2 id="css">1.2. css</h2><h3 id="规则">1.2.1. 规则</h3><div class="sourceCode" id="cb2"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>选择器 &#123;</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    属性1<span class="in">: 属性值1;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    属性2<span class="in">: 属性值2;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>&#125;</span></code></pre></div><h3 id="导入方式">1.2.2. 导入方式</h3><ol type="1"><li>内联使用</li></ol><div class="sourceCode" id="cb3"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;h1</span><span class="ot"> style=</span><span class="st">&quot;color: blue; font-size: 30px;&quot;</span><span class="kw">&gt;</span>这是一段内联样式文本。<span class="kw">&lt;/h1&gt;</span></span></code></pre></div><ol start="2" type="1"><li><p>外部样式表</p><p>写在</p><head><p>中</p><div class="sourceCode" id="cb4"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;head&gt;</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;style&gt;</span>        </span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>     h2 &#123;           </span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>            <span class="kw">color</span>: <span class="cn">red</span><span class="op">;</span>            </span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>            <span class="kw">font-size</span>: <span class="dv">16</span><span class="dt">px</span><span class="op">;</span>        </span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        &#125;    </span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/style&gt;</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/head&gt;</span></span></code></pre></div></head></li><li><p>外部样式表</p><p>使用link连接外部资源，type为“text/css”，href指向样式内容</p></li></ol><div class="sourceCode" id="cb5"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;head&gt;</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;link</span><span class="ot"> rel=</span><span class="st">&quot;stylesheet&quot;</span><span class="ot"> type=</span><span class="st">&quot;text/css&quot;</span><span class="ot"> href=</span><span class="st">&quot;./css/style.css&quot;</span><span class="kw">&gt;</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/head&gt;</span></span></code></pre></div><h3 id="选择器">1.2.3. 选择器</h3><table><thead><tr class="header"><th>选择器</th><th>形式</th></tr></thead><tbody><tr class="odd"><td>元素</td><td>p</td></tr><tr class="even"><td>类</td><td>.highlight</td></tr><tr class="odd"><td>id</td><td>#header</td></tr><tr class="even"><td>通用选择</td><td>*</td></tr><tr class="odd"><td>子元素</td><td>父元素&gt; 子元素</td></tr><tr class="even"><td>后代</td><td><code>ul li</code> 选择了所有在 <code>&lt;ul&gt;</code> 元素内部的 <code>&lt;li&gt;</code> 元素。</td></tr><tr class="odd"><td>相邻兄弟</td><td><code>元素名 + 元素名</code>，例如，<code>h2 + p</code> 选择了与 <code>&lt;h2&gt;</code> 相邻的 <code>&lt;p&gt;</code> 元素。</td></tr><tr class="even"><td>/* 通用兄弟选择器 */</td><td>h4 ~ p { background-color: #1b91ff; }</td></tr><tr class="odd"><td>伪类选择器</td><td>用户交互时的属性变化<br>包括鼠标悬停（<code>:hover</code> ）、链接状态（<code>:active</code>）、第一个子元素（<code>:first-child</code>）</td></tr></tbody></table><h3 id="属性">1.2.4. 属性</h3><p>了解了如何选中我们想要的元素，接下来，我们来学习 CSS 常用的样式属性。CSS 的属性有上百个，但是这不意味着，我们每个都要学习，更多的属性可以参考 <a href="https://www.runoob.com/cssref/css-reference.html">这里</a></p><h4 id="盒子模型">1.2.4.1. 盒子模型</h4><p>描述了文档中的每个元素都被看作是一个矩形的盒子，这个盒子包含了内容、内边距、边框和外边距。</p><figure><img src="/2025/05/24/java/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E8%81%94%E5%90%88%E4%BD%BF%E7%94%A8/202311141906963.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p>其中，从内到外分别是：</p><table><thead><tr class="header"><th style="text-align: center;">属性名</th><th style="text-align: center;">说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"><code>内容（Content）</code></td><td style="text-align: center;">盒子包含的实际内容，比如文本、图片等。</td></tr><tr class="even"><td style="text-align: center;"><code>内边距（Padding）</code></td><td style="text-align: center;">围绕在内容的内部，是内容与边框之间的空间。可以使用 <code>padding</code> 属性来设置。</td></tr><tr class="odd"><td style="text-align: center;"><code>边框（Border）</code></td><td style="text-align: center;">围绕在内边距的外部，是盒子的边界。可以使用 <code>border</code> 属性来设置。</td></tr><tr class="even"><td style="text-align: center;"><code>外边距（Margin）</code></td><td style="text-align: center;">围绕在边框的外部，是盒子与其他元素之间的空间。可以使用 <code>margin</code> 属性来设置。</td></tr></tbody></table><div class="sourceCode" id="cb6"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.demo</span> &#123;</span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>            <span class="kw">background-color</span>: <span class="cn">aqua</span><span class="op">;</span> <span class="co">/* 设置背景色 */</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>            <span class="kw">display</span>: <span class="dv">inline-block</span><span class="op">;</span> <span class="co">/* 转换成行内块元素 */</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>            <span class="kw">border</span>: <span class="dv">10</span><span class="dt">px</span> <span class="dv">solid</span> <span class="cn">green</span><span class="op">;</span> <span class="co">/* 设置边框样式 */</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>            <span class="kw">padding</span>: <span class="dv">20</span><span class="dt">px</span><span class="op">;</span> <span class="co">/* 设置内边距 */</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>            <span class="kw">margin</span>: <span class="dv">40</span><span class="dt">px</span><span class="op">;</span> <span class="co">/* 设置外边距 */</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        &#125;</span></code></pre></div><h4 id="浮动">1.2.4.2. 浮动</h4><p>标准流，浮动、定位</p><p>使用float控制浮动格式</p><div class="sourceCode" id="cb7"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.left</span><span class="op">,</span> <span class="fu">.right</span> &#123;</span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* 添加浮动，元素统一向左浮动，向右同理 float:right*/</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">float</span>: <span class="dv">left</span><span class="op">;</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">width</span>: <span class="dv">300</span><span class="dt">px</span><span class="op">;</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">height</span>: <span class="dv">300</span><span class="dt">px</span><span class="op">;</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">background-color</span>: <span class="cn">blue</span><span class="op">;</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>&#125;</span></code></pre></div><p>清除浮动格式，在后续的模块中不再浮动，不允许后续模块浮动</p><ol type="1"><li>加上一个空的块级元素，使用clear属性</li></ol><div class="sourceCode" id="cb8"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">.clearfix::after</span> &#123;</span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>            <span class="kw">content</span>: <span class="st">&quot;&quot;</span><span class="op">;</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>            <span class="kw">display</span>: <span class="dv">table</span><span class="op">;</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>            <span class="kw">clear</span>: <span class="dv">both</span><span class="op">;</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>        &#125;</span></code></pre></div><ol start="2" type="1"><li><p>父模块属性中使用clearfix</p></li><li><p>使用overflow: hidden 属性</p></li></ol><h4 id="定位">1.2.4.3. 定位</h4><p>相关属性：</p><p>top ,bottom , left ,right</p><p>postion属性值</p><table><thead><tr class="header"><th>position</th><th>value</th></tr></thead><tbody><tr class="odd"><td>relative</td><td>相对于正常文档定位</td></tr><tr class="even"><td>absolute</td><td>相对最近的已经定位的祖先元素定位，没有，则相对初始包含块定位</td></tr><tr class="odd"><td>fixed</td><td>固定位置</td></tr></tbody></table><h2 id="javascript">1.3. javascript</h2><h3 id="导入方式-1">1.3.1. 导入方式</h3><ol type="1"><li>内联方式（inline):</li></ol><div class="sourceCode" id="cb9"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;script&gt;</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="st">&#39;hello&#39;</span>)<span class="op">;</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/script&gt;</span></span></code></pre></div><ol start="2" type="1"><li>外部引入</li></ol><div class="sourceCode" id="cb10"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;myscript.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span></code></pre></div><h3 id="基本语法">1.3.2. 基本语法</h3><div class="sourceCode" id="cb11"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> x<span class="op">;</span> <span class="co">// 声明变量</span></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> y <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> <span class="co">//声明并初始化变量</span></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> <span class="cn">PI</span><span class="op">=</span> <span class="fl">3.14</span><span class="op">;</span> <span class="co">//声明一个常量</span></span></code></pre></div><table><thead><tr class="header"><th style="text-align: left;">特性</th><th style="text-align: left;"><code>var</code></th><th style="text-align: left;"><code>let</code></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><strong>作用域</strong></td><td style="text-align: left;">函数作用域</td><td style="text-align: left;">块级作用域</td></tr><tr class="even"><td style="text-align: left;"><strong>变量提升</strong></td><td style="text-align: left;">声明会被提升，赋值不提升</td><td style="text-align: left;">存在提升，但有暂时性死区</td></tr><tr class="odd"><td style="text-align: left;"><strong>重复声明</strong></td><td style="text-align: left;">允许在同作用域内重复声明</td><td style="text-align: left;">不允许在同块级作用域内重复声明</td></tr></tbody></table><h4 id="函数">1.3.2.1. 函数</h4><div class="sourceCode" id="cb12"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>funtion <span class="fu">hello</span>(a<span class="op">,</span> b)&#123;</span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a<span class="op">+</span>b<span class="op">;</span></span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>&#125;</span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="co">//闭包是指一个函数能够访问并记住其词法作用域，即使该函数在当前词法作用域之外执行。闭包使得函数可以保持对其创建时的作用域的引用</span></span><span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">outer</span>() &#123;</span><span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">var</span> outerVar <span class="op">=</span> <span class="st">&quot;I am outer&quot;</span><span class="op">;</span></span><span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">function</span> <span class="fu">inner</span>() &#123;</span><span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>        <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(outerVar)<span class="op">;</span> <span class="co">// 访问了外部函数的变量</span></span><span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>    &#125;</span><span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> inner<span class="op">;</span></span><span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>&#125;</span></code></pre></div><h4 id="关联html中的事件">1.3.2.2. 关联html中的事件</h4><table><thead><tr class="header"><th>事件</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>onClick</td><td>鼠标点击</td></tr><tr class="even"><td>onMouseOver</td><td>鼠标经过</td></tr><tr class="odd"><td>onMouseOut</td><td>鼠标移出</td></tr><tr class="even"><td>onChange</td><td>文本内容改变</td></tr><tr class="odd"><td>onSelect</td><td>文本框选中</td></tr><tr class="even"><td>onFocuse</td><td>光标聚集</td></tr><tr class="odd"><td><code>onBlur</code></td><td>移开光标</td></tr><tr class="even"><td><code>onLoad</code></td><td>网页加载</td></tr><tr class="odd"><td><code>onUnload</code></td><td>关闭网页</td></tr></tbody></table><p>事件处理程序是与特定事件相关联的函数。当事件发生时，关联的事件处理程序将被调用。在 HTML 中，可以通过以下方式添加事件处理程序：</p><ol type="1"><li><p>html</p><div class="sourceCode" id="cb13"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;bottom</span><span class="ot"> onClick=</span> <span class="st">&#39;myFunction()&#39;</span><span class="kw">&gt;</span> Click me<span class="kw">&lt;/bottom&gt;</span></span></code></pre></div></li><li><p>DOM属性</p></li></ol><div class="sourceCode" id="cb14"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> botton <span class="op">=</span> <span class="bu">document</span><span class="op">.</span><span class="fu">getElementById</span>(<span class="st">&#39;myButton&#39;</span>)<span class="op">;</span></span><span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>botton<span class="op">.</span><span class="at">onclick</span> <span class="op">=</span> <span class="kw">function</span>()&#123;</span><span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>&#125;<span class="op">;</span></span></code></pre></div><ol start="3" type="1"><li>addEventListener</li></ol><div class="sourceCode" id="cb15"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> button <span class="op">=</span> <span class="bu">document</span><span class="op">.</span><span class="fu">getElementById</span>(<span class="st">&#39;myButton&#39;</span>)<span class="op">;</span></span><span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>button<span class="op">.</span><span class="fu">addEventListener</span>(<span class="st">&#39;click&#39;</span><span class="op">,</span> <span class="kw">function</span> () &#123;</span><span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">alert</span>(<span class="st">&#39;Button clicked!&#39;</span>)<span class="op">;</span></span><span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>&#125;)<span class="op">;</span></span></code></pre></div><h3 id="获取元素并修改内容">1.3.3. 获取元素，并修改内容</h3><p>DOM 中的一切都是节点。文档本身是一个文档节点，而文档中的元素、属性和文本都是不同类型的节点。主要的节点类型包括：</p><ol type="1"><li><code>元素节点（Element Nodes）</code>： 表示 HTML 或 XML 文档中的元素，如 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code> 等。</li><li><code>属性节点（Attribute Nodes）</code>： 表示元素的属性，如 class、id 等。</li><li><code>文本节点（Text Nodes）</code>： 表示元素的文本内容</li></ol><div class="sourceCode" id="cb16"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 修改元素文本内容</span></span><span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>element<span class="op">.</span><span class="at">innerHTML</span> <span class="op">=</span> <span class="st">&#39;新的文本内容&#39;</span><span class="op">;</span></span><span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="co">// 添加新的子元素</span></span><span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> newElement <span class="op">=</span> <span class="bu">document</span><span class="op">.</span><span class="fu">createElement</span>(<span class="st">&#39;div&#39;</span>)<span class="op">;</span></span><span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>element<span class="op">.</span><span class="fu">appendChild</span>(newElement)<span class="op">;</span></span><span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="co">// 移除子元素</span></span><span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a><span class="kw">var</span> childElement <span class="op">=</span> element<span class="op">.</span><span class="at">firstChild</span><span class="op">;</span></span><span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>element<span class="op">.</span><span class="fu">removeChild</span>(childElement)<span class="op">;</span></span></code></pre></div><h1 id="致谢">2. 致谢</h1><p>摘录自<a href="https://docs.geeksman.com/front-end/1.front-end-html.html#html">Luo</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
      <url>/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="大模型">1. 大模型</h1><p>训练流程</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250516165010562.png" alt="image-20250516165010562"><figcaption aria-hidden="true">image-20250516165010562</figcaption></figure><h2 id="预训练">1.1. 预训练</h2><p>无监督学习，学习先验的背景知识</p><p>大模型的输出总的概率与原数据比较，不需要 <span class="math display"><em>L</em>(<em>u</em>) = ∑<sub><em>i</em></sub>log (<em>p</em>(<em>u</em><sub><em>i</em></sub>|<em>u</em><sub>0</sub>, ..., <em>u</em><sub><em>i</em> − 1</sub>)|<em>θ</em>)</span></p><ol type="1"><li><p>数据获取</p><ol type="1"><li>网页爬取，数据没有处理</li><li>重复</li><li>拼写错误</li></ol></li><li><p>数据清洗</p><ol type="1"><li><p>转换文本格式</p></li><li><p>去重</p><ol type="1"><li>URL爬取的网站去重</li><li>文档的相似度</li><li>对文档分组30M， 超过6次重复， 删除其余5行</li><li>启发式过滤，使用token级的KL散度去重</li></ol><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250516172556394.png" alt="image-20250516172556394"><figcaption aria-hidden="true">image-20250516172556394</figcaption></figure></li><li><p>数据打包 1. <bos> <eos> 2. 一行一行的训练，而不是一句一句的训练</eos></bos></p></li><li><p>观测模型，使用测试集对中间模型测试</p></li><li><p>数据比例，代码模型中平衡代码补全（中间填充）与代码编写（从前向后编写）的任务，两种数据集都需要</p></li></ol></li></ol><h3 id="继续预训练">1.1.1. 继续预训练</h3><p>当前的base model 对于专业领域的效果很差，继续与训练补全知识。</p><p>加入新的数据，调整学习率</p><ol type="1"><li>warmup 的步数不会影响最终的结果</li><li>学习率较大，下游任务更好</li><li>对原有模型继续warmup，效果更差</li></ol><p>使用梯形的学习率，保存拐点位置的学习率，继续预训练时候，使用拐点数据预训练，保持较高的搜索速度，拟合新增的数据集</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250516173720277.png" alt="image-20250516173720277"><figcaption aria-hidden="true">image-20250516173720277</figcaption></figure><h3 id="scaling-up">1.1.2. scaling up</h3><p>扩大模型的参数和容量</p><h3 id="尺度定律">1.1.3. 尺度定律</h3><p>模型的损失是可预测的，与模型的算力，大小，数据集有较大的关系</p><ol type="1"><li>模型的参数</li><li>数据的大小</li><li>算力</li></ol><p>模型与参数、大小、算力由直接的关系，不需要训练，就能知道最终的训练结果</p><h4 id="尺度定律-1">1.1.3.1. 尺度定律</h4><ol type="1"><li><p>模型与参数、大小、算力由直接的关系，与模型形状弱依赖</p><ol type="1"><li>某个网络的占比</li><li>隐层数量的占比</li><li>每个head的大小</li></ol><p>的影响很小，不需要对此调参</p></li><li><p>其他变量充足的时候，我们就知道模型最后的效果</p></li></ol><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519222325535.png" alt="image-20250519222325535"><figcaption aria-hidden="true">image-20250519222325535</figcaption></figure><ol start="3" type="1"><li><p>过拟合的普遍性，一味增加其中一项，模型效果就会进入衰退阶段</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519223024436.png" alt="image-20250519223024436"><figcaption aria-hidden="true">image-20250519223024436</figcaption></figure></li><li><p>同等算力下，调整模型大小和数据集的大小</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519223337327.png" alt="image-20250519223337327"><figcaption aria-hidden="true">image-20250519223337327</figcaption></figure></li><li><p>模型在训练集与测试集上表现高度相关</p></li><li><p>训练数据有显示，仍然可以重复使用数据进行训练得到可预测的“尺度定律”</p></li><li><p>其他模型（包括transform)都具有尺度定律</p></li></ol><h4 id="利用尺度定律">1.1.3.2. 利用尺度定律</h4><ol type="1"><li><p>固定模型的大小，更改预训练的数据量</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519224015225.png" alt="image-20250519224015225"><figcaption aria-hidden="true">image-20250519224015225</figcaption></figure></li><li><p>规定算力大小，训练不同大小的模型，（训练到模型收敛较难，可以得到算力的大小）</p></li></ol><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519224308944.png" alt="image-20250519224308944"><figcaption aria-hidden="true">image-20250519224308944</figcaption></figure><h3 id="涌现">1.1.4. 涌现</h3><p>大模型在训练数量的规模时，准确率会发生突变</p><h2 id="后训练">1.2. 后训练</h2><p>对齐人类的要求，回答问题有用、无害</p><h3 id="指令微调">1.2.1. 指令微调</h3><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250519225029335.png" alt="image-20250519225029335"><figcaption aria-hidden="true">image-20250519225029335</figcaption></figure><ol type="1"><li><p>上下文学习</p><ol type="1"><li>用户给出例子，模型不更新参数直接学习</li></ol><p>使用例子训练，模型直接输出</p></li><li><p>预训练-微调</p><ol type="1"><li>在目标任务上进行微调</li></ol><p>给出命令前缀，然后训练</p></li><li><p>指令微调</p><ol type="1"><li>在非目标任务上进行泛化，在任务上泛化很好</li></ol></li></ol><p>指令-回答， 对回答的预测计算损失函数</p><h3 id="数据合成">1.2.2. 数据合成</h3><ol type="1"><li>人工构建任务例子</li><li>使用强模型根据种子任务生成指令</li><li>将生成的指令再给另一个强模型，获得指令的回答，得到&lt;指令，回答&gt; 对</li></ol><h3 id="test-scaling">1.2.3. test scaling</h3><p>模型输出多个结果，打分选择结果</p><p>过程奖励模型&gt;结果奖励模型</p><p>选择框架</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250523163748097.png" alt="image-20250523163748097"><figcaption aria-hidden="true">image-20250523163748097</figcaption></figure><h3 id="微调方法">1.2.4. 微调方法</h3><h4 id="lora">1.2.4.1. lora</h4><p>增加低秩矩阵</p><h4 id="前缀调整">1.2.4.2. 前缀调整</h4><p>训练的模型权重不再调整，k,v前分别添加可训练的连续前缀向量</p><p>冻结原权重，增加可训练模块</p><h4 id="提示调整">1.2.4.3. 提示调整</h4><p>训练文本前增加提示命令</p><h4 id="adapter">1.2.4.4. adapter</h4><p>在前馈神经网络前增加低秩矩阵</p><h4 id="loramoe">1.2.4.5. LoRAMoE</h4><p>微调插入专家模型中的LoRA适配器</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250523200928848.png" alt="image-20250523200928848"><figcaption aria-hidden="true">image-20250523200928848</figcaption></figure><h2 id="强化学习">1.3. 强化学习</h2><p>最大化智能体获得的期望累计奖励</p><h3 id="ppo函数">1.3.1. PPO函数</h3><p>策略： 大模型生成句子的过程<span class="math inline"><em>π</em></span></p><p>轨迹： 一系列的动作，大模型生成句子时候，的状态与动作 <span class="math display"><em>τ</em> = <em>s</em><sub>1</sub>, <em>a</em><sub>1</sub>, ..<em>s</em><sub><em>n</em></sub>, <em>a</em><sub><em>n</em></sub></span> 奖励：<span class="math inline"><em>R</em>(<em>τ</em>)</span>，一整条轨迹的奖励</p><p>基于策略的强化学习的目标：找到一种策略，是在这个策略的轨迹上的奖励分数最大 <span class="math display">$$\begin{align}\underset{\pi_\theta}{argmax} j({\pi_\theta}) &amp;= \underset{\pi_\theta}{argmax}E_{\tau~\pi}|R(\tau)|\\&amp; = \sum_\tau R(\tau)P(\tau|\pi_\theta)\end{align}$$</span> LOSS函数的梯度： <span class="math display">$$\begin{align*}\nabla J(\pi_\theta) &amp;= \sum_\tau R(\tau) \nabla P(\tau|\pi_\theta) \\&amp;= \sum_\tau R(\tau) P(\tau|\pi_\theta) \frac{\nabla P(\tau|\pi_\theta)}{P(\tau|\pi_\theta)} \\&amp;= \sum_\tau R(\tau) P(\tau|\pi_\theta) \nabla \log(P(\tau|\pi_\theta)) \\&amp;= \mathbb{E}_{\tau \sim \pi_\theta} [R(\tau) \nabla \log(P(\tau|\pi_\theta))]\end{align*}$$</span> 路径的概率，从<span class="math inline"><em>s</em><sub>0</sub></span>递推，推到T-1,计算出T的概率 <span class="math display">$$P(\tau|\pi_\theta) = \rho_0(s_0) \prod_{t=0}^{T-1} P(s_{t+1}|s_t, a_t)\pi_\theta(a_t|s_t)$$</span></p><p><span class="math display">$$\nabla \log\left(P(\tau|\pi_\theta)\right) = \nabla \left[ \log \rho_0(s_0) + \sum_{t=0}^{T-1} \log P(s_{t+1}|s_t, a_t) + \sum_{t=0}^{T-1} \log \pi_\theta(a_t|s_t) \right] $$</span></p><p>前两项和策略模型的参数 <span class="math inline"><em>θ</em></span> 无关，可舍去。于是 <span class="math display">$$\nabla \log\left(P(\tau|\pi_\theta)\right) = \sum_{t=0}^{T-1} \nabla \log \pi_\theta(a_t|s_t)$$</span> 带入Loss的梯度中，使用每时刻的奖励函数代替总路径<span class="math inline"><em>R</em>(<em>τ</em>)</span> <span class="math display">$$\nabla J(\pi_\theta) = \mathbb{E}_{\tau \sim \pi_\theta}\left[ \sum_{t=0}^{T-1} \Psi_t \nabla \log \pi_\theta(a_t|s_t) \right]$$</span> <span class="math inline"><em>ψ</em><sub><em>t</em></sub></span>的组成形式</p><ol type="1"><li><span class="math inline">$\sum_{t=0}^\infty r_t$</span> 轨迹的累积奖励<br></li><li><span class="math inline">$\sum_{t'=t}^\infty \gamma^{t'-t} r_{t'}$</span> 轨迹的折扣奖励<br></li><li><span class="math inline">$\sum_{t'=t}^\infty \gamma^{t'-t} r_{t'} - b(s_t)$</span> 引入基线<br></li><li><span class="math inline"><em>Q</em><sup><em>π</em></sup>(<em>s</em><sub><em>t</em></sub>, <em>a</em><sub><em>t</em></sub>)</span> 动作价值函数<br></li><li><span class="math inline"><em>A</em><sup><em>π</em></sup>(<em>s</em><sub><em>t</em></sub>, <em>a</em><sub><em>t</em></sub>)</span> 优势函数<br></li><li><span class="math inline"><em>r</em><sub><em>t</em></sub> + <em>V</em><sup><em>π</em></sup>(<em>s</em><sub><em>t</em> + 1</sub>) − <em>V</em><sup><em>π</em></sup>(<em>s</em><sub><em>t</em></sub>)</span> 时序差分残差</li></ol><p>累计折扣奖励 <span class="math display"><em>G</em><sub><em>t</em></sub> = <em>r</em><sub><em>t</em></sub> + <em>γ</em><em>r</em><sub><em>t</em> + 1</sub> + <em>γ</em><sup>2</sup><em>r</em><sub><em>t</em> + 2</sub> + … + <em>γ</em><sup><em>T</em> − <em>t</em> − 1</sup><em>r</em><sub><em>T</em> − 1</sub> = <em>r</em><sub><em>t</em></sub> + <em>γ</em><em>G</em><sub><em>t</em> + 1</sub></span></p><p>动作价值函数：在策略<em>π</em> 下，从状态 <em>s_t</em> 开始并执行动作 <em>a_t</em> 后，未来所有折扣奖励的<strong>期望</strong>。 <span class="math display">$$\begin{align}Q_\pi(s_t, a_t) &amp;= \mathbb{E}_\pi[G_t | s_t, a_t] \\&amp;= \mathbb{E}_\pi\left[\sum_{t=0}^{T-t} \gamma^{t'} r_{t'} | s_t, a_t\right] \\&amp;= \mathbb{E}_\pi[r_t | s_t, a_t] + \mathbb{E}_\pi[\gamma V_\pi(S_{t+1}) | s_t, a_t] \\&amp;= \sum_{s_{t+1} \in \mathcal{S}} P(s_{t+1}|s_t, a_t)R(s_t, a_t, s_{t+1}) + \gamma \sum_{s_{t+1} \in \mathcal{S}} P(s_{t+1}|s_t, a_t)V_\pi(s_{t+1})  \\&amp; 贝尔曼期望方程，将 G_t 拆分为当前奖励和未来价值\\&amp;= \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[r + \gamma V_\pi(s_{t+1})]\end{align}$$</span> 优势函数:在策略 π<em>π</em> 下，在状态 <em>s_t</em> 执行动作 <em>a_t</em> 相对于在该状态下平均（期望）价值的“优势”或“额外价值”。 <span class="math display">$$\begin{align}A_\pi(s_t, a_t) &amp;= Q_\pi(s_t, a_t) - V_\pi(s_t) \\&amp;= \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[r_t + \gamma V_\pi(s_{t+1})] - \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[V_\pi(s_t)] \\&amp;= \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[r_t + \gamma V_\pi(s_{t+1}) - V_\pi(s_t)] \\&amp;= \mathbb{E}_{s_{t+1} \sim P(\cdot|s_t, a_t)}[\text{TD\_error}]\end{align}$$</span></p><h3 id="价值损失">1.3.2. 价值损失</h3><p>这里提到的“价值训练过程”通常指的是在强化学习中，<strong>价值函数（Value Function）的估计和更新过程</strong>。这通常通过训练一个神经网络（价值网络/Critic网络）来预测状态的价值 V(s)<em>V</em>(<em>s</em>) 或状态-动作对的价值 Q(s,a)<em>Q</em>(<em>s</em>,<em>a</em>)。最常见的训练方法是使用<strong>均方误差（Mean Squared Error, MSE）损失</strong></p><p>价值函数 V<strong>ϕ<em>(</em>s</strong>t<em>) 的目标是准确估计<strong>未来累积折扣奖励</strong>。因此，训练它的方法就是让它的预测值 </em>V<strong>ϕ<em>(</em>s</strong>t*) 尽可能接近“真实”的累积折扣奖励 R_t。</p><p>价值损失采用的是MSE损失，最小化如下目标函数：</p><p><span class="math display">ℒ<sub>critic</sub>(<em>ϕ</em>) = 𝔼<sub><em>t</em></sub>[(<em>V</em><sub><em>ϕ</em></sub>(<em>s</em><sub><em>t</em></sub>)−<em>R</em><sub><em>t</em></sub>)<sup>2</sup>]</span></p><p>其中<span class="math inline"><em>V</em><sub><em>ϕ</em></sub>(<em>s</em><sub><em>t</em></sub>)</span>为价值模型预测出来的回报，<span class="math inline"><em>R</em><sub><em>t</em></sub></span>为实际得到的回报。</p><p><span class="math inline"><em>R</em><sub><em>t</em></sub></span> 是理论标签值，需要计算出来</p><p>如果使用时序差分目标，则</p><p><span class="math display"><em>R</em><sub><em>t</em></sub> = <em>r</em><sub><em>t</em></sub> + <em>γ</em><em>V</em><sub><em>ϕ</em></sub>(<em>s</em><sub><em>t</em> + 1</sub>)</span></p><p>如果使用GAE目标，则 <span class="math display"><em>R</em><sub><em>t</em></sub> = <em>Â</em><sub><em>t</em></sub><sup>GAE</sup> + <em>V</em>′<sub><em>ϕ</em></sub>(<em>s</em><sub><em>t</em></sub>)</span></p><h3 id="rlhf">1.3.3. RLHF</h3><h4 id="构建奖励模型">1.3.3.1. 构建奖励模型</h4><ol type="1"><li><p>收集偏好数据，对模型回答的多个数据，评估排序，不是打分</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121011621.png" alt="image-20250530121011621"><figcaption aria-hidden="true">image-20250530121011621</figcaption></figure></li><li><p>损失函数，max(做好回答- 最差回答)</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121104796.png" alt="image-20250530121104796"><figcaption aria-hidden="true">image-20250530121104796</figcaption></figure></li><li><p>只获取最后一个token的评估</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121333003.png" alt="image-20250530121333003"><figcaption aria-hidden="true">image-20250530121333003</figcaption></figure></li><li><p>使用KL散度，避免与模型的差距较大</p></li><li><p>使用PPO函数，计算历史和未来的奖励</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121812769.png" alt="image-20250530121812769"><figcaption aria-hidden="true">image-20250530121812769</figcaption></figure></li></ol><h4 id="总体流程">1.3.3.2. 总体流程</h4><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530121856320.png" alt="image-20250530121856320"><figcaption aria-hidden="true">image-20250530121856320</figcaption></figure><p><strong>RLHF实开源链接</strong>：</p><ol type="1"><li><code>https://github.com/huggingface/trl</code></li><li><code>https://github.com/OpenRLHF/OpenRLHF</code></li><li><code>https://github.com/hiyouga/LLaMA-Factory</code></li><li><code>https://github.com/WangRongsheng/awesome-LLM-resourses</code></li></ol><h3 id="rlaif">1.3.4. RLAIF</h3><p>模型选择结果，替换人类标记，同时需要使用双重判断</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530170449430.png" alt="image-20250530170449430"><figcaption aria-hidden="true">image-20250530170449430</figcaption></figure><ol type="1"><li>D-RLAIF，模型直接打分，不再训练</li><li>常规RLAIF，先训练奖励模型</li></ol><h3 id="dpo算法direct-perference-option">1.3.5. DPO算法(direct perference option)</h3><p>由偏好学习的数据，直接用于模型的训练</p><p>目标：</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530171548497.png" alt="image-20250530171548497"><figcaption aria-hidden="true">image-20250530171548497</figcaption></figure><p>损失函数：</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530171648715.png" alt="image-20250530171648715"><figcaption aria-hidden="true">image-20250530171648715</figcaption></figure><h3 id="splnself-play">1.3.6. SPLN（self play)</h3><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173051126.png" alt="image-20250530173051126"><figcaption aria-hidden="true">image-20250530173051126</figcaption></figure><h4 id="main-play">1.3.6.1. main play</h4><p>区分某个回答是人类的回答</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173622192.png" alt="最大化人类回答与机器回答的区别"><figcaption aria-hidden="true">最大化人类回答与机器回答的区别</figcaption></figure><h4 id="opponent-play">1.3.6.2. opponent play</h4><p>不需要区分人类回答和LLM回答</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173750170.png" alt="image-20250530173750170"><figcaption aria-hidden="true">image-20250530173750170</figcaption></figure><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173801712.png" alt="image-20250530173801712"><figcaption aria-hidden="true">image-20250530173801712</figcaption></figure><p>得到优化目标</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530173906352.png" alt="image-20250530173906352"><figcaption aria-hidden="true">image-20250530173906352</figcaption></figure><p>最大化生成与真实标注的信息与自己生成信息的差距</p><h3 id="self-rewarding">1.3.7. self-rewarding</h3><p>模型给自己提供奖励，在优化回复的功能是，优化模型指令遵循与打分的能力</p><ol type="1"><li>初始模型，具有基础能力</li><li>种子数据集，少量数据集，<ol type="1"><li>指令微调，只有回答</li><li>评估微调，回答排序</li></ol></li></ol><p>模型使用种子数据集，生成新的prompt，模型自己打分，取最高分与最低分，加入数据集，用于DPO训练。</p><p>不断迭代</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530175457392.png" alt="image-20250530175457392"><figcaption aria-hidden="true">image-20250530175457392</figcaption></figure><h2 id="微调">1.4. 微调</h2><ol type="1"><li><p>增加参数微调</p><ol type="1"><li>软提示微调： 在embeding之前怎么增加soft prompt，训练优化增加的soft prompt ，模型的参数固定<ol type="1"><li>且不同的任务可以使用不同的soft prompt</li></ol></li><li>适配器微调： 在模型前后增加一个层</li></ol></li><li><p>选择性微调</p><ol type="1"><li>学习优化哪些参数，优化任务结果，使用正则化，惩罚修改较多的参数<img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530182117984.png" alt="image-20250530182117984"></li><li>指定修改部分参数</li></ol></li><li><p>重参数微调，调整子空间参数</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530182340311.png" alt="image-20250530182340311"><figcaption aria-hidden="true">image-20250530182340311</figcaption></figure><ol type="1"><li><p>Low-Rank Adaption(LoRA)，优化两个低秩矩阵，与原矩阵组合</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530182623192.png" alt="image-20250530182623192"><figcaption aria-hidden="true">image-20250530182623192</figcaption></figure></li><li><p>学习模型的缩放因子</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250530183050936.png" alt="image-20250530183050936"><figcaption aria-hidden="true">image-20250530183050936</figcaption></figure></li></ol></li></ol><h2 id="知识蒸馏">1.5. 知识蒸馏</h2><p>教师模型将知识提取出来，学生模型学习其中内容</p><h3 id="基于特征的知识">1.5.1. 基于特征的知识</h3><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/image-20250523201806237.png" alt="image-20250523201806237"><figcaption aria-hidden="true">image-20250523201806237</figcaption></figure><h4 id="多个教师教学">1.5.1.1. 多个教师教学</h4><h3 id="基于关系的知识">1.5.2. 基于关系的知识</h3><h2 id="模型剪枝">1.6. 模型剪枝</h2><p>删除权重小于一定阈值的连接或神经元节点，获得更加稀疏的矩阵</p><h3 id="结构化剪枝">1.6.1. 结构化剪枝</h3><p>参数从起点到重点，图中有相连，则保留</p><h1 id="简短">2. 简短</h1><h2 id="预训练-1">2.1. 预训练</h2><h3 id="词表化">2.1.1. 词表化</h3><h4 id="bbpebyte-level-bpe">2.1.1.1. BBPE(byte-level BPE)</h4><p>单词量过大时，每一个单词一个token使用，词表空间较大</p><p>单词使用字节标识，采用unicode 编码作为最小颗粒度，将单词切割为字节token</p><p>例如，对于不存在的字节“待”，使用3个字节标识(中文在unicode编码中使用三个字节表示)</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-4cd433a354233d03bc2aad15745a7285_1440w.jpg" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-66a59222fb083b240eac861eb026c73c_r.jpg" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><h3 id="模型预训练">2.1.2. 模型预训练</h3><p>采用无监督学习，学习输入文本的特征，学习语言语法</p><p>输入一堆文本，让模型做 Next Token Prediction 的任务，学习基础语法，初步学习。</p><p>类似与transfomer论文中的对语言的输入学习输出。</p><h2 id="指令微调-1">2.2. 指令微调</h2><p>GPT-3只能完成续写任务,InstructGPT可以根据指令回答问题</p><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-a7a8e7aed0750d189f792b19e8272dfe_r.jpg" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><h3 id="监督学习">2.2.1. 监督学习</h3><p>给出指令问题，并给出答案，监督模型学习</p><ol type="1"><li><p>指令: 在面试中如何回答这个问题？</p><ol type="1"><li>输入:当你在车里独处时，你会想些什么？</li><li>输出:如果是在晚上，我通常会考虑我今天所取得的进步，如果是在早上，我会思考如何做到最好。我也会尝试练习感恩和活在当下的状态，以避免分心驾驶。</li></ol></li><li><p>指令: 按人口对这些国家进行排名。</p><ol type="1"><li>输入:巴西，中国，美国，日本，加拿大，澳大利亚</li><li>输出:中国，美国，巴西，日本，加拿大，澳大利亚</li></ol></li></ol><p>模型学习指令回答方式，准确的响应问题</p><h2 id="奖励模型">2.3. 奖励模型</h2><p>之前，模型只是简单学习了语言学习的内容，但是并不知到语言中是否正确，或者错误，这将导致预训练模型中原先「错误」或「有害」的知识没能在 SFT 数据中被纠正。</p><h3 id="利用偏序对训练奖励模型">2.3.1. 利用偏序对训练奖励模型</h3><figure><img src="/2025/05/24/deeplearn/%E5%A4%A7%E6%A8%A1%E5%9E%8B/v2-29f8de16d921303fc6ee5c338fc68800_1440w.jpg" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p>偏序对是指：不直接为每一个样本直接打分，而是标注这些样本的好坏顺序，标准A比B好多少，而不是具体的分数。</p><blockquote><p>直接打分：A句子（5分），B句子（3分） 偏序对标注：A &gt; B</p></blockquote><p>模型通过尝试最大化「好句子得分和坏句子得分之间的分差」，从而学会自动给每一个句子判分。</p><h2 id="强化学习reinforcement-learningppo">2.4. 强化学习（Reinforcement Learning，PPO）</h2><p>进行Reward model之后，需要使用RM进化模型</p><ol type="1"><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编码器 - 解码器</title>
      <link href="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/"/>
      <url>/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="编码器---解码器">1. 编码器 - 解码器</h1><h2 id="基本框架">1.1. 基本框架</h2><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Encoder(nn.Module):</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, <span class="op">**</span>kwargs):</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(Encoder, <span class="va">self</span>).<span class="fu">__init__</span>(<span class="op">**</span>kwargs)</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>, X, <span class="op">*</span>args):</span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span> <span class="pp">NotImplementedError</span>  <span class="co"># 占位符</span></span></code></pre></div><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Decoder(nn.Module):</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, <span class="op">**</span>kwargs):</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(Decoder, <span class="va">self</span>).<span class="fu">__init__</span>(<span class="op">**</span>kwargs)</span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> init_state(<span class="va">self</span>, enc_outputs, <span class="op">*</span>args):</span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span> <span class="pp">NotImplementedError</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>, X, <span class="op">*</span>args):</span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span> <span class="pp">NotImplementedError</span>  <span class="co"># 占位符</span></span></code></pre></div><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> EncoderDecoder(nn.Module):</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;编码器-解码器架构的基类&quot;&quot;&quot;</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, encoder, decoder, <span class="op">**</span>kwargs):</span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(EncoderDecoder, <span class="va">self</span>).<span class="fu">__init__</span>(<span class="op">**</span>kwargs)</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.encoder <span class="op">=</span> encoder</span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.decoder <span class="op">=</span> decoder</span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>, enc_X, dec_X, <span class="op">*</span>args):</span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        enc_outputs <span class="op">=</span> <span class="va">self</span>.encoder(enc_X, <span class="op">*</span>args)</span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 编码器的输出最为解码器输入的一部分</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        dec_state <span class="op">=</span> <span class="va">self</span>.decoder.init_state(enc_outputs, <span class="op">*</span>args)</span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">self</span>.decoder(dec_X, dec_state)</span></code></pre></div><h2 id="seq2seq">1.2. seq2seq</h2><figure><img src="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/image-20250424214252355.png" alt="image-20250424214252355"><figcaption aria-hidden="true">image-20250424214252355</figcaption></figure><h3 id="编码器">1.2.1. 编码器</h3><ol type="1"><li>将序列(时间步)的数字转换为张量</li><li>通过rnn输出上下文变量C，隐状态</li></ol><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Seq2SeqEncoder(nn.Encoder):</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, vocab_size, embed_size, num_hiddens, num_layers, dropout <span class="op">=</span> <span class="dv">0</span>, <span class="op">**</span>kwargs):</span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(Seq2SeqEncoder, <span class="va">self</span>).<span class="fu">__init__</span>(<span class="op">**</span>kwargs)</span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        <span class="co">&#39;&#39;&#39;编码层</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co">        将数字编码为为向量</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co">        输入(batch_size, feature) 输出(batch_size, feature, embed_size)</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="co">        &#39;&#39;&#39;</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.embeding <span class="op">=</span> nn.Embedding(vocab_size, embed_size)</span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.rnn <span class="op">=</span> nn.gru(embed_size, nn_hiddens, num_layers, dropout <span class="op">=</span> dropout)</span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>, X, <span class="op">*</span>args):</span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 输出&#39;X&#39;的形状：(batch_size,num_steps,embed_size)</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>        X <span class="op">=</span> <span class="va">self</span>.embedding(X)</span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 在循环神经网络模型中，第一个轴对应于时间步</span></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>        X <span class="op">=</span> X.permute(<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">2</span>)</span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 如果未提及状态，则默认为0</span></span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>        output, state <span class="op">=</span> <span class="va">self</span>.rnn(X)</span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>        <span class="co"># output的形状:(num_steps,batch_size,num_hiddens)</span></span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>        <span class="co"># state的形状:(num_layers,batch_size,num_hiddens)</span></span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> output, state</span></code></pre></div><h3 id="解码器">1.2.2. 解码器</h3><div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Seq2SeqDecoder(nn.Decoder):</span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, vocab_size, embed_size, num_hiddens, num_layers,</span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>                 dropout<span class="op">=</span><span class="dv">0</span>, <span class="op">**</span>kwargs):</span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(Seq2SeqDecoder, <span class="va">self</span>).<span class="fu">__init__</span>(<span class="op">**</span>kwargs)</span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.embedding <span class="op">=</span> nn.Embedding(vocab_size, embed_size)</span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.rnn <span class="op">=</span> nn.GRU(embed_size <span class="op">+</span> num_hiddens, num_hiddens, num_layers,</span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>                          dropout<span class="op">=</span>dropout)</span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.dense <span class="op">=</span> nn.Linear(num_hiddens, vocab_size)</span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>   <span class="kw">def</span> init_state(<span class="va">self</span>, enc_outputs, <span class="op">*</span>args):</span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 用隐状态来初始化上下文变量</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> enc_outputs[<span class="dv">1</span>]</span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>, X, state):</span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>        X <span class="op">=</span> <span class="va">self</span>.embedding(X).permute(<span class="dv">1</span>, <span class="dv">0</span>,<span class="dv">2</span> )</span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>        <span class="co"># state[-1] 的维度为(layer_num , batch_size, num_hiddens)</span></span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>        context <span class="op">=</span> state[<span class="op">-</span><span class="dv">1</span>].repeat(X.shape[<span class="dv">0</span>], <span class="dv">1</span>, <span class="dv">1</span>)</span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 在feature上增加了元素C</span></span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>        X_and_c <span class="op">=</span> torch.cat(X, context, <span class="dv">2</span>)</span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>        output, state <span class="op">=</span> <span class="va">self</span>.rnn(X_and_context, state)</span><span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> <span class="va">self</span>.dense(output).permute(<span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">2</span>)</span><span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> output , state</span><span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>        </span></code></pre></div><h3 id="训练过程">1.2.3. 训练过程</h3><p>不同点：</p><ol type="1"><li>定义使用MarkedSoftmaxCELoss 损失函数</li><li>塑造解码器输入，原序列前增加bos, 删除eos</li></ol><p>相同点：</p><ol type="1"><li>apply(init(m)), optimizer , loss, net.train()</li><li>分epoch, 分批量，optimizer.zero_gred(), net(x) , l = loss(y_hat, Y), l.backward(), grad_clipping(net, theta), optimizer.step()</li></ol><h3 id="预测过程">1.2.4. 预测过程</h3><ol type="1"><li><p>net.eval()</p></li><li><p>准备序列数据</p></li><li><p>对src编码，得到dec_state=context</p></li><li><p>传入一个<bos>数据</bos></p></li><li><p>dec_X 的维度为(1, 1)</p><p>​ Y 的维度为(1, 1, embed_size)</p><p>​ 每一次更新dec_X, 更新了decodor的隐藏状态</p></li></ol><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> predict_seq2seq(net, src_sentence, src_vocab, tgt_vocab, num_steps,</span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>                   device, save_attention_weights<span class="op">=</span><span class="va">False</span>):</span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>   <span class="co">&quot;&quot;&quot;序列到序列模型的预测&quot;&quot;&quot;</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>   <span class="co"># 在预测时将net设置为评估模式</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>   net.<span class="bu">eval</span>()</span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>   <span class="co">&#39;&#39;&#39;</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="co">   准备序列数据</span></span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="co">   &#39;&#39;&#39;</span></span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>   src_tokens <span class="op">=</span> src_vocab[src_sentence.lower().split(<span class="st">&#39; &#39;</span>)] <span class="op">+</span> [</span><span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>       src_vocab[<span class="st">&#39;&lt;eos&gt;&#39;</span>]]</span><span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>   enc_valid_len <span class="op">=</span> torch.tensor([<span class="bu">len</span>(src_tokens)], device<span class="op">=</span>device)</span><span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>   src_tokens <span class="op">=</span> d2l.truncate_pad(src_tokens, num_steps, src_vocab[<span class="st">&#39;&lt;pad&gt;&#39;</span>])</span><span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>   <span class="co"># 添加批量轴</span></span><span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>   enc_X <span class="op">=</span> torch.unsqueeze(</span><span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>       torch.tensor(src_tokens, dtype<span class="op">=</span>torch.<span class="bu">long</span>, device<span class="op">=</span>device), dim<span class="op">=</span><span class="dv">0</span>)</span><span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>   <span class="co">&#39;&#39;&#39;</span></span><span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="co">   对src编码，得到dec_state=context</span></span><span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="co">   &#39;&#39;&#39;</span></span><span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>   enc_outputs <span class="op">=</span> net.encoder(enc_X, enc_valid_len)</span><span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>   dec_state <span class="op">=</span> net.decoder.init_state(enc_outputs, enc_valid_len)</span><span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a>   <span class="co">&#39;&#39;&#39; </span></span><span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="co">   传入一个&lt;bos&gt;数据</span></span><span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a><span class="co">   &#39;&#39;&#39;</span></span><span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a>   dec_X <span class="op">=</span> torch.unsqueeze(torch.tensor(</span><span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a>       [tgt_vocab[<span class="st">&#39;&lt;bos&gt;&#39;</span>]], dtype<span class="op">=</span>torch.<span class="bu">long</span>, device<span class="op">=</span>device), dim<span class="op">=</span><span class="dv">0</span>)</span><span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a>   output_seq, attention_weight_seq <span class="op">=</span> [], []</span><span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a>   <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span>(num_steps):</span><span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a>       <span class="co">&#39;&#39;&#39; </span></span><span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a><span class="co">       dec_X 的维度为(1, 1), 每一次传入上一个时间步中预测出的值</span></span><span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a><span class="co">       Y 的维度为(1, 1, embed_size)</span></span><span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a><span class="co">       每一次更新dec_X, 更新了decodor的隐藏状态</span></span><span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a><span class="co">       &#39;&#39;&#39;</span></span><span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a>       Y, dec_state <span class="op">=</span> net.decoder(dec_X, dec_state)</span><span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a>       <span class="co"># 我们使用具有预测最高可能性的词元，作为解码器在下一时间步的输入</span></span><span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a>       dec_X <span class="op">=</span> Y.argmax(dim<span class="op">=</span><span class="dv">2</span>)</span><span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a>       pred <span class="op">=</span> dec_X.squeeze(dim<span class="op">=</span><span class="dv">0</span>).<span class="bu">type</span>(torch.int32).item()</span><span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a>       <span class="co"># 保存注意力权重（稍后讨论）</span></span><span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a>       <span class="cf">if</span> save_attention_weights:</span><span id="cb6-41"><a href="#cb6-41" aria-hidden="true" tabindex="-1"></a>           attention_weight_seq.append(net.decoder.attention_weights)</span><span id="cb6-42"><a href="#cb6-42" aria-hidden="true" tabindex="-1"></a>       <span class="co"># 一旦序列结束词元被预测，输出序列的生成就完成了</span></span><span id="cb6-43"><a href="#cb6-43" aria-hidden="true" tabindex="-1"></a>       <span class="cf">if</span> pred <span class="op">==</span> tgt_vocab[<span class="st">&#39;&lt;eos&gt;&#39;</span>]:</span><span id="cb6-44"><a href="#cb6-44" aria-hidden="true" tabindex="-1"></a>           <span class="cf">break</span></span><span id="cb6-45"><a href="#cb6-45" aria-hidden="true" tabindex="-1"></a>       output_seq.append(pred)</span><span id="cb6-46"><a href="#cb6-46" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> <span class="st">&#39; &#39;</span>.join(tgt_vocab.to_tokens(output_seq)), attention_weight_seq</span></code></pre></div><p><strong>这里可以优化使用束搜索</strong></p><h3 id="损失函数">1.2.5. 损失函数</h3><ol type="1"><li><p>计算pred与label的Loss</p></li><li><p>计算序列的掩码</p></li><li><p>将loss与序列掩码相乘</p><div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> MaskedSoftmaxCELoss(nn.CrossEntropyLoss):</span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;带遮蔽的softmax交叉熵损失函数&quot;&quot;&quot;</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="co"># pred的形状：(batch_size,num_steps,vocab_size)</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="co"># label的形状：(batch_size,num_steps)</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="co"># valid_len的形状：(batch_size,)</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>, pred, label, valid_len):</span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>        weights <span class="op">=</span> torch.ones_like(label)</span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        weights <span class="op">=</span> sequence_mask(weights, valid_len)  <span class="co"># 掩码</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.reduction<span class="op">=</span><span class="st">&#39;none&#39;</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>        unweighted_loss <span class="op">=</span> <span class="bu">super</span>(MaskedSoftmaxCELoss, <span class="va">self</span>).forward(</span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>            pred.permute(<span class="dv">0</span>, <span class="dv">2</span>, <span class="dv">1</span>), label)</span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>        weighted_loss <span class="op">=</span> (unweighted_loss <span class="op">*</span> weights).mean(dim<span class="op">=</span><span class="dv">1</span>)</span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> weighted_loss</span></code></pre></div></li></ol><h4 id="掩码">1.2.5.1. 掩码</h4><ol type="1"><li>生成序列掩码，可以使用arrange&lt; valid_len获取</li><li>将所有掩码位置 置为0</li></ol><div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> sequence_mask(X, valid_len, value<span class="op">=</span><span class="dv">0</span>):</span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;在序列中屏蔽不相关的项&quot;&quot;&quot;</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    maxlen <span class="op">=</span> X.size(<span class="dv">1</span>)</span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 生成掩码</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(torch.arange((maxlen), dtype<span class="op">=</span>torch.float32,</span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>                        device<span class="op">=</span>X.device)[<span class="va">None</span>, :] )</span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(valid_len[:,<span class="va">None</span>])</span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">&#39;&#39;&#39;</span></span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="co">    (none,:)是在dim = 0上创建一个=1 的维度</span></span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="co">    广播机制后mask = (batch_size, time_stem)</span></span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="co">    &#39;&#39;&#39;</span></span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>    mask <span class="op">=</span> torch.arange((maxlen), dtype<span class="op">=</span>torch.float32,</span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>                        device<span class="op">=</span>X.device)[<span class="va">None</span>, :] <span class="op">&lt;</span> valid_len[:, <span class="va">None</span>]</span><span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(mask)</span><span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>    X[<span class="op">~</span>mask] <span class="op">=</span> value</span><span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> X</span></code></pre></div><h4 id="预测序列评估">1.2.5.2. 预测序列评估</h4><p>我们将BLEU定义为： <span class="math display">$$\exp\left(\min\left(0, 1 - \frac{\mathrm{len}_{\text{label}}}{\mathrm{len}_{\text{pred}}}\right)\right) \prod_{n=1}^k p_n^{1/2^n},$$</span></p><h1 id="注意力机制">2. 注意力机制</h1><p>查询值query, 键值对（key, value)，每一个key 对应一个query</p><p>注意力权重计算的是query对key的关注程度，attention(query_num , key_num)，每一行是当前查询对所有键的注意力，然后与query计算，得到每一个查询对query的注意力结果 <span class="math display">$$attention_weight = \alpha(query, key)\\f(x) = attention_weight * query$$</span></p><h2 id="常见机制">2.1. 常见机制</h2><h3 id="掩蔽注意力机制操作">2.1.1. 掩蔽注意力机制操作</h3><p>对键值中不需要的部分掩蔽为0，具体操作是</p><ol type="1"><li>将atterntion_weight(batch, query, key) 中的key维度数据通过掩码，转换为较小数</li><li>使用softMax，较小数转换为0，key对应此处的权重就是0了</li></ol><div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> masked_softmax(X, valid_len):</span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">&#39;&#39;&#39;</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="co">    X：attention_weigth = (batch_size, query , key)</span></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="co">    valid_len 不同批次掩蔽的长度，=（batch_size) 或 (batch_size, key)</span></span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="co">    &#39;&#39;&#39;</span></span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> valid_lens <span class="kw">is</span> <span class="va">None</span>:</span><span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> nn.functional.softmax(X, dim<span class="op">=-</span><span class="dv">1</span>)</span><span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>        shape <span class="op">=</span> X.shape</span><span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> valid_lens.dim() <span class="op">==</span> <span class="dv">1</span>:</span><span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>            valid_lens <span class="op">=</span> torch.repeat_interleave(valid_len, shape[<span class="dv">1</span>])</span><span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span><span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>            valid_lens <span class="op">=</span> valid_lens.reshape(<span class="op">-</span><span class="dv">1</span>)</span><span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>        <span class="co">&#39;&#39;&#39;</span></span><span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="co">        sequence_mash: 将param1中的第1维度按照 valid_lens的长度掩蔽，大于的掩蔽为values</span></span><span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="co">        &#39;&#39;&#39;</span></span><span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>        X <span class="op">=</span> sequence_mask(X.reshape(<span class="op">-</span><span class="dv">1</span>, shape[<span class="op">-</span><span class="dv">1</span>]), valid_lens,values<span class="op">==</span> <span class="op">-</span><span class="fl">1e6</span>)</span><span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> nn.functional.softmax(X.shape[shape], dim <span class="op">=-</span><span class="dv">1</span>) <span class="co"># 对掩蔽维度归一化</span></span><span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>      </span></code></pre></div><h3 id="加性注意力">2.1.2. 加性注意力</h3><p>键，查询有时是矢量<strong>（不同长度）</strong>转换为相同长度的矢量 <span class="math display"><em>a</em>(<strong>q</strong>, <strong>k</strong>) = <strong>w</strong><sub><em>v</em></sub><sup>⊤</sup>tanh(<strong>W</strong><sub><em>q</em></sub><strong>q</strong> + <strong>W</strong><sub><em>k</em></sub><strong>k</strong>) ∈ ℝ</span></p><ol type="1"><li>线性层操作，query=&gt;(batch ,query, hidden_num),key=&gt;(batch ,key hidden_num)</li><li>得到注意力矩阵，query=&gt;(batch ,query,1 hidden_num)，key=&gt;(batch ,1，key hidden_num)， query+key =&gt;query=&gt;(batch ,query,key, hidden_num)</li><li><span class="math inline"><em>W</em><sub><em>t</em></sub></span> 是线性层(hidden_num, 1)， 移除最后一个维度，得到attention_weight =(batch ,query,key,)</li><li>使用掩蔽注意力，对key上无用的权重屏蔽</li></ol><div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> AddictiveAttention(nn.Module):</span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, key_size, query_size, num_hiddens, dropout, <span class="op">**</span>kwargs):</span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(AddictiveAttention, <span class="va">self</span>).<span class="fu">__init__</span>(<span class="op">**</span>kwargs)</span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.W_k<span class="op">=</span> nn.Linear(key_size, num_hiddens)</span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.W_q <span class="op">=</span> nn.Linear(query_size, num_hiddens)</span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.W_v <span class="op">=</span> nn.Linear(num_hiddens, <span class="dv">1</span>)</span><span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.dropout<span class="op">=</span> nn.Dropout(dropout)</span><span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(selk, query, key ,values, valid_lens):</span><span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>        query, key <span class="op">=</span> W_q(query), W_k(key)</span><span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>        attention <span class="op">=</span> query.unsquence(<span class="dv">2</span>) <span class="op">+</span> key.unsquence(<span class="dv">1</span>)</span><span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>        attention <span class="op">=</span> nn.tanh(attention)</span><span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>        attention <span class="op">=</span> W_v(attention)</span><span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.atterntion_weight <span class="op">=</span> masked_softmax(attention, valid_lens)</span><span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> torch.bmm(<span class="va">self</span>.attention_weight, values)</span><span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>        </span></code></pre></div><h3 id="点积注意力">2.1.3. 点积注意力</h3><p>计算效率高，但是要求query, key具有相同的张量长度，权重函数： <span class="math display">$$a(\mathbf q, \mathbf k) = \mathbf{q}^\top \mathbf{k}  /\sqrt{d}$$</span></p><p>方差缩放，防止梯度消失</p><div class="sourceCode" id="cb11"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> DotProductAttention(nn.Module):</span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, dropout, <span class="op">**</span>kwargs):</span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(DotProductAttention, <span class="va">self</span>).<span class="fu">__init__</span>(<span class="op">**</span>kwargs)</span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.dropout <span class="op">=</span> nn.Dropout(dropout)</span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>   <span class="kw">def</span> forward(<span class="va">self</span>, query, key,values, valid_lens):</span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>        <span class="co"># attention(batch_size, query_size, key_size)</span></span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>        attention <span class="op">=</span> torch.bmm(query, key.transpose(<span class="dv">1</span>,<span class="dv">2</span>))<span class="op">/</span> math.sqrt(d)</span><span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.attention_weight <span class="op">=</span> masked_softmax(attention, valid_len)</span><span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 输出(batch_size, query_size, feature_size)</span></span><span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> torch.bmm(<span class="va">self</span>.dropout(<span class="va">self</span>.attention_weight), values)</span></code></pre></div><h3 id="多头注意力">2.1.4. 多头注意力</h3><p>使用多个结构一样，参数不一样的注意力去学习不同的知识</p><figure><img src="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/image-20250516113430112.png" alt="image-20250516113430112"><figcaption aria-hidden="true">image-20250516113430112</figcaption></figure><p>将键值对分为多个子空间，每个注意力机制学习一个子空间的特征，得到H组的注意力权重，然后将注意力权重通过线性层汇聚</p><figure><img src="/2025/05/24/deeplearn/%E7%BC%96%E7%A0%81%E5%99%A8%20-%20%E8%A7%A3%E7%A0%81%E5%99%A8/image-20250425155705305.png" alt="image-20250425155705305"><figcaption aria-hidden="true">image-20250425155705305</figcaption></figure><p>常规思路：</p><ol type="1"><li>将query, key, values映射到子空间，使用不同的Linear映射</li><li>将不同头的注意力结果合并在一起，在feature维度上合并</li><li>再通过一个Linear线性层，连接所有head</li></ol><p>并行思路</p><ol type="1"><li>将query,key, values映射到完整空间，然后将完整空间查分成子空间，head与batch组成一个伪batch</li><li>再将子空间的数据通过点积注意力</li><li>将head从batch中分离出来，与feature合并，效果与非并行情况相同</li><li>最后通过线性层</li></ol><div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> MultiHeadAttention(nn.Module):</span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, key_size, query_size, value_size, num_hiddens, num_head, dropout, bias <span class="op">=</span> false, <span class="op">**</span>kwargs):</span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.num_head <span class="op">=</span> head</span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.attention <span class="op">=</span> d2l.DotProductAttention(dropout)</span><span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.W_k <span class="op">=</span> nn.Linear(key_size, num_hiddens)</span><span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.W_q <span class="op">=</span> nn.Linear(query_size, num_hiddens)</span><span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.W_v <span class="op">=</span> nn.Linear(value_size, num_hiddens)</span><span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.W_o <span class="op">=</span> nn.Linear(num_hiddens, num_hiddens) <span class="co"># 全连接层</span></span><span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>, query ,key ,values, valid_lens):</span><span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 转换为(batch_size* head, key/query , num_hidden/head)</span></span><span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>        query <span class="op">=</span> transpose(<span class="va">self</span>.W_q(query),  <span class="va">self</span>.head_num)</span><span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>        keys <span class="op">=</span> transpose_qkv(<span class="va">self</span>.W_k(keys), <span class="va">self</span>.num_heads)</span><span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>        values <span class="op">=</span> transpose_qkv(<span class="va">self</span>.W_v(values), <span class="va">self</span>.num_heads)</span><span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 将掩码扩展为batch*head</span></span><span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> valid_len <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</span><span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>            valid_lens <span class="op">=</span> torch.repeat_interleave(</span><span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>                valid_lens, repeats <span class="op">=</span> <span class="va">self</span>.num_heads , dim <span class="op">=</span><span class="dv">0</span>)</span><span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a>            </span><span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> <span class="va">self</span>.attention(query, key ,value, valid_len)</span><span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a>        output_concat<span class="op">=</span>transpose_output(output, <span class="va">self</span>.num_heads)</span><span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">self</span>.W_o(output_concat)</span></code></pre></div><h1 id="附录">3. 附录</h1><h2 id="bleu">3.1. BLEU</h2><div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> bleu(pred_seq, label_seq, k):  <span class="co">#@save</span></span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;计算BLEU&quot;&quot;&quot;</span></span><span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>    pred_tokens, label_tokens <span class="op">=</span> pred_seq.split(<span class="st">&#39; &#39;</span>), label_seq.split(<span class="st">&#39; &#39;</span>)</span><span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    len_pred, len_label <span class="op">=</span> <span class="bu">len</span>(pred_tokens), <span class="bu">len</span>(label_tokens)</span><span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    score <span class="op">=</span> math.exp(<span class="bu">min</span>(<span class="dv">0</span>, <span class="dv">1</span> <span class="op">-</span> len_label <span class="op">/</span> len_pred))</span><span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> n <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>, k <span class="op">+</span> <span class="dv">1</span>):</span><span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>        num_matches, label_subs <span class="op">=</span> <span class="dv">0</span>, collections.defaultdict(<span class="bu">int</span>)</span><span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(len_label <span class="op">-</span> n <span class="op">+</span> <span class="dv">1</span>):</span><span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>            label_subs[<span class="st">&#39; &#39;</span>.join(label_tokens[i: i <span class="op">+</span> n])] <span class="op">+=</span> <span class="dv">1</span></span><span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(len_pred <span class="op">-</span> n <span class="op">+</span> <span class="dv">1</span>):</span><span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> label_subs[<span class="st">&#39; &#39;</span>.join(pred_tokens[i: i <span class="op">+</span> n])] <span class="op">&gt;</span> <span class="dv">0</span>:</span><span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>                num_matches <span class="op">+=</span> <span class="dv">1</span></span><span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>                label_subs[<span class="st">&#39; &#39;</span>.join(pred_tokens[i: i <span class="op">+</span> n])] <span class="op">-=</span> <span class="dv">1</span></span><span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>        score <span class="op">*=</span> math.<span class="bu">pow</span>(num_matches <span class="op">/</span> (len_pred <span class="op">-</span> n <span class="op">+</span> <span class="dv">1</span>), math.<span class="bu">pow</span>(<span class="fl">0.5</span>, n))</span><span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> score</span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研要求</title>
      <link href="/2025/05/24/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E8%A6%81%E6%B1%82/"/>
      <url>/2025/05/24/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E8%A6%81%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="eb8f7c557dc81977160cacb5d86923fe15d14fba1ebb15ba22b95285c9e2bf96"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 保研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 保研 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/05/24/java/web%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="web课程学习内容">1. web课程学习内容</h1><ol type="1"><li>mvc格式<ol type="1"><li>javabean周期</li><li>javabean 与mvc组成</li></ol></li><li>jsp中使用数据库<ol type="1"><li>mysql建立</li><li>JDBC连接，解决乱码</li><li>查询</li><li>用结果集操作数据库表</li><li>预处理语句</li></ol></li><li>jsp的文件操作<ol type="1"><li>FILE类</li><li>文件操作流</li><li>文件上床下载</li></ol></li><li>xml<ol type="1"><li>xml基本结构</li><li>dom 解析器</li><li>sax解析器</li><li>xml与css显示</li></ol></li><li>化妆品销售</li></ol><h1 id="web">2. web</h1><figure><img src="C:/Users/34999/AppData/Roaming/Typora/typora-user-images/image-20250522212412585.png" alt="流程"><figcaption aria-hidden="true">流程</figcaption></figure><figure><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250522212605681.png" alt="学习流程"><figcaption aria-hidden="true">学习流程</figcaption></figure><h2 id="html">2.1. html</h2><h3 id="标题">2.1.1. 标题</h3><p>h1</p><div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;a</span><span class="ot"> href</span> <span class="ot">=</span> <span class="st">&quot;https://www.cctv.com&quot;</span><span class="ot"> target=</span><span class="st">&quot;_self&quot;</span><span class="kw">&gt;</span> 央视网<span class="kw">&lt;/a&gt;</span> </span></code></pre></div><p>span : 没有语义的标签</p><p><span style="color: gray;"></span></p><h3 id="css引入">2.1.2. css引入</h3><ol type="1"><li>行内样式，写在标签的style属性中</li><li>内部样式：写在<style>标签中</li><li>外部，<code>&lt;link rel= "stylesheet" href= "style.css"&gt;</code></li></ol><p><span style="color: gray;"> today </span></p><style>     span{        color: red;    }</style><h4 id="颜色">2.1.2.1. 颜色</h4><table><thead><tr class="header"><th>种类</th><th>使用方法</th></tr></thead><tbody><tr class="odd"><td>关键字</td><td>red</td></tr><tr class="even"><td>rgb</td><td>rag(red ,green ,blue)</td></tr><tr class="odd"><td>rgba</td><td>rgba(red, green, blue ,透明度)</td></tr><tr class="even"><td>十六进制</td><td>#</td></tr></tbody></table><h4 id="css选择器">2.1.2.2. css选择器</h4><table><colgroup><col style="width: 11%"><col style="width: 28%"><col style="width: 22%"><col style="width: 38%"></colgroup><thead><tr class="header"><th style="text-align: left;">选择器类型</th><th style="text-align: left;">写法（语法）</th><th style="text-align: left;">示例</th><th style="text-align: left;">示例说明</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><strong>元素选择器</strong></td><td style="text-align: left;"><code>元素名称 &#123; ... &#125;</code></td><td style="text-align: left;"><code>h1 &#123; ... &#125;</code></td><td style="text-align: left;">选择页面上所有的 <code>&lt;h1&gt;</code> 标签</td></tr><tr class="even"><td style="text-align: left;"><strong>类选择器</strong></td><td style="text-align: left;"><code>.class属性值 &#123; ... &#125;</code></td><td style="text-align: left;"><code>.cls &#123; ... &#125;</code></td><td style="text-align: left;">选择页面上所有 <code>class</code> 属性为 <code>cls</code> 的标签</td></tr><tr class="odd"><td style="text-align: left;"><strong>ID 选择器</strong></td><td style="text-align: left;"><code>#id属性值 &#123; ... &#125;</code></td><td style="text-align: left;"><code>#hid &#123; ... &#125;</code></td><td style="text-align: left;">选择页面上 <code>id</code> 属性为 <code>hid</code> 的标签</td></tr><tr class="even"><td style="text-align: left;"><strong>分组选择器</strong></td><td style="text-align: left;"><code>选择器1, 选择器2 &#123; ... &#125;</code></td><td style="text-align: left;"><code>h1, h2 &#123; ... &#125;</code></td><td style="text-align: left;">选择页面上所有的 <code>&lt;h1&gt;</code> 和 <code>&lt;h2&gt;</code> 标签</td></tr><tr class="odd"><td style="text-align: left;"><strong>属性选择器</strong></td><td style="text-align: left;"><code>元素名称[属性] &#123; ... &#125;</code></td><td style="text-align: left;"><code>input[type] &#123; ... &#125;</code></td><td style="text-align: left;">选择页面上所有有 <code>type</code> 属性的 <code>&lt;input&gt;</code> 标签</td></tr><tr class="even"><td style="text-align: left;"></td><td style="text-align: left;"><code>元素名称[属性名="值"] &#123; ... &#125;</code></td><td style="text-align: left;"><code>input[type="text"] &#123; ... &#125;</code></td><td style="text-align: left;">选择页面上 <code>type</code> 属性为 <code>text</code> 的 <code>&lt;input&gt;</code> 标签</td></tr><tr class="odd"><td style="text-align: left;"><strong>后代选择器</strong></td><td style="text-align: left;"><code>元素1 元素2 &#123; ... &#125;</code> （注意有空格）</td><td style="text-align: left;"><code>form input &#123; ... &#125;</code></td><td style="text-align: left;">选择 <code>&lt;form&gt;</code> 标签内的所有 <code>&lt;input&gt;</code> 标签</td></tr></tbody></table><h3 id="video">2.1.3. video</h3><div class="sourceCode" id="cb2"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;video</span><span class="ot"> src</span> <span class="ot">=</span> <span class="st">&quot;video/mp4&quot;</span><span class="ot"> controls width</span> <span class="ot">=</span><span class="st">&quot;800px&quot;</span><span class="kw">&gt;</span> <span class="kw">&lt;/video&gt;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>width = 80% 长度占父类框架的占比</span></code></pre></div><p>音频</p><pre><code>&lt;audio src=“ ” controls&gt;&lt;/audio&gt;</code></pre><h4 id="段落">2.1.3.1. 段落</h4><p>hello</p><p></p><h4 id="加粗">2.1.3.2. 加粗</h4><p><b> hello </b></p><p><strong> hello </strong></p><p><u> / <ins> 下划线</ins></u></p><p><i> / <em> 倾斜</em></i></p><p><s> / <del> 删除线</del></s></p><h4 id="特殊符号">2.1.3.3. 特殊符号</h4><table><thead><tr class="header"><th> </th><th>空格</th></tr></thead><tbody><tr class="odd"><td>&lt;</td><td>&lt;</td></tr><tr class="even"><td>&gt;</td><td>&gt;</td></tr></tbody></table><h3 id="盒子模型">2.1.4. 盒子模型</h3><figure><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250524155210755.png" alt="image-20250524155210755"><figcaption aria-hidden="true">image-20250524155210755</figcaption></figure><table><thead><tr class="header"><th>div</th><th>span</th></tr></thead><tbody><tr class="odd"><td>一行显示一个</td><td>一行显示多个</td></tr><tr class="even"><td>宽度默认为父元素的宽度</td><td></td></tr><tr class="odd"><td>可以设置height, weigth</td><td></td></tr></tbody></table><div class="sourceCode" id="cb4"><pre class="sourceCode css"><code class="sourceCode css"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>div&#123;</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">width</span>:<span class="dv">200</span><span class="dt">px</span><span class="op">;</span>  <span class="co">/* 定义的内容展示区域的宽度 */</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">height</span>: <span class="dv">100</span><span class="dt">px</span><span class="op">;</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">padding</span>: <span class="dv">20</span><span class="dt">px</span> <span class="dv">20</span><span class="dt">px</span> <span class="dv">20</span><span class="dt">px</span> <span class="dv">20</span><span class="dt">px</span><span class="op">;</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">margin</span>: <span class="dv">20</span><span class="dt">px</span> <span class="dv">20</span><span class="dt">px</span> <span class="dv">20</span><span class="dt">px</span> <span class="dv">20</span><span class="dt">px</span> <span class="op">;</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">border</span>: <span class="dv">20</span><span class="dt">px</span> <span class="dv">solid</span> <span class="cn">#100000</span><span class="op">;</span> <span class="co">/*宽度 边框 颜色*/</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">box-sizing</span>: <span class="dv">content-box</span><span class="op">;</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* content-box 内容盒子； bordor-box 边框盒子</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="co">        /* 当前的盒子居中显示 */</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">margin</span>: <span class="dv">10</span><span class="dt">px</span> <span class="bu">auto</span><span class="op">;</span> </span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>&#125;</span></code></pre></div><h4 id="对齐方式">2.1.4.1. 对齐方式</h4><p>弹性布局flex</p><table><colgroup><col style="width: 18%"><col style="width: 75%"><col style="width: 5%"></colgroup><thead><tr class="header"><th>属性</th><th>取值</th><th>含义</th></tr></thead><tbody><tr class="odd"><td>display</td><td>flex</td><td></td></tr><tr class="even"><td>flex-direction</td><td>row x<br><br>column y轴</td><td></td></tr><tr class="odd"><td>justify-content</td><td>1. flex-start 从头开始<br>flex-end<br>center<br>space-around 均分<br> space-between 两边贴边</td><td></td></tr></tbody></table><h3 id="表格">2.1.5. 表格</h3><table><thead><tr class="header"><th>&lt;table</th><th>整个表格</th><th>border: 边框宽度<br>width: 表格的宽度<br><br>cellspacing: 单元之间的空间</th></tr></thead><tbody><tr class="odd"><td>&lt;tr</td><td>表格的行</td><td></td></tr><tr class="even"><td>&lt;td/th</td><td>表格的列</td><td>&lt;th是表头，&lt;td 是普通表格</td></tr></tbody></table><h3 id="表单">2.1.6. 表单</h3><p>提升与表格的交互，并在input前增加标识</p><div class="sourceCode" id="cb5"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;label</span><span class="ot"> for=</span><span class="st">&quot;username&quot;</span><span class="kw">&gt;</span>用户名:<span class="kw">&lt;/label&gt;</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;text&quot;</span><span class="ot"> id=</span><span class="st">&quot;username&quot;</span><span class="ot"> name=</span><span class="st">&quot;username&quot;</span><span class="ot"> placeholder=</span><span class="st">&quot;请输入用户名&quot;</span><span class="kw">&gt;</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a> <span class="kw">&lt;label&gt;</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    用户名:</span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;text&quot;</span><span class="ot"> name=</span><span class="st">&quot;username&quot;</span><span class="ot"> placeholder=</span><span class="st">&quot;请输入用户名&quot;</span><span class="kw">&gt;</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/label&gt;</span></span></code></pre></div><ol type="1"><li>input<ol type="1"><li>text</li><li>password</li><li>radio 单选按钮，相当与select option</li><li>checkbox</li></ol></li><li>select</li><li>textarea, 更大的文本框输入</li></ol><h2 id="javascript">2.2. javascript</h2><p>js代码最后放置在body的末尾</p><p>结尾的;可有可无</p><ol type="1"><li><p>内部脚本</p><div class="sourceCode" id="cb6"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;script&gt;</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="fu">alert</span>(<span class="st">&quot;hello world!&quot;</span>)<span class="op">;</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/script&gt;</span></span></code></pre></div></li><li><p>外部脚本</p><div class="sourceCode" id="cb7"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;script</span><span class="ot"> src</span> <span class="ot">=</span> <span class="st">&quot;/.js&quot;</span><span class="kw">&gt;</span> <span class="kw">&lt;/script&gt;</span></span></code></pre></div></li></ol>在<body><p>内外，都可以被执行</p><h3 id="定义变量">2.2.1. 定义变量</h3><div class="sourceCode" id="cb8"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> a <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> <span class="co">//定义变量</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> a <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> <span class="co">//声明常量</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> a<span class="op">=</span><span class="st">&#39;abc&#39;</span><span class="op">;</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="kw">typeof</span>(a)<span class="op">;</span> <span class="co">//返回a的类型</span></span></code></pre></div><p>输入内容</p><div class="sourceCode" id="cb9"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">alert</span>(a)<span class="op">;</span>  <span class="co">// 弹窗</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(a)<span class="op">;</span> <span class="co">//控制台</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="bu">document</span><span class="op">.</span><span class="fu">write</span>(a)<span class="op">;</span> <span class="co">//Body标签中</span></span></code></pre></div><h4 id="拼接字符串">2.2.1.1. 拼接字符串</h4><div class="sourceCode" id="cb10"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> a<span class="op">=</span> <span class="dv">9</span><span class="op">;</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> b<span class="op">=</span> <span class="st">&#39;tom&#39;</span><span class="op">;</span></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="st">&#39;hello my name is&#39;</span><span class="op">+</span>b<span class="op">+</span> <span class="st">&#39;year is&#39;</span><span class="op">+</span> a)<span class="op">;</span><span class="co">// 使用&#39;+字符串拼接</span></span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="vs">`hello my name is </span><span class="sc">$&#123;</span>b<span class="sc">&#125;</span><span class="vs"> yeas is</span><span class="sc">$&#123;</span>a<span class="sc">&#125;</span><span class="vs">`</span>) <span class="co">// 使用` $&#123;&#125;模板字符串输出</span></span></code></pre></div><h3 id="函数function">2.2.2. 函数function</h3><div class="sourceCode" id="cb11"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">name</span>(a<span class="op">,</span> b)&#123;</span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a<span class="op">+</span>b<span class="op">;</span></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>&#125;</span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="co">// 匿名函数</span></span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> sum <span class="op">=</span> <span class="kw">function</span>(a<span class="op">,</span>b)&#123;</span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a<span class="op">+</span>b<span class="op">;</span></span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>&#125;</span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> sum <span class="op">=</span> (a<span class="op">,</span>b)<span class="kw">=&gt;</span>&#123;</span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a<span class="op">+</span>b <span class="op">;</span></span><span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>&#125;</span></code></pre></div><h3 id="对象">2.2.3. 对象</h3><div class="sourceCode" id="cb12"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> user <span class="op">=</span> &#123;</span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">name</span><span class="op">:</span> <span class="st">&#39;Tom&#39;</span><span class="op">,</span></span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">age</span><span class="op">:</span> <span class="dv">10</span><span class="op">,</span></span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">sing</span><span class="op">:</span> <span class="kw">function</span>()&#123;</span><span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>        <span class="fu">alert</span>(<span class="kw">this</span><span class="op">.</span><span class="at">name</span><span class="op">+</span> <span class="st">&#39;刚满十八岁&#39;</span>)<span class="op">;</span></span><span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>    &#125;</span><span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">//简化为</span></span><span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>    <span class="fu">sing</span>(a<span class="op">,</span> b)&#123;</span><span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>    &#125;</span><span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>&#125;</span></code></pre></div><h4 id="json">2.2.3.1. json</h4><p>JavaScript 对象标记法（使用js对象语法书写的文本）</p><p>不同的是，所有的变量名使用<code>“”</code>引起</p><table><thead><tr class="header"><th>JSON.stringify()</th><th>js对象-&gt; json 变量的字符串</th></tr></thead><tbody><tr class="odd"><td>JSON.parse()</td><td>json -&gt; 没有字符串的变量</td></tr></tbody></table><h3 id="dom">2.2.4. DOM</h3><p>文档对象模型： 将标记语言的各个组成部分封装为对应的对象；</p><table><thead><tr class="header"><th>Document</th><th>整个文档</th></tr></thead><tbody><tr class="odd"><td>Element</td><td>元素对象</td></tr><tr class="even"><td>Attribute</td><td>属性对象</td></tr><tr class="odd"><td>Text</td><td>文本内容的对象</td></tr><tr class="even"><td>Comment</td><td>注释形成的对象</td></tr></tbody></table><figure><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250525161235954.png" alt="image-20250525161235954"><figcaption aria-hidden="true">image-20250525161235954</figcaption></figure><h4 id="获取对象">2.2.4.1. 获取对象</h4><p>选择器对应css中的选择器<a href="#css选择器">css选择器</a></p><div class="sourceCode" id="cb13"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="bu">document</span><span class="op">.</span><span class="fu">querySelector</span>(<span class="st">&#39;选择器&#39;</span>)<span class="op">;</span> <span class="co">// 获取匹配到的第一个元素</span></span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="bu">document</span><span class="op">.</span><span class="fu">querySelectorALL</span>(<span class="st">&#39;选择器&#39;</span>)<span class="op">;</span> <span class="co">// 获取所有匹配到的元素</span></span><span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="co">//得到的是一个节点集合，有长度，有索引</span></span><span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> hs <span class="op">=</span> <span class="bu">document</span><span class="op">.</span><span class="fu">querySelectorAll</span>(#title)<span class="op">;</span></span><span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>hs<span class="op">.</span><span class="at">innerHTML</span> <span class="op">=</span> <span class="st">&#39;修改后的内容&#39;</span> <span class="op">;</span> <span class="co">// innerHTML代表文本内容</span></span></code></pre></div><h3 id="时间监听">2.2.5. 时间监听</h3><p>语法： 事件源.addEvenListener(‘事件类型’, 事件触发执行的函数);</p><ul><li>事件源：document中对象</li><li>事件类型： 点击click</li><li>事件处理的函数：要做什么事</li></ul><h4 id="事件类型">2.2.5.1. 事件类型</h4><table><thead><tr class="header"><th>鼠标</th><th>click</th></tr></thead><tbody><tr class="odd"><td></td><td>mouseenter</td></tr><tr class="even"><td></td><td>mouseleave</td></tr><tr class="odd"><td>键盘</td><td>keydown 按键触发</td></tr><tr class="even"><td></td><td>keyup 按键抬起</td></tr><tr class="odd"><td>焦点</td><td>focus 进入输入框</td></tr><tr class="even"><td></td><td>blur 离开输入框</td></tr><tr class="odd"><td>表单事件</td><td>input 输入时触发</td></tr><tr class="even"><td></td><td>submit 提交时触发</td></tr></tbody></table><div class="sourceCode" id="cb14"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a> <span class="im">import</span> &#123;func1<span class="op">,</span> func2&#125; <span class="im">from</span> <span class="st">&quot;./utils.js&quot;</span> <span class="co">// js导入函数</span></span></code></pre></div><p>utils.js中的内容</p><div class="sourceCode" id="cb15"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="im">export</span> functtion <span class="fu">printLog</span>(msg)&#123;</span><span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(msg)<span class="op">;</span></span><span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>&#125;</span><span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="co">//使用export标记</span></span></code></pre></div><p>html导入时候，需表明类型是模块化的js</p><div class="sourceCode" id="cb16"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;./js/1.js&quot;</span><span class="ot"> type=</span><span class="st">&quot;module&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span></code></pre></div><h2 id="vue">2.3. vue</h2><p>Vue是一款构建用户界面的渐进式的JavaScript框架</p><p>构建用户界面：针对数据构建</p><p>渐进式：可以只使用一部分</p><figure><img src="/2025/05/24/java/web%E5%9F%BA%E7%A1%80/image-20250525174822695.png" alt="image-20250525174822695"><figcaption aria-hidden="true">image-20250525174822695</figcaption></figure><ol type="1"><li>准备<ol type="1"><li>引入Vue模块</li><li>创建Vue程序的应用示例，控制视图的元素</li><li>准备元素，被Vue控制</li></ol></li><li>数据驱动<ol type="1"><li>准备数据</li><li>通过差值表达式渲染界面</li></ol></li></ol><div class="sourceCode" id="cb17"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;app&quot;</span><span class="kw">&gt;</span></span><span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;h1&gt;</span></span><span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>        <span class="co">&#123;&#123;message&#125;&#125;</span></span><span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/h1&gt;</span></span><span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span><span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;script</span><span class="ot"> type=</span><span class="st">&quot;module&quot;</span><span class="kw">&gt;</span></span><span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span>&#123; creatApp &#125; <span class="im">from</span> <span class="st">&quot;https://unpkg.com/vue@3/dist/vue.esm-browser.js&quot;</span><span class="op">;</span></span><span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">createApp</span>(&#123;</span><span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>        <span class="fu">data</span>()&#123;</span><span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span>&#123;</span><span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>                <span class="dt">message</span><span class="op">:</span> <span class="st">&quot;hello vue&quot;</span><span class="op">;</span></span><span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a>            &#125;</span><span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a>        &#125;</span><span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a>    &#125;)<span class="op">.</span><span class="fu">mount</span>(<span class="st">&quot;#app&quot;</span>)<span class="op">;</span><span class="co">// 使用mount接管app</span></span><span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/script&gt;</span></span></code></pre></div><h3 id="vue指令">2.3.1. vue指令</h3><div class="sourceCode" id="cb18"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;p</span><span class="ot"> v-xxx=</span> <span class="st">&quot;&quot;</span><span class="kw">&gt;</span> ...<span class="kw">&lt;/p&gt;</span></span></code></pre></div><h4 id="v-for遍历">2.3.1.1. v-for遍历</h4><p>key的值避免复用</p><div class="sourceCode" id="cb19"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;tr</span><span class="ot"> v-for=</span><span class="st">&quot;(item, index) in items&quot;</span><span class="ot"> : key</span> <span class="ot">=</span><span class="st">&quot;item.id&quot;</span><span class="kw">&gt;</span> <span class="co">&#123;&#123;item&#125;&#125;</span><span class="kw">&lt;/tr&gt;</span></span></code></pre></div><p><strong>v-bind</strong>：动态为html绑定属性值，src, style,alt</p><div class="sourceCode" id="cb20"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;td&gt;&lt;img</span><span class="ot"> class=</span> <span class="st">&quot;avatar&quot;</span><span class="er">,</span><span class="ot"> v-bind:src=</span><span class="st">&quot;</span><span class="er">&lt;</span><span class="st">!--swig￼2--&gt;&quot;</span><span class="ot"> :alt</span> <span class="ot">=</span><span class="st">&quot;</span><span class="er">&lt;</span><span class="st">!--swig￼3--&gt;&quot;</span><span class="kw">&gt;&lt;/td&gt;</span></span><span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!-- vlind:属性，然后对应v-for中的内容</span></span><span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a><span class="co">// : 简写形式 </span></span><span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="co">--&gt;</span></span></code></pre></div><p><strong>v-if/v-show</strong>:控制元素的显示/隐藏</p><div class="sourceCode" id="cb21"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="co">&lt;!--</span></span><span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="co">    v-if：根据条件判断结果，判断结果输出/隐藏，不一定创建</span></span><span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="co">        不频繁使用</span></span><span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="co">        紧跟v-else-if, v-else</span></span><span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="co">    v-show: 根据条件结果，调用css 中display格式，分别用来显示和隐藏，会创建</span></span><span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a><span class="co">        频繁使用</span></span><span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a><span class="co">    “”之间的结果判断</span></span><span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a><span class="co">--&gt;</span></span><span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;span</span><span class="ot"> v-show=</span><span class="st">&quot;e.job==1&quot;</span><span class="kw">&gt;</span> 帮助人<span class="kw">&lt;/span&gt;</span></span></code></pre></div><p><strong>v-model</strong>: 双向绑定元素与vue data，绑定输入的内容</p><div class="sourceCode" id="cb22"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;input</span><span class="ot"> type=</span><span class="st">&quot;text&quot;</span><span class="ot"> id=</span><span class="st">&quot;name&quot;</span><span class="ot"> v-model=</span><span class="st">&quot;searchForm.name&quot;</span><span class="kw">&gt;</span> </span></code></pre></div><p><strong>v-on</strong>： 为html绑定事件</p><p>引号中绑定的是函数动作，可以简化为@click</p><div class="sourceCode" id="cb23"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;button</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> v-on:click=</span><span class="st">&quot;handle&quot;</span><span class="kw">&gt;</span></span><span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>    点击</span><span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/button&gt;</span></span></code></pre></div><p>在vue中定义方法</p><pre class="vue"><code>const app = createApp(&#123;    data()&#123;        return&#123;        &#125;    &#125;,    method:&#123;        handle()&#123;        &#125;    &#125;&#125;).mount(&quot;#app&quot;)// 使用时需要将button的类型设置为button</code></pre><h1 id="致谢">3. 致谢</h1><p><a href="https://www.bilibili.com/video/BV1yGydYEE3H?spm_id_from=333.788.videopod.episodes&amp;vd_source=8f246175d50731783a1ab3dafac1f6ab&amp;p=2">02.Web前端开发初识_哔哩哔哩_bilibili</a></p></body><p></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>transformer</title>
      <link href="/2025/05/24/deeplearn/Transformer/"/>
      <url>/2025/05/24/deeplearn/Transformer/</url>
      
        <content type="html"><![CDATA[<h1 id="transformer">1. Transformer</h1><h2 id="模型基本框架">1.1. 模型基本框架</h2><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250425173522602.png" alt="image-20250425173522602"><figcaption aria-hidden="true">image-20250425173522602</figcaption></figure><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516114212148.png" alt="image-20250516114212148"><figcaption aria-hidden="true">image-20250516114212148</figcaption></figure><h2 id="编码器">1.2. 编码器</h2><ol type="1"><li>通过嵌入层</li><li>对位置进行编码</li><li>经过编码器层<ol type="1"><li>注意力层：<ol type="1"><li>注意力机制</li><li>残差+ 规范化层</li></ol></li><li>前馈网络<ol type="1"><li>前馈网络</li><li>残差+ 规范化层</li></ol></li></ol></li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> TransformerEncoder(d2l.Encoder):</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, vocab_size, key_size, query_size, value_size,</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>                 num_hiddens, norm_shape, ffn_num_input, ffn_num_hiddens,</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>                 num_heads, num_layers, dropout, use_bias<span class="op">=</span><span class="va">False</span>, <span class="op">**</span>kwargs):</span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(TransformerEncoder, <span class="va">self</span>).<span class="fu">__init__</span>(<span class="op">**</span>kwargs)</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.num_hiddens <span class="op">=</span> num_hiddens</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.embedding <span class="op">=</span> nn.Embedding(vocab_size, num_hiddens)</span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.pos_encoding <span class="op">=</span> d2l.PositionalEncoding(num_hiddens, dropout)</span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.blks <span class="op">=</span> nn.Sequential()</span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(num_layers):</span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>            <span class="va">self</span>.blks.add_module(<span class="st">&quot;block&quot;</span><span class="op">+</span><span class="bu">str</span>(i),</span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>                EncoderBlock(key_size, query_size, value_size, num_hiddens,</span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>                             norm_shape, ffn_num_input, ffn_num_hiddens,</span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>                             num_heads, dropout, use_bias))</span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>            </span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>, X, valid_lens, <span class="op">*</span>args):</span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 因为位置编码值在-1和1之间，</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 因此嵌入值乘以嵌入维度的平方根进行缩放，</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 然后再与位置编码相加。</span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>        X <span class="op">=</span> <span class="va">self</span>.pos_encoding(<span class="va">self</span>.embedding(X) <span class="op">*</span> math.sqrt(<span class="va">self</span>.num_hiddens))</span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.attention_weights <span class="op">=</span> [<span class="va">None</span>] <span class="op">*</span> <span class="bu">len</span>(<span class="va">self</span>.blks)</span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i, blk <span class="kw">in</span> <span class="bu">enumerate</span>(<span class="va">self</span>.blks):</span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>            X <span class="op">=</span> blk(X, valid_lens)</span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>            <span class="va">self</span>.attention_weights[</span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>                i] <span class="op">=</span> blk.attention.attention.attention_weights</span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> X</span></code></pre></div><h3 id="encoderblock层">1.2.1. EncoderBlock层</h3><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250425175900742.png" alt="image-20250425175900742"><figcaption aria-hidden="true">image-20250425175900742</figcaption></figure><ol type="1"><li>注意力层：<ol type="1"><li>注意力机制</li><li>残差+ 规范化层</li></ol></li><li>前馈网络<ol type="1"><li>前馈网络</li><li>残差+ 规范化层</li></ol></li></ol><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> EncoderBlock(nn.Module):</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;Transformer编码器块&quot;&quot;&quot;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, key_size, query_size, value_size, num_hiddens,</span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>                     norm_shape, ffn_num_input, ffn_num_hiddens, num_heads,</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>                     dropout, use_bias<span class="op">=</span><span class="va">False</span>, <span class="op">**</span>kwargs):</span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(EncoderBlock, <span class="va">self</span>).<span class="fu">__init__</span>(<span class="op">**</span>kwargs)</span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.attention <span class="op">=</span> d2l.MultiHeadAttention(</span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>            key_size, query_size, value_size, num_hiddens, num_heads, dropout,</span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>            use_bias)</span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.addnorm1 <span class="op">=</span> AddNorm(norm_shape, dropout)</span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.ffn <span class="op">=</span> PositionWiseFFN(</span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>            ffn_num_input, ffn_num_hiddens, num_hiddens)</span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.addnorm2 <span class="op">=</span> AddNorm(norm_shape, dropout)</span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>, X, valid_lens):</span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        Y <span class="op">=</span> <span class="va">self</span>.addnorm1(X, <span class="va">self</span>.attention(X, X, X, valid_lens))</span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">self</span>.addnorm2(Y, <span class="va">self</span>.ffn(Y))</span></code></pre></div><h4 id="多头注意力机制">1.2.1.1. 多头注意力机制</h4><p>将键值对分为多个子空间，每个注意力机制学习一个子空间的特征，得到H组的注意力权重，然后将注意力权重通过线性层汇聚</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250425155705305.png" alt="image-20250425155705305"><figcaption aria-hidden="true">image-20250425155705305</figcaption></figure><p>常规思路：</p><ol type="1"><li>将query, key, values映射到子空间，使用不同的Linear映射</li><li>将不同头的注意力结果合并在一起，在feature维度上合并</li><li>再通过一个Linear线性层，连接所有head</li></ol><p>并行思路</p><ol type="1"><li>将query,key, values映射到完整空间，然后将完整空间查分成子空间，head与batch组成一个伪batch</li><li>再将子空间的数据通过点积注意力</li><li>将head从batch中分离出来，与feature合并，效果与非并行情况相同</li><li>最后通过线性层</li></ol><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> MultiHeadAttention(nn.Module):</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, key_size, query_size, value_size, num_hiddens, num_head, dropout, bias <span class="op">=</span> false, <span class="op">**</span>kwargs):</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.num_head <span class="op">=</span> head</span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.attention <span class="op">=</span> d2l.DotProductAttention(dropout)</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.W_k <span class="op">=</span> nn.Linear(key_size, num_hiddens)</span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.W_q <span class="op">=</span> nn.Linear(query_size, num_hiddens)</span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.W_v <span class="op">=</span> nn.Linear(value_size, num_hiddens)</span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.W_o <span class="op">=</span> nn.Linear(num_hiddens, num_hiddens) <span class="co"># 全连接层</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>, query ,key ,values, valid_lens):</span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 转换为(batch_size* head, key/query , num_hidden/head)</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>        query <span class="op">=</span> transpose(<span class="va">self</span>.W_q(query),  <span class="va">self</span>.head_num)</span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        keys <span class="op">=</span> transpose_qkv(<span class="va">self</span>.W_k(keys), <span class="va">self</span>.num_heads)</span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        values <span class="op">=</span> transpose_qkv(<span class="va">self</span>.W_v(values), <span class="va">self</span>.num_heads)</span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 将掩码扩展为batch*head</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> valid_len <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>            valid_lens <span class="op">=</span> torch.repeat_interleave(</span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>                valid_lens, repeats <span class="op">=</span> <span class="va">self</span>.num_heads , dim <span class="op">=</span><span class="dv">0</span>)</span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>            </span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> <span class="va">self</span>.attention(query, key ,value, valid_len)</span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>        output_concat<span class="op">=</span>transpose_output(output, <span class="va">self</span>.num_heads)</span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 输出为（batch_size, query_size, hidden_size)</span></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">self</span>.W_o(output_concat)</span></code></pre></div><h4 id="残差规范化层">1.2.1.2. 残差+规范化层</h4><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> AddNorm(nn.Module):</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;残差连接后进行层规范化&quot;&quot;&quot;</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, normalized_shape, dropout, <span class="op">**</span>kwargs):</span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(AddNorm, <span class="va">self</span>).<span class="fu">__init__</span>(<span class="op">**</span>kwargs)</span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.dropout <span class="op">=</span> nn.Dropout(dropout)</span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.ln <span class="op">=</span> nn.LayerNorm(normalized_shape)</span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>, X, Y):</span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Y+X 残差网络</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Ln 层归一化</span></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">self</span>.ln(<span class="va">self</span>.dropout(Y) <span class="op">+</span> X)</span></code></pre></div><h5 id="残差层">1.2.1.2.1. 残差层</h5><p>训练是模型训练出F(X) = f(x)- X</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250423225436209.png" alt="image-20250423225436209"><figcaption aria-hidden="true">image-20250423225436209</figcaption></figure><p>对应模型中 支线 为x ，前馈神经网络中预测是f(X), 相加后得到准确预测的F(X)</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250425181440459.png" alt="image-20250425181440459"><figcaption aria-hidden="true">image-20250425181440459</figcaption></figure><h5 id="批量归一化层batchnorm">1.2.1.2.2. 批量归一化层BatchNorm</h5><p><span class="math display">$$\mathrm{BN}(\mathbf{x}) = \boldsymbol{\gamma} \odot \frac{\mathbf{x} - \hat{\boldsymbol{\mu}}_\mathcal{B}}{\hat{\boldsymbol{\sigma}}_\mathcal{B}} + \boldsymbol{\beta}.$$</span></p><p>对特征维度进行归一化,<span class="math inline"><em>γ</em>、<em>β</em></span> 是拉伸和偏移参数</p><ol type="1"><li><p>对特征维度进行归一化</p><pre><code>mean = X.mean(dim = 0, keepdim = True)</code></pre></li><li><p>卷积层</p><ol type="1"><li>对通道维度进行归一化</li></ol></li><li><p>训练状态下使用小批次的样本均值与方差，测试状态使用的移动平均估算的均值与方差</p></li></ol><h3 id="前馈网络层">1.2.2. 前馈网络层</h3><p>这里的线性层可以使用1*1cnn网络代替，代替结果</p><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> PositionWiseFFN(nn.Module):</span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;基于位置的前馈网络&quot;&quot;&quot;</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, ffn_num_input, ffn_num_hiddens, ffn_num_outputs,</span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>                 <span class="op">**</span>kwargs):</span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(PositionWiseFFN, <span class="va">self</span>).<span class="fu">__init__</span>(<span class="op">**</span>kwargs)</span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.dense1 <span class="op">=</span> nn.Linear(ffn_num_input, ffn_num_hiddens)</span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.relu <span class="op">=</span> nn.ReLU()</span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.dense2 <span class="op">=</span> nn.Linear(ffn_num_hiddens, ffn_num_outputs)</span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>, X):</span><span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">self</span>.dense2(<span class="va">self</span>.relu(<span class="va">self</span>.dense1(X)))</span></code></pre></div><h2 id="解码器">1.3. 解码器</h2><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250425181429443.png" alt="image-20250425181429443"><figcaption aria-hidden="true">image-20250425181429443</figcaption></figure><ol type="1"><li>通过嵌入层</li><li>对位置进行编码</li><li>经过解码器层<ol type="1"><li>第一个注意力层 ， query ,key, value,都是解码器输入</li><li>第二个注意力层， query 来自解码器输入 ， key, values来自编码器输入<ol type="1"><li>交叉注意力机制中，<strong>key,value</strong>来源使用一致，这里key,values来自编码器输入</li></ol></li><li>前馈神经网络</li></ol></li><li>全连接层</li></ol><div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> TransformerDecoder(d2l.AttentionDecoder):</span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, vocab_size, key_size, query_size, value_size,</span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>                 num_hiddens, norm_shape, ffn_num_input, ffn_num_hiddens,</span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>                 num_heads, num_layers, dropout, <span class="op">**</span>kwargs):</span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(TransformerDecoder, <span class="va">self</span>).<span class="fu">__init__</span>(<span class="op">**</span>kwargs)</span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.num_hiddens <span class="op">=</span> num_hiddens</span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.num_layers <span class="op">=</span> num_layers</span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.embedding <span class="op">=</span> nn.Embedding(vocab_size, num_hiddens)</span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.pos_encoding <span class="op">=</span> d2l.PositionalEncoding(num_hiddens, dropout)</span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.blks <span class="op">=</span> nn.Sequential()</span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(num_layers):</span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>            <span class="va">self</span>.blks.add_module(<span class="st">&quot;block&quot;</span><span class="op">+</span><span class="bu">str</span>(i),</span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>                DecoderBlock(key_size, query_size, value_size, num_hiddens,</span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>                             norm_shape, ffn_num_input, ffn_num_hiddens,</span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>                             num_heads, dropout, i))</span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.dense <span class="op">=</span> nn.Linear(num_hiddens, vocab_size)</span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> init_state(<span class="va">self</span>, enc_outputs, enc_valid_lens, <span class="op">*</span>args):</span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> [enc_outputs, enc_valid_lens, [<span class="va">None</span>] <span class="op">*</span> <span class="va">self</span>.num_layers]</span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>        X <span class="op">=</span> <span class="va">self</span>.pos_encoding(<span class="va">self</span>.embedding(X) <span class="op">*</span> math.sqrt(<span class="va">self</span>.num_hiddens))</span><span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>._attention_weights <span class="op">=</span> [[<span class="va">None</span>] <span class="op">*</span> <span class="bu">len</span>(<span class="va">self</span>.blks) <span class="cf">for</span> _ <span class="kw">in</span> <span class="bu">range</span> (<span class="dv">2</span>)]</span><span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i, blk <span class="kw">in</span> <span class="bu">enumerate</span>(<span class="va">self</span>.blks):</span><span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>            X, state <span class="op">=</span> blk(X, state)</span><span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>            <span class="co"># 解码器自注意力权重</span></span><span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>            <span class="va">self</span>._attention_weights[<span class="dv">0</span>][</span><span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>                i] <span class="op">=</span> blk.attention1.attention.attention_weights</span><span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>            <span class="co"># “编码器－解码器”自注意力权重</span></span><span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>            <span class="va">self</span>._attention_weights[<span class="dv">1</span>][</span><span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a>                i] <span class="op">=</span> blk.attention2.attention.attention_weights</span><span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">self</span>.dense(X), state</span><span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a>            </span></code></pre></div><h3 id="解码器层">1.3.1. 解码器层</h3><p>经过解码器层</p><ol type="1"><li>第一个注意力层 ， query ,key, value,都是解码器输入</li><li>第二个注意力层， query 来自解码器输入 ， key, values来自编码器输入</li><li>前馈神经网络</li></ol><div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> DecoderBlock(nn.Module):</span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;解码器中第i个块&quot;&quot;&quot;</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, key_size, query_size, value_size, num_hiddens,</span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>                 norm_shape, ffn_num_input, ffn_num_hiddens, num_heads,</span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>                 dropout, i, <span class="op">**</span>kwargs):</span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>(DecoderBlock, <span class="va">self</span>).<span class="fu">__init__</span>(<span class="op">**</span>kwargs)</span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.i <span class="op">=</span> i</span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.attention1 <span class="op">=</span> d2l.MultiHeadAttention(</span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>            key_size, query_size, value_size, num_hiddens, num_heads, dropout)</span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.addnorm1 <span class="op">=</span> AddNorm(norm_shape, dropout)</span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.attention2 <span class="op">=</span> d2l.MultiHeadAttention(</span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>            key_size, query_size, value_size, num_hiddens, num_heads, dropout)</span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.addnorm2 <span class="op">=</span> AddNorm(norm_shape, dropout)</span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.ffn <span class="op">=</span> PositionWiseFFN(ffn_num_input, ffn_num_hiddens,</span><span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>                                   num_hiddens)</span><span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.addnorm3 <span class="op">=</span> AddNorm(norm_shape, dropout)</span><span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> forward(<span class="va">self</span>, X, state):</span><span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>        enc_outputs, enc_valid_lens <span class="op">=</span> state[<span class="dv">0</span>], state[<span class="dv">1</span>]</span><span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 训练阶段，输出序列的所有词元都在同一时间处理，</span></span><span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 因此state[2][self.i]初始化为None。</span></span><span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 预测阶段，输出序列是通过词元一个接着一个解码的，</span></span><span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 因此state[2][self.i]包含着直到当前时间步第i个块解码的输出表示</span></span><span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> state[<span class="dv">2</span>][<span class="va">self</span>.i] <span class="kw">is</span> <span class="va">None</span>:</span><span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>            <span class="co"># 使用当前输入的数据进行预测</span></span><span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>            key_values <span class="op">=</span> X</span><span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span><span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>            <span class="co">&#39;&#39;&#39;</span></span><span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a><span class="co">            state[2] 中存放者上一个时间步，留下的已经每个块之前计算好的key_value</span></span><span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a><span class="co">            # 加上y_t之前的数据一起预测</span></span><span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a><span class="co">            &#39;&#39;&#39;</span></span><span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>            key_values <span class="op">=</span> torch.cat((state[<span class="dv">2</span>][<span class="va">self</span>.i], X), axis<span class="op">=</span><span class="dv">1</span>)</span><span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a>        state[<span class="dv">2</span>][<span class="va">self</span>.i] <span class="op">=</span> key_values</span><span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="va">self</span>.training:</span><span id="cb8-34"><a href="#cb8-34" aria-hidden="true" tabindex="-1"></a>            batch_size, num_steps, _ <span class="op">=</span> X.shape</span><span id="cb8-35"><a href="#cb8-35" aria-hidden="true" tabindex="-1"></a>            <span class="co"># dec_valid_lens的开头:(batch_size,num_steps),</span></span><span id="cb8-36"><a href="#cb8-36" aria-hidden="true" tabindex="-1"></a>            <span class="co"># 其中每一行是[1,2,...,num_steps]</span></span><span id="cb8-37"><a href="#cb8-37" aria-hidden="true" tabindex="-1"></a>            dec_valid_lens <span class="op">=</span> torch.arange(</span><span id="cb8-38"><a href="#cb8-38" aria-hidden="true" tabindex="-1"></a>                <span class="dv">1</span>, num_steps <span class="op">+</span> <span class="dv">1</span>, device<span class="op">=</span>X.device).repeat(batch_size, <span class="dv">1</span>)</span><span id="cb8-39"><a href="#cb8-39" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span><span id="cb8-40"><a href="#cb8-40" aria-hidden="true" tabindex="-1"></a>            dec_valid_lens <span class="op">=</span> <span class="va">None</span></span><span id="cb8-41"><a href="#cb8-41" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-42"><a href="#cb8-42" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 自注意力</span></span><span id="cb8-43"><a href="#cb8-43" aria-hidden="true" tabindex="-1"></a>        X2 <span class="op">=</span> <span class="va">self</span>.attention1(X, key_values, key_values, dec_valid_lens)</span><span id="cb8-44"><a href="#cb8-44" aria-hidden="true" tabindex="-1"></a>        Y <span class="op">=</span> <span class="va">self</span>.addnorm1(X, X2)</span><span id="cb8-45"><a href="#cb8-45" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 编码器－解码器注意力。</span></span><span id="cb8-46"><a href="#cb8-46" aria-hidden="true" tabindex="-1"></a>        <span class="co"># enc_outputs的开头:(batch_size,num_steps,num_hiddens)</span></span><span id="cb8-47"><a href="#cb8-47" aria-hidden="true" tabindex="-1"></a>        Y2 <span class="op">=</span> <span class="va">self</span>.attention2(Y, enc_outputs, enc_outputs, enc_valid_lens)</span><span id="cb8-48"><a href="#cb8-48" aria-hidden="true" tabindex="-1"></a>        Z <span class="op">=</span> <span class="va">self</span>.addnorm2(Y, Y2)</span><span id="cb8-49"><a href="#cb8-49" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">self</span>.addnorm3(Z, <span class="va">self</span>.ffn(Z)), state</span><span id="cb8-50"><a href="#cb8-50" aria-hidden="true" tabindex="-1"></a>        </span></code></pre></div><p>在transformer结构中，query与key权重对values值进行查询，values值是编码器的输入，为什么就可以查询到解码器想要的结果呢？比如，编码器编码我是李华，解码器对I 查询 我，ji</p><h2 id="优化">1.4. 优化</h2><p>Adam， 自动调整学习率</p><p>warm up 和逆平方根衰减</p><h2 id="bert">1.5. BERT</h2><h3 id="预训练无监督自监督">1.5.1. 预训练（无监督/自监督）</h3><p>自监督</p><ol type="1"><li>完形填空</li><li>预测下一句</li></ol><h3 id="微调有监督">1.5.2. 微调（有监督）</h3><p>需要根据下游任务添加输出层，添加的层需要重新训练</p><ol type="1"><li>两个句子分类</li><li>单个句子的分类</li><li>问答任务<ol type="1"><li>找到答案正确的文本位置</li></ol></li><li>命名实体位置标记<ol type="1"><li>标记实体位置（begin ,inside ,O（非实体））</li></ol></li></ol><h2 id="decoder_only">1.6. Decoder_only</h2><p><strong>优点</strong>：</p><ol type="1"><li>Decoder-only的注意力矩阵始终是满秩，表达能力更强</li><li>不会浪费Encoder的参数，输入可以直接作用与decoder</li></ol><h3 id="预训练">1.6.1. 预训练</h3><p>test prediction 预测文本</p><h3 id="微调">1.6.2. 微调</h3><p>test prediction + task classfication 的损失相加</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516123238590.png" alt="task"><figcaption aria-hidden="true">task</figcaption></figure><h2 id="gpt-2">1.7. GPT-2</h2><p><strong>无需微调，预训练的模型就可以解决下游任务</strong></p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516123552285.png" alt="image-20250516123552285"><figcaption aria-hidden="true">image-20250516123552285</figcaption></figure><p>Zero-shot, One-shot, Few-shot</p><p>使用任务提示（prompt）和少量示例直接输入</p><h3 id="lay-n放在模块前">1.7.1. lay N放在模块前</h3><ol type="1"><li>尺度定律： 模型的大小与Loss线性拟合</li><li>涌现能力： 大模型效果迅速提升</li></ol><h2 id="gpt">1.8. GPT</h2><p>参数数量增多，需要减少计算量。</p><h3 id="sparse-attention">1.8.1. sparse attention</h3><p>减少attention的计算量，只关注临近部分和前面的部分权重</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516124911687.png" alt="image-20250516124911687"><figcaption aria-hidden="true">image-20250516124911687</figcaption></figure><h3 id="chatgpt">1.8.2. chatgpt</h3><p>增加人类反馈强化学习（RLHF) ,与人互动</p><h2 id="llama">1.9. LLAMA</h2><h3 id="swiglu">1.9.1. swiGLU</h3><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516155254082.png" alt="image-20250516155254082"><figcaption aria-hidden="true">image-20250516155254082</figcaption></figure><p>使用swi激活函数，同时使用门控机制（GLU)，选择性激活函数</p><p>优点： swish激活函数更平滑，GLU实现选择性激活</p><h3 id="gqa-grouped-query-attention">1.9.2. GQA-grouped-query attention</h3><p>减少k,v的head 数量，query共享重复的k,v，减少参数</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516155516226.png" alt="image-20250516155516226"><figcaption aria-hidden="true">image-20250516155516226</figcaption></figure><h3 id="layer-norm-变体">1.9.3. layer norm 变体</h3><p>RMSNorm:均方根归一化</p><p><strong>取出平移，只保留缩放</strong></p><p>优点：计算简单</p><figure><img src="/2025/05/24/deeplearn/Transformer/image-20250516160128424.png" alt="image-20250516160128424"><figcaption aria-hidden="true">image-20250516160128424</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp+servlet</title>
      <link href="/2025/05/24/java/jsp/"/>
      <url>/2025/05/24/java/jsp/</url>
      
        <content type="html"><![CDATA[<h1 id="java基础">1. java基础</h1><h2 id="修饰符">1.1. 修饰符</h2><h3 id="final">1.1.1. final</h3><h1 id="servlet">2. servlet</h1><h2 id="http协议">2.1. http协议</h2><pre class="http"><code>http://ip:端口/资源路径?name= eg : http://127.0.0.1/myweb/servlet?name = zhangsan</code></pre><ol type="1"><li>支持客户/服务端</li><li>支持get ,post请求</li><li>传输内容，类型可以有Content-Type</li><li>http无连接，http1.1之后支持可持续连接</li><li>http无状态信息</li></ol><h3 id="请求和responce">2.1.1. 请求和responce</h3><h4 id="请求request">2.1.1.1. 请求request</h4><ol type="1"><li><p>请求行</p><blockquote><p>get的请求放在请求行中</p></blockquote><p>method Request_url http_version 换行</p></li><li><p>请求头</p><ol type="1"><li>键值对</li></ol></li><li><p>请求体</p><ol type="1"><li>get没有请求行</li></ol></li></ol><h4 id="response">2.1.1.2. response</h4><ol type="1"><li>状态行</li><li>响应头</li><li>响应正文</li></ol><h3 id="消息头">2.1.2. 消息头</h3><ul><li><em>referer</em>: 请求前来位置</li><li><em>Location</em>: 请求达到位置</li><li><em>refresh</em>: 自动跳转时间</li></ul><h2 id="服务器">2.2. 服务器</h2><p>接受客户端的请求,调用程序处理,返回程序数据</p><h3 id="tomcat目录">2.2.1. tomcat目录</h3><ul><li>bin: 启动或关闭的配置文件</li><li>conf: 配置servel端口号等信息文件</li><li>lib: 运行时使用的java包</li><li>logs :日志文件</li><li>webapps: web应用</li><li>works: 工作目录</li></ul><h3 id="使用idea-集成tomcat">2.2.2. 使用idea 集成tomcat</h3><h2 id="servlet实现">2.3. servlet实现</h2><ol type="1"><li>创建java类</li><li>实现servlet规范, 继承HttpServlet类</li><li>重写service 方法,用于处理请求</li><li>设置注释,指定访问方法的路径</li></ol><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="at">@Webservlet</span><span class="op">(</span>name <span class="op">=</span> <span class="op">,</span> value <span class="op">=&#123;</span> <span class="op">,</span> <span class="op">&#125;)</span> value可以指定多个名称</span></code></pre></div><h3 id="servlet执行流程">2.3.1. servlet执行流程</h3><ol type="1"><li>从请求头中找到主机</li><li>访问请求头中的资源,第一次访问创建一个对象</li><li>将参数交给req, 通过resp响应参数</li></ol><h3 id="三种访问方式">2.3.2. 三种访问方式</h3><p>继承方式</p><p>HttpServlet -&gt; GenericServlet &gt; Servlet</p><h3 id="service-dopost-doget">2.3.3. service ,doPost, doGet</h3><p>调用service 实际上调用doPost, doGet</p><blockquote><p>不知道post 或 get ,写service</p></blockquote><h3 id="servlet生命周期">2.3.4. servlet生命周期</h3><p>请求访问servlet容器时候,检查容器中是否存在该资源对象,没有调用init方法,第二次访问时,调用service.程序停止售,调用destory方法</p><figure><img src="/2025/05/24/java/jsp/image-20250503221820723.png" alt="image-20250503221820723"><figcaption aria-hidden="true">image-20250503221820723</figcaption></figure><h3 id="httpservletrequest-获取请求">2.3.5. HttpServletRequest 获取请求</h3><p>HTTp的请求都封装在Req对象中</p><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> value <span class="op">=</span> Req<span class="op">.</span><span class="fu">getParameter</span><span class="op">(</span><span class="st">&quot;&quot;</span><span class="op">)</span> 获取名称对应的值</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span><span class="op">[]</span> values <span class="op">=</span> Req<span class="op">.</span><span class="fu">getParameterValues</span><span class="op">(</span><span class="st">&quot;&quot;</span><span class="op">)</span> 同一个name存在多个值</span></code></pre></div><h4 id="请求乱码问题">2.3.5.1. 请求乱码问题</h4><p>乱码原因: request 封装时候,使用的ISO ,不支持中文编码</p><p>get 不会乱码，post有乱码</p><p>解决办法: 设置请求的编码方式</p><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>req<span class="op">.</span><span class="fu">sertCharacterEncoding</span><span class="op">(</span><span class="st">&quot;utf-8&quot;</span><span class="op">)</span> <span class="co">// 只值对post代码</span></span></code></pre></div><div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> name <span class="op">=</span> <span class="kw">new</span> <span class="bu">String</span><span class="op">(</span>req<span class="op">.</span><span class="fu">getParameter</span><span class="op">(</span>name<span class="op">)).</span><span class="fu">getBytes</span><span class="op">(</span><span class="er">&#39;</span>ISO<span class="op">-</span><span class="dv">8859</span><span class="op">-</span><span class="dv">1</span><span class="er">&#39;</span><span class="op">,</span> charameter <span class="op">=</span> <span class="er">&#39;</span>utf<span class="op">-</span><span class="dv">8</span><span class="er">&#39;</span><span class="op">)</span> <span class="co">//适用于所有get 与post</span></span></code></pre></div><h4 id="请求转发">2.3.5.2. 请求转发</h4><ol type="1"><li>服务器行为</li><li>前台地址栏不发生改变,只产生输出</li><li>只有一个请求</li><li>req, resp对象共享</li></ol><div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>req<span class="op">.</span><span class="fu">getRequestDispatcher</span><span class="op">(</span><span class="st">&quot;跳转网址&quot;</span><span class="op">).</span><span class="fu">forward</span><span class="op">(</span>req<span class="op">,</span> resp<span class="op">);</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>req<span class="op">.</span><span class="fu">setAttribute</span><span class="op">(</span><span class="bu">String</span> name <span class="op">,</span> <span class="bu">Object</span> value<span class="op">);</span><span class="co">//设置新的对象值</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>req<span class="op">.</span><span class="fu">getAttribute</span><span class="op">(</span><span class="bu">String</span> name<span class="op">);</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>req<span class="op">.</span><span class="fu">removeAttribute</span><span class="op">(</span><span class="bu">String</span> name<span class="op">);</span><span class="co">//删除对象值</span></span></code></pre></div><h3 id="httpservletresponse-响应请求">2.3.6. HttpServletResponse 响应请求</h3><p>使用流输出方法响应</p><ol type="1"><li>getWritter() 字符输出流(输出字符串)</li><li>getOutputStream(), 字节输出流(输出任意数据)</li></ol><p><strong>两种流不能同时使用</strong></p><h4 id="响应乱码">2.3.6.1. 响应乱码</h4><p><strong>原因</strong>： 服务端和客户端的编码格式一致</p><p>解决办法：同时设置服务端和客户端的编码，保证编码格式一致</p><div class="sourceCode" id="cb7"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 设置服务端的编码格式</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>response<span class="op">.</span><span class="fu">setCharacterEncoding</span><span class="op">(</span><span class="st">&quot;UTF-8&quot;</span><span class="op">);</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="co">// 设置客户端代码</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>response<span class="op">.</span><span class="fu">setHeader</span><span class="op">(</span><span class="st">&quot;content_type&quot;</span><span class="op">,</span> <span class="st">&quot;text/html; charset= UTF-8&quot;</span><span class="op">);</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="co">// 同时设置编码格式</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>response<span class="op">.</span><span class="fu">setContentType</span><span class="op">(</span><span class="st">&quot;text/html; charset= UTF-8&quot;</span><span class="op">);</span></span></code></pre></div><h4 id="客户端重定向">2.3.6.2. 客户端重定向</h4><p>服务端指导客户端的行为</p><blockquote><p>地址栏发生改变，写入location</p><p>服务器接受location</p></blockquote><p>有两次请求</p><blockquote><p>请求对象不共享</p></blockquote><div class="sourceCode" id="cb8"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>response<span class="op">.</span><span class="fu">sendRedirect</span><span class="op">(</span><span class="st">&quot;s05&quot;</span><span class="op">);</span></span></code></pre></div><h4 id="请求转发与重定向的区别">2.3.6.3. 请求转发与重定向的区别</h4><table><thead><tr class="header"><th>请求转发</th><th>重定向</th></tr></thead><tbody><tr class="odd"><td>一次请求，request数据共享</td><td>两次请求</td></tr><tr class="even"><td>服务端跳转</td><td>客户端跳转</td></tr><tr class="odd"><td>绝对地址到当前项目中，不能向外跳转</td><td>可以向域外跳转</td></tr></tbody></table><h2 id="cookie对象">2.4. Cookie对象</h2><p>浏览器中将数据存放在客户端中，在客户端中处理数据，减少网络传输与数据库查询</p><p>由服务器写入客户端</p><div class="sourceCode" id="cb9"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 服务器写入Cookie 到客户端中，客户端保存Cookie</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>Cookie cookie <span class="op">=</span> <span class="kw">new</span> <span class="fu">Cookie</span><span class="op">(</span>name <span class="op">=</span> <span class="st">&quot;a&quot;</span><span class="op">,</span> value <span class="op">=</span> <span class="ch">&#39;b&#39;</span><span class="op">);</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>response<span class="op">.</span><span class="fu">addCookie</span><span class="op">(</span>cookie<span class="op">)</span></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="co">// 获取Cookie</span></span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>Cookie<span class="op">[]</span> conkie <span class="op">=</span> request<span class="op">.</span><span class="fu">getCookies</span><span class="op">();</span> <span class="co">// 获取客户端路径下所有的Cookie对象</span></span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="co">//将Cookie 的name 与需要查找的Cookie作比较</span></span></code></pre></div><h3 id="设置对象存在时间">2.4.1. 设置对象存在时间</h3><p>设置maxAge存活时间 ，从创建Cookie对象开始</p><div class="sourceCode" id="cb10"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>cookie<span class="op">.</span><span class="fu">setMaxAge</span><span class="op">(</span>time<span class="op">);</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="co">1. 负整数，只在浏览器内存中存在</span></span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="co">2. 正整数，保存磁盘对应的时间，关闭后依旧计数，时间为s</span></span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="co">3. 0 ： 删除这个Cookie</span></span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="co">*/</span></span></code></pre></div><h3 id="注意点">2.4.2. 注意点</h3><ol type="1"><li>Cookie 只在当前浏览器中有效，不跨浏览器和及其</li><li>Cookie不支持存放中文，使用时候需要编码/解码</li><li>新的同名name Cookie 将覆盖之前的Cookie</li><li>Cookie的存储数量有上限，Cookie的大小有限，4KB左右</li></ol><div class="sourceCode" id="cb11"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> name <span class="op">=</span> <span class="st">&quot;陈龙&quot;</span><span class="op">;</span></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co">// 中文通过URLEncoder.encode()编码</span></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>name <span class="op">=</span> <span class="bu">URLEncoder</span><span class="op">.</span><span class="fu">encoder</span><span class="op">(</span>name<span class="op">);</span></span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="co">// 使用时，需URLDecoder.decoder()解码</span></span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>name <span class="op">=</span> <span class="bu">URLDecoder</span><span class="op">.</span><span class="fu">decoder</span><span class="op">(</span>name<span class="op">);</span></span></code></pre></div><h3 id="cookie的访问路径">2.4.3. Cookie的访问路径</h3><ol type="1"><li>当前浏览器下如何项目任何资源都可以获取Cookie</li></ol><div class="sourceCode" id="cb12"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>cookie<span class="op">.</span><span class="fu">setPath</span><span class="op">(</span><span class="st">&quot;/&quot;</span><span class="op">);</span></span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="co">// 默认本项目</span></span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>cookie<span class="op">.</span><span class="fu">setPaht</span><span class="op">(</span><span class="st">&quot;/s02&quot;</span><span class="op">);</span></span><span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="co">// 设置指定站点名</span></span><span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>cookie<span class="op">.</span><span class="fu">setPath</span><span class="op">(</span><span class="st">&quot;/sc03&quot;</span><span class="op">);</span></span><span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="co">// 指定项目的指定资源访问cookie</span></span><span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>cookie<span class="op">.</span><span class="fu">setPaht</span><span class="op">(</span><span class="st">&quot;s03/co1&quot;</span><span class="op">);</span></span></code></pre></div><p>只有访问的路径包括 <em>cookie的路径</em> 时， 能够获取这个cookie</p><h2 id="httpsession-对象">2.5. HttpSession 对象</h2><p>属于服务器对象， 标识一次对话，确定是否为一个用户的数据</p><div class="sourceCode" id="cb13"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>HttpSession session <span class="op">=</span> request<span class="op">.</span><span class="fu">getSession</span><span class="op">();</span> <span class="co">// 如session 对象存在，则获取 ；否则第一次创建对象</span></span></code></pre></div><p>一次请求到了服务器，标识启动了会话，客户端向服务器传递JSESSIONID的cookie，用于标识服务器中对应的session， 如果有，则共享数据，没有创建sesion,同时给客户端创建JSESSIONID的cookie.</p><h3 id="设置域对象">2.5.1. 设置域对象</h3><p>HttpSession 与 request 的区别</p><p>重定向： 只要session会话不是小，session一直共享数据</p><div class="sourceCode" id="cb14"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>HttpSession session <span class="op">=</span> request<span class="op">.</span><span class="fu">getSession</span><span class="op">();</span></span><span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>session<span class="op">.</span><span class="fu">setAttribute</span><span class="op">(</span><span class="st">&quot;name&quot;</span><span class="op">,</span> <span class="st">&quot;hello&quot;</span><span class="op">);</span></span><span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>session<span class="op">.</span><span class="fu">getAttribute</span><span class="op">(</span><span class="st">&quot;name&quot;</span><span class="op">);</span></span></code></pre></div><h3 id="session-对象的销毁">2.5.2. session 对象的销毁</h3><p>默认是30min， 一旦有操作，session 重新计时</p><blockquote><p>在conf/web.xml中修改session_config中timeout,单位为1min</p></blockquote><h4 id="设置到期时间">2.5.2.1. 设置到期时间</h4><div class="sourceCode" id="cb15"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>session<span class="op">.</span><span class="fu">setMaxInactiveInterval</span><span class="op">(</span><span class="dv">15</span><span class="op">);</span> <span class="co">//单位为s</span></span></code></pre></div><h4 id="立即销毁">2.5.2.2. 立即销毁</h4><p>退出登录，立马销毁</p><div class="sourceCode" id="cb16"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>session<span class="op">.</span><span class="fu">invalidate</span><span class="op">();</span> </span></code></pre></div><h4 id="关闭浏览器cookie对象销毁">2.5.2.3. 关闭浏览器，Cookie对象销毁</h4><p>session 需要JSESSIONID ，JSESSIONID默认在浏览器内存中有效，Cookie消失后，session 结束</p><h4 id="关闭服务器失效">2.5.2.4. 关闭服务器失效</h4><h2 id="servletcontext对象">2.6. ServletContext对象</h2><h3 id="获取对象">2.6.1. 获取对象</h3><div class="sourceCode" id="cb17"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>ServletContext servletContext1 <span class="op">=</span> request<span class="op">.</span><span class="fu">getServletContext</span><span class="op">();</span></span><span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="co">// session对象获取</span></span><span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>ServletContext servletContext2 <span class="op">=</span> request<span class="op">.</span><span class="fu">getSession</span><span class="op">().</span><span class="fu">getServletContext</span><span class="op">();</span></span><span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a><span class="co">// ServletConfig对象中获取</span></span><span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a><span class="fu">getServletConfig</span><span class="op">().</span><span class="fu">getServletContext</span><span class="op">();</span></span><span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="co">// servlet中直接获取</span></span><span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>ServletContext servletContext4 <span class="op">=</span> <span class="fu">getServletContext</span><span class="op">();</span></span></code></pre></div><p>常用方法</p><div class="sourceCode" id="cb18"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 获取服务器信息</span></span><span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> serverInfo <span class="op">=</span> request<span class="op">.</span><span class="fu">getServletContext</span><span class="op">().</span><span class="fu">getServerInfo</span><span class="op">();</span></span><span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="co">// 获取项目路径</span></span><span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> realPath <span class="op">=</span> request<span class="op">.</span><span class="fu">getServletContext</span><span class="op">().</span><span class="fu">getRealPath</span><span class="op">(</span><span class="st">&quot;/&quot;</span><span class="op">);</span><span class="co">// 从根目录下获取</span></span></code></pre></div><h3 id="servlet-域对象">2.6.2. Servlet 域对象</h3><ol type="1"><li><p>request 域对象</p><p>再一次请求中有效，请求转发有效，重定向无效</p></li><li><p>session 对象</p><p>一次会话中有效，session销毁后无效</p></li><li><p>servletContext 对象</p><p>服务器中始终有效</p></li></ol><h2 id="文件上传下载">2.7. 文件上传下载</h2><h3 id="上传">2.7.1. 上传</h3><h4 id="前端实现">2.7.1.1. 前端实现</h4><ol type="1"><li>准备表单form</li><li>设置表单的请求类型 ‘method =“post”</li><li>设置表达类型为文件上传类型 enctype = “multipart/form-data”</li><li>设置文件提交的地址 active = “提交路径”</li><li>准备表单元素<ol type="1"><li>普通的表单项 type = “text”</li><li>文件项 type = “file”</li><li>设置表单元素的name值</li></ol></li></ol><h4 id="后端实现">2.7.1.2. 后端实现</h4><p>添加注解<code>MultipartConfig</code>, servlet将 multipart/form-data 的post封装在part对象中</p><div class="sourceCode" id="cb19"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="at">@MultipartConfig</span></span><span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>Part part <span class="op">=</span> request<span class="op">.</span><span class="fu">getPart</span><span class="op">(</span><span class="st">&quot;name&quot;</span><span class="op">);</span></span><span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> fileName <span class="op">=</span> part<span class="op">.</span><span class="fu">getSubmittedFileName</span><span class="op">();</span> <span class="co">// 获取提交文件名称；</span></span><span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> realPath <span class="op">=</span> request<span class="op">.</span><span class="fu">getServletContext</span><span class="op">().</span><span class="fu">getRealPath</span><span class="op">(</span><span class="st">&quot;/&quot;</span><span class="op">);</span></span><span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="co">// 需要自行指定保存路径</span></span><span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> saveName<span class="op">=</span> fileName<span class="op">+</span><span class="ch">&#39;/&#39;</span><span class="op">+</span> realPath<span class="op">;</span></span><span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>part<span class="op">.</span><span class="fu">write</span><span class="op">(</span>saveName<span class="op">);</span></span></code></pre></div><h3 id="文件下载">2.7.2. 文件下载</h3><h4 id="超链接下载">2.7.2.1. 超链接下载</h4><ol type="1"><li>没有download属性<ol type="1"><li>浏览器识别文件，跳转显示，否则下载</li></ol></li><li>有download属性<ol type="1"><li>指定属性值，为下载名</li></ol></li></ol><div class="sourceCode" id="cb20"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;download/text.png&quot;</span><span class="kw">&gt;</span> 图片文件<span class="kw">&lt;/a&gt;</span></span><span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;download/text.png&quot;</span><span class="ot"> download</span><span class="kw">&gt;</span>图片文件<span class="kw">&lt;/a&gt;</span></span></code></pre></div><h4 id="后端下载">2.7.2.2. 后端下载</h4><ol type="1"><li><p>设置request和response的编码类型</p><div class="sourceCode" id="cb21"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>request<span class="op">.</span><span class="fu">setCharacterEncoding</span><span class="op">(</span><span class="st">&quot;UTF-8&quot;</span><span class="op">);</span></span><span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>response<span class="op">.</span><span class="fu">setContentType</span><span class="op">(</span><span class="st">&quot;text/html; charset = UTF-8&quot;</span><span class="op">);</span></span></code></pre></div></li><li><p>获取文件名称</p></li></ol><div class="sourceCode" id="cb22"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> fileName <span class="op">=</span> request<span class="op">.</span><span class="fu">getParameter</span><span class="op">(</span><span class="st">&quot;name&quot;</span><span class="op">)</span></span></code></pre></div><ol start="3" type="1"><li><p>判断文件名称是否为空</p><div class="sourceCode" id="cb23"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 文件名= null 或者全是空格</span></span><span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span><span class="op">(</span>fileName <span class="op">==</span> <span class="kw">null</span> <span class="op">||</span> <span class="st">&quot;&quot;</span><span class="op">.</span><span class="fu">equals</span><span class="op">(</span>fileName<span class="op">.</span><span class="fu">trim</span><span class="op">()))&#123;</span></span><span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>    response<span class="op">.</span><span class="fu">getWritter</span><span class="op">().</span><span class="fu">write</span><span class="op">(</span><span class="st">&quot;输出提示信息&quot;</span><span class="op">);</span></span><span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>    response<span class="op">.</span><span class="fu">getWritter</span><span class="op">().</span><span class="fu">close</span><span class="op">();</span><span class="co">// 关闭信息</span></span><span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div></li><li><p>将路径转换为file 对象</p><div class="sourceCode" id="cb24"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> path <span class="op">=</span> request<span class="op">.</span><span class="fu">getServletContext</span><span class="op">().</span><span class="fu">getRealPath</span><span class="op">(</span><span class="st">&quot;/download/&quot;</span><span class="op">);</span></span><span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="bu">File</span> file <span class="op">=</span> <span class="kw">new</span> <span class="bu">File</span><span class="op">(</span>path<span class="op">+</span> fileName<span class="op">);</span></span><span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="co">// 检查文件存在//是否为文件夹</span></span><span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span><span class="op">(</span>file<span class="op">.</span><span class="fu">exist</span><span class="op">()&amp;&amp;</span> file<span class="op">.</span><span class="fu">isFile</span><span class="op">())&#123;</span></span><span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div></li><li><p>输出</p><ol type="1"><li><p>设置响应类型， 浏览器无法解析的MINE类型 “application/x-msdoanload”, “application/octet-stream”</p><ol type="1"><li>response.setContentType(“application/x-msdoanload”)</li></ol></li><li><p>设置响应头，下载文件筐和文件名</p><ol type="1"><li>response.setHeader(“Content_Dispostion”, ”attachment;filename="+ fileName);</li></ol></li><li><p>输出流和输入流</p><div class="sourceCode" id="cb25"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="bu">InputStream</span> in <span class="op">=</span>  <span class="kw">new</span> <span class="fu">FileInputSream</span><span class="op">(</span>file<span class="op">);</span></span><span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>ServletOutputSream out <span class="op">=</span> response<span class="op">.</span><span class="fu">getOutputStream</span><span class="op">();</span></span><span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="dt">byte</span><span class="op">[]</span> bytes <span class="op">=</span> <span class="kw">new</span> <span class="dt">byte</span><span class="op">[</span><span class="dv">1024</span><span class="op">];</span></span><span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> len <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>len <span class="op">=</span> in<span class="op">.</span><span class="fu">read</span><span class="op">(</span><span class="dt">byte</span><span class="op">))!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)&#123;</span></span><span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>    out<span class="op">.</span><span class="fu">write</span><span class="op">(</span>bytes<span class="op">,</span><span class="dv">0</span> <span class="op">,</span> len<span class="op">);</span></span><span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a><span class="co">// 关闭资源</span></span><span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a>out<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span><span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a>in<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div></li><li><p>简便实现</p><div class="sourceCode" id="cb26"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a>response<span class="op">.</span><span class="fu">setContentType</span><span class="op">(</span><span class="st">&quot;application/octet-stream&quot;</span><span class="op">);</span> <span class="co">// 设置为通用的二进制流类型</span></span><span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>response<span class="op">.</span><span class="fu">setHeader</span><span class="op">(</span><span class="st">&quot;Content-Disposition&quot;</span><span class="op">,</span> <span class="st">&quot;attachment; filename=</span><span class="sc">\&quot;</span><span class="st">&quot;</span> <span class="op">+</span> fileName <span class="op">+</span> <span class="st">&quot;</span><span class="sc">\&quot;</span><span class="st">&quot;</span><span class="op">);</span> <span class="co">// 提示浏览器下载文件</span></span><span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="co">// 使用 try-with-resources 确保流被正确关闭</span></span><span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="cf">try</span> <span class="op">(</span><span class="bu">InputStream</span> in <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span>file<span class="op">);</span></span><span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>    ServletOutputStream out <span class="op">=</span> response<span class="op">.</span><span class="fu">getOutputStream</span><span class="op">())</span> <span class="op">&#123;</span></span><span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 使用 transferTo 方法进行拷贝 (Java 9+)</span></span><span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a>    in<span class="op">.</span><span class="fu">transferTo</span><span class="op">(</span>out<span class="op">);</span></span><span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 注意：在 try-with-resources 块结束时，in 和 out 会自动关闭</span></span><span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span> <span class="cf">catch</span> <span class="op">(</span><span class="bu">IOException</span> e<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 处理可能的 IO 异常</span></span><span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a>    e<span class="op">.</span><span class="fu">printStackTrace</span><span class="op">();</span> <span class="co">// 在实际应用中应该记录日志或返回更友好的错误信息</span></span><span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>    response<span class="op">.</span><span class="fu">sendError</span><span class="op">(</span>HttpServletResponse<span class="op">.</span><span class="fu">SC_INTERNAL_SERVER_ERROR</span><span class="op">,</span> <span class="st">&quot;文件读取或传输失败&quot;</span><span class="op">);</span></span><span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> servlet </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/05/24/%E6%9D%82%E9%A1%B9/done_url/"/>
      <url>/2025/05/24/%E6%9D%82%E9%A1%B9/done_url/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="fc798b15a0119aca5906a2eec04ef863cd8fe4933da5c841c74918eb8b6520a4">4fbb2435fd3b6574fd4f7bd145822884a098a0719a519100aebfe4c2fde4f5a0b742ef9261977b6e3a9b4c3e50829a47cc67386c45a0c7e7e3c01126948a03d934abc36be863f6b68bbe3cf1fff8c1a2b09cee484bf0bd10e8f98fc8039ff2ca77a1f763da9095e7fc22a0ec3d916c0f4d1c7f6d0008203643e153d8d9d88348d6448ef29275f34b9c80ee90dd12b8fc8aac9bd14fe3eaa52c57e5301b9b29a7204604661e28906aadfc0e0a83dbc3498d24a2ab9a9563ff0a75681c08a9971c03b328b67c94be664b595140eedc4e7a33b176c98a9b8c0d10b9745824ab21ef89c2d5cb77ace3384b45d3bf818ce27ecda6dd080366fc545105e12d3b53ded4e5064001b2509a3ea89073f0fed07b1b06d1d1d95e6daf1ebc687e73a28676f74d5e13cdceffc852fc6648b9cb5da4c67010edac0083689146d57f0502053683b97206a5d9aa90ad18b2ed54057885b57e1dd9dc42d8cb8826a74d6815e3978f5ccf516421146dbdd57ab1e0c030f67a4f2e1938eb7e49f15887e4db523e65c9426543c05b486faf66efba1d5726f46b9c17c025a5c8e7a2f40ab02ef165243537ee48aec821480be64389d3d5772f43d8b15d99063d151a1161cefcef19feb3688fb85655b38b6349b426771638b2469ed9a856f9d2c56a16b69bac886f194b3440b922f6803d01278bfbaed2be0f61d75a0a9f1a89d310a358f7d01924116008dcda04c4a7fc481873452c95b546a993f1486e628ba4bb2f674bb3097ba446f8e2168c2312875144fcf05e24d716b6a6d3d164a4f45d18e71a01732089e575b51738572bb0487363fc846d6c7f79596f46c600d544cfab71d291ff67d1270599732424b81dfd04f34db42375cef8826359d0e8c7cdb33883ce1f31e3e3dce7544ec67cabdb5eaa0fadd9ecab6b9880ae3e70a38fe2ae8271ec6af364a1487fdf8ab51e8be1a8bc688a125d96f951a8a2a82b8032590d4ccd0365c7e916169606a9d7655ee10d43c0517fd5b3d19e09f6b1192ec7070358d941f7b61da90b2551c017777effb79811ea2dd3212022483d46707ec17f55b9c8183f08931d1b07ec8cd9db83d5717f2ea2ed8ae93d0207</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.3. 线性回归的简洁实现 — 动手学深度学习 2.0.0 documentation</title>
      <link href="/2025/05/24/deeplearn/250224~3.3.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250224~3.3.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="bec0c3d8ff7ce463ca0eb7d8c1281e299c9858a792c0394ba311066daf5627dc">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a022b76f6020d300d02ff64b331b68ed4f3fb71a12a1b18c82393c4331ef67e083c16eb0579ffcd934c57b21dd6aa3d0de6d2f1564cb15beecb1083b49c6cb57702a4792ab680efe1d05a746301c8b8688ed3ae6839259f9fb773c752497763e2b758fe2dbd7925134fbfe48213cf64bc42f969b6b94a558153d9fad7b46ef9afc4f6e52ba0212f3847d09c850659b74123e61952481d48ab20b3d1c2b11a9cc70861ea44d70101fda18083affb1fed0cddd19d7203895fb9eb263c4ec1c3a07813ec7fee3365ea7a583a4f85087384e013f3f9d94eee53a1e89852c18c5a95d15f73484d093ad2381a90824268bf05a8566cc40d6eacfd04b9a944cf47907b227cd9934c26c31bbc0e801dd9582073147ef66c3ac691c6ee5d0c98b7af7c6990dceceb66460a2b0928d0ce91692cf010d2cd38de127ec07f294a5b8881057bfb2c04cf4c49ebdfd978e62350ea57b38043e02df354033d616909b30145b096ad9494433351a331baabaff897d4823c4a857c17e1009668612608445d1c19ce54ad253b0864e3fd9cca306a93b007884a96cf8a67594259c25c946e573daeda26de816016ea44a11a77b010ce5a802b0b53cfdbb02eb74a4e0d666df3b8aafc935d3df139eb64e6bf57d49640116fb78641b06fcde34507a947696f0318befc3ee5c611ac06f3870bbe212101089f95812b319d738e1baf51f8328bfbb07e7578668a80b7cd30e3a3887269a13ceff2455ca540a9a14b5c6641524f76b5b9830cf2d43d2e8aad879746bd739e4f41618e228b6de6abdf3967fdc669f710bb5cb46c8f22b2cc5f50c1c419279753132c89ac</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.1. 线性回归 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250224~3.1.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250224~3.1.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="d6dfecb8b684de849a21217a866dc1f5196ad10decd533ab9a0af4e0dc5fa0c3">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a022ef0312d3cd74fe377f249957281d01acf24d16e0a1051c00518f1e1f1704cd317eea175f02adff3b352fc4af8c9e21fd73e6d728c80b5019f06cffee91fe6e2f44cc0b5a6f3972613562806447b4a6285120adf6b245f4003f22d68a913563bce8660a0643a2a46684c20f8aa67070cffbcad14f93b79f95b27dfbad35c7b8d78db29017c3039041480fd0516dda0274a9819a5df5e9dc5736f59e2469ed9365ffebf43631c313b9c7b1b88daf181d824299b92d3cb01840901874a2880f679a3a727416ef3117d5f970ebf08de6251d0dd179b543a85b5da61492290e2700c64eed46c8c5f6218c3bec8f2fdcbef7bf4e139c2f66cb1fbb58fe356fb11a01c99a53dc69842d53120638a4c6f550af11589e6071d90dd7d64095872cbc252acba65c852f5e3f03bef27a51d469eb5a7be22ba0448f2f8c1099fb789a4753f27ee62c4dfc517315d53f91a39056a6e98842d8445f8a75ed643e5bb0765666195c0afe7a8a67a1c05eec0732eddd5646260734c4cf356ff6aa44349f68f08b556e8c42077b62bb167593d29773c9cba409be06a8e2a4679aa3aeb3916e6076e2b89f81e5cd03a28da320fed79e414005df3fd23c26ba7e9f78bf0c67ddde129ce51c1e2e0d355ed2363e182b3abe4a904d21d3499ce7d1b9d41c49394bafe73b415262d2e95e911fc080df7fe784a318edd889b8e718ae57a778aec7eb2b72d9964b54a167402957c3e14bee40fd50bfef17d10c4414a7d55eac4f065f71df9a7b1c66c647457f847f2dd3041169a397354b8aa2b49064014932f3947cb09b45e37751d184eb006aad3c05caf9f8d05a1191ed91b4325d1c55606d14a98985e3c7ea1500a0d7013c6734ad23580412904efdbca6d754a2d7761d7aa1ff761250cb8b1cca0c6edf6613c20ba954248db967c673a4a7f9af9de897535733faf0940af81385d6a32237d46edc1366e34976aa26c4738464fc43fe3602ea7891c941e7683cb87f6c01757a3c1aff2d776286562cd265d83872fd18dbd37479147d5b4263baac052305368b3c0a13dc9e802f2c2c4314ae2c05b0be31d5442c444f5d399d31bf2e81143ec68571e477b707c948f5cd8cdb89e65f4b68bd0efea14502ec3e488e2f1f2cc378c5960c207ed66e8f41d420abf35280693ab6db763c86649dd58deaeda57b3150795423da5138c71b5323b4286aae08a44a588595ce74daf1b2ddb8ce8a3e818b4a219438ba2c4f9f1569ff26fab538aa93f708183786663f42a20a87bbf312c1d0a7dc93161a62b7669f9e06af8b632f2cfcc87b694dd64605f7571b9452f0f47aa6699149e61273aa6e3da7812e1fc4c1d390236027fbab9b67b5db4726d8dac375dfe31454954efe86eb878e2cd6befa43b6476a9deb298ae909eee055daddacc28fa35d19c4efc8f91b6f885b5120d1fd67c2db9de9302a31c508e67df76ed9d6d8d274e805e81f39fef06d17607322e9fb08bbf176636eda1bbf26af1392e3bc1ff186fac7dbc07449eda6c1fc90513cc43a17d3c23b7afa869ff4465a48d41181f47b3c7b970b6ff6ec81bb409bda82cf460644ba0c248bc79c399b2de5b14703396abe8af508226393afb138187cde35cc229fb524456a16c6c81472acc6d3d3c69c0e24c06249beb73cc6d892c664493a04e1c7d3cfad469cda7356bcbe820cb4fde4385ff3e2d08ab137d9a5fc10bffb285de941565c120433e1eda47c1b34ccc93c9e4b3ec738e363a9f3b194017ef07d98e8c9597b23c858259b691c4c7efae0d11cdfb5ac44eab084a96e20cb378dd610bae164d103f9295911c3459ee88dfbb36facb8df29929bfbe89326bc1495cf51f7f6aeb195c12341c04451cac739c52b14b1cbd0355c18515f074ce6102dc9c894ba994c4297138819b1ba920238e59b34d012b65423e504ca147f2a9f88f7c5f86d1049269426568c97aff490c01f12d946740ba9df055ffcb898cd5216832475a089be8fe1bae29c1357e08fb0af00be801bb3e85c341731c6aa671e23cca1ccb632004492a27cb26cb43bcd78c79e536599729d6dc0d52e17776a96c54fe6f2103752e6f87f9d5af6f155b22d5656ef39c057716935d40a0f1a3512efe7d21306f85db339a382b9248a2497c95912325bf990807756cab83befae51a4f5fa3ffa4493a1a83f3d0bcef6e59a6a6c0b726a32bc867adc85e9d7fbe49599fc55fb056235caef80eeb68bc82d19d9aae9e4aba7aa36aa8f586889a7d397d8e410ba81871df75fe7b11174c06cf9843d7a12dc2556eb908d1ac1734d1e7b9f5d022291627ea351c31b059ddbba280d4771148cfc1706c483614f928fba306f2d89f60cf4849860fb37caa41ba8ced03fe15dbc14a7fcb6fbb5254e817c552fa2c9a20ef12d1e5044d43bce82979d2a4743ff8355b6797faac22d7718d4fe0467fba1f6eb87015f31960e18d840484f979e13c19458a6cb92a0f5435c4a69b930892eebe1eeb43b5caa439a8141386dd11d24147cc80bc0e95744319b743ab8bf39771dfecc9a056e42fb4da4b748271932b96c451dcc0dbc066dfa136ff5d08217761d324533950eab5e9a2c70dc8cea5d9a674081a672d70f09c34823a8e344e029bff670d2e8bea3bb2764e49cffb748294f8100b2b9ccce57643ceb99b29ecaf17e61a927d39dc18f6eae18ad47208102f545299d109d92c2e35aaf95e80cf788a2ac18de78d5b7279b4288c264c03e55bfc2c6e5ede31cc7fd1735fd886212e9c085d077ed4973e4c8006d2a13039eadcc77d0f2113989bb228b47129742f2ca06b6b9f0b353d6dd05c2337cbc4e0b12b430692fc44e4c630ff2651819d95c0670f4e8571bc77dd407b3fd34d6a26fe9808ceac67afc3f7a6f1793f10ea5b3d81c87fd8228fae007b3547373886b3b064843dc6af653cb3c091c8562f28f240e0cc6a2d19a1c32cfeda70d55a4685940dc95a0a6d09d9a99881dee34f1f8f9f3838d9777ced9814cbfb072fa1f4b50e1532e2fc674990329d5047efb7a7c77fa715cfe752d4298c14619d442db4b4db1d4f500a45cdd2eb1180465a7c10ba062b0d3ed05cfc2cb93a8d595b3aa0c61a833c63512efb68b06c6f9e34c71243348dec837bee745ae05f8d028d1b47ce979b96eab6090ea42164ad8816efaf4d76a4c794b00b9fe2981b7d03ce65d2bdfd61e0d5c2d6ff215ad400240a5763614746</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3. 线性代数 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250223~2.3.%20%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250223~2.3.%20%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ad9791953d019b965dba375995f4e4daccae42d8507e39e38877fedb1e363d59">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a0206790f03fafe7d1627e502250b4b4bf7c8e4bc69c8007e92a9cbd4982df68ae7e538e43ef7ff05cfe9f2b854a1fad508fdc5a2c3e2691eb34dd378fe81d661e058670dc2a0443891ff5afafb1b9eba415f70203cd31e7be3ee548edd5c8f25f0cfad68683c280e4ba9e49b3921264b179da03c935738908c9363aebce165c5fb89df3c402f61a457ce67113453ffff2dab2a3d7915b5ec5966d94179d13e367ac4f687e6c4ef09557fd5d61ecb3a725ade186b66eb11c56cf54f0eec9bcbeef815d0c53d2bf2efed169a108d25495394f227a45536d0877834650fbb9cc1c90aa5127e59d3ec60d8056e7c4e2cd32ce342d6d2da4c67b6b68cf75f069a1183b8116cdfd819a0fabd4238d11d00d774fb0ab7682ecd706d90e69b50f497556528ace8667a39eb6c16802d809e6d42bfffc91fabb8a4996f7020f6e1e4def08d71ec055834737d0f5e9f253a1a6a50f79b8a39853b4edb3fcb4babbdcc356e492e77efe1212016c83602c6f9f564b7afc35a614656f02f49108cfee927642c348f329ba8ade1f5062b61801a5ddd0db9d8ba8fe09feb45c41557516afcc5fce2df67ffd6f050c9021f5547ff70cd3bea5b51acd26a4f3b560490246620bc0a8ca4a516c4161b32fb34d31f5034b0da6d8acc97351b21b1dd4686fe1501c6425088819dfb0638343e8a390acbd95521a0da4be997920fb32a593de5a08d497dbbcf6dd0285c3b5ad87b3e6dd2bb5f9d273b70bafbe883eddeb2ff0887d75b5bfe6d97eee976dfbf334d957d3e01f10085b83332afa166e5fb4e5e2a91c65c7a526a2c07a4e701e7298859149b04aa9bcb947039e27b84cd7e1bf42f8b6fcc33f5295656664b48700bf68f0956854763485f028ad9b51e58f83fe4c54921eb9ce043844995f390c9f52226d1b4960dbf32415ac834d6ebf50afc7325c74de27b2cb5703575453c54f6550a16bc1688adf09e8856aced45abb16c4d23f4bc9b9b511334a8848b6c30946ae8590726111e5e089f459356692db2ed40f557fceb16a3b62caeb03c0fa8c402f20cd1ad80acbef1e17e2bec810a4cad2d3e513afe49dd3c44753e1c99485b2c2d7c303b2bcfd32c8f0bd2f9049087c9b263e26eae74c658a816791a4a03de4929a6b8766e679ce0440c3b1e785d64bb9628901c46305f961d6ac893d303c1e955d65526afe479cc5743e7dcdb327c50c7265ab1cec8624e7da780992ac84771fb40766c8e78a0e656b92f3281cddaa429b143f23533c6daa1e2c9d13abc913cbe7596422dfe1a92dd7c2408be38257b7bb2c0084042793569a8ab56569445ba651f5c7b179b95c583817ba99a51e5e4bd9e4e770452af54225a2eb0ace91ce7e638d529f9e24a8d1021306be95c82ea0403b81ba0865b6012c79a9e93bf3db8082d0913be3c2403edf99363081fc477cb302a0d8d91aba05120948e27c1d9c2ed1adb4674cbb87ec71c3c8947a34f54c52995e2cfe2e2c623c397450d7dc986a89eb094c1691c3141bef9a6f01b5565cac17c18dd88c088964118c3fcd57fa5d189ba13ebb033b9e57cbb09692c8a95d861b36d0bcabca2a3ca15bddc23a4276639091e616b75ca52363ef73673bbf63a58d05e2a4ac5996da7a17f0020a9ec45a56c3e9d0b28d62391f9632e7bee4d551bd3abf5d185f6e43bfc3015aa95fbafcf293a96d77b8d4815eded91538fbdfac00e290ab96cfc71d5c6e2b31bd2444830fb90876f8fbdba31abbd552d76970361cc56baa6a8f93de41bda5935a57aab42d172d2d7def16ef55c6414f996b84f7dec0a5167650b5bc93b32978046806144046eb26551b0ea7de36ae84a715f59bfa190e1445e43980addb72ca93c1c20622aad237c5c3a2302f32d4d7b4e89fa96b5bed13ed30004c4eb45ce191aaf2345949694bb9097864ee3c45c153cf77d3d5d5a658ad47359289f521be592897defe7e54090beb26847b2cb544665acde181d9ccac597fe5eefc5f9dda2066892201d8a306e5b6c15bb25d63645b6b383ddc05f57b2e140233ec8a449b1971f217d9dd969f64e30976bf2c22ce3f040b51ccd045c3f86e46c64251b5d40c0c031f4f753a1394efb35e3bb056cce93fbb4fb5d4c6179a2c7271701ecc2621c6a87f6ad4e70ac55276a3f65bae1327d61e8ed988b6ba109ead97de10b9a7e7bdbffa5677c14fe1168c9aa03da1ee4371890ee4bf93e6ec3597adf6bdfb87049251ae1552ffd56682431b7939d004e56aab42ea96435e23c254b2286a3bd82686b196e13bca7f0f3a4094836493c63bcc8f7b998c6f73848a030aa27d64b033c2232150c8cb9695a4b1a9ad56a5915a2eeb9b636f9d2b155659c37e930cdb13219b35aad5904f0325b9568c404e457c8bb6c97f4e063fbafd23848daab52d78ed65f606b20ac50fde65177cf95a7d2ffbc6d937056f47afdc4e6f7446af8fdff9113b4461285ebe97d6c68da62da6983c0d313ddf6f527bf631347130a82ccd88638b9a46a20a2f3be9361b20a2eb02e70ab0fbf6b5f43f835976ada68a32a45ce870f67926b3e106e9f1f691858d8d6f12a6e0c4fb7659c7ebb7430a5e1ad094f32ee914ec0eb1b12dc83c81e4820ad466ad5a25b1ea29243f024de4044bd26d97404f5c154f86548a7408bfd10d905e14924d6f33de6fa3f3e2e2db97dfa56b08c4c3b66a75e3a4c575af8186bce37943a92c35357c994653f1fc779d9307a72207f93c6fcf4312797422008fe9d99a9ffd94dabc6b47af69766e4a1a940c50c6c9870787b43cf21375ec639610ff652bb5fec41e1106d51dc5fc315713b5340bd7bd15ccf2561e7bd283feaa4ca197b2b37f2c648d139ee8e9b4967a6e2777ea781f161d4f74cef4354a7198784b1298fb185b5ccdc122959ff66aaab60789d1415cdd3b2e40f240bc5b41693f0751f3b3c7ce1be8cdf5674e631214ef00427247781a2f2caea33cf54164770275af7936cb575c99ed199f9f59d400dacc4b2ca0a3431594b60ce8a574f83046bdde6ae5ca23d5eb8bc4481c5de5c9d9a399abc1bfcf610e60d953f21bf144df28cdcd8a909863bd29aa4391402bd39ad7b07d26afed5a63693ffc5c312ce9d65b3707039f41336333f1aa0e61decb97d139553c4e76b681ff241df810fcea92841f8426744710a7ae46691922e7f126c0b1b73cdd51c93a6c01c8adae3ee2ba63a8da45d49323638de58b5062d4d59bd6d98e52d169e701e8a678c4d1c79b74b83edf37f4f1de14fd16f536f8238e700eec45703ee084e4507144c831e5a6666edfc4954d5721b54e3a82def1dc788543306f427588f33b10a6a498651a015a5badcec11857345ceb230b05d7b7f2bd8cb2dfa99d54c2eb63410f16390ef1a65bf3e70e5122c40fab7583f81234ce87105170dce21e7edef7b834512b02d163a9a1fb059802491092f37cab5d773455cba6fe334ea0e17d5b32ce785a9d8e6e626891d80420e65ea7e1223290c14a732316b1350eb316329a5a1b24989d3c330cf7c9f020117e1d53679</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2. 数据预处理 — 动手学深度学习 2.0.0 documentation</title>
      <link href="/2025/05/24/deeplearn/250223~2.2.%20%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250223~2.2.%20%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="f1495d08d4b0186616339ea3a8f0656cd0fe720210a10ce4d4abb1aeb42f255f">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a02d5e8996b062b1f00a96d1997a67c075088639bd2bb1fe30b14fed9cd9fc894ba414efe8d2b3cdaf2ab4225ebe9ffbecadfd52ce25acc12ab0bbc0baceff2e14f936a10524e0a2aa020a2f18473f3c232b1719cea1c8cce519f0910625350411bcbae87bc9b25cbcc91f8416a3afa8968fa237547f459e069dc90e398dc0286399c15647a8ddab7e986985c56a6d41eeeee8d8dd709e79867d1daf7f91c841f80a37606eadd413cb3e01ddabc07bd2d6af598194feed87a693d28906c2365a7253b5fefc5184aa01aa814e304de500c7795f7c47ff3bf0018cfd2407395ca9d14488acc3ce3f7055d3484d5bfe64fc68eb0ab9b119eb98f1a88a0c4fb3c0181eea2619fa32f6eea279b27f1b6f7ab85fd2823c0b26edfe80cfeecaa13b20d89ed21e589919ba5b0f5eba5d8ce1bc5534fec2db624a32459241c40c82f22648503</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1. 数据操作 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250223~2.1.%20%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250223~2.1.%20%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="aedf325fe4b248d7a3bf8f0aa95da56dc2c9ab5269e8b3a347efddde7a314d18">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a029043bbe5f75b36d036ba29581003bde79f9012aec39b3689b1f1cc5a99b5dd433e7a637369fd6b091b17be8295485f0ac3d327a6ed6397ddd4deedb70ecfac3dc5d6d61a5d8354e03c375dfeaed3fc29a8b2e63557af73696516b06eb8bf62d932f0d70a86124b5e1aff51a08f46be6d849e813cb0ae4138653f0c919bf3a8d6cbbf008a33262286cac2a4cbc141afdbc4b5a7c7ee8b521b68085949aaf7cf77b22841597f27df2b25747c8a4d6a7300bd8644dfc5c5aad6f32fba526dd3308f00f55d70fcf06984f6d341ff5e75d3a4876d8ae6ef3dcbd4497473ed6fd8dafbd2a758e1db8cacabc31ad0d6691d751cf9e7c878676d51ce67437508f1922873bf17ffd5adc010ecd39b40e9bfddf470e2e5d6d466ca16c1bb2ce6de6bf857c64bb7d172ab55134c5a894c245020059bbdc8d82687f097049b53aeff29ece305e03ecbe0f2aea01321a3d396fdc67226e775c6aed527d0964528cfc8b9cdb8521ab2d0c8c8d7bfc21136b3bc76a14e6b68ac174374d590c6ad7c9fdad52c15b8bee81340787ae874d5601ba96341320d3358bc839c1d149367c7241f196e5e222214100821823bb28f2824921d6732362ecadfeaa332a6cb4cebc1d3bd1a698435a651e6b2339cd1fc206506048f83b759b69afef8320e9b7b919c69398d1857387fcbb68fda1ec709a7eb4c7a5ceeaccaf8b288c82b6be79f77bf6b3a800fccfe9948f0f1f86cf8ff82f347754e826bd8e70e6530daaacacf97da04579955b3cc3536eca9d6a5554acf638b1825892b20199ad082e544d4f603f4a301f318fb8eada0cd29c064dd14c607cd9fd7e0f1a655cd37ed72c2aac3f3a3e2a02c5f56c57fff51df99d3f823430015a6da02a9a0fb1ca09b97333731bbf2cf1b730a4507bde1f80929d291cddf087f5e6890f891008818a19db6274b4f73a8b0b76312d9c07bc866ca0bf3276821379f50d42fdd59d278a1d23187df1151003ce2940ec23ad312c77646967083f6c73da3bc5855f1173e9c1d432ce62171b62cb8a7ece20a8536aa2b534a57ec1af4af28d7af9c7b8508ebb1904970a639087348372545fe2ec8ae1871e929f07713afecc07edd71e25005a97f4056e0d246d546762bda929a43f5c7d8b8183e60baa266cf0228d3f994ca11f3e5fb16ed7c5662f0cf1e909dacfe0ab40ce2211e3c6e9aac8b842dee1ee975a0402a073e1dad34c3823b7bec4e8e536a65eb776d4c28c9699355067d25fc9659f79539bf85af03bb075a2dbe93179946984f9a3514a9e49fb752052021e31fb2256e8a298a9e415e34ee3177472fcdae237bba7c6f756455f4022bdc1838cae948bc9908679da0a9fd2f93ef4e7e42ad5bf0e51236f034931b93c7fd513c5aa8feb1844f50f6485431c9df2326b5179277b384cd418b6ec13aa0f86df703ec622e808375c5c7f06782a878a4928dbc42a73fd9c1d53cd66a4252875f4686effe4a5ce4a8ca79e406acb2d65a77fb39f4f39a0d9e71cfe92b67f4d1f496dab186b818f29629718314eb5aa2d6d4bd5eb203752114bdb875c084afcefab70055906b06e298eef8beb878ef935aacadf1705d29b56d4d79f3d1c740445e79cbd6f36fe40d9c91f64b23d25b10b45cb071f5e05e97f26cf37d57a7cd023a668229256218a9c7081859be7520f59fac04feb1878b4f2e28ca92b704ee29699b3bc24aed207ec5ecf8eb0958362075c02f695127fce0d10c055f35efdf1ca70d7604dcdf3ea64ac87fd336a2e2835412032b9f6c5187d269abdb39db93798664714479d2da255b9596dc127277fa99c781f3d6f5323aba388312108f4364cc53ac3a4343b44388b3d564bc65ad6dc6e5abf81b734efdbf4fd3d43bbe4f24b075009871d9db0627321caf81dec9c8a31257bc19b0febed2ba18db0cbebbfc2fe2d124e7885905bba63cf60c0a6f4bc09276375369b8552d867201dadfdcedddad279f8bf7ec26e0ac3ffee511e131eb6b057ec4960135c48c003ff5d0432a1dac2127dc551db826ba929778c8542b6e92b2e141670c3dcd816facaf38972f1793af675c67b739688a74147ce687bc966a55aabdd2d759b77a337314be45904aa5162edaa0c83d858c2a9158d4ab7bcc34e453769b7340d3914c53a32a425aad627a0cedcb528606911e9812b9de5d6a607b4d7bbbc66871760022bbccbe5129d71b66717f759dd73e6d82521f3812cd4c6d29cb09e90a9e680bda83897faf954459c8afe2a62b7c23c0f189aef07e3b26390f59b95d2f9fc90a18c715cd71041889cb2b673d6e6bb87d276e66bc744ed2cc353e14527f5822bdfc48fc069693ca2ba3a6357758878d9f09a05fa2ca7538b93ae14b644aed9d29c9b59d965eecb7b6cf55aca67b68bb2459e02b5b59734922b1bb96c83b01764dae5bb87bcf515fe1825fbafb9fbc32de4ee4d1e86df166a9e40d12864a289e2a14f5f12ade727e47772d5d73931e75c9e7e91f40f0ff9771ab4153932691048c8ad72067b29a86dad5799894399752b37d8ece5a10701f704a384841d5f271d46e2e60dfbae63f5dd90bcc0805e7a4c42e1f73046679ed69397a9b8fe2062681352406ef16d706811f526e8e48b01f9cbf82b8b7403386c1c6ec2a12818836664d89d5f0bc42d79346aaf8cd9ee70d9d2c1035e73ae9221156e3ab454ed0b81c3bee747b0c0e083de72888836938cb6a98c5d789eadabacd53521e83feccbf78f3559f082665a07549398eebb395a3f6e75a9654faaae5ee96879b3c991f5fbb3ac893ef8979328826631420c01a2df8d0c638b39ed05716133fbabdd91386ecf5541f5fe08764ee2be769cbf4b12d879d7158be32eccafb106a4a1dae1204825196a586a607b75277e525960b99cf63a4b83520488b9b31ed331dd446fb4baf37c4ffa45e8cd9ea10c7c2bf30b0d8a43213f833a64b37a2696fe63bdafe9c5086919f3d2a6333b9b2c26fb830edd0264a8acf0ea0860d9efeb8a88ff66967b80127850f5f057ee48dc09a24220ad4b3489d21ab263cbc6c2f54c68e76d1cb5df0a7216abe4552e88273c39cdc1c768451c855e8cd5c557127c41baa5ef745788f5c2b4791b3ff1984a058149699ef7a72844dbd1600402412fcc5191cd311c7db895d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于本地git通过ssh链接github时 time out问题的解决方法_github timeout-CSDN博客</title>
      <link href="/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250218~%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0git%E9%80%9A%E8%BF%87ssh%E9%93%BE%E6%8E%A5github%E6%97%B6%20time%20out%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95_github%20timeout-CSDN%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250218~%E5%85%B3%E4%BA%8E%E6%9C%AC%E5%9C%B0git%E9%80%9A%E8%BF%87ssh%E9%93%BE%E6%8E%A5github%E6%97%B6%20time%20out%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95_github%20timeout-CSDN%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="53eb5bafa1154f8fdcbc5db977804b05029b75e46ed8373fafa82bac70cfe9a1">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a02505659b02274a8cdc56b3150a93447066588af71e1bb7238c8efb38b4d6d293cc2a05890a062e0b1e29bb1015b4a89f84aed762cfea360bc7263a2f6034d1c4c6096d537b31a98de7929b1b57cb8164dc4de2d0fd697f44ada30a4d8fa96aa454108805c290de124980734fa2a100a6f6f2e7c6e9bb7d9b1cf9c3b3cdcb22ae193bbed8014d0c2b9e7af110c29760dd34dc2a4325972524e162d1e086eb2400fe9078d3535de0cee5bb5e449ce424399e53358cff6a7cf8dd3fb7ea3980fd48b59a23984f6a2bd31429501afcabe8bdb3801499071ff773d755ec9ce57f69fc5a00438eba161a120a64e3bc7b5bc5fa80ce12b82ddee705baea7f6d02761273d2fa6f4ae8b0846a0270a39ae40fe89aee130561a2e85e976fafcbb45c8dc03d4989d3990e625bf7c91804ee7a14c9203e88d16c1392e1cde21655845c08c539c47c628c78451d9fc681d7aa9fddf797161aeaf522c571fc0bf176b99b4e0a3319f71182cdda0691d99c2db5c13584ab54f184946ad56480cdaa760ebb8066a5037ff08e27792739cbfb144e12cdf7309d94a4bbed774efa3f0f7a2cb5b2a93e134e6e33906eb04fc7e3b747f5c66be36ce33ecc9bff483fe4cf3a670bbe9743bf6376b36d6fe706288b07eba8b78fda1610687d637a2b559e47c5ff46d819a413474aab20f6711f3c337ee9509c05b4ee357945f2a0d470ef0fa38e1e32511a7e5a2897c49fa5a7f7a4fe1b9db5ccd19414f28be39af08bd68394455c46cddaf2be2fc728b135cce867bbb0a00a32256ffda1c6c941839f4a67f671e683c3c071a423c89e10228996712626549bdea169f5bfcac1b15c39a7a95cd60ef4544e4e0c755c39b59dfd0f52e88de1c5f8fba68434ed965b985163e5664c35e91f4eda482070e7895a35e8886a6ceb6e3152ca26c64283ce9db300089b5da11e5b7049b9d7d278188a32ca72a1b9288e1c6acdc67dd7f973b18cd22f23e162849b1757352ec7408033fc0bdb5f3c64080b3742f5b08cc593326f4906af786a177271b124eadaf2ad489047a66e637dc56327b0388f98907e8334a8c3ac25510838ac5040f6d4f1f71638bb58eb86d4ab3780d0b6c030ae6a0076ac62bf60103a83b5ea613d021c7f8b2302469a8d77e16cdbaae36b22b049de49b7ffe89b31bd6cc4bbad79802d22e42b28f18ec61470b77a9d5c7ba8b75619fe7faee9285740f3857c9ea911bf1e55c1bb807f22615308b1d0034f0d4ce7b419b6d4da35ebae7496415b0b388a32d6c2d6063fe1db36203027c89d9a675374e40d081f46e6c624964a554766d876f29f08636997bb9b4ed0bb2643fa0699110ae4f73cc0263ebc9812610538faa1103afa8a536a6725b8590847d7a9125b1a6bd18ab95f2996c4ae6cb247e66eb7ee588e51608a697eea3713aa2923b3b53ce0b422f26c1ae065113c744cc7a0185c114e745e8307ec75e22211cd71b0802ffda91792cf35b6252e0edbee63fe40571e09501b02a597c969f85be17a176c995b7a9e3d2a9c35450e1fb71b8e52c3ccd8a968d3313bb3a15aa09cc4d594e31ded06484f55dd92062d45cd16a91e5a966470503244844a2a22f05ee9e561db296127dc2ee38acf3d024dbfec2f8d7f99af17085353e07fcaccb3aa262dc63aa528f6ce61c312e857f2eca6af87023204b24339f02e296903b978d026725490ee9a48821f348c317cab7bc55d9aa37ecf23bdad2f58dad816147d9186f88794a7807f83365a98fe942e7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL Ubuntu22.04默认用户（default用户）更改_wsl ubuntu切换用户-CSDN博客</title>
      <link href="/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250215~WSL%20Ubuntu22.04%E9%BB%98%E8%AE%A4%E7%94%A8%E6%88%B7%EF%BC%88default%E7%94%A8%E6%88%B7%EF%BC%89%E6%9B%B4%E6%94%B9_wsl%20ubuntu%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7-CSDN%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/05/24/%E6%9C%8D%E5%8A%A1%E5%99%A8/250215~WSL%20Ubuntu22.04%E9%BB%98%E8%AE%A4%E7%94%A8%E6%88%B7%EF%BC%88default%E7%94%A8%E6%88%B7%EF%BC%89%E6%9B%B4%E6%94%B9_wsl%20ubuntu%E5%88%87%E6%8D%A2%E7%94%A8%E6%88%B7-CSDN%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="45cb7ca81946f2532677dd738f1338e0cd28f45c17a6c254bc89e236ddaad96c">4fbb2435fd3b6574fd4f7bd145822884e6ae3e59628bafabb1f9da51f33172901c4b77e24bb12a2b37aee9695c886ef344f3317669af1474ed80c9c11a71fd0b39b6d1a102797aaf989c7d2b29408a02d7a6f773f3d02a22bf49335195ebc30c3ac34427f15a9d475c8cff442fc8b4c3df2f65e86469fd84a1150985d30f852e34122576522b675bc72206cc8048edebd9f300d1b6a4ccfbdab98dedc28f96f979cea56d4ec22183ac1a1b3e20d0b3e9d447093d2bb3b975b3cc11c85381835fa2429afc60dda5d05ed2313eb62939443b81be4dcde5d55d2db1a1e0bd87415bf912b51356291f70a8828afa3e9cc4729e2ccb82054982095683d1195b36c87b4978aa2aeb7f09eecf5f457f498da174bf3ce4619a3d9e08a016ac98290964bd0cb063704fadd9a7fea6ac438bee384c7038f9677a1f525cacce5bb797656a0a854b2ed2afd6dd40e4b99aedacce10df07ef71c25cd622b2e8728011051c9305b73e95adb9320e10e921c606367fcb4251ba00dd9c4b6b4e1d68e62116f004a818d5c7d67e99a62c941475489cb517dd2a3d8f5f956b53a596457ca4532e7410562fe97034e485fab5676feeb062a8a5bd70c079aa38ece40bb303c28fd9ac1bc89bf3e64f30d3950b42f368109e6891562864a0a25d9b01731963ab6085c9a59d51383fbd5e728d60e34d5e8eb66a38768cebc6bbb09258a3e2f047146dca5207efedbb1ce4a5c1df7724dd64e918ebfbbc438d966b21e1d6c05bc09b6801d89e778040a67b91d20896ad3e61e5d8bb821a3ca8cc075378de657e51ed150028b472fdc9ace8896d4e4be9004eea7653283fc05f821b373c476212d61c41f165c1e3b56f437c7d925a0d208d44b43b0bd4e5598bf117dfe37884442f1c61aa9defe8cdbdf5fddc91f4a1ffa75ba14670afa90017a899f3bcc0a9cce45ac6642a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. 前言 — 动手学深度学习 2.0.0-beta0 documentation</title>
      <link href="/2025/05/24/deeplearn/250211~1.%20%E5%89%8D%E8%A8%80%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/"/>
      <url>/2025/05/24/deeplearn/250211~1.%20%E5%89%8D%E8%A8%80%20%E2%80%94%20%E5%8A%A8%E6%89%8B%E5%AD%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%202.0.0-beta0%20documentation/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="1764317c9be6b63e8420c3d1e2dc5e137b2a259864fccae50bcc79947e979676"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> hypothesis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保研交流</title>
      <link href="/2025/03/15/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E4%BA%A4%E6%B5%81/"/>
      <url>/2025/03/15/%E4%BF%9D%E7%A0%94/%E4%BF%9D%E7%A0%94%E4%BA%A4%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="dbdfc1704488945d0e75b25ac8bed3edcc9b5e3f2ca5fdb1646895704fd525da">4fbb2435fd3b6574fd4f7bd14582288411baa04027e1f23082c91553eb7a7a054e894ef8353aae83c8ad2fff20268b42a3673a7c738fd2ea66b74a320d43b0d91679f2d1f5b7927d3c8f32b5000f17aba053c6ca50a9062765316f83142a76a1f9d380df21b83f6fe2069dc3641ac8a2e5d7bdcb2f9bc4b4b3eb9fb03ee46bb7be14508c73991a30edc10f9778e097ee8a6f0024a8d10b2b5c73fa6307c616174d866c60633d99005d19e27f63c55e4c86ea3e392b1d15880e7e12931c2d82ec32e04255837edb3578c89f75b41d687383eea63e58f6bd9f78549f7fd0749d1d16cfd852a6188c8d2d0bf0ab7a81b422d28a41547c0550100aa9c7a3345806026c6f2e40a5fddbe23bff0156cc69867190941226a8fc28aa44d5b2af8ddbf69d085977f16456814abe69c51b44f6b89d0c5df3d84bd9d07325d23e3e31f998756736e7953c8922c5ef19c235646a75c38ca82d3c18b565a371bb1c013268763096a308d5aa87b0f8cf5fb923d199883e93132fec4f957f1888b00eba2090285543d410c5d1cc8bcbb7c645111eca7d00ac0e567edb1feaaf4b51582bed9530dc5e3f74c7481321207b43468727ef15a9534909e9df51bcc3551d095690ea47ec8bfbc8f02e371a4382eb879414e00371d2cb2f595528d3f55f04e9edec7c26f9afeef4f1b75da54c8147f002161f2292bebbc695eff25958ee59ec3e3cf1112dae9c9d7540556a3266625dbe30cf635c7dbe09b487dfd220085fdcbd52f7b024bd418cb2e4c7b89c37921d45ce40e9d2aa296e62166300d05d4662acf4c8396b9c2b6ccbf96fa3a4983a64eca0c11de0ad01c7ccf58963f73b02f273efdae2e5eafc78499139ce83b9c08c183abd330a627ad073fb595631426f3bbb053d6eeee4207d0029ef8c0d3f6d2c71213cde0c75bcfb21ffa740de9c72050e631da2bd5c95f7f65d10ddcecb36839b5de63341b6720eb31e5d735895d880d88b862e2e161e787aeb0f589562694bc44f08f018c984b264902dedcf7c4e703a95d16a34a9adbc7f53bc5b80da113823887e465f4b838021bcfd335d41162aaa7bedccaa91a6dac786ba20aa3ede6dc6547030f7cfc0234cfb727f0d162d3ae2f4d8f54c7fe0374845287a24b3962f3422e2e02e9d3367e400f153bab5e6817411db260eb5e0cd16bad530b9186535085c3c0149e3d4a22a3c18570777428934f00345d257724fdb94d5a6c5e110f3fd07f88472e9ee2bb4aaadf248f680f7bd8db40c86e06dfd743cd22640dad3e4a76fbbd69b461ec62825b1d1027158fd56b2f829f78d96b8a0477fb9516c53ef6783e4340f86caa3f97538218c3c4b05a33a7216ca688365c5e0c0cf0b01258df7ba0b63762970746ffc5449fdeb432a0a049a74b23a9576e99c476c0eb84aafa749a36b5d3a706d68cd6c2c25b37be35f5667e28b908520c872508ae0f053ca290439abe4a972eb09c83a15bcbaceb87ef8e128f91997b4a6a63c3976de62bf40096d182029af2dcbb347c033a17cb024d3045e253422a30ae32e3108e3b1920470f74c6076bdcaf6b92f23736977cafde7d291cb39b3d95544943d8b72e0871a1426875ba2fa8b2ff114cbe50f145362b72d0d88970070279e3b847c294acc786031c1aa12e402a92eb4a6451d5c0c798468b6e270d5c885dc2b9312cf1b30be61c0e2ca3c43214d8bd70c1a5a63e4cdfb34203c831813a94213153be1197fd5226ca26afe2bcb0f51d61000f743a4bf1d08cf0415e19c43d45643d77287d9f25082c7b3d2982b2b60dca64c43c21ce6f9e6631e8103615312b48852b6512addc9dc7db39d4e810197c5c1f1a6d0b91197b192ca318118e272c7ae3703ebfcda66f9a7d7507366acc1bbb9741afdbb5bca5289b305a73d9a7e1f17513afb1ba15fbedad8ca2da5401ca5b06932abec2843526f1ac04e3f6fee83dbf90cf5207b7d36909a09d60a6455ac000cbd193eb30f0567ea6228dcf678bc85e708ea0bf73624ba204d14b7203d4cedba294c9e0fe51b543649fa028591d86058f164e78f42372226cc52ea8488ae089cfe0e2408f80e5c5b415da9c97d69ad1ca50487cb302d53e0392606fa64d5494ea88703ccf2df9289acc59219312fc181c3231482c7a5ea3f333589f0c878eebefcd4431abe4d4f417f0e6381faf76e1197623ea34fddb569f523bd5ba57aba05222432b281b528b8e420ec855c16ebe2ba712c1f8db35019c919d7db6c1e40b122f0d9fa863140f26420c60e1a7a229b20adc2c6f7c7ce05e8a1c90f3bb937fd2f24d7f1b0638c322d0903a6b4ed18547e18adcb99c75569b0b660807e0023a85452351d4ff372511b467e6725247d7df13bee0b967c585b7b048b16cb05b5de957a7a0bbd74f49d74fd39d3fa7b052aef6e9c899ea1ab120e65e486ebf66a0a988cfc61336779cfa0e7350ce8fe7569fe5dd50fe733fa659ce18182b3ce0f551d904696f3588b83ea8e99f81e1b69ac81a55e65a93f8b8acffbbcbc202da89069f1a6bc1fb7999163a01bf8ffd048fe8da552e4fc8d03bdd6bd1d436815c817c5e80ab8b6533fb74908a61d426aff5d71046543b43eccb668225343a52ff612551cf3fef0e54ab08de90c622747278dd25ed5a5626ac3fcb6ab5920af2aa4857490ba9814ae0db6a42dea2369ed9b2e51f82986d81add195377e96fd4758fab5b52af046fae24da471f9b81b2ad0b1ef3983812b6097a79b4f2e45645a30f10abec659f755d8fb6d49da4012293043a2a99be3efc6343acf5bbcac4aedd1f921a093d036be408102a927580a3eed03b23517b885cb52abe07c1eea483e73ce8e35988d7eae0c76021562e94bddf33d66682104e5b0d8ffcc44b82da60576a5f254bbc4434c793f1919e16d160409b233f5ca0c99ab97a651e66708b9a868a4a01bd91cb797e387b2b48191be0edf0db1365546c404e47c18b1a6e98ba6469f4fbbc7ce8d7aae4b38f71364bcc43b87bf6449cbe42f05325b362d5eb1e3e5e764eadc0133088fb414621cb5338518447fd9d249ae1a4948ec550da8ad23d23a6e146b41cb29ec15f937521d72b1082cf577f40ac31476b435e37df9b5d8e48bad86f2e2a8734c96008a1fd8c7364b2097bb454036b62f90e70f071c16f3be5a71d719b6947e04af49c7ff816c59d18056dbc158a6b706028297f3a4b7f7725c537538699f432e1030e70f09b3ce69ebd53c9b3557aa3eee6216d00a49f22c1b27ad4f6c1723565e8ffccc008ab22ff6a4708c4da6cf332d3bfa2f73b3d42e7286e5e4ad5c0217a5d005013ce1710c1b110d7466d4ddea377199500698cd608c5d86315b5a0e4962767410099684205444c3b7051896a375400bd4330594a1581808cebb40746390ed33cb0408a2eb888ed1d8db51cbbac44dbad05a85a39b82501a666da7842ba1e33223fe8e6abbe6c5cf14aaa91770beb3e5eb3854623a9538395593ec7a2f38f0572a823457cc09d3d08e765100ded6b26df5b50509926de21c0bfa7c91dbd618f118470db572cbe328614457662fc36e3d1104a3783564f98c66a1713d70859f8c44e7b0019fe755432802f27e7200e6bea18077f6699155aa305fe0f664f2da5732d6f086d92ee992667b1c2e989fd32137116b4a9033af0569e3078a59f17c1d7cd3dd9021b1ef7303e66ef8fc4339a6f8608e26e249b28d1820ddb74cd80606dae3a7c61bcdc8e8bfbcd7095abe94b8da91209ff37e6a59a970cc0be4b2c8bb59e5096a51edf391a174321fcd7a7d5b765043aa2b67030c5d69549ba1243f319d1f7be83c5ae202fbc052ffe9fa1fb5aa2ff5263c429ad0dad1aac05bac21be209c8f5a7cb64be27744621a5939ff4d6cfe1d3fe48add9eacb995d397a914d7134bed878f60242c6b86b3f0468c7dd766c74b7388f1b06006042460bf9f3710e940e73a58ff272b6b8bc710723359fbb4bc7b7d5dfd4cd5baf5a0ab305d7956b01161cd9818c5f0d416a0a820b6d85fda2b2ee3210183d3ffe6a7539f9c016d79725f6a61c2ef1e7fd55cacf11ba0367085513672a7bdb49d3ead609572b77d45eee5e6623812214b6b13de1fa2eb26ed9d34bb261467ecea32243b623aa080ef3dfc04f290b0a49c718c6d90387e61910f5913ec9ab4e5dfb5c09e4345472e379a577526c0c2d19d1a4ceb60dd850a33720b8924b1ea5449abc371744b032c15d0ac389bfcde5f65bf833a50f7095b25d22077da3274706c472dba868744e178901bd40212eca71a89c24f6151b805580ac822dd70ce9f5db7070c08fa1db1e46f6dc4390085a94783423d7f14dc0596d8bf2f8c8cbbc99b8a5ee564c215ea4a24852b1102d26e47abce0662158e562816a713425095c9e35fbdcb0b546ae0ea0be5e5ddb61b4e96155d7dc2b09318a315c03799d7ad0b568753837cdccb1b8ab66100ebdf09476a4a7ca6712aaf146742e8a1232726637a77e5253a692cbd3ac7c92980d692d4396b252cf7130390e92d59024ec9e94e33b4db0e42bd15ee6010753e53190a35c87a95b12c8cc565949367a7574e86683e04b3ba4362a97c8bc295742520e6b96ac4c2272a75f7938c9991f11c84e767b2921b0349c0a431b8c04eddf9807465b983b319bb472ea5d47b0ea6f4b7de39b128c14f05faecb4ef6e7ff290d1abe273d2ca76fce5f53070699d82e5d9ae6643e75d667b0c731dc4c58a3671955fd2dc811f646a9f79b14622d6c97c4c7cc72c4c693a8ccfd0702b13c0971ff74adc74fa15d286e00def6c7a5006745c25693f214ca8301ee2237fb2d938009c8ee5161dea690aded6f867bd10e23a3ed4171d8d8cfb1094b2a2b38bec71a965f2e06b985584c51f8e3fb0c63904e946c7ef74f6724b5e292728482a2409125d6b4c5100b03edd1c2448968887457ba084b9bb2fed6998b4762f344482ba6086b3cf30fba8dba8a5bc35afc18b4d760c4e12899ff0fc873a18df28a776ea8824b4ecbf3f6e62452503edd397a54ac6097ff629af7566146f59ee6708fd2844846dd91518a55164f0c92e92dd793bf6e092176d7b8f58a7d02df32bc0598558d4523283649159c9754d7c9049d763b5a9fe20f5a0eb6028f790e22e9bc3acc8a09aa2f140f3c800285938f0f6b7078faa42fb978be6822efe249f2014b4062b8ff123b9ca9c8540bf314cb889ced3aaa627aa7e29af13a06ea569245f5ff537f844c39a8bd1cd5f386c0a88b1d2fddb5188d0293b1fb4ddbfac2af2ee6f8543d883608496a3b469e005ebf914fa4244938270cf79804320714c222075d43de2f79441283c77a3c0c5283983711c8d93dae0a68a7571a0f509657b4e8c24b72766e4cc53619f47529b8c01d1f703d81d74c8110c572200798c089e7b2469889f97f941c057f0cbb2c46a28279ba3c2178c6f48cd91e4478dd7cb5a2069006e6cd74db9200f0d1b575fa38d87c3b96316cc9b2716dd7331ee87d6d6d9fdfe5f7c790fade91ffa438ce601565175f9170a20baca05f47905237d774a660b37934bb995683d26e3a4a2acd97d7d01c08e94804dd632f56cca25f2d06ebb24cd418abd1149439bdc88022d35c098a4f1297c9210f797fcc21ccbaf56add164b7fcc716bdbc374e2dceec2478ccfa9cec6148e6c212af4774a8062150a1106dc2c516d3d7c57db744f01b2136ca57f1959b15cb77eea491c2a7b9b3d9cebbc75ca3f34dcc1517a7216f53e5a1ae63c24e6c860445079b378d487be7bc80cd66c7a352807700262f79b3e02d80f816e391fe8ecf98716981f39b7b0537e7dd548b8c5d2c1b0c63084617d1f2c84ef87076330ee63f03375d11fc2a935a0c6c8d148c1f2238b65cdda6def8e2d5d712e70e7b88df2ce8e4efb4373b408722630932967ed78d2fc1c0282003549acc5663257466766e52f4f7b04dcf06cc99f23e8d8fad8c55a0d6213bf9f74a92350b587a45f87874571cccb9cf57c97a14001ed78e2e06d2cc84d2e2467519daa61e218a7ed33d602142aa3c7c87a6270fe997d9fed9eb3835a6ae5e427ce0f8e4b51bf3046ba2fe1767587f1d257646c1e1221ccd65cbd274ec2dca9ff9f29b851c3c4e18f120287bfb145a7dd5cb24e352f50a764b032894913e9cdf99084db1257252b59df755067202b79cfcf67bee06172820a97d7721245a911e0b2dc3156869b685ab540483fe844cc3cb4335cda4ccd57d467b10e445b9b702bdd170dac21632c5d2331be75175526fbb320bed13646156ea3433e262408b13eaa667045f380e15ed21cfd0299e3d16e3939fe5981e13b5825960a01fd13a7dd3a07729018a73d7635352df5d43c8fd8a8372fa1959452bde00856e6f4ef67c538c8ffd7b29e96c0482b1bedaacac6916775bcf38b3f3bb09b34ff2803e7f3696e0de9fc521acdb99c92f4e47c2873b97f7a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苍穹外卖</title>
      <link href="/2025/03/11/java/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
      <url>/2025/03/11/java/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="3c67d3604b72ed3bace04fd338cff46e8bee6bf7145881b7c42f112a2eb65866">4fbb2435fd3b6574fd4f7bd14582288411baa04027e1f23082c91553eb7a7a0549f732e881030ada605f2e5718115bc8d44acfef8c8b3240c72dfe4ad7968c08771607813a244a8be45f3cca6017633b0e0de3af259ce6d182047fcf70c008aecbf76c02e9defcd7000cdffb8411a09253a34ed89b4555f597253b2d21e2e2aec5c7a3aa4d4e339d70d9164a6c328d86d09258af36cd7607c01940af7f8ec43b476c71caa2197329d7500430013cfc94af1b3951bfd972167a735138d573e60cc387c59732802deacdac60ee6fbec16d170e82475f3341f1fbad920b4021d0c9b064c11d9624ea7640d0d6f5476ccb992d71dee87c8adf65c0e47345deed7886d316dd312daa1ba7b556d4de96afe502362929e8c4a2f19056aa6a17709d3980a6ea4af3a4dc3a85d1344a9ead02ffdab31303379be2d48246e3b380005ffe836809c71f3402a096dd3af3981326457ef38c20d1785948fe98e31f195458f38f2561aa01fe917da42bb603555e04330430ae073c7046bf663598c97f2670795b880a49e3157d33605678d177e7d6576828935c544e0ad68b71f000b86129146c3c1d0e1d3f6139bf19017c01c12c5780250dbb111dc7f7307002fd93ca136c71a21173d86f10f40711b4648b15d2ea1ba4dcd911b39189280ec48cd39465c4933ed51f38a0cdc2b4ce4e7c6b85a6a28bff2103bc42e748120e16e56c3ef028f6e9f8f1a37052af20379c9ad70cf1507285e8ec1143ec375f35f66096b8cc565fe58b0e8a55b073bd5326fa68439a173c543091f51f134bca535b85d05fed18ecea31212a80e084780efa1d49ee30ab7f3c031bfa2794f3ae2ccf5abd892a25d7c09f1303b751888471bf79cd122e0c548782b55aa2fba3b03a90d4f8edc0834bd178dfee2dacd30b99cd4a6e5cdfd4c107a9182f88658933c4d9347991100b1af43990f8bb40ca687c9cce27580f7bc1c9f7fbbb7c3a9889886eb8a8e1df2c66d8e853205672f9d6f3fe64420362b6b59337a886f1947cc032d3a761562fde361b758db94457292ba3d32bd26489d49586e7baa2a7025c287acc96bbbee1aec5a39cb36c8b2cf7dbfaf0018a8d985cae4000a00a09e6b7e32d71fdc772fd2a52a16aa6ba6809f0e807e9580830593bc05b3d3a028b4a0923a938477ae35811b11e9950f8321eab59429ffe455a571f03c4cf3b52786a460b71ec03ddd949043eebc570b52176bc19ddc15448894ba0840c5d01f4c46ef0676b0a8fede4fe0b92edd3e445e08a6551ee76c719e669b6b4468fa67f9315c7de0d8ef8e18f95ab2096671f732f3b12ef08d5e4875d1a4e7eccdc5e33f5927b64a6bc5d245f3d7d4aa94158e1e299437f3ad8c4c1e97e3c7dd51615f6ab50aae079bdb2555826835a9ab51f621d1f35a628394ed5591fefaca91f472a809e0622dfd75fd70488a6234ccbb9a934a8681bc228016db36fd6c68368239d83d49a9777e154a5df789be7d407302d5e93f1dfa72b66f6b33a00dcaabc9c6fc98a5547101ea9a97a9d2bf23a2118482607c1ade75a57286c2e5bc214c356ab3028ade57c4e6b4209c4b9d9153d139a77663f74fc8ab90e3803d2f8f1d4f45a573ee0552f1e2e06e2dc0abab35c95b95a13aa72506c2ded45018c34e98193f92a5f7225420b42b6c56fd36f665b16032cb58aa4955000975c3ab1c50b226b76ede1cef988045ecfa0c17c7199af8677b4ebc6e9000507d89bc3146b80e5c9d6887079a68f998f7eff95b4ea55e33a7673ce224cc56287bbc3a47910e0cbe12a17d11a2396f0a01ecd502063452c183d43382ef26179c448e11d243450b2836e9dc0a20890fea99820101b20696cd4243ca7f694b7b7e59ac4feec0e4ad1b1f38c076fe2c6e6eefd99475064cbf768c4d971fefe58249d61509096dbef5c29fc2c7c2ce44089a9d1ae3f7a32b98b28ca17e303b75fd77f2ec9df1c25b71174231f8bcdb2807f032f90e9fba4d8bef1854b84d0db2ebef5d4ef0091b727b8b5ee82bce6021c9e2b7b52536a462e3156b70d5c5f1297dcec78eefbd31dfe4d8c33e8eed3df5b5a91b106fbc4b0ebf72fcbdb20ffeedcde2c27f49a5b2e967a6944fb37ce125548a1d416337d2329b098f067d2e9b64bb3accaf52b8cb8c06e0201559b270dacc7ef6ac7e99461fe81f4cc6453ebbfcd69b1f7a2c2e4a8c2542d6ebac06244507730718c50369f5abe653ce25032d3edb811002ca8e97278745fc2de672c3dcf5d64e6f119cf90dc13cad777a6d7a7da1df19dde8cdd879058c26ced4d649765c17186b1ac53be188e3bcf497a8daae8c01d333cf99c9a3450d2eced82059f6d857477959774412fda638fe8f6eb6ec35753d8fa7b5dc44efad28900d8691dd44919afde78462077ff4221bb7ee542c14081ef8c932977096ab4ac15d8cf3ba7de412c6bd629696bdaa43983fa332f0a8a91c74b2d952694f7e5620cba64e1b4a204c8a8889e7599534699705990858c169e165101321f848442aa4933c2a69f5853f0aebc3903d52c7a28c3c74c1bfd5499d9057992e2f9f731eb04809a68d946665dfb6abf59d237d826d76a7560f11dda8576a14d1440842d3c2deae722290fd0ef44af47b3b40f23895b7f06e413b575eda9e24ab410d6d1d3db16bb1858fc559c89cf306fe1744e28ff11632fe736e375181ce2b10896574e1405b6e789db65407605cd4c7bf333aca53b6ed23d2a3dbc675c351721845b78ddac820990a9907938c6da90d146cbe649249c31ffec6c4416f10fe6f8d50093741ad31394d49aada6b5590ebac437d674033d571b76d7971309e74a108cef058af53c0672bd8f08cde93928efe0b4a5c0c800a0589f8ad8b098e8add5a2d979f6c20d08b6ff711d2b6cfd02004a56d74648e323aec4ef8cfb4147e64ae9e01a221c83d4bae653c76a60b87876194ee171dfda1e3a333347e6baf7d074261285269107893543e308a0cae2d4d792ca54c4af8b494bcd38d9ed7a3c04dc35333b0af95344ba6b87a4674b56ad270b16fe23737bd74ff64d5ae5ce52721f455cafbf11135f054a5029504b2b9c323239d0b94a204886faa11c307fecb1e80662d92125b288072665363c298558593198d81b8e7c4f12f7fe52f63d326a3cf614bf7f11c7b47e5db57936b4a1ba91f98c55f52d040ada990be6f585cde23d5af6e0206fdbc2f71b4d7f055a9a1ccb25df571129ed60711fcb49903fcdd7cd072e337a2606a2a85e6ace896b4d636b69aae426d22bc6f1610592444e33c07d16496ce5ef66ddc0e7793695dafcb687c670e87c2be13f46e331f077dda5b1f621e49f8cf03c5f96b58cac4128a7f6ad9e8b2bd456155566b24527527d415990cfefecc10cb850507635303cdcb503861f4c11faf3d7e77a74ef5531814a6a4c7d07a36e9185494dde3e257ed3d24f72407be84b244aa1b8b7a03ba5050c75e6851782324cd997bd05730d04cb7a97bb6f07d2953a8e70e3918725cfe7ef2b56afd17a7fc10a13e07d4247b6e036715eb0e60eba37f19db6ab3450082dd3faf153816bf1a261df0a53da327b54b99e38c7e988f365aa0edf19cd407ff7643e992401c590396d15491784c885655a3d9d2bce1f2f29b0d6d881d05080715e0e717257a4d0cecb8afcc4243daf0c1a9243123a3ec3b9eeb33d642b631cf0d1e4fd99df720c41cbc335f20681d2f1d6ee9d498832782633db8c333a41a38e1947ae4d86021588ad7c8055b6c40c8b04b394b0c8756e1d0d2b312f1cecf0f3c3812a8a0a8b4641ba1bc00ddc7c36e26114c92823f6bfa26960e2f76656de0634829185d03b582808f42ac8861e07377f87a3c2584ee7a5befa1b0e2d29af89740ca3b3bd610897d49634627a3ce66cf22f9e359a578c926311c8b903e0028e30fd3ae77c60280860dafa6a929ee9370d5285286f7a122f19ccea58fede293b47bca0bea0387607618c503bfb3d6146f8b4fe8857e386c94caf72a4a3ae7befb6870260d75f60a9190dba074af1042539bcaec5766de5e142877a86dcf6a966ad986c80f44c79bd513fe62932bc4dda2ad72052b92429d07478da43ff65ec99de80e668e26b89f7a702bcc7a653c95a57ee5538c82ee996aca8d150048f8cb759cd22fd4c1220c86bb153f1dee8391a746424f77d917a8b22ae5afd6e6c83d535cd1a2606804f112f619bf2234a2ed9e5d690495a09b132aed5f35fc390a6b3fba217c909b5a259fb674c2483fe13906af0138d4b1334c76017af28d3e885279c08a67831f998a222bc126965a1feefd03d84a17fb7fe5c8d7f63598e625e3a471770687d51ee13bbe6bd2f748f0c22b10c55092f44179fe1ed487e2452e2c201dc470e5888ca490f68c31934e755b4fffe30326e8e88bff25c18543f41b03f9b096d536981fede437f4f80a7f20de76bd2419f6118ca55a22b42e156502330998f6ccce5dd517a736ef95848c49a17bddb9c9bc748ef8a5db35d7b0e20756b2365663db4a93027793727ec09afc1cc17c079aadf342b08a4c66b6d76b6b12cb32ab3d90304dc0088b40edd5220f6780c9ef5131c5b9271a0ecd9914220839fa5871f085f658a2ed7e58b9c7e08f125687fc391f783475596da08d93bbdb042dfbd8b1059111c26dc0830c39e838f9be1f6829eea4c533c62d861e2b9cc717be8dfe9e2de6bb189624fcb86ff454142148f76f6eb302b5083430a39b7f4d9bb85c8cdace6a5fac87394fea0401365de8c72d8237a07bea5dad1849d37ab1f87bbb31156b5b9c5ddb25c46fa3d0701379cbd98f2725d005ab13bc62fccf47c215a67f801849543d44f5434760fd1aec424069edc874bd5d42d7391285c506ef32bb49c18810144691e2f627654400d9f50dfe2ba4a744633c534444c5f1d29a3aa8d6388f773231655da893cae2b232f50fa9163e63bfc69c7a51be8d29a81ce77a8ba0403f4edc7f60302ba6f7e0e6ad28babf8c42ce5d6badccbdfcf6e990a2ca7dfe9851bd1bc8ede8bec2d869d043e5ae89db27cb015a87ef2deaf5084831a0e8baa9270cc3d92a548c234588838349fcd12bcea9f1e9c8dccdb6593677939871c381cf61e68c7451a97aa370b98c63d69b4fc238ad6edb8e47c0bf774ad69a8a119be243854185c278619a116df2f74ab30afaa05fe3a982b795f97897f8fe7e7f64aa69d3915361363f3f72ae72e2825516e5b0412f0a47bb28b95d9a16b771a673d59debd00e4d1fa48a6a512e171188929695e8426b58aa5340e05ee9ea81d9c25b3e836bde992e5009b5ef8c9cce4bd07757356cac577a51c9e37781310df68a064b7d3a21ad6bd36cd14e3b9af7ad05e7d87d2bc527af0baa105b19253ee3d49f2bcdb5ea364a717c701d22465a305594bb3bab99e6d4dbb04762f3464eefe6bd1197e48ee64b6b30435625344b60a102784088255e366c90204c274a469df30dd271aec94400e48809ef69b97f69f7702238eeefad3ef3f9e5c6ee82f637446170d5c813caf7cc77127fb1aa90770996344c06235e8042d8c0aad6513b0dc37427a19ebdeff0ee8b3ad4a2b8e76380585ce0e984ab77f4d6a0945eb36ef0ce3efa30f0ce5177aa4175d8589c4dad41203e215f7bfaf5118917990ec9a56764054a080c42ee8227dbf3ad54480775654b47aa16d940f10c08e089c139f310a292c7fff2442f3eed699b821f89892f7b2f6f85d129f3a1f884ae528e8be5893a41bba6b576afdbb0128deb31c6733914a0ce15601c577ef89db8134f4530bc33a1b56e9fcf0558bd722b8b775e79fbc218bdca83be8eed98f53d2d0b41d7d71cf80243ce71a4d6417c2bc64511504b0859efcd4c1a1d2d869c33d7edda8f4fc480ca06438e4b4a7788134b6817e622045e18337d22668b6c48b782b3a7e4b20d9533a67b82d13f250bedb3872739ed2ea6e12f7f907cdbd0bb6d7ce3f0c505c514ced988865fcde4e6367b340fab9d55c3729341b33b10c767e0d066d5ed35f3df6291aa2cb15d25ce602680a77110c5311cf7e42455449eb73b6c4b3d3beca162de1ad54d1b070f20efe62b8131ffd42d0f19fe9924e688491aeafa747d3f941eb74e7e2087884ee3e459d6e9907503972c2bb3a7f62f44d85d24fefd9a5dbb290deee7c8e42f39ecd7f3146a754b26b88084236553f43409dfcf1fd61b41524b7b7b27cf978faf7bb3eb8a51e7b0424536e0e1eb1e76517a69ce5daa027747f6bb4555ff698de0f9a71ab9da67fc9d83574b4750a62ddb6bf2ecc49629fe18f6eeb0c611ff8f118c7db29256a30025773e62368e01c76f440f2ec3faf5c5bc3927dd66ef5b00017789905719ec2d81fbdfef0ad701aa22bfd10b4f7e7ccb27e2c7c5d80ea943f75b8e4c04a3a57184c4cc98d514e57abe7f7bb1bde1538bfd18e749d6386820d8d9715b234a1eef138a9a05dff4bc7e9d4942c08485d8625f54b1cedfd9625c8c1d7c0d0b4a84581a5e3aa915ec51734aa69dab2a6cc09a8b57725ac587d06545ddada70ec2742a78dfd6adc41c86203158e5cb32c123eda8008a14bb8ed937fc3f93dff639760f3fa7f7636eb90bf94d40a21fade1deb81fd5fd701d3bcfc8e2fe15b6e18a529d853f0ae8343b621166d24881113176107063970ad17d6192f83f2d94665e0001937785c77fa7f92ede6d68a95d97d9573bdb35f3482235cdc053309b52276bc01d7938faa381becde9ac51884780a28d245ac80b1dcd89bc8dd197204d36eec4cf77dcd14f5a9898314cead4850185ca9b2094abe9246dbf6a8ae740b3c87a9d74149d36f57971bcfc0686602d271860fe521357dd2ef654164b0fc214ac55aa418ca30218712d40949e243eb79296d0ad81b2fcc896295c0686bfbc1b6333b38049a5ffd6f26b689cc56a6ce64cba9c72e668c29b4178e5e9946834b0173def93d02e2cfeeb0717a4fb9732a3cc81b7b35a4456e94e8d8bec2286a2b71b9b41d2b58f016922d4f6dd337fd08daeed45c53aed16f85937ba16568e1a3a8b26c248cc0dfbf53baea43528bfdf9506f42a85d0a639a387a54227409cb685bf8194d46d4655307db7214496ca4a6fc6ffb778d1455570e5c1b5ea0f709f693849b60df9d439125c1d835a56ba53f110881c476cf967371977174c932ca8c308ce1f250b5e8c3ea5835ec9df0d3bfb3c4a5668334dcfeff82fee9c5b7e16a0c69a4010e87f7206e3cc466797b2185d790467c2665b4db641d80edc3a5e057f8681dfffdbe7a8d93945000e9f213fc851dc6f19a89930ff1858daac902f48a1c1220eddab4ac1b52b38a0376c69767996716974c618b9bc2b9132237130f389a64fe2951016f2f6f32eb25f02a606695a51c2f5e4fa4c4b52d8bffb58141b0dafd883120fdcb6bb20f9f6b69865fe29fc4018d60f0c3e15674572c387f9598dc372d7b81d0156206cc0bf1cfa2adfd8bcf109357c0ca255b773a48bce757e59e10f238946933ebeebc88a28e6413ffbcf0147dff5abd6ee10ad4e570b58876a85f57405a826c6de6dff9d103712ad843d2ced7a1dbef19bc42350ab4ee2f46c4a69d2ff4b82d7108903202e124d7e15e3af412c8c86e05bf37b8343aa12d1430ea39b3afdd47654adad4816762e4d73a5b587d2d55367556992de7017afbdf131c8a3e05e394763a7881fbeb8fb5eb6aaba499f824d6149015f071d1dfdf1cc5a0a6b822b18109de62c43c59ef3fed456c4334da8b06a24a8a85da5e469bdadc997d37b7a69ff9826951c2ad8ed898d5a93c6f0701010d40d4dd03a94cbc95e82e0528113b8e79b0f98463dab619444305ffa98dafc5941b1cc9c82a2c1f2e7479d2505f07d3e8ea5a9df6e40a197a44ea80d31dab83b05462baaf4b4434d8b1b0f5f453e105d15b86d29716f0ad58a0db88804656c244cec856d2db09c3545643ce08a17432a86cdb77fd79a71a8464e18c7b1d3a4821a717f9c232534c7d992dc01008f020de4d6e3ebccc31ffed9b89480b0f1c44f28d2136cc3d1341ddfff579d4e945bc829aa373b4d2d290ffcf87881cc178c531fbc1f17ab36f8bd933316ca543bd00a126b906b1099ef2ce418d6fd8e304b18b0623f4f31c7d97e7a637a9cf303733aae4e11bbf5dc7ade0d1610546574d5bf26db90286d78d4f5856b7fb26caa551507593482376fce139560f7d58189161d76a1d31c77f89b7ff32f34f93c14596711fe4e10ff7c02007570bb3e818ba327281d197b3b34816104f8747dc7891e5ca8bbace19e086a8497e134c65bbfdd119db7891edee1cc3888877a699163685e3d5fedd398c6bd9c609d0e314bb0c47a0c4295ae0df8ffae7d5a293aee1b7e4bdd3e0f792bacfa82aa8d9a69ab2cffa59ab6cd7f2dff77d3cae95f78196c8923701c22ceedc2044b293a53ef87ffebd40b087359e762482ad46e1ab10570bb66ced761d5ac40dc74afcfca3f38f7ea1e0cd16738c9798a3743185b7cebf88cdea6843e1e6f808749963e437b9a2686956395a1ffa709be3b7abe5a94d1303fd9791b6ca13e0bdf5ec5e7cdca00fa077a9c87fc7ed8003b3e70f14c6eb7b284e74d55996c49a5ba2c84cc6ecb05ce96671593530234679169ab0151c875ed38e67bc329f13795023c80ac031dfce58213e5abea1046a4339403f6369e053756b50379d95e557308e68b8f87306ecca7e3b5c8f3c4f791eb8695ec08b305363146aef5f4ab8431ed3a560f22b562348c617478db0b04c144c8a3dd84a2114c1f60da7b4dc4b1e32bf048643d2187d3c086276eb32c812fcad18ee93973ef9834a1a20098ba94cb5c44e41053f161812aa7804e0293d51ba2fad666152c70426f6668fcf14e9e136e089335a27eef7516efb27fe01d652bda7ec16f9e350bcad03aee581aad72fe44b0009ca397bd16570db8652ceafd8ccbbc9c7f9f83c7d19c0ad771ece83b63c46dc54ea774c5436dcf9bc3b5acd98e35b863b4653708b15502d87f11f721f3100f68780a5cf5ccbb9a8f820363d5fd586f816b9b5c20ee751d27a45a168dd87bded1304acff3d9fd75281d679ff6a1b5e678cf4b036bdf8450ad727cd929fccd789277dadaf4116cba5f8e38966213d39b251fc878b8ef66525abf2988d2e5fd47eb4c079d24275f345c458d532e9d2e99123a5e5e0404f43844a9d954283aa7d8fd50fb17abe59c671fac7a24a7d98e5e0a078954129fb19a06abeedde6c4d9b9f01802d57d6fd1033ac96dfff054f45c522303e0446a252ca530a7e78edca12d02e069b8957997d22c4281763e88f886d4c7baf89fd70d43fc13bb05aa81983bb1d1c1a017531487deac4d33299c4823cb2055dd02bcf8beb8914333ab10559e2d597d4dc63f612ff4e8bac464b09d4cbcc1ac770a4eb7a19cc185b5bc526d5a3a4fcacf07d621b34f80c4c1b9ba26b5a44432e4297e007f9c4405b7855d7b6a0cc4f155a1e09a8276cbf080d18ec53416e3803ef1c8823091dc7a07250ce21f2167822e1ec7413aa48519602716e1f17fea5e97db77fe309246f1767541d821887726fa89b0e32bd41ae2397d9f87ab1833d5c1ab7f2df55b538ad14adb3eff608424640707e8fb8d53131cc7444e40cc5bea8bccd39d940b54cb2441bfc73f9fc2f7ae3e323c676ad4bfe518d752dde2107583545c9513605cc6987f45686c2ea1d8bcd732cf536465fbf41ce06435f18ddd7df73901800ff06c48683a1492f5e4d8a468ee9be60582170b8bc98fba108345a4ba16b334e96f1d198847cbbbaa024c878825b0a01e24774c427a3afa0eea98bebe58d0fab965cb8af979dfa4cf2691cb2d54d095d325f74efccda639e8c4611d7d94ef93486ef3ec70364b1019ce49ae7b1271c5548ddcf8fbc705949e9a2c36753db7b6975ffcbb8e48ebf72133b8c50e63c76af008c33cf32c1dfa1f2cc1e12c11b3b20dfc939492eeb06aa370606d81ce9ef75a43042fdb708362620cea1172e1fcedf8376a99f3d25b56db9b83329b5531474d6d31086c56ef4f884a7ee42578945931f1b4112bc5ed81dc2363b464e23164f563758c2459f60cf6aa192b6748401aa2382b15cd5b33afbfb79a96527a3340a4942d4059b3c133cfbe3022e5bbcdcdef99205e63b4e3e5ee584e705e34b1c7ec6bc82e90f907dc40a6f454faa2fd9d4ea844710c019b15495d5f35f7074797cf39b550aa0ba65e2982c681e2de5a37f2021be4d5379d42eea3efdd4b52f3e8cb272dc6db3e87a92c9ce91d5b27d0454a27f5cd8e683887c85705a22df4192131fedb8cb60050240c297ce088795a74f8f768a12d1fccbcbec28843551a234e2e5ee4b3670f64e90e12df71035c97f33f078d0dba3366fcea55551675d98e95eef58a28818debf82b38ca93dbc5e425d6f54052dc4bf6c4f4dd51c8e35bb7314fbc89025e461af825b5b070a1ec2f2ad8e9d7971f5706e829faf494551b895c9af506165f19264faa0affc6787babe4d1bd0eaa95b5c8cffe7d523b25abea5cb87d4ea40aed4ff71ebf7772344d42a600ecb4d4e56b4eefbfe95a31785c49dddc4b6b57365ef4fd4032cd70fd71d311846d8117d4beaabfec5c88f7b0b157fe2cb8653225d8b8483d8900d1add0516cb5ae4ddedea75fe0c5661f1b0eb2f548507addf701a4bc7fe75999847a4357b4c1107996b52fee3305b19fc953d2cd75f65f93dfab79166ec3b155f9f766472c00eadf7dbf4ca4045c291710ec4856bae3baa07eb03ea7e3f1ad1d35fbe24807cf48bd371dbea5589a7923c69b1740826739ad1ab9585a80dcfcc4ae3cea3718746838504a12bf4b2533fce95bd44af7bd5a566b85c06e87dd2f5951e002697d24b81bf8004b51bbc5a3b87d81f155c62b3624dfd3276fb236dee39af9584f6fcb7799d44e05d4d7227159a72ec059e10e78d66644b6f0d0292695a91f60dde9b05ccd09385ec15fa7ac631277edeff8098ec0aad6c7b11146afb7412e8f103c79f4f6a65e266b66e0a04b1f8ec8836cb5e570f5cf49ef8c362b4f166f3457e0b4e97e16ca56c1889d6123fc37aa30ac746d347ecddb9ac737790dbdf029ef14e2e7dcaf136f0c231cf9829e40bd33633d4e03b467b207e2cd0ee305c7591a127b534952294853c1a884cc8c16005a71555d619549c6deb8dcadf6e518462569bd6cf7eb95da9cf96dbf7761c47247519210fef2a218af7a9790e62971276a251f0a167158a091fd83c5ed3ca77576a890a51d7886c016189effc30d84ca9ff2c06918a5fe6b142cba5e06893b03fca9a1b36e0a0750dd4d3d5f78594f33c8c1cfcdebc9cdfca38692c3dbadcd4fbe1e89b77a0c1ba91b58140287187484c04612b7b224cc6125e22c95a73832f8668f8cf8f7ed5be3c52634f74bbb51e9ca18af4d938be2ffd3fd2ebb0ea600fd73564e3a906ceaa1c9159b691c747a1e5d0a0722231077b48214bccd047f7f4928a221ab0778ed2b9a271b478b037d6143a61f1dbfc3e9ea1feffcc3dab009527c206a50fb3b99e31943bda5be9731d81fa5b8e9c10c8e1bf35f817508ee7e2a5d53981006e5ca7bda16be441ff1f092cde4981e1b940bc456c47e0bb2fe970b8a88e6374bfbb0065ff3458986e59a2b0e89967bc5954fb4e30e0de3777f8e8f29fae8d227d4ca302d5e5a7d4f1a7fdc30fadc941f613293a1c13a8b217590387e72a3e7344d844d367db32294bea391e8145ac1a11c7f6c3bb73fe0069fb2bdb6018e268d49d2d0d0263115edc0fe8021894575ad4c0842051bc7d08f1310313598473200fcb271b6bf4b9c43a4ce20f64693a3a7d9ba1e5d5bef0760aabc4871eb7c88ff9c5c27218acf3b201aba2e2bfe392cb356e170f173af7216b1d09abc52697818ceec39519f4f1689c52bebe4f96fc05fbd2f0cc61e375e636d1dd5ecc2e49eb3b916f35338db7b63209bf03398b880505c017ba84b7cd65728339a3f7c8bfc91dec4d47890a7ab16884169fdf71b1d2c2fe2f5a450f66f0d03f588134860850d7b6e10913c1ca3a779d985e8438f9bc6613c562c1b48125acd7a374d22795d42f8f8ccabc8fd98109b683d090408d2e00f3f05ac4a1521a77f926c91f8a3ecbcb4a1517e82fadd5ffbff7b550595781f243ee63fab3bce6b97b49655599ef09f683867df75d2a761a7d2fbbd23ea763ee1e6b0aa21112755c253d3abd18f745173222b8bd45eb3783f1d030db7df92ecb69bea4ab576bd18fd5487832ee93cf50ae1ad8ede633eb36e09740ae4e1bc2d3332fc3da9e7ddb018262d47e51ad73edd09ef96f7cd953d995770790d5641b5f3d6676a0a28b0f5dac23d903e83a0256d2780633e2e367a45003001c7ac60e82ba1422eb2a7cb88a37be36bffe7508afc894117f3b7050e3212e20f96c1b7761decce01436f3acff13be24ad1baef9596a8047e2251ef3499c130339312b8ae8da1e5cc669d11e5b72a93c4ef38ff5b9c844ce4d69fa01e3bf131917afc871e936030ae600ab3717bb49974a1ac4ae73846fe4a3c45b624c1a6d5bab82d10fe20656c22867f0748b6086f31c6dfc1a729327481420782a428e879e4c72d8f181241c42907726e5bcb2f0f814ce87b4f1bf73038bc7e91ed4f69fb93a5dffc551df71c1fa632a0fb6dac594cd44b341c4175d85e905e06260139458b05460be45785ad41b3fc36ef79ab2a1935603c64e387b13f7fa1dcb47fe98aafcdb921bb9a1ca6bb84d146633d0116a1d424223c7c75eb8c7303c9b04904e85519d020fbbc70a76a329fd7f646c057d90b0039a3831756b857ed5f99d5462470a33bccc9858aaa5f4e0681de7d931c143f026e98c4e9c1befd09567d67f246ef260d228c56e6b69636066cb7a65dfd0649ca53d91f23d1cba54bf3434040ae94197d62cacafadc3450130b65aade6ca445ade64bf184253829922a18424c2b0de1d8fa749ed105a7e88e8a6ad2a8a6559ff0156173af5d18c3a7c7629dcd8969828f7153908acd40cbf1828f8379a3f65421171ec2159f1558f022546af0fe4512ec1beeb45466cf93cc6b1ab3b8329b0294be9d3e100827efc1785b6e3481a04e9fa8c7af3b0ceaec6c5913092ea3256f8d15f2b64c7168e36eef6b8630ac30441fbb488bcfc26181650c9ff8d6f6891fb33f5a08df7cb5ce635d65d9d0e58e854ade858c3b63ad56ef72040eb30ece2e3eda1fc771fee894fd140c428fc7f3d1963756790e6d7f0d24c16af46a460e78642d89e93d7d3091da35891cac4a1bf3a3cfd2d210370c59d192115e9d29c718e52635e63969b69695161966589a23ee777827fc675b6728e4ffb2345f8a2f961feafc3392f1b5be6f4cb6d1fce435b251bed9b72c69673dbd693c041a3cbd1e8fc06fdcb25626cabab2ce7edb8c499de0347bdf068ac41cd83957b2b6b94d544aa47d7e8b08f047c53f21fc0fa468af0eb836d8f1595108f800fc2f6abdaf660a505734a417bd8777a2afccac856949fd3a23f140434939b4e0b300819e39de677faeaf7d242748cfa44acab11fbf98e4bf9531a6e9b8b9203b2b355d4041a197322cd749a0e8e83c0c50b15d3109abecb20a96a8c87efb5226f9ab7ba7069aaccd0c0f59312e74546457a1fadf82713316277ea5b32fe86ca2977a99af8e8440009065bcc6a42688116ab88a2ebe7ca8da13225bdeab370c1ca68eb985237b66c4337fed61730a611585f1aadccc916cecb270020a4aeecd192cbeed02721f4a0ffdec37d7f952e6266624bab94acdb6cc52a9368a47394505485ee1e872eb0de12c3eb834c59c5131add886ce57b45ba2d5eccabec2a057fee04361f63d8f4f310b05d2d769bb0ee6cdba011e4f6180142fe7fd09979e4a0ef4a97e36ef090b3f780d561db01fe2f859acc750c09ee42ca7250ece07f55945e417d2362ed6df425cb1dd2ef39ce636f25e7fb7922f3b99900dc1b923a0382da94a95a278862ca62a16319aefd2ce098c64483bb398cb1de6879d94593a05833a4610e40787c4551ff829e4eef2efb5a0ff39583cad6fe400597a14af939e591b244c80312040cdb95386e699b1edea1bc0026d9590de53a6582f6271439c8a3e3ceb66c975204b8793bda0208ff4996fcad67eb19e70ff61bde8b61ad18b4158ddd340bbac36266de574a798e289cca99bc14c1045f67c1b1f546c5fb0c55af02f1c0e4a15e817fa5c3ef8ccd0642627a5bb223ce1fa420efcbb5f3797b2fb72f0e55924a1cac759c9577698a67530b55f1a50409f1cff6ea20115fe881ce32d4fddfd9613792c7ea25cad3c5d464b79ecfad70b00565c4a9e063ec7e8c9895227646cfd9653050c83cf5b634252fde12ed4add47471103055c383024459f6992c88c42890cadac1a9d5688146dc32342b1f54eb715923878603fe6e54264e79b40672ac8d100bc6d11568713fd3fa90fbf8003d6b71589b44b59074889ee5d7f12f923b02b1c67b0634ae5bbb5c10d70b0ff636ab8ed4b5dcf2b5c80e04407866c931bca43da0ec4b40ebce17b19feb4b1344c5afd2ee432220e15e962af80199e90cfd39b70d0d8ff76750aa2b03fe207e9b5760802d9eab55578e4d5dc2762082f0e607bf290caca7b38e69173135f0128d8e378eafea7e455baa24be1bdf8fbc4439109dce967c5966978a2f7fabab7299894d6dcd244f3a9383f7a4062e751b22f981c9be0eeb297ee5ece6b5a69c2a3fa55cab3eb4fd185575f533ef0ee86c07b9858dacdd2644743c31408f413f792c0edee0ec89dc2d44cc2a0bd7e62bb53e974aec786fe21647caad2643ccff6b48eed2cc5610e467641a7b6de743484e5fe6b4849da16c2b52ac4f6e8e8d23aa6d32f1a01434faf2aad87cddf726c35331a6e691ed332765f5ab00a9f28998cb5315272a29c28a81ffa21ecb83736d09a8f4bc40aabcb5a926b1352adeecfe099fc48fb09be42e5d40dfc2430f0b9332da2a508ac075034589672b93a18c1f8023943b60a40281188eae52947cc18f4e26f5137784d85a5abef6e55817f0f825369cc4f3eccb3244be0a4f1a003451b3f9ccad20ef00af41b6737ab3204dde4537474fa3ef142c4e538abc205dab9c1b7e96e350c177399051eceef9de81a57f76eb311e0e3f6a2c5691c498666eba37a966ba9ff172e3b290727426de7a877f8e15044a4474ba21217b5ea61ecf195d2ac03c2582a39b05117787dadc600599c1674d6a73bb512baf92bc7cbcb5e6293a790ecd3b4f327faf5dff5fc6e25bbe421f696eec98f3f050b8bff53974cdb1ee1927f0f42ca0d6738ab644086bb03c5058ee24c71de64280f9157d1859219b06d2e49f22d74ba362642ccfa49854a1d97c62ecd178f43732d287e247b7ee2a57a4257b44ee9627d3689e1050afc8cd89d734b0b04542d259b6a4d5e67da8fbe953afab5cb179a32d143786a22b662531cd2da3f413203d90b753660278f5f47708053e0f25a47ce633f30e61010fd401554a2a5abbf4c62e686859fb8bd30cb28a35dae675df17f8a188c08ade66b7fa348141fbe3a042bcca325fc8a3649c58e57e3058436e0cc1de618fd7ea98e9d0530aa7f2bb3f90451697fadc7a4c3a3e52960e6becc166ce7b8f050a32171a61ba9320ef8c2238c0f2bc5d89452c3209721243e2e081f4362b87cfe303d9909abd2f4ecce747bbd55fde212bb6922f5e2f6483edc15090585bf312eb3dd738de809889b6d8c7e96eef7888fcbea695760f2f5f4f384f31dade0578a9af5a0e7a6299aa4a45ee8b9237dad51981967168f4038d529df4db70cb73e025f3333f9a5c3fa0b73d8f67069bf5b19a0bcd56601d01e907b0bff9cd155db6fadd34d9157d202d28eaded09c701e0be4d535d7f9aa73990fcec3f3f79ca407668f08cec537d699fc477a0a625ebdfd8aaf9da772b935129b52bb96a5807b3e3965f0c44e4c7092661c73de803c7ca948d1a93c818ea8dbe88fcc51236fc23598856e1ddced843c115baf001cabe8cffe3b55a3eab1a9bef17f9f2cb18a388744d88e01a65340ed86bb62a2cfa290f847e8b784fd4b5ace5e1798aadee2470c62694ff7060506d6461c9be8d67ed0d3cb501286587cfb2597ed79b520a3f6ef1bd7369cc4707fcda836d91104425abebc8ac00bf7067b9f63c4ceeffbbd68aa73771719d9ccd95739d9f781681a51c4a6778449cb11e58eef88ed22117e93bbffedf7c9180678e59d1d62759fe56e15796ce4de8e3502baffa239128620db6e3c61148158b339f19d33ff843ba2a9425ac31ab6492b7160be4114ffe95c044a61962128145860ed20989db96a30ae917baddcf768e772a57c3a044d04c913c73794bcfed83bae183b3225bce415672b5876966cdd35c130fac13cddd505ebf12589da01926a535de384abed2e30d9f0e6c3c8f23f7a460adde75b5165e0b3a4ce34655d0c97e06f8c454cefb5d3346201aef7343eb2c4129a1f9f158d1e9856975f3bbbeb547983ac132b9541a979b1934b0f019635f4266795f02a91a1b793dabb5235a030091e1d4755a6cf9992fe7a1bcb1627e3f737bba1c4b1cb4d11f1e1f592537c37deb2b6b1bb9175b1915093c6a3d0de21be703f03051e859727b54f2c0fa55ce45b5d151c76a887b7ad914d4418f74473f8d29c00387419a148e9d26384decd42b71e8ed2c1d1fc4895e1e625d25e6367c37002a95eb2bd60ed6b76f73927bb047d8c01e6b1c189d6e91549b0315266497d1ca33735821ddef5371d3568f9c96848a46d664a695cd3d79c6f528ac038ac711290ab58d963ef523b75a1634492da2acc6dcb122ea840b32573e8e2d24127a7eda650578ff9e49be15df040fcdc768eeffeac5d978e41b7e9221b52591f20c4af82a647400090c690f2b9d20fa43cc37f110d5f1af2a78b63cc6432788226b46e07cb3088649cd9fda53b168cb6f608e7a1b94f0db6dcf1b7c031711151b29e7df1a64be47f5f812cabd8ac98970dff6790da765fa1dc01c8865c9f2ee1c7422baecf7d9bcf9722167658416d5456f2fc38f2ec954e2646eb9c71f948206cd1c32c6377ad008a3a8d0d96de99433003fcdf240bc2cef56d3adcc248fc84797e9a5d0150954c12888b2678bfc00bd534870abf1b4994166a7dba1aaa52b390fe134df2d226104aa94be904ec3a4c025bfc0137f07ab0e581dbef0deee228e2c42cd33f169f9a328e5fece3be66a4a62ba5aa70b29c3ed0ec0113bed03d07c03dc00403aaa6b481b13ce1485fc9452f674bd4a659c5438a34b94b5302aa5aa9a40aa02bd6ca9f1b8a83ae03e82b9079f037abfe806f575ff6979802822461375ff8a70794c14c74b07f554eb3fcd66455cfb2209a337a793f18c0193bacdfc44a2185bc49a31c2c5f61d87f331c81062e2931be23d98de4cf23c63dd1be0838c28b70abd5f7f8142a3ccb5cd9a8b699aea99ea2885f98a4c7b1a0b00662b82ae1f319ded90ac6c784813803450c7644c99600390dc66ed09e277a6d45c23e7b4b8c193af927fd6a79a6afaddc4e8d17a656a1b6591d89fee685ac51bdec75f3be4eb6d1ec9033cfe341cb2da264eea3a2598a198c25ae68ad9153deee44a0bf5f5af5a8dd342f9954c8350a30cea80621daf65214ec550c70caff60211267a65f39cc09f8760aa71913a40605f8bd45672e4deb188e9d58c0a23a10a448240a55806afff89bbe2cd08083ff0de6f9282175b90207655a4e2228fa578500eb3a44e66716083641771b36223d2e0b7c36ebd1818e8b6c05e1bc9e8e0b84df3dfd637564cb51f729b4398bd9aebf8dd29a33c2027e49a251bda94e8290ada82b391ab1b68ca39663a2461bebcd9ac2389a4a86a1c56e4a20ab4399f0c16f0a810d3e0fdbb8d0c1724970a33c1c74f7412b622eb69106819c64536994d9580cc44ff4b90cdb1d284bc9f11d7ba50630579a6d51d1fbc03a8a7e9022c27ab85bf50ee557dcf52d15fb8a999e4751f06d663b27d66a7f0f5ca4a78ba7fff142a0e292be13511d4cea6873f8b6572d5e4f6fd6b49ba854842ecf105a7c1aad259ad6462fe52503373c07d3f6eb5e82bc8f31fddebea3b33fec488bd239480251b0286af14a398e6f33cf8ec76a3dc84c64228885a2e412b06c1bf7f2ede6e31667299647c8c0bbb005cef1a54805e88c3fb4f804de8ec660b1d0481ef1f5406adb91568ad08283f9d7224aa6b44701be54a392d1e6410c132b925f8cbeab0ba4bc641877b951d5d7adff03ccdb8e3c9cd3940f4de60b83b6ee1fc6e2467b65cf16e72247e1d22babe2526eca65e25bccdd2a090cb69230a136b342c34418787df5806179d8c7c9a221c9e211eee3ec0661c853bf5ea68e05b86d64c2f2bea898f9e880120b241aaf81a45a0aa45fbfaf801e7de55bbba601f32862a51debbd6012c0751120c5cac5ddc831dce7d79ecc9b4bf76067990555fb0f7e2444bfdf0796ebd96827de6afd8ec1c431c414176e5094de2fa715ebdc97546d21edd97320a23a290ac6aeab09e1e5a8e9b24af7d8fba0c63987ea3ace68b819b47ef546261e3c7a10597930f20c3fe76ff9e3d2aa6f0842f7f135bce448a7ed77307e8eab65d4f8b612cff94cabd0de7792197bf47f01aceb806a0a07f0be15ebfce296e85ccf677745a48dd2061268479b17dc01f27880cceaeaccb26d639143a80f991ae518c808f8e50c440d20e6430995a0b356998909fdc1095a1be6c868c40a92b127376058422b4122e472dde142d611cb963c06dffea3ac8039ca6f81ad7cf76966c1fa385233a7a8f2e3367bb633d81686089e941da2e9e5e582cd143a528b85b042645c57fb3f28e5007f92326c58d38e3168085f6c1df1ae904b233d74e327d6ee40f455fc3bd8aa501ee2f8cc02841d04f34fdbd0628081af49ea45648faef09bc488b69d74b1af430c4a2bce65d638e58a9b515f25db5286d40239f4e4be4071dfdaf3443a528c5f0b2a67af079b28a5d971131c0cc87da436c924b9ae98c306015d375e4403d64dfc75813428b0c0a2b0fb70d09e3099e6d6dcc7614be2bd03644f5cb89bdb8bd38e0de8acc435f88dda6f6c22db7c99263767fc6ed27f5ac70b1527b9ff86813a699d69ffd335035fe78c5a2c20648a3722350d05547ea3e0943d3df4bec73f525bb2085e78e3eed8a2eab6047f9a4bfd9b92fcf989cab675d4222f4eed3419c94ebea0ab9d16908ef6aae9f96c37a1b2529b4d5033a836fb739b5781706e2b20ccfe50db7aeef74e5e3bfd817b82907fa9a6387256410eda4ed0570a06ab362086fef6fd5a6d12912a65e5f5e43c6b694c0e8876e0a916beff61fe2b999ec517bc3d77bccdba502b77b9446ac368fe4fffaa1343e21d274c654035beaab074f22fec74b33b2b4a325169146f7cfa2430aa2b9b069a43351af23f40ca386f468dd408d178bc4e530f7eb72de90cae8a690ffe99e16110c5965c3fb1507b3afb95949a8e769a9661f671bae570379be1b77bd4770594bb7be54b8a4e5ab48eecfbfb959ed6ffc923cfe8a69412c188af29c529ec99541261c56b5f26038a9d2e2efe325b4463613b19dd39d3043f1639870d955113a0f1e999389cc2a96967c37ed3fdc432d706bf16221acdb9df094d55fa885e4e8be65ba517a3fe8ed70b83f02316c4b26dbd58604ff6d3dee808dd68fc022a74a7b665459d387854dbddb451c98a2eb8d7dd8a395042c78315bfd27eadba96613e64c616fb5040658a46d52f477c90cd67654800f265ccf88dd58e1966539363542666211c643ec24d428f4965c7989ea86ed7624dac583b69d036ce13589a6cee689caea2364af6d0577abf2af389f34b14409d0a6a35bdfd746e1f3d7921e0974a6765495ad729a483af07b0e81e1565ae46aacb45d0fb9c395d3484bda39f5411d2c9b9021d7030eb6c7899cfc730d843eb5f97b788e97393103c49fa55e97b473e8226a87a8a3fccbb52a8b83789ce4b98642d3afb2ddddd2ffa8d9139d2644b4290a4cdd94ffd197910e45faa3989f4d7fdce4f1d9298c6c337d905dedc647fbced9181ad9464a661ae11aa885503eff5907d129a69b6268a4bdc9dc38bdb410b4d6c0d8c25b2becd1a6cc7b458a3ac54628daa3fc36a46c6da6272c0a54e4ee87b3167f274eb452ea39c08b285c5fb40ebbc809d8c244c516340ed467692615af26d1903becef8787ab724958a6c91d5aaa6d7eba60c789d0333e42f47ab641bd295fc6c2cf22d6ae3c6be978a846dccba4790e769c41fe83fdd956970d53727d5b22a6d848fb581d07857d9c44d01fe5ec6929712a3b244486d09673715851c78d0f1954f6a3298b410731770810836ae3d682a2ca4d22b87c61ea2ed55d8853726a3be7e30895f3bd3473dddcd233ab04f1b197a33f5795179856ca15d9dd6931b4cccd7ed2591ee7bffd082d0402ef526c44788f8bf0b80455acf6ebe8553190ef3659d7ffee36ad301cf3a21b7581a04bb16c3e375073ac640fbb44a97b36997a41055a82f6d99c0e63b34736d7f8bd4422ab1182ec6c8c1f7c84bec4c31783a41d8eeb382427453e0dbc969cd023f92e15ecbc877b1305737dacf2fb47b569aef6102a5cb3097c805436fd7b7037dc7be6ee338ea6a0426960a7bb2a16676e36b368f0ddbc6483b41d3d4f48b814794cbba40c1137ed78895561be0b93da722801665518913d3cf142361378b7baf325534bf145e68319c88b0687878365d6c3f49729690517cf6064afab8fcba3d94673f0c90b96782910895dfb8e00f813bee2b8413d75b90fe5b598f5d57e91262733b58bad37a59e511081b7a5d78dee60123a3a099d05fff64cb33ebaa2db38cb4eb79e7044eb614f34281e63549c463b49d278080f240ee1e4df7ae3dd46e8945ec6574e3abf4abca30754010b690526ca2d4467b137567ce0bb2f709215505dc6205c00d437c4e479be7d405ca187754345c20e98f32c3b9f3daa35f8a80a3e93376c88b818996d682ecf92aa9099ec87780afb87c7c185ef5a41a4c00d908702dbca82b74aa9b72d1d17e0fdc61ddd92acd928eb92f8352f751c26cd51b4b698bbe3811bcdfcab56dbb1ced1d2bb7f1176f3fc7b64fb71219682f5b7d1b54e326447510f3bf30e98844110d43542e8c0d002925eced52287d988c6d7f0dd09dbc826bb0423fae8504fb7535d95d839d95f652c178add5fdba9864046828357c5c6ae434a6fd0cd363c9965e2465892db560f6bef10726b9bcdba4186ff5fa4b58ae6c925ddaa87ef4ce43c4de3d63cbf6f809a9da8d5a72a297fa59fac7f2df63dc4d72e5ee92f9be51f54a3c595f3924be15126132ee51fdb6b506234ae0d936f8b3a60a6ef49d88cf78092a4d8d67fa150fdd8718140f228671d0496ac9973119ece4239e02039127ec3377850d77ad520029f0b63bac1187d26f23662b9bd66ace5907f32729bf8fc50bbf7c1ff3472316bbbf7463cdc0514a95c4f846e5b71194ee7610a6f268674e8b1051023b03c907f57017cf6f71895dd67471b462c2fec5dfff49ef1866ed72b989fdfddc21dd433eb68ff6584097b9576fc60f9e25fe8eed1ff0ccd6998f790ffbc736a19d68c59f503b3d26fe3e4518124b611a515cbf67cae796d313588158efce8fbf44ac22d89344c914b813487681e9b6e972105725779e1cb9c0443640e520a410c1b9b72fbdc48c568a4eb1625617b2481922cfd8e26ced9d18ae9df0ce0a15a4653f9bc6ebf6bb086273e699770c4ac97897975c04ce4af8a81aa9efcfca7021724e1b4d896fbf2dd9d3449e117ece2000fa35f5f9a33afbfe70486aa8344eac19a2de825a5136dd358580f1700a521868490e18029f894c82afe5b1ac43c76ec0ef65bfe458ecf9337861e06c24429dc41a1f596ea7983e29cea3f363e197cc3d48770945842ddd5ad049ed43417877ff100df8bbc7c28548a0f9917cd330a6c25094c7f0f5fad39cd4a36f41bdfb293a20f5a2fd4e42c49c70d5ee9c67ac51720cb02e3b3fc4573ff3343a3e06e145567cda3dd266c590c63aa3d61928b67bc09dc7ce72ca207e2331dd0f059f6b09b4794139905439cda137acead87d60bded23d42f69cb1fdc7c876506817c9463716e2e54600d5dd7aa93785315b20500f652faad253e5d7f6ea5fb2fbc9d5f2851273f443af97eec42df6697acafd3d891a7b098ce5fdbb342ebe319110d5bfe3cd8cf948e3d89a3d2c4c8e62f43431533e2a0f014f62909465fa8cccb20a45d752123fbc06129858667d9e8ac6cbd99e9b60d2112a4e73683573bd8fba749b390fa00f21be806909dbd3bdfc1b41cdefd99c1036cdc2b5a690d00bb261f5b7ed4fb5855401b4f2867d9f60545ce70328f735e7fb69f83b180cf2e9d70ef0596f8c299f7d6ad51658f403fa552e69a435726b57d3981178fb30532f8e273cc0f324ac5192840d541440ede84f95aa74fe57629b4301f962c8db3f2056df3d1382a4ad7fd6f41bc5bc682b7915a5e396b779fbbc1ec31c8d2e6b2d9e540fe2efbb98d7e042b5fc6423c482d5b543882292ee2bf4c79a680c4988d7b375807d7189dbbd30b4797a74670b6a532668f41b02177182478661ff1729f0fd991ecd1fc5178b0c74f517665802c57bdb3ef473dd96136e0dfd2c6e076f0e23bb4060aa89d4dc7346dc67a05b844335c2d95528d3a1ec360cf7c9704650b59852de4074611cc38e60e5c22c7faa8342c20a704f649a533c7605d44e950d0f36b92fedc09189c17c3a377a39b9a9a1ba68b7022e1958103bcd92d9265455bcf876100a136562bff199046f2930a2e73eb12041dc762e350c79868c6efc46d593cf39e77b381b1ecbbbc834e25b160a9dd00c02751a7087a1b4047badc7c0f88ae09d0978579c2041b3d75433c2ec7923f9771d4fd3751c1ced6c34fcd5493c60277a563f7840c29063550bd7e6f03970e246ec28525f7a09f7224982e7c8c34c8195cff4e203734373f3392d946109973e636f001d4a64af22672fbec9c46079b563d30717c2e78b605b686d5a4066f43e03f5a00639b3be9c6d830b2868cf92f2c3ce806f6320e0725407739e6af6ce7e54a1556f1586b73207fba7d0d82d54c64ab50c2b999a73c94d365d0e8648d169a49fb26556130d7b9d3fd90e9c0e77d8866804879266a60a8ac783029e51b6763a6e9feff10ffa298912978808a8523840998ea9e1faf5fb8c00935ed09157b8f0dabc1f213f66661fe6ed7b5a6b98eb62b566845396d3bae8c386650987933a73c663c0995afe7a47e12939416795ed7f856b15bbb9cfda2687f03c71d7c6d0184468426cd64a813bb702ddaffb36775536f16ba64bcd6ff36cecfc4d4c635bf92a18cd4870ddc3121b41a12292e30641a9fc77ee71d0273d56ee5b7de80f96749b15c9b88d84527a9171d5ef1032292eef499b39c34066f0b1e493abbb920bf216e800f952bbbf0a9b9815f9e7ced66cd80bf649795c46f239173fbb599fc30fa31e6677819df81bee4a29a758b4866226bfe198dd5eb6ce29d4f72f966fa81ea4e4192d4f5b3c59e68016d1483655a8ed0061585daf0616772a420e0fe48d4fd3c770b7e723e475e1312031e02e38f90d444b1144198a4db5e9eef16020350654683ce8f971fe5545d24ea644ab051a06091d949151096b28d6a3a84bb6734062da6c6ad2bb7a3813905c600764a277bd95f653eb2d9222238d23466427666cb596c30cb69453a5cbd389feef4e535cd0e900fb02009a6be167ad366398fbc393504c743b1a5935d068ea8a406c27b5ebc561ce69386379dedc7aeedc0e63c3419e1b32cd5614f7426c845e1dc1e460d00eb9d89ab82a44babf536232b78e56b512aad80c69b6e28169eb81f0d73361ec776df1dacf3bbadcb60ef984ea0189def12fca6ab2d05df45b4453ecd0d60c0dbdac5f13a6fc1d010ad87074636c9e12ab28984da2db8a9ddbe572052de732936ee07b526041269986220c0ba522d4965dc69d0f8711de76c8860560eea7498adcf4a6f9e6d5844cab0b38468f16ace543a3cd1787ca5a089f3e2cefd4a7d663acd52c38d41c434f7e8e3aaa954ed348e0246dcb54285a9b7b8ae8bcbc089ed664c8c65790c28dc5d03447dad7f4c45e9a31d0706cb9cbeaa5c7ea53b56b9c82bd046776da20415ddc5d2b5b2f2eefe444af47bc5a62911176693823c3ecde26e38e183f06e68c511d5161f99618259756ad76c2d4e218ad5259f74457205dd7f5e1220f9a5f295c149b9dbd3b334716e3330d2b132a4292c8b835a75ee16c79684e5b3186eba6b0f0c72c36cb6edae76ffff3f4cebe752f937b89e9032c1827801a753934eb79a141eace1cd23f4dc4f106d08835b2f2c0b5f53977cb54f714290efef2706538c0f7265c03e25d5c8da3c2bed20c05c3e90716984585de9a1b39abedf49678a3f06636b31f5fc90043828e8f9c7a6275e8c695e06c3180fd4dc42fec794b58efa681a1b1d575827f9029eac094f026f8969d56c14416bcdee0ae220bfa357cd9d1fe9959110a3174aa76e30a0f858eaf07991539194f4c65c88e68b60a2162222c891b24354ab3af9baa2cb20c493958ef13267e83543cf2e8b0a046781c2c0f38927c36c61eaba24cdf7b481675d715741e2eef9046499274ae651bfd7a4bcecad5cd3dd8aa0664f8dd7310eca3c6bd1f7966a666c04803a4b4a0af6d0f0de07d475fcfe62deedd35aa08d6986cbde937d266b0b587e422f36d60f5cb49456ad5a9aed1c9353c81ec1f1d714d05d8f66e83ad7ec1d1d6f76452f0175e893bfc5ad5e49d68875be60545629c79a5f2d832c4955dcac845a62f4b8dc4cc444ccc6fa413ab65ae36665b1ab787e0fbaccc4cba2bb2d9aab4b5912a444c90b30e49a800259953e2b1e0ab6a3a2df97c371a0e353f4e4fe9a85817f76cc303fed4ce75af64998cd0d8ffc41569920be293549b4f09b3021ad1a6745a5d68c9a7197e5e120e1c5e2fa47a56274541db37f5acfad022b7062b43face82e6014646806474b9a29e49a734e3b8bb487c41f10e4c44961163c0ed048919a6ecfd4c6b86a0d9b3e1ce8c4ea4624ec9e806ffa40e494a1b45260e7ded3816e7e923fb99f64e1ea8fce3891c72fbaacbaab0d62289b4aa880d4d923b7a5bcccc761891de2601453013b8d89600e0421b28b327c0f3db041f0a27ae40ede8506ef2c434dabaff2ed748a59e8435edf9b99f9bdfe9df51d187e4698012323187638be82d5846ad0b982f3e1d8f1c228c6cb73f591559ccefa1405c63ef9e706b43262e7ab0af8dc5b253c5991265be80a2e1a6f0c0cde5d69431e670f8336e17fc509c1350219588f0cc17bd3957016b5dbb800112afec1db537df3cb8f191f52836ec4de70458a00248c82f7742eb5369e66c937b145d0e949498379cc3eff33296bb0347d9ae98949f06a175bd3bf8656e7aabdcaedf5be5976f775d9a9e47845ed3c16fe84094ef3705855e2a38ac6f1ca9adb1a00d775cbdb9f2747518609a1c415fc8750a085927e767a0fbe08794c40d49d4f0fec915f5b2e65892bd6ca2b369495558bcc0d96c87622bd3c945f8d454c5b31b6cc3ee9e49e76de465758df2e32aedcb78a80a9bd9ddd87e75634e74650a0cc77b689a509d4c29737e9d203895f5d30d06e061614495fdb62b502cab60a2228497d6da5337e83a1e7b4323a1dff8b38ee926b7661314c34202da4cd47c3c541d415f94b3c08c3cccb2cd6dd6c5519208489d4b5332e0944173c24e5c597d16b6478916933ca7c6ac8ff5b4b31a47406b6072760a72012ef30e419d19375c8e2bedf875cc0e2ef6df44941dd3ee66c3cfaa044b73781b7934397008e5b70d5a037d9d16921a21d1840d8585e482650699192f5c853ad58f95479191d46510b24c3f8968e6f4e45357bd21d09849e18bbbe551fcb737696d8af7ec4bf77f9927a7d08c586d8a194b0d6867bfad48ada0a7f550b4737df1e91509fe41e05dcc4c4aad0458a40cabe955784abd136c5886b7f5cb686b37fe556352c1fc759fdfc94ec17bb56d75920860737242842ab2ba34fabd661ebf25306f294ea9cf107272d50375d723a2c220038a933f0142c3813bcd1501deb9ac80ecc866f1ba342a26435d0c9b7939a3401618adf030f83cde9920a72f608fa0557cde133e6a8c3f7b4792965dc9fbef77331f3ba9fbe1656b4f9b43727cc3030bd633bdfeaf3a70f8fcb35547dbe42e776d2166e01bf686ae5b4b3fa40515db7edb58e1b14d11afaaecc75e32f1f3a8a07cda7b6fd0c8e55aee9b6e8a039e5b32bf8f6a511abc576847c63bbee8d2d8a13f476ffb63b28ef3112e0757c7117e246ace2d02b7212f70267a88d9acd4d586902cb4c8b2d6517e855c53b189848b4cd333b7da6028855177f4fa35297594d1f76fbc3a58d46488e0b9ba41e89773934f769b6360cea363b614c53ecd5f02534b9ca1e52fbf28d26659f4b7e4c3cbc734a24e8bb6fa452a9ffb4e41893f1abbcacd4e20ef1e2b128581f6c8a5e4cd6e1e0b9ab2413d835cf84aaa61c68aa51f3d6e5b8ce9e8b573a0a7f8def560f0570f16f6ed0aa790f7162a4c751007b1522b0e8a77953068bf7d24783b58e892c4546614ad5dfcc3a850c38f248e2b95b67160a347b13b7d785ae2505fcfbb6e4bf7b5fff5af0f2590a2a76ca7bfdf010f770729a2a553c8bf579952217089bf197342fe3e20bed4c292d747db4fb1ca85e7ce8b21720cc93352566877ef760ed88cdffca30abff6083d3ea4dc938cc2be12cf558e0d5544411ed58d7171dcb7f343db30be43aa3556618b172b3a937a5a3c64cd940f4cb150ac6e0401730a58bea48143254613ac1a1f0cb89786905f4fc6973d8e09eef8300a3ccddb470b867cc9cced98e8f5ef7a7ff61325519ebebc51b944f0a2d8e0551c42a396ceb06519ae13165e55c5d7015f1c0ab5c8b23fcfd4bcfa83768b0c3568209cd73d6708767794792511c6b73a2f9cf4577ea1bdb8604495521e03cec9050b13384f2d765bb5987d9c88100f2e0cd89429732e9d0294c392667554fe0332707fea0b5328ab52eef69b74c33ff22e7e89b7bcb9b99f146de596a6f8bb35d46f809d1f26fbfa5325795425d1bc721937959cc01fa42ca3db133e41f2b5e3d8f3f6212cadf816c63310b42be3b927d4de8566e357c3d5865294d9ec6bd11d08ee02bbd569f78e96500e52a5d4bf657f83f359fa790d2540b1085f89052eb3c659b4a6315b9d769d722cf9ff8a3beca3224123aa780e782ace2e2d7ebcf42b56f1770463d30fb71cb47bf074587db64c6c19f46a48d8355f5f02567204bb0cb9408caaf6b060b356a3a6f19228d3dc5a9c4ccbf480042b9fbf31e1a860202d5df5f627d3487ea6dc594c0237e9fcebcbc486d993db7c650c3694dec850921bcaa22a7e2b91a0577851a447f7d867e077279088f44d03d53cb718c93b1b6fa09b14c14172add7eac1f41ac535bb0e21bc76d718a5c3c7ec907815cc271741341dba6cb882d4292c19d0c5eacd6769ad5d588c69d531583b9ff5ca9cab4caab3fbd44415f29e16100193b183d60fec8abd42566bfa4ff9e438d37b6b56ac5d57cec6273107ad6025db6a4afe71cf34e3ead9c4b609a1ff6e1381983c07ced63f10f6f0cae0f96974d0b9cd2cf0ce0a659d4c5fd6d29ab30bea92889ddd72961b3f2b1ae639109c76ae92de6f275b20efd76b227c4e53c5a061bc5d6c9e95801920bae71bb2c088e2cf74a6fdce4c8734f5a9be689cdee3c30b6b8ff6afe96d86260fe6ab13dc648f23d8a7dbae5106fac941d11e9714a53e4257a521bde8a4926de70eb08dfb207875c206a49eb4afeb48700bb694b24cfc7eb729085c0bc0c3bd6e32759b7e93218420cb1524b1e2c0b7a0638827cc98ff3efb739c2fa6e3904281d573b6d21bfdfb355acb5131d836e64216fb1276a3f8048151a9be8456b35913f803b1f2fb9658ead46dbcd1d6e7653584ec3a4c0dfdc152eccce055f4f48f1470521dcb5bff58ddb66e7aecc003e40fded3c85d6fe6462de67933b6cb8010ba196139c005c2be183bac7a665b6cfcd3dd82b48afd4b8322fe29b1a16078629ae1af6074c8acc3bd5d2dfa514e3e7056081654244e7aeeb724556a0ebe52f0433876f6f90ddcbc4d4753a8d9acb271ccdb652924826f3c176fefc537632240c13f3659238d18093e7e608398e6c2a688811b4ea3ab4c64b72a3c0ddf3fdb9f5cf7885aacf5bbb0f12564dcfb44a19e6203a91d447256e9df413eed9920cf389fdba0de75b0a98316905fdf729e16bbea5b08efe01b38a42a89d269d2f3e11998e6657aa358955a352ea1dd946dbf9a78d50c45e1d0eea57e3a4170d9a89a2d43d6b24c13e900cb9840fb1118b4f803cf8df39df4c0adc476b5cf57a9ef290b3a49c20179da1feb7a3d203658907b4fe1a27abc57d965a24f9ab3902c49cac38bbcb04b09ba90c65b8d0b0d471eb7ad523e3f40001ae27ecb31634750e1ef356247cf52ae00f68678e362275690dd3e974a206d2d153f281d817f229cceef935f001265b10e812eb93d7ff3005ce0cdcd1ba1ddaa2bdebd66d64b2a7a78820a632e7b523656a44bf21f58eaaa78a40b260c0285b05917b4bd4643adf94433f67d8abf33cf928fce593fa3fa989360610fe365cea951716f2a0efac7f0459a57eadf964507fa66a91e6a5a8813e11eb890bce48da1eed650475ac4e41406089110ad0962e080df8aa2d32fa96365eb4a502f8fcff8cad12a11538a8c225809bf694bdc92301ad4916c6d4279e3d5ca8771d86af3b7243c5c9573dcf1fa797495dc2abf0691dd6134dbd629ec38dcdeee65e268568394b217fa7c6c5ec2786d09c8dfffefd2cb23a105c1373048b2e4be7cb3c93f3a963b466fda9daedd7dbbd533d3a5549b981359067c8c7910aaca4f3e4766f0a3c22dfe86f94d59990651ccc4220492d5ba9c4206f774b9077fc5612af0fc7bacce93e65e4caa9524d825212efa7d2e990542ecfd7a9119542f0fc43019fd0877074fbe8eb6349efcedb0c0b003a187354fdd74c08abd6aafcf4410d74b340f40db741f30d5e693c44138b80be1c9780248d7ee9ab9484f929bffbbd1c141f5582121117ee82ddaaa987e9678bb8b9d33e40f7884f254ff65e4acb9b5c6fbd3bfa4c989fe3526317861e78255fc25bc4547736a1b570acab89c2b33dbdb3755c3fb67288fd97e959aa111a7f68cda869017a53d693a9289b455203377ed728b912ccdd8751d13d2b66af235bb866730d9e85757c93bad63fa4532499969d64634885eade01048d94f100cabb89b35bb920c71e137c0b3a15a9a3a88e09402b532aa5cf2399d02dd4befd55818fb7bc10950893ea6378b597bd9cca4ea92cb138161b2be0c7b6ad8a708bf11103b31bcd49cd22a8aac86abce0a6bc57adf24d2feb8829c9094d5dc40a2b148e510aa9f25fd4aaeb3fdcb5d5c6f0c0889684b23a624e5bc0cb1c576a856300bbc6042ae34f472cac8d4e6d05635fb6a96a30851f8881677d64b96f89a762286242069d5e1e187bf47e081d34bddb22ad13fdcdec2fc66d077d77a017a4582dbaa9fc7c80f054641da1df37647ff0256728c16beda354175b96ccc35aecf46848f3469d9287e7426c4112260a7781e8e0895a946185fc821456c75a050e582b33927c221ef605a2de83f5d4abbc7c0b147f459b747c3e984823bee31b3559f35f56b9f430c6f0dd8803a56d7988f8059f30d1e9d94822d9a299b773a049837fa9831dc994122e97995962f01d753513b125dc82e4bf1420a96c17e9694ba3438d9bc07f46e7e8be91c8b64c631a0861832180693b0d0be8b6ab0bd6b83d43897a0c3bd8f2a294467a672984b1c25e9e08c473d1039c3084c93e856f74432fa7da90db0a0109c379890f8b761588de5186e2c2df831bd821ae4ab329ad89a6c2bde7241b1334dc2b0b81ea5fc437e12813acda6ff024d22b64eee91e7fcf8084abeddcb900472ab74ae39ad31562710c6fa6fb81ea53c6bfdda8b52878f7fed9762b2f5001ee97db8e566fb9176e64bc464c070d304694183d0cd8b640dbad644853337024a175fdc27e9a70055c0396fed6699884422917f893ee66f4a35ef57e4e03d5fe427d04bf5bddaf02590ef09eae6aa44f328387d646e2a43774b897fdd7cd5e8fa9be8a5dd05b926e9f060df027e615ffb206186fdc073688b032979c015a419876c0f5692d60efcacc07e93b0b992ba977ad7be1c5e7522ab4469f3a0f9bb65dc04221d0275bc4be34793576e44293fa47fc1f632cd90d10cf121c2eafeb3eb719d22fed9a681f25cd63e981eada508dbc87a42b969e73a7b5431aee5fb4e77867acc78150272d9a16da966d5223b5b321571af78c90338bd7aac70570b6684c751a17dce9d859665000850732333b8f35761f9afc1bca1201bde7081aa5d457100a7835a19e9c8e45b08b6a7586b147c6c4813b12c2eb4ea7648a01723a188fce60e4bd77e85c258ece71b6d79659f37eae7db34ffab981062abf6931aaf95c7df0db4c05a6878d0c87e77f6eb48342fc3f053b4a1e86c160277ae5e3aadfc7284f4702af4e61b8e7e3debe9ab9f476fb03f0c101b0086206a8cc43c53f87d989a932fdf378cc494e192cff453c3a97cd81e83c0d60feb6e492d529795a1642dfc4459df82319b4cd6008153c1c997476dfceca88b3fa472550a7bcc5bb114e209e7746bf4eefb9377a840b2986802b28b82faf97c7592d625822a4d422a1ad851b689c0b125af796b0cdad0a781cb98f6319d778dd13def4f27e07ff7cc382288f402446c83a7a9e3f8b3f4462fb6bd662e7800246332a590d1fad4010cc69a984629f894245b999c7ebeee5421589b608068275131aa4b50f26feb6f3f4923b8192633e62139e02565598efc1b93a45cc857908b3793777b5b6d6cd33c2bd3db75df4d6c6b5bd2f080bbead80f5e6af96db08baea6c553c4a303ebb66c9acccfe18efd1dcb09451c24a00d9f9efdefda63bd41e06c586bbaa438a718d4f6bd992e45718b94b91e406f4c5c4db9bebfe279dcf2541312c6ce64a13471163b066e0a55354a03f1a76d38e11153f48fc6ddb4fc9c703e8f1078280c2b5f6ae66864540aed5368436f5af6af9b71fffbb0725bc342ca7ed7774c1720731de4b3eccfa946485b472c17a1dc621967c6e52dc90706db8f84f6c51bc89582cc2365e1e2758d37bf27e4dd1c1a9b38906d347826ecf6aa91d8c415c89849176dd87b5c500bea25b7756bb235017fb57b49f6624dcb38406a88b4d95ea1355e3a8dc9f69619c0e09287bb0ffa9caa773f4db024e1318efd73c5bb1fd7d0ccb676153681ed8a4d9afc37853215e6e5e7de5c7251ac37aa787cf0ded5aa6d94880ac21d3ca97034f2d7f1030746bc0c9675b2a3383950444ef6f22277c01018ab0658bba27fc2d03167b722616c9fbc4be71ee7fcd8e1af575dd46f62689ade5cb06a502f96b553565177a87386d76f87a8688d0a99cea4f32fd042e96d7eb0ffffb2d9cfdd8da9122186885dcc772a4971d0bafe6b6c007a142481a984e502acbe5c712d3f1efb00d5cc5031e3aa6739988af8adf01089d489d0512fd5ac24851c06fcc17f78c8b1e32e50ab22c67182a5708ce9cc8075199829948e8c4b1e62190ce43a25de03a9c4238f7b165888db20c9a30490bf78a767acc9a0e9b7fbfb13dd8e59b49ac32a3734896bd9c4dc8f9912e44d6c4cb809ff465105b1001a68f084d38588d1808fe722416b01e668334e1f7f1d7a435bc20de8763c8a34e913a2cbd0dafeaa88633e2b038dcc3b5b895f0c9af267bc13bc2f29f48d76236e2bba9730749a2118c3cf02956d44f869ab8e506bcc2259c875f1c20b5c83808b5af2261db83b510b78fe13b5374fa4d4d1222c6c7e4c96310cae1b956382dd02a9acd31d4c47bb176a7822e2db2ee552d38e22ea95f9851bab31cf90035596ef85202e6eea8bf0a48d0be3c40d31f59bd31c66a62871aabcd278b08a055723a7d639c06c44391afa007cba04f8e0e6c95d05d05b0760cd00a0633194e7de403b0bdf644fc4cc59bd8a351af37f2e592cc7bb5e61ab7ff56187d44b1b6b91f9af699b3f23354e75bf306ac20199c775f48c39d4f3e961f0d0e3c71526fd4508ee7a0ad08d1ead6bae349a1a07798211d30ea1762355366da420d187c849ad4c89e5319ae85391a11370ef6828663f6b1022ffa7cbbd8d95be2a3d19878f8441bd2e7d88b52828ce6e5043f35d13f1fe7094bfc09a80de04b97af06c98a0dffdf8e64aff45b584bec7629cd40cdfeec93af5259c0996a480de149e16d54d8d669dfc38b07f42bc9aaceec68e31dfd4dc04752101ba6bbcaddaf29874e045c418fbd6747dc7a7f19d8525d2033a90e9b40aaf1f2a714229ece961cc2d841c963624f677d97a7c14beaa0b56eb8d8f3d7a76511d856d1b2a9bdf89656310faf05c32d325a9822e6dbec18520629379ce444f5b10a5a16cd6db283534ca2c49928d372ddef486e67a1130b7c028b69128ad349cb5cb5d3ba4a2bb48f92fa246791785077a733c187ea0a4bb34fddef668b01bab102b4fb9dd77b5a66bd9857d88d7034cfa968c1e26e4fe88a492373f6487e3b67066be6e6f03560319e408ac7d018170e70f56c9888c4db025dda2cfdf5d883e683841e41b17099fff961304b20232f5a933fa993dfa9e945ad0f2620559a477b07b869cab73404c73c3cf37a2c2e6460ae7a9579ef7ca029262afcc541c7b767b9f74b63723a9d8591066ad57465118f1d11df50a087816f246edbff753f251245a73cadd698394d3df7a3cd1cfe9ff2a66a8c6ffcb968d2d246009976c9d32d1af8e6cf48d693f5022ae6632b56f0d5bf77361e58ee06a2c713dfc8b381042112518b5b91eb77e88e83450cb58fcff0c6d732378ae08d45887fd09d53ff527d2eeb8fee948afeed533bba48829dea81fcab38c36f7f7f83a2ca357abff6cd73b504658e50e97e72ad14a4335c1efad3368483e42b1c8347aa6e2e2eddd3cec0d486f55b8afddaadb65c1a1a50ef50543a34734e69347abcc8925d9feec3bf8bcd1831d7732e115d07e4948b7706aff0d704ced28657b40e7483c015657f5d79a1b81dc4e34354099c2f75c0d4e75211157f4581eddbc26ef73cfb0108dda2c09cabbc19f90f2a10fd1606b2bc60a3e7a3345f393939839f8ca659f8b15efec92cd2640da077e43797b631a649b434fd3a5298550467679ce379d1990fe890127bbf537f74cb5eec960475e50ea9dc65f035d520155c6928a25fc4d7e0acbd8cb709d10d00ee3f2ea8e1adb91025d3cdb57f564e2a3fc233d98601fb4d5daffcbf5af1ac819e55ea9f3dcecc490d4d5c97c1da8d96775c14b3a9c41625d320f7b153df0c8d778c6e09b473738c06d78b03716d5d7063b518b62f33d05e934b6a045dc1f21c65b814a441e72cde26b4d5c3604b3dba4bd27db56d8b9f716a6781d4eef5690069e3eada0d557d7348de32393df81985fc9b0412bd23d593d3f2dea59242fc39a2c009546b0f2e45d991aa8cfd36046a921e7574cc0b519470b0d3fef66333d9b3fbdfa9189914a463f75a127a5f00d720c9fd8dc5517acf5484c3993ee6281469a59a63fd05b00b3aa9dbe587a456715a48f398478d4bfbd31bf66ef7d5bdeae86480b4ddd4635dfa680994f733b4091b00627d6eb7c789c729b37faded8030ec8322dd0d989e99acf7962800be9623e594537286315a9619f7e5311ecd74bfbc86e8a5c6858b006589b900f5e38c4ff3ec13eeafdf7b284335a58ebd04f98c5c818f1b8f7046f0d806c2dae22716bd8b18d4917b5731b4d9c4c45bc853774fadbe500d93896c3a11fb5883121b5d9e9943d91c18b6fef353954869af90edc20a6c2bc5740f9ce4bab4b840338583901c049401d94c6af3d3ec21d50ff3b1a471618c3904e46588cb68590f5168534a03b50368a590a72a8dc5d602014a3b5a24fa0aa10301fc244b35b059d83c5f5abdbfe40a9b53c78754efd80d3270e4a46782706fc6ad5da2c850b785577d32c0555966f8a70655f7be74d099e51207bbeb5e2cbd57cf4a93f66a0e8e41669c0a5c7ee32f957387249bc737a5fc896c98dadbb60d443fc045dce7ba4a15a7fb417e7c955aba8aa0cf1634c16b28eed43f996689b42cfde96d3551417b72060a8e9550d85410326271a0dbee0ab31e258c0a9ea1c26686b424e8c8ac70afe1fe95c7ebf6a296f986dc3db46fe18f1ff968f2ee2f1a7aeacf8cb1c4f5175895bc2d560e608760d4b7f486bd7b892a99816f45ed12da72f7141826f06f8eb31707981f4d02f5b746966134244d0d9ec943b62f03d4e376179ffa49d011873d3f6126a9dba6a17e499e6adc450cd203125524874df73d8c32fd0f9be710f953a6c6f9a82bfc6b91256ae1ed8ebdf5bbc3d368a0e76a05ab8f385a86bb03ae908e86bb7cc5d74cbf69695868d4e7c9324544d49c613e9b443b4a17530172c090ad2562e3bfd90c33ffb1c3633e88b13cece43ac5177b4b9aeb79ea379723a0ace9df21d444f41d366a8bc208f0dff6c789e8217d7ce666e7df4b57020d7ce156ab961d823664be5508732f7ae17d32eb3f5b8940c4a826a18d9985e6a405a9142f24ae3b0193e5cdd8fd63329c1cfce8fd100266e57be8fc151b9064f83ff787704661006645c2e36992ba586907d120283636c55ba9d8856336b6242200055eb8e29563ededd945de0619516758adb02148fe22680bbef3479c4459a7c39f1b2142e677da1f59d561040b7e901a66eb1ff15e8061897d072166ae3610ec2adb14dab4b84d1dca509ce4ea1dd43abb9fa92f867b6fba22c68086cf83b56359e9ef66c65a81a82304fd19ca63867cc71f43f04bbbeb2d43f62d58dc03776366612bd94f02ea56f757fbf16e1e886a1bd026f376f545aa9d4b1ddff090018b9af3c720e78a051027cb873c11498a4bb6893562e104707b0e0f83914dee34d9ae20d959ffc947773c8a6ba8d5ccd22189a7ed2f40a1056a3ebf9c68dec67fa4e1e6315abb971ff94f8ec1a11de331cc5f603d97d7fadd7d2cf94579a5d571544ae8036bfb9835d4adb87857fb21eece88bf520ce14bfa4a5b9da25b438a2b87c8d524ddf773d6023f74e1ddb22e3d7f1b2f06f79657397699b330b10a95bfda600d159273c04ecb01daeb4c9b2cd06105a9b8fa85bbb1ae8b85175ca30877990436eeae84cf4323d5b2b80fbaeee4629ea3c43e420abce470266e89ab47f7a2551461d920cd9a5d6266b846bc72f14f9e62a12ad2155e0251f89506215d5f21fdc200d560011c5db9d3575f4081c588d56e35523c6f882aefe7e55651f724d3ac251830c9c51839a5c6d1aaf79d3b5e8843f6d2ea58acef04406ee88fded640dcc743f6187a36e67adfd29bd0a7696cfb19686f64be4c7d3ab5bab08a838c7b12987d6ee378ef4a89ffcb432d4f68a1446add4eea51bca488365cea7c06bd3e45fc733e175a8c95c90b54fa2bd241a6e8abaff41737e4fa374c39247aec63ad284c0082afe08584daca548f7535919f31d6a8fb0ded82321098d1f7db37d7affbf16dd4a8405a0068a64a2910e6961f7c7491b0671b56f1652ad5a8a1586a2e80d287bf67d1e5774b8e87029447e3ed13f861808903fd0d7ee68f9b1071916005777e4aa12059cfe980ee83345e86cb172e9f0f5f5474f4b4cc3f00db8ab08e522e7f2995cd5675506d59f34826b72ac9b649897ab7e19b6d259e42b2f70d337c0a35405cc9d4fca9fc5af465a50f90049bbfc44bee69ae3e626cfaee1d65bae46db7164bc164dffe49c35e8e04e830223edf1717721323ab419193c30314e84ecc2629828b67b7bb39397ed3aa8a86f939e25f22365f5ca6760ae96519040e09230f10a041f8b3a862806a18f05cb684b44d11fc258254264cbee838d2efb215b5ca3bf494779f6e6e4e07fc7b8ef532b8d12ddbc6ccfca5b07bf70236f78a926458824666062c2fabd3e384dd38a2aa1bab7f60256dd10e08cbd58b4dd37fd8b8e66c37ce0d67c0cd2e54833f31a53276bfda9a8abdcc73e16d4468fb8c6ad8e21a6e133dc7669d99a039ddd87b026c46bda1fb509ad6251bc84ae02fc4d96801dbaa4081598c484c5ea9ff057b2c6fdde28d10593cde50d47360984ac26a4deaeff46942e25051aa997199d0af9223dd4775ac8447a4c6e65a78da993eb94d7a6703a6aa2d480e80d6721408f799e0165d7b7d3f2ff4763a4fb72f3d8b322bf75ee61a380f8bba8f02dcb0bb35ec96c67d6315bff7b4213c2effdc967e9749b9f476a196de9f50c7fed84ff9a01adf19aba3dd945d7f029cd96010954ea3f574d98a23dccf84eebb005850670bf5d950d4f107eba278f46934ed2749461e1cb389d08564863b77e18d58c37a2b857be25873713f85b769418374b27dc74dcae6b9ac23f73f239ef34304a5f301a039f4b3c9ce8e1aa6b10a30b0b5ee7371c681bd16e7339ccd3cb55a9ac0a787da6bb2f53e11de79f1738c94fbbc9b187a1d5840cc0f11432ba124dc75135aea3792e72eb3654a875c1a97d150025f458376cf3f74d7581b562ee0b3fa644f139c630c32d1e720d51d527c02f6257eb0c5afa5ba4a798abb38339aaa199ca31fdc1c201878258144845c2827cad5fefb41099fc36908a1acca535b26221fffe918050fcb23cafa6939385b571ddae28d2f1372cf11bca28f5b2e587291cc12464b326c5a92419e11cb6b07c3e00f413e9599db9c4315f4035f63bd3800e0f59fec2ad45c5e2587b864eb280e0dc6a28b8a1afa8785844cb238d5c01f269068fd297c07c58b966fb54fe1e518922b176d908eddba143349144f0ec3e70a4952e0d397dfecc9b5a7444a3e950957ae4d24666636c6d2b3bf7816dec1d105744d939c4f5c8880582742437a5593f426af3643e1ee7e355d8ed1f8a6b5d945a642fba4274c92537356fba1a313a6ec962dd73efc665d920677a5b8ad84567b23b6ae089222ceea80b67d84e119eb313f3df38139befceee0987e92bdafb941e1c449ab2649cff44aa7f31d77b0b03d695011203b00c32a44fee91c27aa38e86f4e6a31a367bc941ae2c6cad50b009ecb7144a495d6f941bbcf88fdf93de6badc7b266069579af5a015f83946e4052bf71326095e75332337eeaf2decab57b91f2b020c054cb9900097dddf040854fd9d0975617335f98d97ec52160f82fa41a1c8ade06ff061327049a4bd06eb49d77086513b77e318c2c9cbacebef742433375d0969112a300bec65c0506991d30509330d16ecc2047c5521e4c3d55ab918059515efd8542cfda14dba8118aa618e100f32c74c04fa801a0baed0f68e4d44a9a7251c62eadb982da06bde8999ea09e59e56164c531b98c2bc0a84af28c7afff411144d89a2a81c60d62ebdfa970f10aa4ac410a09647e366ca33ecc743ef140183f71b55cbab3ad72436ca7c24e3d5dc727ff3f31656a71b6ac2b5fac1f24bcfad30ab8f928d886a75bcb81149fec03eddf52b35776530dea15d5d4badd9bc91b7c7ddde74bf8bdc06298126dd32d0d82701635262f6239706f3ba4532eff08fa6a764d9a8639ea90ea29372c0fd146b1a1c62d2c57c126b1f6425ced55427271aeabcb07633e5b1de9cc3e477cadef6d0316bbe0703f7f4470378bc6b3cb5365da90960dddbd30bd89cf2195e38e3cc09cbbac7525476a225d2a72bbf8c350622edf9ce07d211dede83ede3d77b1991d4393fdafce4ec171b7356d0436b3592a592ad320705b968686ece258fa32e98ced5b74e69edf8be634ec421d83e244219c4857d95452f516d5b42ddfc36a8d05a6a09b62b0cdf3ab1c05631436a9f599f013a5d5e0a33355d42dd22ef85f7db5784cdf8602421f0a5b01d91141dd9585ee88e801e8557c6cd1ace230a2edcb3e1955d9c7cf7a622eba70504979aa49a7fd3b8e3c079135aea434cd3e0561d97d9da645382d989fa3b4d5f741ff8b238c7d77fe4430a53b92219854627b13128c3ce0c5899322907e34aa6a356e1a63f7978d3c49accc8614e790e9aa30697e2510663ea8bad4c54f0e61905092ac9ece0597d85fdf68ae9233713f8f46a8afc60aedbd47e2a7de741ae10446295bb0eeab516790c14411ea301aa3006c37f955af23a6300885df4f9fbffdd01361f9af3dcfa76300a6fd04b3af9846796a50eb57b70b368121cf4d9bd627fc285602c3dd8dd168c2dba5c43a17955362e2f103bfdea49274bc7130c60789db3ce9ba9b68a2db23915ca24ab209d3ed01a610ffd635f8886b94a53f32b14866c10e184114a26bd29e61186a2c0a6f1e26a344caa682a2172d141469a0c95c30a64f4d199d5e7abf71a104970b49ca785c8ba6c45a04156bf5bb5be86e7c35c4eb9457db83e7bfcae132ad323084ba8c642b75dceb2541159305c3616d93be387633bb3faecabb2edd6c4c39a33e24ffc47b0884665a84e09037be47bb284b91d00466c71b75af962c5058f34a065c87473a251113d28bd9e479a76d5cbc7aa91df2144172807e0de17550f5be684133c90a5c032bf39ba1622f00d2b7320aa4211ede7b679498b0354ff646fb653b862ca83f1310c5a7ff8a4f1549ec77de7f04664f2fe5a17ab16ba820e901fe0c5c2481813b7d3fe8c48f1f646c1720692e1895945b1ab8db7f2cb36373d04cd506859b17828d8520bf05097209644f6e0ba50b2df6ecb76f776f5688c99c5b0c5ae3ef102c17349a7c0bd9905d822a06b249dbe3afacd08547c659830734fea4f143b52a06544de08ca5da1f968e5783566ad581f613dff3fef5afc783572bc4bcfe254fcb1e5881ebabd03251e34bf5916084d85f0e909fe0bd49baa2a37af20b7e7f693724738cff3902a01f97b653df0d1ee1d1b353ea0fd7efff118f258109ad4b2064f07c558e345703e5248beb313f073521ac0a593985062c21e78862add2403c9a6e18871964307eed974b4b9c1d974464aacb6017bc0ea8a246d65927f6f229d31b9d709810c6ee09e684275413d4c1540b81e3b42df40bb1b2db5f07693b8accf4c9252ff008361165094c292e49d0fa7cd62045922e44477a78b69fef44f1f3778633a598609eb69021aa4c14a226ef051ea610fe0dcf709586de1a6bfa85787c74e15d12a2edbb7868b441ffed424cf5c8edadb28ff032dfa562f3ae30dbc09c181e60d34c860cb42c9d5589cb2373e56fbc5e60f566ecc7fd53d903f8b9153f6c7f196a05b846aeb3b6b0ad8b4d7dfaa8ed0d4a820a07042e161ec1979500f0e406fb5635acb036d76808e88576e1709225997ba8e4580eff670a454c60e39af14dcf13e11b969191eef68763070bf8f6b64d8e2e640fb4c39db2226965cd723036e58b7987688e5cf4286e5acc458bf2004aba20b17593faf91d7f526a592a4274eecdb88f6462b2a20e78d8df60fbd1bfb3b377f273c93f89e07ea2d314477003bb67272709b2359443464ba80bbd169d468f477aac2474e1dd2121f70fac5eca5e13b48c0718c730f5be22c489ca8768a8ff6b3faf79596fe83f19bde7c24830d7c51d9ad35a5add0f20c0a938f505c6bf2bb1795a2c9f84ecf2a309aeb92a73a2bcbce503dec475b346769a1661f445e3f73e09c94dd5f4bd1f9e78fa9a877075293770e20371f5eff601f44da3e27ad8441e8634674355ce026898a8f3d3ee6700ca4abd866b0d19ee4ea273b401d628af980c7cf1ee0eaa936ce356989459aadcbff9c04f3f65dbe7b4caf6e4657b57563d00c400eff82bbf6899eaec8866556e11176022edca0157872296f56d9663ed33fcf554829af4482a793d356b72e3ec20091b811dce3a95199540aa0e1090145e3fc90e6d0b44b39cc34ce6d694fc10bdd3051283be63f7739377f3dea11706e149ba20944c18d6edffb9fd61c560bbd056085e904ca5efac3f8f17a4a2354d0a033d17cdf586fffd970fe277baf140798286c14a7b71036929b874353751e34fd85951a35bd58ae45ace55d65ee01256e2ab4ee3d711ae66ab7ef532dd136a3afaa9e1f35bf30e8d82bd39b6ff2b2e2ab8fdfcc7db759faedc93fab32719dd8811ae51e680c96087c8e6084e7331a16f47efa91813db164edae07671cd533ed0d3b0a125ef43ee3b6db80cf6c3543f75fa88c93c10ec1e377452983b10408356cd3c189e66d76ab4eaee41b2383ff1fde9239935884f93da816cf330da6adfd3a720372641ba9d6debbce936cfe88015381f2fbe72e8834b42e3a9b4cf77a7848437a17f4311292eee2a651696f35485e9472ac2d1529e2d559d6471a4effa5950f94fa11848a4a0a391cf3e2bfdee14e2b205646a85ed5a462e41473348a210d17ae7cddd86769ce99e6ddcbcc94a00776f08514dff39d3370fe1bc50439dfd4800182652525cfcaccb3d5d37e0ab9ff7b17a75210d7c4ec512657f03fcc477d3a56c2f7fbcf4e59fe422b0e780634bc69e3819d1f065c63fd2a4faad64da9dc99292952a7171f49091d9ed5fb53bfcdd7fc3c21540a70257777a43e0c5da4c3240bf21cee690658d6d7ffc9fcee0c7a131123f2e89978e20596d24020c2e256ba5cdc5566f4ab6fc44513f2c85ea31a7792721b0352e36f3e2c388d7844d7c68bf83dc6e539555e28b56ee836daf09c1503f93b6d1834b66dc162b6cabc965bc13703694b46e6b8e83b97732cb5a4d7aec0face41a785c0590b71640b476eb63f668e4073af999e387ba5381cc103851eac909013afa9e5713e117afd3c7afa949ef3cc0f8003cc4b06bf89434440bc559fa7f1afb179865f659bb64ef6e859a9418aff62d024082d48184a2cd812cf755df64843fec31e618c4332544989670881957833d686229afbb44627fdcc0fcd1458cb6a3b45d91eb50fc2c04e247389ab5ec3de0fbcf8cf3e118697bc8187c556836e0f97586543e3e28d81b48ce1056d43b3c1f32301b9e15852e216134168f9f9f3b3563cc05b48afe8bde08e9d93f5d45d3d645d59534beacc8e95ac8204090c8d81289bfb45bd1508bf52049f741712f0eb327b9cdf9ffa39d42ebdd48a14bd3e49c3d32010c82e510ce18b7382b65e9972605c8a88abb1367ac263b907fb1e81a23a4abe2be3f58ba9efa49908e775c5813d28f028790f1cb2214606ab58ae3a34be508b85ecd11e0cba37f1db9c2d87ecfbafecd33d44133c30e667e31582b9f8e3c7382ef9b74695d0e6e3af1f58ef6e2d84df6dd0c24676806ec19882382ff90483979c64e4680ecd377e74c4329bc3851a141e126fcb666061d0f387018f2ad89049d37ca6cc7f1129cb4bec21361b1d5743a58a2c636eb5b8fb78983e17c4b9ae70a76643a2e408fe1e7e358a468181121640f1df4566151e9a233b89338fadd9a7e4967ef72c99eaf35347caab7b42ec07f5f920055ce5beaf51b24feadd798c79650a396d026c3dfd0d9cbb1485b903e1bd82095059081b17cc8aabd27f3d75a2cb5a0bf07a855a7ab0d93eb60e73b9e9b1d962935261fc8db66410ec720eb4257acb8fa0340f29fa5f83b3ff5e1b8642b71f789f6f863cd4d25ff90554447fb3fe95b30f859896a2ada8d7c06e9709ec1442af507a382d511b88a955a7305e1f957f039803ffff10d63912908108c898bef3eb97682573b2e1d2c2cf5849df09cf90d725d903be40601d382755d4603e711ce28b23799457f3bce4d8e05cd156ab24504a179e7ce50f213624b765efe35155f2eec44c3a7be296538b5b64c1eb92a0e355316c0d632581510f49cfd580b6ba6a700db62c2c9be1239996b4da2929ae42bfdc2fd1abd4c8fc201b0d1624bacb51f5f99c33ed1078935dec925a581593307a74b43a2772ff6092206b5885bf35c73a89365dbf05140c3c294a96929fc1169dd97e0f9fc9c3bd872c3ce25e78b06c076da5fd5958f46d0d418fce260db6fc0ebdf07ff69c963dd59d5ebea39ba0f40abf3a0293e48e92d905bc9c791a545a218fa6d9f9303e9646fc28f8180fd36cdc6a4673b53e834f8fcc68902c92138bcc7f14373737d9ff7d3134588ac4e1208538b7dedc713b728838113061cfd6cd895b05a29c29afef5eaa759492cc816022ffbcc7022e5eb705d63e72248d047bf543741b3bc2fcb7c831ddf4f05a6bff01233dd378ab2747e8b499cb8c85a7bad6ec3ce8fdf9f39a0007c011f9471edea3259694c83e447beeb9250468d102a093279b07fc080dd6eb29e413ddb6aeda1a9ae79b7c50ad61cc83627ad8c8ec34a87ded3ca286b5caa4352b1353dd5c94b15b025a0ad9acc5bbdba385e7a8a1f2840a5f336f93b744de2cd12459559d8a5ee37b7838762c26c192fae516fd6d328df5ffb645cac6b4259e00fe14b81c8d1f5e48851980a6aa3ab4d8b3255d8aead29d1345f065b0b77755fff20a53f64b7b02de3fe4a8bd6a0f524396a7c1c9fa95b53f8f9a03d97fdfd00eb8f4c53dd502f9899282fabd1284e9412e45bf250046f594699c9165f00ec55111684355e8b813be70e72e6263b0ac2000fca2a92f6d2f58cea77f708a5b6ffb97c2ff22d1f327426cb5cdba245e0290ebafdecbfbc013c8459ca3b56ca0d44c8cfc93379cb4e222ff72f2705c3ba2f82bd4d90a2c3e3236b9d5173828801e1301b6b8c19a941ac690eda3b6c2f0de6d5db27d37d5d9ab7432b3329ee83d556273bd9851aa65b441a84239373b88e085bea3f6033a68678a0426cfad8f2b915d91e3acfa79860a9556166290f4aadcbd7ecbf4da95aafdf4400449bfab837cfb2c27263f32104f0f83911323f141e9629062f73f8e697607df37ab6af684d675086871b83b5e592724b7e3be33a7e14040c217aca550dea1f580437ea46657e17948b3ec6f26dc2ba2dd6085664fbf5ebf5e1893ec959001499673847a383779b9332135f59c804387f941045f27b7487a100e36b19393c5bdd6ca310fbbe2321e75bad03d30d2adc66fd09c1d2298a44eb334d04ca4e65bc9ccc41131874baf70a335ada8f2838e34ddfade613951d0db210852ab6634c83b244610dbb6de731e3e5f58f748780db317bf33074bbb9c555107e73c4b96e951ab9db7280c66d6a8628d4266da75371e96fcdbc8e583f01ad5fd1bafa26eba0b055d1b9825ae7a6b62eadde05fc76144cca7fcc4e913d676a7d8fde7c130a34b67c0f5d2197b0bf38a44dbb8c6095dc8b41250f131ce92cc2c168ad7b784f418bd741875d8938c34d54166a63f5cdec48df0d84413970bccdaf74af3669f5d075ffe4cf2f3b8c4ece9a43fbbb334b9dd026657c43f0181fe91b99c4fca4dc5a53b48ca7e0aa3e2f25998efb3aa11bb8e0316ca235a5bbff9c06305190b144059104b97dd56339514717019a45ec287335435fe72e112d62657c8c78b1ca323ef9d8c967f3c1c7711e00e99cd2493f89ae2c1cfd4ce21422e2123b8399889434a737ccf3ffe7b9fed3522d5da69f94d88deced8df84c9c8593041f047d7e797bc461817a367bac25fb4fc969b1d44c74354ec60bade05398eccf9902304889754c1e4bec80266388a44fdddfcc986c99940a26a4c6ca1f6ab901c5428ae7c098103c2709399dcf27ade098668539d885e572f24157ec0c51e4de3bbe295c44d378fa014126832438949d4f36831b48c777d6b72b1ae31eaf651c65272043aa3fb6984fc1c02d47d8417bb3fafbf57fc97c9678095c651d8bf5222120e2f16a78fd63ef5d127df4cf83aa8f1d397595b55924e9efcb4e8388155126cb7807b9f73d32f9372c9c15bfbf9e1d87dc4b7662730b34b5e9df74be979da2b11d8ab09dac0cd1c27d623e3ff7f82f79cc401736bf58dd3a1270fc8f473ad264aa282a5aaaf10c81184d8a9c7ec4f09a9efc919476832966cd77e21034388b897b1670cfc2613340e89eecbc83917354612a5caad28fc1aca26ef70c22ce612ebc57c175c52e4a15639e9b8e2b9d354186c0565dfd678158398b1474cdcf6319c78b76e296d43d446c3e0abc889f75f71bf3d0935a8e23e1ac3802f4928652a549c919f99bea9778ed85a72eacac5600919222ac8608e4a1930e9d209a85bdccf6e2913c6cb6a61415bbc0e9a92e1d246fc9e4f5b955028621751dfea13ff04cef4839db6366fdf4807026fcc22102fc0a5f3a516066833f2a126d8c81305fd2c3703a9b55acc155532528652af983785bd64a42b05894c0a4a34d75e3c83a1dedf335956bbb226366d8c60511119ba92c3af2db1b9defdc00ca230de82353855615466da3ea49f92b2995eb5ff26a2c92af49040dae9e8a66d19a11e930be9fea284ca0f6dfc1ca9157d96e797dfbe7add4e43fcc16495362a78f66d3ffa8036bcfb98cdf123819b0c2efa85026138e973aae36eb4737646c891d7205ee960c173516aa7a6344d7df96aa5df53875ecc6487b48d0d81c177d8ee4a38fc7bf0e4633be5727a99c9146f4e67f9f43e9ae24d4ff85406b36762dc2b29a9f8b30d9ad8088d8cccac5fba2ce1d8326d9a6ffdfd2d1a800934b7b88ad7e3442df25bfbcd7b814ebd52c1bff16fc01e1724b022e7ff62021051cbf317f2cde342a63c0a6b7e052b0976f524552727f6e05f9435e61a68e90b9d7deeaa1cdc44fb8c2246621f42485e29d365477cbef41a3d4779204e4df7a24fe1c1295d1dd02d06ee8edc38b8c40c057b4a5126f6cef748c0ded2a2027e34581d4864bc3ebf00a366035051f40275792e98d42ef35d8159f331a9cc96ab31f59c3fd39bce01862c418be06a0b7cfd0ddc7a57faffc4637872ce2ea2c47a3fc4f09db3cbcb1821599a4e359146b564a34ef6e7d5ce17858015d4134283a2b03c50d3813a1ad46a56573ccf2c14b952bab2fe5c4134cb7d46bc08812df2f5907c258cb1e7fe63dfd746dfd64ab126d3743fcd5dc0b66593fb9627fddf59d06a3d5ab84e2c80cc01b8257d7c33636b91a2c79eafa2934824d8b79bce87adcbf64925c67c8d83c569ee5ff339e65dabb0f694e1e62b19198b2ba2c8665d95da1fd6e41511825bb34b69d0ec85c977ca6b4a695ba036cba6f4bc9087126a58b28e64d9f1efbc0348cbb1fc4538530a58a474ecf38d2b9f5bdd58d336c71f8d57fdbb0626fce8a2819d225aa5380f94d1ff9c9ab11dae3581d6d214ba52c1674fc180851f1184af151fdd4a76c51c89940ed3793abec643ebaa14331d18ba8f49363878d3f74e658ee11c611ca844b308c329208bbbcb89552e57ac7e90fd1043a4e68c9e13760e34ab6bed708549a26fc205f6482d4319d5ad06613e098cd6ad15378056a9e9c67d4296a96389ee2a07ebc09ba9ccd7c2ee2561d9ea215a848a4871438bf3d8bb3352db743cbe55123f3da6d5dc84996fba228e731388e9beea0d40a3a6e385765b7d9a37a2a7a5ea135897dc5457196351a47878e84b6ae23e3c2de3962a3dede27df857dcd08328f4dd877ce012d78e8352e03af73c2a909e8bc203a4417a97a4c7c8b2364ce55f197f21fcb25485ab4b241aa754eaf6ccdd8a0c9f8463d0c556d4a90198542a0d8ec30dde6b645c1a22fc3f9ccc7536448b73bfb4b65d9dd5c1b02a9b581c6c0414c00160df0d2733086f98a391843de55a2916a82fb8c33c3df8300cc64f2359f6961cd1a32645c84b3f7197bce6deee686e7ac2ee2a33b6a622cf51c8d8bd5be4add316eb519376204f49db25b1328ff03c3a71fed80e2d4ff6019e2d5bdebc99f8ebbe148ce78e18365eb136bf876543190a458730958f62505b882c7d0b8da8640b74ad4ad70825342bcb935984db903616c7ca74bbb78731d1175124cdd3da0693c1ccccd74e4718418a7b3df3253b8f525ef07f6c10ab4b5fcd6c8bfa3413203bed869532e8e1b26d8a04ac03c01bf60eba03c38a581a7320efaafbfbae2ef1e76c1db096fc6bf9f31d3960438ad151dcbd5584ed73993f3ad88ce69192b33856ede7706b537a1e9e51bcae2dfccb678a9ed85fd528c2dd78ba52898612a1e01f03f94816a19846be2be395905bbd7cc6e3c2c311ac13acbe424e3582976b29065ae62cd7ff6ffd339a4bb707e663f49df9161a3a0d1712b70b70cb8a5b6a052529b7710f24b83dfbe2322aff890c42ca5dd1e5de189c7283463a5ca129296ca08d1c3db980c1003d86d79980c12ed05ac69d18f1de7e32e7f5f91dfd962bc1fb7002b7b3879f8ed13d63ed97e8b7b4c715e94fd42f8ad160d069949f2904bea7f0ddc9d6fa930948c466033c5a3b09412fb96ef6ffe23695d287986a5ca6b565d0fda1b0cac12acedf95be3d939f506b864d562f8fbb893ba4c2edf6729a0b264df80d4d7311fa2bf579c0ba4d1c6c50506cdead5571e213645a6aecc8fa9d3a07df6e2c20f78527d06d4679e6a81ddf25dc60147cf5b3d37e29e1e306787443f8892813f86e203d2185bad9b84fe74b9b1f43495bc146a3d860ed3d57cca85e2ef73b58bbdc8099f315ccd05035f26805336669a8a2d2d9138a2b6f91b499812695b804977018a837428d21e71c6859ea048048d5761f16d2530b35fb3b2ac366a15bef11b73acd0d636271db474ea2f79e6dc1e1edf9538936c445f1df3ecb692acdefde0477d8c3fd5aac11ca5dab15ea8bac06059895e02a57d832077c9d1d8f65230bd65d5ab36a0e6ef25de16bdeb25a5db500a18d410ca15145b681a50c13456d1455493070f7c593fde9726a7951ea905f03cf8e1d2ffbb0ee73e6cddcd60bfee7c3de083eca4ce1f1934cad1497c9228953bd449f2ab9ecd8d1d782902cc898eabcba0eba4cad51475f2c237d657f4c390af6813c0b881e71decaa6d0a373b55e791863bae9ce02b688dcc74afab3d0be68fce38319c76e7fd66c00ec95e40e79b0ccbdde27772d8c644744f4b210aaadc39b0fa8c0d1830e0ce8b21d8041df38765cc8629140a34230a05a1bd87eb64549f04f1cfca0e339c7e330d56e69c8f25941c895e97245b16432a410b15b8c2b2f4e7e6cac334040a5b51eebbffc2c7107816e94d32cdf5d652659f15d1af8902c20e4c5aaa42e46cc4c217aacfb41b88b03ecffecb96a6e271e2efa922dee30ff64980ed98f160ec9ab82d73b7d0bf409fce2197fd8a8c1867086f076e59b31e7cacdf2b1c65cb26025d679e77371a96a4eda2aa9b1ec814066063b16da0b4965d17686b40f47f18ba1397ec61f618e78653f886e0460b83e1d607d4a070c028f84180b62fb932eeb1c35cc6a6a5073f71487badae584648347025565eb36f17694d4082f3db2397a6cc9d79ce5d8f6b38ddd652dee61991b5d632524264adb71e726c7889caedebc5acb891edd7ecd78b68b105d48142f5decf7af2a95baefa0006d00ffd0c4f59efe690744d8a2697b413ab7071c894172d2ab87701ee307bd679c4abf57eb942fed686da46fae1d04aa72e73322f9fbb15d880315ed25a3e2cb0419ab7e95025c6c8e9f2c1becdcf47c046ac98dacdb7172f744333215ad38091394ccea62b6cc07977c2a95f410c049c5bb2a6af047ad54e3d5ecf7991cbc32d0f0eee8adae65c75873c34d7e9e39596249072c40429d4ec399810ca8ea25d418c03114fd027faae72d473ef1d68af6e9187352d507080a82d74e640a12194a18ad507b09a8d77db398f79800f9fcb25f657aeaa2bd9b9a37588758944468d8b050caaf945d3992019d4d425408b8f9e5809ee4941ec3b295bea3fa07e3d313b0b0cbb2cea392b6bbe1fc6d92218dd285b060fec46a08dbbceaef184b52616735659137b0941bdc272795d8a7c9316dd6365808f2e91fe906a12ef71123485b129116213725292fc9dc7e9298a606f4499a6c669218f382d5fc8e9851d04bc0966ad5637199852ea0b02afb899a1172942287869d242c51bafba540f47d9c27f989cf015d960259e2ed8a5dbdefb45d872fc33c9944d998984b47067636785c6dcc7773c1dbc76b7b6132fc9aa147b3f518893b469d5dbda9f25d32b9ed96dd5e8747df93dd0ded3c6a4ad6580a315471895f3e3a741cfedc01becc6ca34723db5f7fdfa5424a2351e4d2f45fd6a87497491d1a8debc553f1a6403b99e8cf580a7a204455c3e53eaa1fedfe075286aa6c2d4db5abaaa2fb7c7d52f9ece0ed175b70f8fc6022b0d936aefec8533ef3aa08159ff5aa9289066e72f3a130c1224ae64bb81decde2f7d259d7258b74d7ac534620c7d05e44f35dcf2c1942acad58f5965e32c15b90b5941766aac5a0f913f25fcefe1f5047d29a78656ef0affd82b5ca6412ac20dbc3a15656b21e821ffe3308c85d883e5ab4af7a8f00eecd072fc9b5c1ef4a22a4f4ca45640641a251c28edfd9c511ebe7a168998fab845d5c6bad92dbd29f5bf14164c36aad2d0b697db67a2c062cbed8bba3aabc28f606b7374e35e930809e52f9d8fe5315f8f286605d993b82012c990ddd8f05a3a5c867d57ab0d324b02e7d6508199f56dac578f74055a8eb8dfcfda4432aa7bd7d2c5276a1938ab5e52ba6490852945dfc6c367061e6fb28b83c282d0c8d5a3f432a0eaba79d619dfa532f7260938c94ec1415e8e0da4eb84752db15ccaa1313ef8732116ecf01991e3434432ab271e4f2258a8669b912ce5a530b1aaa3781bfe6bf980772f907413e7bf00a10d7e23891619790313b592485818aa991fd5ba28e86adefc522748716c11a986ea5cca163e80b6f3fd260fd324832268d952ea25f0251efbc42171c400c41f55bf7e0716f532115f7c73a81c29296ddcfda680dbe7b271a558340f0f3218a1305b70b316b9b585e6ef08d574b93875c9c48c16510f7304de8ba3b19ed65883cd87cbdca484fd98624f2443ff61d720953a258b2d7e943cec664833496f785d13a97d3db1e28ad611ca5ec0b7ca2436f8dba6bb3b2f8aaab780e57d48a97a634c2112ec6c91bfd5e0a5f0313549d03c588ca82859285e3c744364d0355ff53c985a41ecf11160f1b9de00b6d23fb5e67346368602dca2ceee7f56d92f81d1057c76cdc0c45fa474d199b230e3f0c5a127e78c9ab72471ab4b167ba7ceae3804053de34659fae45dbd5d8535c66423bc6ce2e6c4e9fd966a9a8bb1300e514a3b7984cff8b92137bfc50f89930c7b664c68cb998f9cccc7a4fba70fdb185aae8857ccfbaf8e2c04b15538b9004d0221a7bb0ba596149f2d2254a0913130d750347ccc240ab6dca790ed0555a01b9dc7b09634579359de4da74fc5ff2e38fc5a779a6b4299d3e9f88b256569a41d58377e583ba45bc554199f6927df037c6aa72b3544d366555914e628bf712f4c3b20613ffed6d3ceff8982642448c59d6fc12474d6b6c566f2fa3fe39235221ea90dc5abbca599a363cac25b6f81a80e8d64b3a106c74d8597a945f21bfcadc5699baab968a548e8acde090ed0d50949e6441bc433bb3ed20a61fff4625ac3d43f1c77ef4bf4e805baca18f43f2ee162fc0674f59c0303b05e4b0519681ccacd50c44c6597a464263d3bd7d2aa204391e2ffebca703f0682a93c049469e11ce43eb67850662a2216727e94a86c10f60c06a1235ec2dbd242dba91d293a0752a89fc44c5113df5a5a8329e27ccf11efb86ea2bf1e946de2fc269c0affd58ff9035feca8153bfcd502bcece334ae368c3c7f2023703e7d5a65c92597fa1fbeda95df98876e3e8c2683176b45c35cac69f3a27420bd520dcff2b9bc56e121c0b3f0450ff196f0ad833a8a4df3b6b71395f683829b7c40cddac73e85a1536bef4b7c82948a020696fe77918f66a12e9271eacb9f8a4045c4e219e15e67066462c0ad755c76570215c1ae0008c3e6abe7644e03500430e31033a23956defed9491484abeaf770a1638362f2285c76e93efc134ba8d250d41ee7b41c56e38974a421282fada228bed8f4a20991825e330420dc0a882bd73ca972e6596a2a62e0f0f34ca995e51aecb8d73b8ecb01b68c9390098def876eaa8639fec770239be3743bcf1b1b2643d53204fa6fd50aa37a9faf5fe8eb692d12c096eaeed2134dccf10e5023f68fa2d76a280a18e8d07f1057c79e4b7a36bc53505fa3f20603729bff9bc6ce8fbf609b60dd29e422c65c35c10f28eb5da04fc4c64ac8fb8402c29525232c8074dd678116538dcb2c8772acb9e8835bf314500751144b6579b5456996b67fda0f965b25ce6d60f89809e9cf8d8766f087bc31200541068b207b2dd3bdbd5d58a030f58749cf4a52ce5927499342c5eac7ea03f846e120ee2098793ed9700f5b958145ab6706521cc0a3c58952e6a47abddc507b6620b4a283b03f5075a34c0c9cfa8c38cb05d023b070162a0acfe4a44715ebdec39fa7f62d84df8782c6aff549382e4c4d2b2d9a7f98abf2c3dd1e66252ef21fee75e92ba32086a66af6d6b6b014b8d8506b1dd385bf40d1e52686c11aa0f857d714ac04fc843dfeac1cd787f86d735f298385b7837a78bee254e56c04564246e8f16e4343efd4679d174019e635be23e07e974158b744104e79a8c5c4e84eb82715cc76c81ad6e7dc790d10a75a1e853ff7b60d3bcd75cbd3ef66998d17a8b28768e9b670f8479d9c46068c89a058d0a8a9e815776b998b3d21fc4334efec86deca56728961822f59a6ac11f4901b6491b3c66e80780046f4b58b83fab7fa9b0569d8c5625f3216a74a18ddd80640729c0357f9d3e849ac1f16faf57973e9fa1aa5b744104620446af4b1649212b19b373725541d711b069677b06ed7335c1194b0a18baa444b31b1f20a5d65e24baee6cf68584fb25e2ae877a41b5c31bad941a110a96e7008e811eaf62ad48b7bb9007008a65e1550a1175bcaeffcec6e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器常用命令</title>
      <link href="/2025/03/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2025/03/04/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="一程序测试的常用命令">1. 一、程序测试的常用命令</h1><p>其中<code>top</code>内存监控输出的文件里面，每行对应的数字分别与如下对应。</p><h1 id="二运行的shell脚本">2. 二、运行的Shell脚本</h1><ol type="1"><li><p>首先在Linux系统中新建一个文件。</p></li><li><p>之后在<code>mlcs.sh</code>文件中输入要运行的命令：</p><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="bu">kill</span> <span class="at">-9</span> 进程id  <span class="co"># 提前杀死进程，只限于咱们自己用户下的进程</span></span></code></pre></div><p><code>&gt;</code> 将内容输出到文件里面，如果原文件存在，则直接覆盖。</p><p><code>&gt;&gt;</code> 将内容输出到文件里，如果原文件存在则直接追加到原文件中。</p></li></ol><h2 id="内存监控命令">2.1. 内存监控命令</h2><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">top</span> <span class="at">-b</span> <span class="at">-c</span> <span class="at">-d</span> 2 <span class="kw">|</span> <span class="fu">grep</span> <span class="st">&quot;你想监控程序的那个名字，能唯一识别就行&quot;</span> <span class="op">&gt;</span> <span class="st">&quot;输出到的文件名字&quot;</span></span></code></pre></div><p>例如，我要监控名字里面包括<code>mlcs.exe</code>的这个进程，将信息输出到同级目录下的<code>memory.txt</code>这个文件里面：</p><div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">top</span> <span class="at">-b</span> <span class="at">-c</span> <span class="at">-d</span> 2 <span class="kw">|</span> <span class="fu">grep</span> <span class="st">&quot;mlcs.exe&quot;</span> <span class="op">&gt;</span> <span class="st">&quot;memory.txt&quot;</span></span></code></pre></div><p>其中<code>-d</code>参数代表几秒监控一下内存，这里设置每2秒监控一次。</p><p>删除所有包名称包括mlsc.exe的进程</p><div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pkill</span> <span class="at">-f</span> me_test.sh</span></code></pre></div><p>断开终端也可运行某程序的命令：</p><div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">nohup</span> 要执行的命令 <span class="op">&gt;</span> output.log <span class="dv">2</span><span class="op">&gt;&amp;</span><span class="dv">1</span> <span class="kw">&amp;</span></span></code></pre></div><p>比如我要执行程序的命令是<code>mlcs.exe</code>：</p><div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">nohup</span> ./mlcs.exe <span class="op">&gt;</span> output.log <span class="dv">2</span><span class="op">&gt;&amp;</span><span class="dv">1</span> <span class="kw">&amp;</span></span></code></pre></div><p>其中<code>output.log</code>就是日志输出，随便什么名字都行，默认存储到当前路径下。</p><div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">touch</span> mlcs.sh  <span class="co"># 其中mlcs是文件名，随便起</span></span></code></pre></div><p>比如我要循环执行某一个程序：</p><div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="kw">((</span><span class="va">i</span> <span class="op">=</span> <span class="dv">1</span><span class="kw">;</span> <span class="va">i</span> <span class="op">&lt;=</span> <span class="dv">12</span><span class="kw">;</span> <span class="va">i</span><span class="op">++</span><span class="kw">))</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="cf">do</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="kw">((</span><span class="va">j</span> <span class="op">=</span> <span class="dv">1</span><span class="kw">;</span> <span class="va">j</span> <span class="op">&lt;=</span> <span class="dv">20</span><span class="kw">;</span> <span class="va">j</span><span class="op">++</span><span class="kw">))</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">do</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 要循环执行的命令</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 其中可以通过$&#123;i&#125;或者$&#123;j&#125;获得i和j的变量值，进行命令拼接</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 比如其中$&#123;i&#125;就是获得变量，将最后运行的结果输出到result.txt中，</span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 其中结果指的是在命令行输出的结果</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>        <span class="ex">./w_mlcs.exe</span> <span class="va">$&#123;i&#125;</span> <span class="op">&gt;&gt;</span> result.txt</span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">done</span></span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="cf">done</span></span></code></pre></div><p>一定要在Linux系统中手动输入，不要从在Windows系统下输入，然后将文件传到Linux中，他们两个系统的编码方式不同，否则会运行失败。</p><div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">chmod</span> 777 mlcs.sh</span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ex">./mlcs.sh</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mit6.S191</title>
      <link href="/2025/03/02/deeplearn/mit6-S191/"/>
      <url>/2025/03/02/deeplearn/mit6-S191/</url>
      
        <content type="html"><![CDATA[<h1 id="概述">1. 概述</h1><h2 id="感知器">1.1. 感知器</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302173357938.png" alt="image-20250302173357938"><figcaption aria-hidden="true">image-20250302173357938</figcaption></figure><h2 id="激活函数">1.2. 激活函数</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302173418796.png" alt="image-20250302173418796"><figcaption aria-hidden="true">image-20250302173418796</figcaption></figure><h2 id="损失函数">1.3. 损失函数</h2><h3 id="分类">1.3.1. 分类</h3><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302180326931.png" alt="image-20250302180326931"><figcaption aria-hidden="true">image-20250302180326931</figcaption></figure><h3 id="定量">1.3.2. 定量</h3><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302180340787.png" alt="image-20250302180340787"><figcaption aria-hidden="true">image-20250302180340787</figcaption></figure><h2 id="梯度下降">1.4. 梯度下降</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302181222102.png" alt="image-20250302181222102"><figcaption aria-hidden="true">image-20250302181222102</figcaption></figure><h2 id="反向传播">1.5. 反向传播</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302201710606.png" alt="image-20250302201710606"><figcaption aria-hidden="true">image-20250302201710606</figcaption></figure><ol type="1"><li><strong>反向传播（Backpropagation）</strong>：<ul><li>反向传播是通过计算损失函数关于每个权重的梯度，来更新网络的权重。</li><li>从输出层开始，逐步向后（即从神经网络的最后一层到第一层）计算每个神经元对总损失的贡献。这被称为“反向传播”，因为它是沿着网络反向传播误差信号。</li></ul></li></ol><h3 id="反向传播的步骤">1.5.1. 反向传播的步骤</h3><ol type="1"><li><strong>计算输出层的误差</strong>：<ul><li>比较预测值和真实值，计算输出层的误差。</li></ul></li><li><strong>计算梯度</strong>：<ul><li>使用链式法则（Chain Rule）计算每一层的梯度，这样就可以知道每个权重对于损失的影响。</li></ul></li><li><strong>更新权重</strong>：<ul><li>知道了梯度后，就可以使用一定的学习率（learning rate）来调整权重，使得损失下降。具体来说，如果权重导致了更高的损失，就往反方向调整它。</li></ul></li></ol><h2 id="学习率">1.6. 学习率</h2><p>学习率自动调整算法</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302202502602.png" alt="image-20250302202502602"><figcaption aria-hidden="true">image-20250302202502602</figcaption></figure><h2 id="分批梯度下降">1.7. 分批梯度下降</h2><p>？</p><h2 id="正则化和早停机制">1.8. 正则化和早停机制</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302203604219.png" alt="image-20250302203604219"><figcaption aria-hidden="true">image-20250302203604219</figcaption></figure><p>随机丢失部分神经元</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302203650285.png" alt="image-20250302203650285"><figcaption aria-hidden="true">image-20250302203650285</figcaption></figure><h1 id="rnn">2. RNN</h1><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302210306088.png" alt="image-20250302210306088"><figcaption aria-hidden="true">image-20250302210306088</figcaption></figure><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302210728169.png" alt="image-20250302210728169"><figcaption aria-hidden="true">image-20250302210728169</figcaption></figure><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302210739335.png" alt="image-20250302210739335"><figcaption aria-hidden="true">image-20250302210739335</figcaption></figure><h2 id="顺序建模的设计标准">2.1. 顺序建模的设计标准</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250302211357941.png" alt="image-20250302211357941"><figcaption aria-hidden="true">image-20250302211357941</figcaption></figure><p>Word prediction example <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=1910s">31:50</a> - Backpropagation through time <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2020s">33:40</a> - Gradient issues <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2235s">37:15</a> - Long short term memory (LSTM) <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2400s">40:00</a> - RNN applications <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2640s">44:00</a>- Attention fundamentals <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2806s">46:46</a> - Intuition of attention <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=2953s">49:13</a> - Attention and search relationship <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=3082s">51:22</a> - Learning attention with neural networks <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=3465s">57:45</a> - Scaling attention and applications <a href="https://www.youtube.com/watch?v=dqoEU9Ac3ek&amp;t=3608s">1:00:08</a> - Summary</p><h2 id="随着时间反向传播-梯度消失学习能力下降">2.2. 随着时间反向传播-梯度消失，学习能力下降</h2><h2 id="lstm">2.3. lstm</h2><p>通过忘记一部分</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250303154530054.png" alt="image-20250303154530054"><figcaption aria-hidden="true">image-20250303154530054</figcaption></figure><h1 id="卷积神经网络">3. 卷积神经网络</h1><p>获取不同框中的物体，两个神经网络共同使用。</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304202546754.png" alt="image-20250304202546754"><figcaption aria-hidden="true">image-20250304202546754</figcaption></figure><h1 id="强化学习">4. 强化学习</h1><h2 id="自动编码器">4.1. 自动编码器</h2><p>将数据编码，降维</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304220654243.png" alt="image-20250304220654243"><figcaption aria-hidden="true">image-20250304220654243</figcaption></figure><p>解码器</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304220912390.png" alt="image-20250304220912390"><figcaption aria-hidden="true">image-20250304220912390</figcaption></figure><p>增加概率扭曲</p><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304222137386.png" alt="image-20250304222137386"><figcaption aria-hidden="true">image-20250304222137386</figcaption></figure><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304224849011.png" alt="image-20250304224849011"><figcaption aria-hidden="true">image-20250304224849011</figcaption></figure><h2 id="生成式对抗网络">4.2. 生成式对抗网络</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250304225133095.png" alt="image-20250304225133095"><figcaption aria-hidden="true">image-20250304225133095</figcaption></figure><h2 id="强化学习-1">4.3. 强化学习</h2><figure><img src="/2025/03/02/deeplearn/mit6-S191/image-20250322173651016.png" alt="强化学习与无监督学习的区别"><figcaption aria-hidden="true">强化学习与无监督学习的区别</figcaption></figure><h1 id="致谢">5. 致谢</h1><ol type="1"><li><a href="https://introtodeeplearning.com/2021/index.html">MIT Deep Learning 6.S191</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cate深度学习 </tag>
            
            <tag> 麻省理工网课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy_pandas</title>
      <link href="/2025/02/23/deeplearn/numpy-pandas/"/>
      <url>/2025/02/23/deeplearn/numpy-pandas/</url>
      
        <content type="html"><![CDATA[<h1 id="numpy-与-pandas-用法总结">1. NumPy 与 Pandas 用法总结</h1><h2 id="numpy-用法">1.1. NumPy 用法</h2><h3 id="安装-numpy">1.1.1. 安装 NumPy</h3><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pip</span> install numpy</span></code></pre></div><h3 id="导入-numpy">1.1.2. 导入 NumPy</h3><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span></code></pre></div><h3 id="创建数组">1.1.3. 创建数组</h3><ul><li>从列表或元组创建数组</li></ul><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>arr <span class="op">=</span> np.array([<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>])</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>matrix <span class="op">=</span> np.array([[<span class="dv">1</span>, <span class="dv">2</span>], [<span class="dv">3</span>, <span class="dv">4</span>]])</span></code></pre></div><ul><li>使用内置函数创建数组</li></ul><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>zeros <span class="op">=</span> np.zeros((<span class="dv">2</span>, <span class="dv">3</span>))       <span class="co"># 全零数组</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>ones <span class="op">=</span> np.ones((<span class="dv">3</span>, <span class="dv">4</span>))         <span class="co"># 全一数组</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>arange <span class="op">=</span> np.arange(<span class="dv">0</span>, <span class="dv">10</span>, <span class="dv">2</span>)   <span class="co"># 创建一个范围数组</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>linspace <span class="op">=</span> np.linspace(<span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">5</span>)  <span class="co"># 等间距数组</span></span></code></pre></div><h3 id="数组属性">1.1.4. 数组属性</h3><div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>shape <span class="op">=</span> arr.shape               <span class="co"># 数组形状</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>dtype <span class="op">=</span> arr.dtype               <span class="co"># 数据类型</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>size <span class="op">=</span> arr.size                 <span class="co"># 数组元素总数</span></span></code></pre></div><h3 id="数组切片与索引">1.1.5. 数组切片与索引</h3><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>slice_arr <span class="op">=</span> arr[<span class="dv">1</span>:<span class="dv">3</span>]                  <span class="co"># 切片</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>element <span class="op">=</span> arr[<span class="dv">1</span>]                       <span class="co"># 单个元素</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>row_slice <span class="op">=</span> matrix[<span class="dv">0</span>, :]               <span class="co"># 第一行</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>col_slice <span class="op">=</span> matrix[:, <span class="dv">1</span>]               <span class="co"># 第二列</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>sub_matrix <span class="op">=</span> matrix[<span class="dv">0</span>:<span class="dv">2</span>, <span class="dv">0</span>:<span class="dv">2</span>]          <span class="co"># 子矩阵</span></span></code></pre></div><h3 id="数组操作">1.1.6. 数组操作</h3><ul><li>统计操作</li></ul><div class="sourceCode" id="cb7"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>sum_arr <span class="op">=</span> np.<span class="bu">sum</span>(arr)                  <span class="co"># 求和</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>mean_arr <span class="op">=</span> np.mean(arr)                <span class="co"># 均值</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>max_arr <span class="op">=</span> np.<span class="bu">max</span>(arr)                  <span class="co"># 最大值</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>min_arr <span class="op">=</span> np.<span class="bu">min</span>(arr)                  <span class="co"># 最小值</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>std_arr <span class="op">=</span> np.std(arr)                  <span class="co"># 标准差</span></span></code></pre></div><ul><li>数学操作</li></ul><div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>add_arr <span class="op">=</span> arr <span class="op">+</span> <span class="dv">10</span>                     <span class="co"># 加法</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>mul_arr <span class="op">=</span> arr <span class="op">*</span> <span class="dv">2</span>                      <span class="co"># 乘法</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>exp_arr <span class="op">=</span> np.exp(arr)                  <span class="co"># 指数</span></span></code></pre></div><ul><li>矩阵运算</li></ul><div class="sourceCode" id="cb9"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>dot_product <span class="op">=</span> np.dot(matrix, matrix)   <span class="co"># 矩阵乘法</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>transpose <span class="op">=</span> matrix.T                    <span class="co"># 转置</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>inverse <span class="op">=</span> np.linalg.inv(matrix)         <span class="co"># 矩阵求逆（需方阵）</span></span></code></pre></div><h3 id="广播">1.1.7. 广播</h3><p>NumPy 支持广播，使得不同形状的数组可以进行运算。</p><div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> arr <span class="op">+</span> np.array([<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>])     <span class="co"># 广播机制</span></span></code></pre></div><h2 id="pandas-用法">1.2. Pandas 用法</h2><h3 id="安装-pandas">1.2.1. 安装 Pandas</h3><div class="sourceCode" id="cb11"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ex">pip</span> install pandas</span></code></pre></div><h3 id="导入-pandas">1.2.2. 导入 Pandas</h3><div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span></code></pre></div><h3 id="创建-dataframe-和-series">1.2.3. 创建 DataFrame 和 Series</h3><ul><li>从字典创建 DataFrame</li></ul><div class="sourceCode" id="cb13"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> &#123;<span class="st">&#39;A&#39;</span>: [<span class="dv">1</span>, <span class="dv">2</span>], <span class="st">&#39;B&#39;</span>: [<span class="dv">3</span>, <span class="dv">4</span>]&#125;</span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame(data)</span></code></pre></div><ul><li>从列表创建 Series</li></ul><div class="sourceCode" id="cb14"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>s <span class="op">=</span> pd.Series([<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>])</span></code></pre></div><h3 id="常用属性">1.2.4. 常用属性</h3><div class="sourceCode" id="cb15"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>columns <span class="op">=</span> df.columns              <span class="co"># 列名</span></span><span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>index <span class="op">=</span> df.index                  <span class="co"># 索引</span></span><span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>shape <span class="op">=</span> df.shape                  <span class="co"># 形状</span></span><span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>dtypes <span class="op">=</span> df.dtypes                <span class="co"># 数据类型</span></span></code></pre></div><h3 id="访问数据">1.2.5. 访问数据</h3><ul><li>行选择</li></ul><div class="sourceCode" id="cb16"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>row <span class="op">=</span> df.iloc[<span class="dv">0</span>]                 <span class="co"># 按位置选择第一行</span></span><span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>row_label <span class="op">=</span> df.loc[<span class="dv">0</span>]            <span class="co"># 按标签选择第一行</span></span></code></pre></div><ul><li>列选择</li></ul><div class="sourceCode" id="cb17"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>column_A <span class="op">=</span> df[<span class="st">&#39;A&#39;</span>]                <span class="co"># 选择列 A</span></span><span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>column_B <span class="op">=</span> df[[<span class="st">&#39;B&#39;</span>]]              <span class="co"># 选择列 B</span></span></code></pre></div><ul><li>切片选择</li></ul><div class="sourceCode" id="cb18"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>subset <span class="op">=</span> df.iloc[<span class="dv">0</span>:<span class="dv">2</span>, <span class="dv">0</span>:<span class="dv">2</span>]       <span class="co"># 选择子集</span></span></code></pre></div><h3 id="数据操作">1.2.6. 数据操作</h3><ul><li>增加/删除列</li></ul><div class="sourceCode" id="cb19"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>df[<span class="st">&#39;C&#39;</span>] <span class="op">=</span> [<span class="dv">5</span>, <span class="dv">6</span>]                   <span class="co"># 添加新列 C</span></span><span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>df.drop(<span class="st">&#39;C&#39;</span>, axis<span class="op">=</span><span class="dv">1</span>, inplace<span class="op">=</span><span class="va">True</span>) <span class="co"># 删除列 C</span></span></code></pre></div><ul><li>数据过滤</li></ul><div class="sourceCode" id="cb20"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>filtered_df <span class="op">=</span> df[df[<span class="st">&#39;A&#39;</span>] <span class="op">&gt;</span> <span class="dv">1</span>]      <span class="co"># 过滤条件</span></span></code></pre></div><h3 id="统计分析">1.2.7. 统计分析</h3><div class="sourceCode" id="cb21"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>mean_A <span class="op">=</span> df[<span class="st">&#39;A&#39;</span>].mean()             <span class="co"># 计算均值</span></span><span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>sum_A <span class="op">=</span> df[<span class="st">&#39;A&#39;</span>].<span class="bu">sum</span>()               <span class="co"># 计算求和</span></span><span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>describe <span class="op">=</span> df.describe()             <span class="co"># 描述性统计</span></span></code></pre></div><h3 id="数据处理">1.2.8. 数据处理</h3><ul><li>排序</li></ul><div class="sourceCode" id="cb22"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a>sorted_df <span class="op">=</span> df.sort_values(by<span class="op">=</span><span class="st">&#39;A&#39;</span>)  <span class="co"># 根据列 A 排序</span></span></code></pre></div><ul><li>缺失值处理</li></ul><div class="sourceCode" id="cb23"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a>df.fillna(<span class="dv">0</span>, inplace<span class="op">=</span><span class="va">True</span>)          <span class="co"># 填充缺失值</span></span><span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>df.dropna(inplace<span class="op">=</span><span class="va">True</span>)             <span class="co"># 删除包含缺失值的行</span></span></code></pre></div><h3 id="数据导入与导出">1.2.9. 数据导入与导出</h3><div class="sourceCode" id="cb24"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a>df.to_csv(<span class="st">&#39;file.csv&#39;</span>, index<span class="op">=</span><span class="va">False</span>)  <span class="co"># 导出为 CSV 文件</span></span><span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.read_csv(<span class="st">&#39;file.csv&#39;</span>)         <span class="co"># 从 CSV 文件导入</span></span></code></pre></div><h3 id="读热码转换">1.2.10. 读热码转换</h3><div class="sourceCode" id="cb25"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a></span><span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>pd.get_dummies(data, columns<span class="op">=</span><span class="va">None</span>, drop_first<span class="op">=</span><span class="va">False</span>, dummy_na<span class="op">=</span><span class="va">False</span>, ...)</span></code></pre></div><p>主要参数：</p><ul><li>data: 要编码的数据，可以是 DataFrame 或 Series。</li><li>columns: 指定要进行编码的列名。如果不提供，所有类型的对象列都会被处理。</li><li>drop_first: 布尔值，默认为 False。如果为 True，则删除第一个类别的列，以避免虚拟变量陷阱（dummy variable trap），即多重共线性问题。</li><li>dummy_na: 布尔值，默认为 False。如果为 True，那么将生成一个额外的列，用于指示缺失值（NaN）的存在。这一列会在原始数据中出现 NaN（缺失值）的地方标记为 1，其余为 0。</li></ul><h2 id="使用-numpy-数组作为-dataframe-的数据">1.3. 使用 NumPy 数组作为 DataFrame 的数据</h2><p>您还可以使用 NumPy 数组作为 DataFrame 的数据并指定索引和列名：</p><div class="sourceCode" id="cb26"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a>python复制代码<span class="co"># 创建 NumPy 数组</span></span><span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> np.array([[<span class="dv">1</span>, <span class="dv">2</span>], [<span class="dv">3</span>, <span class="dv">4</span>]])</span><span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 将 NumPy 数组转换为 DataFrame，并指定索引和列名</span></span><span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>df <span class="op">=</span> pd.DataFrame(data, index<span class="op">=</span>[<span class="st">&#39;row1&#39;</span>, <span class="st">&#39;row2&#39;</span>], columns<span class="op">=</span>[<span class="st">&#39;A&#39;</span>, <span class="st">&#39;B&#39;</span>])</span><span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(df)</span></code></pre></div><h2 id="tensorflow">1.4. tensorflow</h2><ol type="1"><li>转换为tensors，不能改变</li></ol><div class="sourceCode" id="cb27"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a>tf.constant([[<span class="dv">2</span>, <span class="dv">1</span>, <span class="dv">4</span>, <span class="dv">3</span>], [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>], [<span class="dv">4</span>, <span class="dv">3</span>, <span class="dv">2</span>, <span class="dv">1</span>]])</span></code></pre></div><ol start="2" type="1"><li>转换为variable</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown_基础语法</title>
      <link href="/2025/02/19/%E6%9D%82%E9%A1%B9/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/02/19/%E6%9D%82%E9%A1%B9/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法">1. markdown语法</h1><h2 id="插入引用">1.1. 插入引用</h2><h3 id="单行注释">1.1.1. 单行注释</h3><ul><li><p>示例</p><figure><img src="/2025/02/19/%E6%9D%82%E9%A1%B9/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20250219113809368.png" alt="image-20250219113809368"><figcaption aria-hidden="true">image-20250219113809368</figcaption></figure></li></ul><blockquote><p>单行引用</p></blockquote><h3 id="多行引用">1.1.2. 多行引用</h3><blockquote><p>多行引用 引用文字</p></blockquote><h3 id="引用省略">1.1.3. 引用省略</h3><blockquote><p>引用 引用</p></blockquote><h3 id="引用中使用其他语法">1.1.4. 引用中使用其他语法</h3><blockquote><ol type="1"><li>表项</li><li>第二列表</li></ol></blockquote><h2 id="代码引用">1.2. 代码引用</h2><h3 id="段间代码">1.2.1. 段间代码</h3><p>这是一段段内代码</p><h3 id="段中代码">1.2.2. 段中代码</h3><p>这是段中<code>return 0</code>代码</p><h2 id="插入链接">1.3. 插入链接</h2><p>Markdown 支持两种形式的链接语法： 内联式和引用式两种形式。</p><h3 id="内联式">1.3.1. 内联式</h3><p>中括号内为显示文本，后面紧接一对圆括号. 圆括号里面放所需的 URL 链接,</p><ul><li><strong>示例：</strong></li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">[</span><span class="fl">01.</span>Markdown语法说明<span class="op">](</span>https<span class="op">:</span><span class="co">//github.com/appinncom/Markdown-Syntax-CN/blob/master/syntax.md)</span></span></code></pre></div><ul><li><strong>显示效果</strong></li></ul><p><a href="https://github.com/appinncom/Markdown-Syntax-CN/blob/master/syntax.md">markdown语法说明</a></p><h3 id="引用式">1.3.2. 引用式</h3><ul><li><p>第一行： 引用式链接使用连续两个中括号，第一个中括号放显示文本，第二个中括号里面要填入用以辨识链接的标记。 标记可以有字母、数字、空白和标点符号</p></li><li><p>第二行：定义链接</p><ul><li>需要单独占一行。格式是： （1）中括号中包含标记文本 可以用三个以上的空白符来添加缩进可以用三个以上的空白符来添加缩进; （2）接着是冒号; （3）接着是链接的 URL; （4）接着是可选的标题, 可以用单引号, 双引号, 或者圆括号包围。</li></ul></li><li><p>链接的定义可以放在文件中的任何一个地方，比较常见的做法就是直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样</p></li><li><p><strong>示例</strong></p><pre class="shell"><code>我们可以在 [02.Markdown中文文档][link1]这个网站查看MD语法样式。[link1]:https://markdown-zh.readthedocs.io/en/latest/</code></pre></li><li><p><strong>展示效果</strong></p><p>我们可以再<a href="https://markdown-zh.readthedocs.io/en/latest/">02.markdown中文文档</a>这个网站查看MD语法样式</p><h2 id="致谢">1.4. 致谢</h2></li></ul><p><a href="https://pamarus.github.io/2020/05/03/markdown-1-ji-chu-yu-fa-xue-xi-ji-kuai-su-ru-men/">Markdown（1）：基础语法学习及快速入门 | Pamarus</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vmware+mobax</title>
      <link href="/2024/11/29/%E6%9C%8D%E5%8A%A1%E5%99%A8/vmware-mobax/"/>
      <url>/2024/11/29/%E6%9C%8D%E5%8A%A1%E5%99%A8/vmware-mobax/</url>
      
        <content type="html"><![CDATA[<h1 id="vmware-网络连接失败">1. VMware 网络连接失败</h1><p>转自</p><p><a href="https://blog.csdn.net/m0_37259197/article/details/78221016">VMware 虚拟机无法连接网络解决办法_vmware 没网络-CSDN博客</a></p><h1 id="mobaxterm-重新连接">2. Mobaxterm 重新连接</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组-链表</title>
      <link href="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>感谢<a href="https://programmercarl.com/">代码随想录</a></strong></p><h1 id="数组">1. 数组</h1><h2 id="滑动窗口">1.1. 滑动窗口</h2><p>不断调整起始位置和终止位置，处理一块区间内的数据。</p><p>在本题中实现滑动窗口，主要确定如下三点：</p><ul><li><strong>窗口内是什么？</strong></li><li><strong>如何移动窗口的起始位置？</strong></li><li><strong>如何移动窗口的结束位置？</strong></li></ul><p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p><p>窗口的起始位置如何移动：<strong>如果当前窗口的值大于等于s了，窗口就要向前移动了（也就是该缩小了）。</strong>确定好移动的情况，并处理需要优先移动窗口还是先处理窗口中的数据。</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210312160441942.png" alt="滑动窗口" style="zoom:67%;"></p><p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</p><h2 id="螺旋数组">1.2. 螺旋数组</h2><p><strong>确定边界处理的不变量，确保每个子问题的结构都是相同的</strong></p><p>然后按照不变量写出每次循环的次数</p><p><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/20220922102236.png" alt="循环数组" style="zoom:50%;"></p><h2 id="删除链表">1.3. 删除链表</h2><p><a href="https://programmercarl.com/0019.删除链表的倒数第N个节点.html#算法公开课">删除倒数第n值</a></p><p>删除列表时，最好增加dummy_head节点，删掉头节点更方便</p><figure><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.png" alt="增加dummy-head"><figcaption aria-hidden="true">增加dummy-head</figcaption></figure><h2 id="链表相交">1.4. 链表相交</h2><p><a href="https://programmercarl.com/面试题02.07.链表相交.html#思路">返回相交链表节点</a></p><figure><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/20211219221723.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><ol type="1"><li>求A，B的长度<span class="math inline"><em>l</em><sub><em>A</em></sub>, <em>l</em><sub><em>B</em></sub></span></li><li>为方便起见，将A始终未较长链表，否则将A，B交换</li><li>根据<span class="math inline"><em>l</em><sub><em>A</em></sub>, <em>l</em><sub><em>B</em></sub></span> 的差值，将长端链表对齐</li><li>依次比较</li></ol><h2 id="环形链表">1.5. 环形链表</h2><figure><img src="/2024/09/24/c/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8/20220925103433.png" alt="20220925103433"><figcaption aria-hidden="true">20220925103433</figcaption></figure><p><span class="math display">$$slow = x+y \\fast = x+y+n(y+z) \\fast = 2*slow$$</span> 计算得到 <span class="math display"><em>x</em> = (<em>n</em> − 1)(<em>y</em> + <em>z</em>) + <em>z</em></span> 代表，<strong>从头节点走向环形入口 = 从相遇点出发走n个节点</strong></p><p>// 先向前走再进行验证，否则第一个就相等了</p><h2 id="前缀和">1.6. 前缀和</h2><p>将之间计算的结果累加保存在数据中，之后使用时使用结算完成的数组</p><p><strong>需要更具题目要求，选择计算什么样的前缀数组</strong></p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a> <span class="cf">while</span> <span class="op">(~</span>scanf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%d%d</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">&amp;</span>a<span class="op">,</span> <span class="op">&amp;</span>b<span class="op">))</span><span class="co">//按位取反，如果结果是eof=-1,取反之后结果为0</span></span></code></pre></div><h2 id="哈希表">1.7. 哈希表</h2><h3 id="数组作为哈希表">1.7.1. 数组作为哈希表</h3><h3 id="stl中的哈希表">1.7.2. stl中的哈希表</h3><p>此时就要使用另一种结构体了，set ，关于set，C++ 给提供了如下三种可用的数据结构：</p><ul><li>std::set</li><li>std::multiset</li><li>std::unordered_set</li></ul><p>std::set和std::multiset底层实现都是红黑树，std::unordered_set的底层实现是哈希表， 使用unordered_set 读写效率是最高的，并不需要对数据进行排序，而且还不要让数据重复，所以选择unordered_set。</p><h2 id="回溯算法">1.8. 回溯算法</h2><p>算法的模板</p><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> backtracking<span class="op">(</span>参数<span class="op">)&#123;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span>终止条件）<span class="op">&#123;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        存放结果<span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span><span class="op">(</span>选择<span class="op">:</span>本层集合中的元素<span class="op">)&#123;</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        处理节点<span class="op">;</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        backtracking<span class="op">(</span>路径， 选择列表<span class="op">);</span> <span class="co">//递归</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        回溯，撤销处理结果<span class="op">;</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><blockquote><p>vector<int> a</int></p><p>a.push_back(int b) 压入数据， a.pop_back(), 弹出数据</p><p>还可以采用insert， + ，压入数据，使用erase(begin()+ i ,end())弹出数据</p></blockquote><p>使用切割时候，需要注意下一次开始为本次切割后的下一次位置，此处回溯时候不需要还原，其余元素均需要还原。还原时候注意还原的位置。</p><p><a href="https://programmercarl.com/0131.分割回文串.html#算法公开课">回溯问题</a></p><h3 id="分割字符串方法">1.8.1. 分割字符串方法</h3><ol type="1"><li>函数传递，参数<code>s + start + end</code></li><li>使用string 切割，<code>string s = s.substr(start, end)</code></li></ol><h3 id="两阶vector初始化方法">1.8.2. 两阶vector初始化方法</h3><p><code>is_palind_rome.resize(s.size(), vector&lt;bool&gt;(s.size(), false));</code></p><h1 id="感谢">2. 感谢</h1><p><a href="https://programmercarl.com/">代码随想录</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++进程管理（-）-thread</title>
      <link href="/2024/09/21/c/c-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
      <url>/2024/09/21/c/c-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="通行证看着不太对，再试试噢🤔" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ec59c98d6f352b9719888ad14dfc5baa4b2d4adc93655b2078b4f9f086fe480a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">你的通行证呢，点击此处输入试试噢🫣</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
